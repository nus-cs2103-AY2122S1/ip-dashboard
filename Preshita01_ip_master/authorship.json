[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    //To pack JavaFX libraries into a generated JAR file","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Preshita01":29,"-":46}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * Class for tasks that need to be done before a specific date/time","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    protected String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    protected String timeToDisplay;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * To create a task with a deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * @param description The name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * @param by The deadline for the task (in the format dd/mm/yyyy hh:mm - in 24 hours format)","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        int date \u003d Integer.parseInt(by.substring(0, 2));","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"        int month \u003d Integer.parseInt(by.substring(3, 5));","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        int year \u003d Integer.parseInt(by.substring(6, 10));","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        int hour \u003d Integer.parseInt(by.substring(11, 13));","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        int min \u003d Integer.parseInt(by.substring(14, 16));","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        LocalDateTime taskDate \u003d LocalDateTime.of(year, month, date, hour, min);","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        this.timeToDisplay \u003d taskDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"        deadline \u003d taskDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     * Returns the deadline of a given deadline task","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"     * @return the deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"        return this.deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     * Returns the deadline task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     * @return the deadline task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + timeToDisplay + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * Returns the deadline task as a string that is to be saved in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * @return the deadline task as a string that is to be saved in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":57}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    private void flip() {","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"        db.flip();","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"        return db;","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" * Class which operates Jarvis the chat-bot","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"public class Duke {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * Retrieves all the tasks stored by Jarvis in the hard disk upon running the main method.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * @param filePath The file in which the tasks are stored","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"            storage.retrieveFileContents();","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"            System.err.println(e);","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"        while (!Parser.parseCommand(input).equals(\"bye\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"                if (Parser.parseCommand(input).equals(\"list\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"                    if (TaskList.getCounter() \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"                        return \"\\tThere are currently no tasks on your list :)\";","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"                    } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"                        return Parser.parseList();","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"                    }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"done\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseDone(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"delete\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseDelete(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"todo\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseTodo(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"deadline\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseDeadline(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"event\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseEvent(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"today\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseToday();","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"                } else if (Parser.parseCommand(input).equals(\"find\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"                    return Parser.parseFind(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"                } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t \" +","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"                            \"know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"                //System.err.println(e);","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"                return \"\" + e;","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"        return \"Bye! Hope to see you soon :)\";","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":69}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Class that throws exceptions specific to Jarvis","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"    protected String message;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     * Prints the received error message to user","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"     * @param message The error message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"     * Returns the error message","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"     * @return the error message","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        return message;","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":27}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * Class to create tasks that start at a specific time and ends at a specific time","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    protected String time;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    protected String timeToDisplay;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    protected LocalDateTime eventStart;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"    protected LocalDateTime eventEnd;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * To create event tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * @param description the name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     * @param time The times at which the event starts and ends","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    public Event(String description, String time) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"        int date \u003d Integer.parseInt(time.substring(0, 2));","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        int month \u003d Integer.parseInt(time.substring(3, 5));","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        int year \u003d Integer.parseInt(time.substring(6, 10));","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        int startHour \u003d Integer.parseInt(time.substring(11, 13));","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"        int startMin \u003d Integer.parseInt(time.substring(14, 16));","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        int endHour \u003d Integer.parseInt(time.substring(17, 19));","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        int endMin \u003d Integer.parseInt(time.substring(20, 22));","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"        LocalDateTime start \u003d LocalDateTime.of(year, month, date, startHour, startMin);","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"        LocalDateTime end \u003d LocalDateTime.of(year, month, date, endHour, endMin);","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"        this.timeToDisplay \u003d start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\")) +","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"                \" to \" + end.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"        eventStart \u003d start;","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"        eventEnd \u003d end;","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"     * Returns the time at which the event starts as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"     * @return the time at which the event starts as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"    public LocalDateTime getEventStart() {","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        return this.eventStart;","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"     * Returns the time at which the event ends as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"     * @return the time at which the event ends as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"    public LocalDateTime getEventEnd() {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"        return this.eventEnd;","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + timeToDisplay + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"     * @return the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + time + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":73}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"public class Launcher {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":11}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    private Duke duke \u003d new Duke(\"data/jarvis.txt\");","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"            stage.show();","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":30}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    private Label firstGreeting;","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"     * Opening up the chat box with a greeting.","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"                DialogBox.getDukeDialog(firstGreeting.getText(), dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":64}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * Deals with making sense of the user commands","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"     * Identifies and returns the command word from the user\u0027s input so that the corresponding methods","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     * can be called","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"     * @param command user\u0027s input","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     * @return the extracted command word from the user\u0027s input","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    public static String parseCommand(String command) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        String keyWord \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"list\";","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"done\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"done\";","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"delete\";","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"todo\";","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"deadline\";","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"event\";","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"today\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"today\";","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"find\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"find\";","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"bye\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"bye\";","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        return keyWord;","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"     * Identifies the task that is completed and passes it to markASDoneAndUpdate() method","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"done\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task that has the index keyed in by the user","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"    public static String parseDone(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"        int taskNum \u003d Integer.parseInt(instruction.substring(5)) - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"        if (taskNum \u003e\u003d TaskList.getCounter()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(\"Hmm, I don\u0027t have task \" + (taskNum + 1) +","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"                    \" in my list. Please key in \u0027list\u0027 if you\u0027d like to \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"                    \"view your list of tasks again!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"            TaskList.getTaskList().get(taskNum).markAsDoneAndUpdate();","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"Good job! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\t\" + TaskList.getTaskList().get(taskNum).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"     * Identifies the task that is to be deleted and passes it to deleteTaskAndUpdate() method","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"delete\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task that has the index keyed in by the user","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"    public static String parseDelete(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"        int taskNum \u003d Integer.parseInt(instruction.substring(7)) - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"        if (taskNum \u003e\u003d TaskList.getCounter()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(\"Hmm, I don\u0027t have task \" + (taskNum + 1) +","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"                    \" in my list. Please key in \u0027list\u0027 if you\u0027d like to \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"                    \"view your list of tasks again!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"Noted. I\u0027ve removed this task from your main list:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\t\" + TaskList.getTaskList().get(taskNum).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"            TaskList.deleteTaskAndUpdate(TaskList.getTaskList().get(taskNum));","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"Now you have \" + TaskList.getCounter() +","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"                    \" task(s) in the list.\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"     * Identifies the description of the todo task that is to be added and passes it to","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"     * addTaskAndUpdate() method","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"todo\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task description keyed in","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"    public static String parseTodo(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"        if (instruction.length() \u003c 5) {","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo \" +","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"                    \"cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"            String taskDescription \u003d instruction.substring(4);","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"            Todo newTodo \u003d new Todo(taskDescription);","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"            TaskList.addTaskAndUpdate(newTodo);","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"Got it! I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\t\" + newTodo.toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"Now you have \" + TaskList.getCounter() +","lastModifiedDate":"2021-08-31"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"                    \" task(s) in the list.\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"Preshita01"},"content":"     * Identifies the description of the deadline task that is to be added and passes it to","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"Preshita01"},"content":"     * addTaskAndUpdate() method","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"deadline\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task description/no deadline/wrongly formatted deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"Preshita01"},"content":"     * keyed in","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"Preshita01"},"content":"    public static String parseDeadline(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":120,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":121,"author":{"gitId":"Preshita01"},"content":"        if (instruction.length() \u003c 10) {","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline \" +","lastModifiedDate":"2021-08-31"},{"lineNumber":123,"author":{"gitId":"Preshita01"},"content":"                    \"cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"Preshita01"},"content":"            String taskDescription \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"Preshita01"},"content":"            int currIndex \u003d 8;","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"Preshita01"},"content":"            while (currIndex \u003c instruction.length() \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"Preshita01"},"content":"                    !instruction.substring(currIndex).startsWith(\" /\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"Preshita01"},"content":"                taskDescription +\u003d instruction.substring(currIndex, currIndex + 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"Preshita01"},"content":"                currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"Preshita01"},"content":"            if (currIndex \u003d\u003d instruction.length() ||","lastModifiedDate":"2021-08-23"},{"lineNumber":133,"author":{"gitId":"Preshita01"},"content":"                    currIndex + 5 \u003e\u003d instruction.length()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":134,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(\"I think you forgot to key in your deadline! Please key it\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":135,"author":{"gitId":"Preshita01"},"content":"                        \" in as dd/mm/yyyy hh:mm (in 24 hours format)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.charAt(currIndex + 7) !\u003d \u0027/\u0027 \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":137,"author":{"gitId":"Preshita01"},"content":"                    instruction.charAt(currIndex + 10) !\u003d \u0027/\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":138,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(\"Please format the date as dd/mm/yyy\");","lastModifiedDate":"2021-08-23"},{"lineNumber":139,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.substring(currIndex).length() \u003c 20){","lastModifiedDate":"2021-08-23"},{"lineNumber":140,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(\"Please include the time in the 24 hour \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"Preshita01"},"content":"                        \"format (e.g. 15:00)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"Preshita01"},"content":"                String by \u003d instruction.substring(currIndex + 5);","lastModifiedDate":"2021-08-23"},{"lineNumber":144,"author":{"gitId":"Preshita01"},"content":"                Task newDeadline \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"Preshita01"},"content":"                TaskList.addTaskAndUpdate(newDeadline);","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"Got it! I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":147,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"\\t\" + newDeadline.toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":148,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"Now you have \" + TaskList.getCounter() +","lastModifiedDate":"2021-08-31"},{"lineNumber":149,"author":{"gitId":"Preshita01"},"content":"                        \" task(s) in the list.\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":150,"author":{"gitId":"Preshita01"},"content":"                return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"Preshita01"},"content":"     * Identifies the description of the event task that is to be added and passes it to","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"Preshita01"},"content":"     * addTaskAndUpdate() method","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"event\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task description/no deadline/wrongly formatted deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"Preshita01"},"content":"     * keyed in","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":163,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"Preshita01"},"content":"    public static String parseEvent(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":165,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":166,"author":{"gitId":"Preshita01"},"content":"        if (instruction.length() \u003c 7) {","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(\"\\tOOPS!!! The description of a event \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"Preshita01"},"content":"                    \"cannot be empty.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":169,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":170,"author":{"gitId":"Preshita01"},"content":"            String taskDescription \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"Preshita01"},"content":"            int currIndex \u003d 5;","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"Preshita01"},"content":"            while (currIndex \u003c instruction.length() \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":173,"author":{"gitId":"Preshita01"},"content":"                    !instruction.substring(currIndex).startsWith(\" /\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"Preshita01"},"content":"                taskDescription +\u003d instruction.substring(currIndex, currIndex + 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"Preshita01"},"content":"                currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":177,"author":{"gitId":"Preshita01"},"content":"            if (currIndex \u003d\u003d instruction.length() ||","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"Preshita01"},"content":"                    currIndex + 5 \u003e\u003d instruction.length()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":179,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(\"I think you forgot to key in your event timing!\");","lastModifiedDate":"2021-08-31"},{"lineNumber":180,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.charAt(currIndex + 7) !\u003d \u0027/\u0027 \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":181,"author":{"gitId":"Preshita01"},"content":"                    instruction.charAt(currIndex + 10) !\u003d \u0027/\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":182,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(\"Please format the date as dd/mm/yyy\");","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.substring(currIndex).length() \u003c 25){","lastModifiedDate":"2021-08-31"},{"lineNumber":184,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(\"Please include the start and end times in the 24 hour \" +","lastModifiedDate":"2021-08-31"},{"lineNumber":185,"author":{"gitId":"Preshita01"},"content":"                        \"format (e.g. 15:00-16:00)\");","lastModifiedDate":"2021-08-31"},{"lineNumber":186,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":187,"author":{"gitId":"Preshita01"},"content":"                String by \u003d instruction.substring(currIndex + 5);","lastModifiedDate":"2021-08-23"},{"lineNumber":188,"author":{"gitId":"Preshita01"},"content":"                Task newEvent \u003d new Event(taskDescription, by);","lastModifiedDate":"2021-08-23"},{"lineNumber":189,"author":{"gitId":"Preshita01"},"content":"                TaskList.addTaskAndUpdate(newEvent);","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"Got it! I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":191,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"\\t\" + newEvent.toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":192,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"Now you have \" + TaskList.getCounter() +","lastModifiedDate":"2021-08-31"},{"lineNumber":193,"author":{"gitId":"Preshita01"},"content":"                        \" task(s) in the list.\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":194,"author":{"gitId":"Preshita01"},"content":"                return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":195,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":197,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":198,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":199,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":200,"author":{"gitId":"Preshita01"},"content":"     * Prints out the list of tasks saved by Jarvis","lastModifiedDate":"2021-08-24"},{"lineNumber":201,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":202,"author":{"gitId":"Preshita01"},"content":"    public static String parseList() {","lastModifiedDate":"2021-08-31"},{"lineNumber":203,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":205,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":206,"author":{"gitId":"Preshita01"},"content":"            result +\u003d num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":207,"author":{"gitId":"Preshita01"},"content":"            num++;","lastModifiedDate":"2021-08-23"},{"lineNumber":208,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":209,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":210,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":212,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":213,"author":{"gitId":"Preshita01"},"content":"     * Prints out the list of tasks set for/due today and all todo tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":214,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":215,"author":{"gitId":"Preshita01"},"content":"    public static String parseToday() {","lastModifiedDate":"2021-08-31"},{"lineNumber":216,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":217,"author":{"gitId":"Preshita01"},"content":"        result +\u003d \"Tasks scheduled for today are: \\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":218,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":219,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":220,"author":{"gitId":"Preshita01"},"content":"            if (TaskList.getTaskList().get(i) instanceof Todo) {","lastModifiedDate":"2021-08-23"},{"lineNumber":221,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":222,"author":{"gitId":"Preshita01"},"content":"                num++;","lastModifiedDate":"2021-08-23"},{"lineNumber":223,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":224,"author":{"gitId":"Preshita01"},"content":"                int currYear \u003d LocalDateTime.now().getYear();","lastModifiedDate":"2021-08-23"},{"lineNumber":225,"author":{"gitId":"Preshita01"},"content":"                int currMonth \u003d LocalDateTime.now().getMonthValue();","lastModifiedDate":"2021-08-23"},{"lineNumber":226,"author":{"gitId":"Preshita01"},"content":"                int currDate \u003d LocalDateTime.now().getDayOfMonth();","lastModifiedDate":"2021-08-23"},{"lineNumber":227,"author":{"gitId":"Preshita01"},"content":"                LocalDateTime start \u003d LocalDateTime.of(currYear, currMonth, currDate, 0, 0);","lastModifiedDate":"2021-08-23"},{"lineNumber":228,"author":{"gitId":"Preshita01"},"content":"                LocalDateTime end \u003d LocalDateTime.of(currYear, currMonth, currDate, 23, 59);","lastModifiedDate":"2021-08-23"},{"lineNumber":229,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":230,"author":{"gitId":"Preshita01"},"content":"                if (TaskList.getTaskList().get(i) instanceof Deadline \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":231,"author":{"gitId":"Preshita01"},"content":"                        (((Deadline) TaskList.getTaskList().get(i)).getDeadline()).isAfter(start) \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":232,"author":{"gitId":"Preshita01"},"content":"                        (((Deadline) TaskList.getTaskList().get(i)).getDeadline()).isBefore(end)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":233,"author":{"gitId":"Preshita01"},"content":"                    result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":234,"author":{"gitId":"Preshita01"},"content":"                    num++;","lastModifiedDate":"2021-08-23"},{"lineNumber":235,"author":{"gitId":"Preshita01"},"content":"                } else if (TaskList.getTaskList().get(i) instanceof Event \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":236,"author":{"gitId":"Preshita01"},"content":"                        (((Event) TaskList.getTaskList().get(i)).getEventStart()).isAfter(start) \u0026\u0026","lastModifiedDate":"2021-08-31"},{"lineNumber":237,"author":{"gitId":"Preshita01"},"content":"                        (((Event) TaskList.getTaskList().get(i)).getEventStart()).isBefore(end) \u0026\u0026","lastModifiedDate":"2021-08-31"},{"lineNumber":238,"author":{"gitId":"Preshita01"},"content":"                        (((Event) TaskList.getTaskList().get(i)).getEventEnd()).isAfter(start) \u0026\u0026","lastModifiedDate":"2021-08-31"},{"lineNumber":239,"author":{"gitId":"Preshita01"},"content":"                        (((Event) TaskList.getTaskList().get(i)).getEventEnd()).isBefore(end)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":240,"author":{"gitId":"Preshita01"},"content":"                    result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":241,"author":{"gitId":"Preshita01"},"content":"                    num++;","lastModifiedDate":"2021-08-23"},{"lineNumber":242,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":243,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":244,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":245,"author":{"gitId":"Preshita01"},"content":"        if (num \u003d\u003d 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":246,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\tLooks like there is nothing due today!\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":247,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":248,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":249,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":250,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":251,"author":{"gitId":"Preshita01"},"content":"    public static String parseFind(String search) {","lastModifiedDate":"2021-08-31"},{"lineNumber":252,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":253,"author":{"gitId":"Preshita01"},"content":"        result +\u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":254,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":255,"author":{"gitId":"Preshita01"},"content":"        search \u003d search.substring(5);","lastModifiedDate":"2021-08-23"},{"lineNumber":256,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":257,"author":{"gitId":"Preshita01"},"content":"            if (TaskList.getTaskList().get(i).getDescription().contains(search)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":258,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":259,"author":{"gitId":"Preshita01"},"content":"                num++;","lastModifiedDate":"2021-08-23"},{"lineNumber":260,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":261,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":262,"author":{"gitId":"Preshita01"},"content":"        if (num \u003d\u003d 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":263,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\tNo matching results found!\\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":264,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":265,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-08-31"},{"lineNumber":266,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":267,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":267}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" * Deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    protected String filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * Creates the \u0027data\u0027 directory and \u0027jarvis.txt\u0027 file in user\u0027s hard disk to store user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * list of tasks (if the directory and file don\u0027t already exit)","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to location in which the file is to be created","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"            File dir \u003d new File(\"data\");","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"            dir.mkdirs();","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"            File tmp \u003d new File(dir, \"jarvis.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"            tmp.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"            System.err.println(\"An error occurred.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * Retrieves the list of tasks from the user\u0027s hard disk and displays it to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     * @throws FileNotFoundException if the file (\u0027jarvis.txt\u0027) containing the list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"     * cannot be found","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    public void retrieveFileContents() throws FileNotFoundException {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"        File f \u003d new File(this.filePath); // create a File for the given file path","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"            String currLine \u003d s.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"            currLine \u003d currLine.substring(2);","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"            if (currLine.startsWith(\"[T]\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"                String description \u003d \" \" + currLine.substring(7);","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"                Todo newTodo \u003d new Todo(description);","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"                TaskList.addTask(newTodo);","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"                if (currLine.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"                    newTodo.markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"            } else if (currLine.startsWith(\"[D]\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"                int currIndex \u003d 7;","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"                while (!currLine.substring(currIndex).startsWith(\"by: \")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"                    currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"                String description \u003d \" \" + currLine.substring(7, currIndex - 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"                String by \u003d currLine.substring(currIndex + 4, currLine.length() - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"                Task newDeadline \u003d new Deadline(description, by);","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"                TaskList.addTask(newDeadline);","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"                if (currLine.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"                    newDeadline.markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"            } else if (currLine.startsWith(\"[E]\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"                int currIndex \u003d 7;","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"                while (!currLine.substring(currIndex).startsWith(\"at: \")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"                    currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"                String description \u003d \" \" + currLine.substring(7, currIndex - 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"                String by \u003d currLine.substring(currIndex + 4, currLine.length() - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"                Task newEvent \u003d new Event(description, by);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"                TaskList.addTask(newEvent);","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"                if (currLine.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"                    newEvent.markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":76}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * Class to create tasks (including deadline, event and todo tasks)","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    protected String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     * To create a task","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * @param description The name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"     * Return a status icon to indicate if a task has been completed","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     * @return \"[X]\" if completed and \"[ ]\" otherwise","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"     * To mark a given task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"     * To mark a given task as completed and to update its status icon in the list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"     * in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error when overwriting/appending to the contents of","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"     * the file","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"    public void markAsDoneAndUpdate() throws IOException{","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"            if (i \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"                writeToFile(\"data/jarvis.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"                        TaskList.getTaskList().get(i).toPrintToFile()","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"                        + System.lineSeparator());","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"                appendToFile(\"data/jarvis.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"                        TaskList.getTaskList().get(i).toPrintToFile()","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"                        + System.lineSeparator());","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"        return this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"        return this.getStatusIcon() + this.description;","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"     * @return the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"        return this.getStatusIcon() + this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"     * To write to the file in user\u0027s hard disk that stores a list of tasks or to overwrite","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"     * the contents of this file","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to the file","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"     * @param textToAdd the content that is to be written","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in writing to/overwriting the file","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"        fw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"     * To append content to the file in user\u0027s hard disk that stores a list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to the file","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"     * @param textToAppend the content that is to be appended","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending to existing content of the file","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"    private static void appendToFile(String filePath, String textToAppend) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"        fw.write(textToAppend);","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"        fw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":109}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" * Contains the task list and all relevant list methods","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    private static ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    private static int counter;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * Creates the taskList and a counter to keep track of the number of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * hard disk at any point in time","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        taskList \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        counter \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     * Returns the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     * @return the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    public static ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        return TaskList.taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     * Returns the number of tasks currently save in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * @return the number of tasks currently save in user\u0027s hard disk (counter member)","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    public static int getCounter() {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"        return TaskList.counter;","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"     * To add a task to the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"     * @param currTask the task that is to be added to the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"    public static void addTask(Task currTask) {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        TaskList.taskList.add(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"        TaskList.counter++;","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"     * To add a task to the taskList and update the list of tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"     * @param currTask the task that is to be added","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending the task to the list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    public static void addTaskAndUpdate(Task currTask) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"        TaskList.taskList.add(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"        TaskList.counter++;","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"        appendToFile(\"data/jarvis.txt\", (counter) + \".\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"                TaskList.getTaskList().get(counter - 1).toPrintToFile()","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"                + System.lineSeparator());","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"     * To delete a task to the taskList and update the list of tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"     * @param currTask the task that is to be deleted","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in re-writing the list of tasks without the","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"     * deleted task","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"    public static void deleteTaskAndUpdate(Task currTask) throws IOException{","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"        TaskList.taskList.remove(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"        counter--;","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"        if (TaskList.getTaskList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"            writeToFile(\"data/jarvis.txt\", \"\");","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"            for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"                if (i \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"                    writeToFile(\"data/jarvis.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"                            TaskList.getTaskList().get(i).toPrintToFile()","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"                    appendToFile(\"data/jarvis.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"                            TaskList.getTaskList().get(i).toPrintToFile()","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"     * To write to the file in user\u0027s hard disk that stores a list of tasks or to overwrite","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"     * the contents of this file","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to the file","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"     * @param textToAdd the content that is to be written","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in writing to/overwriting the file","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"        fw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"     * To append content to the file in user\u0027s hard disk that stores a list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to the file","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"     * @param textToAppend the content that is to be appended","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending to existing content of the file","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"    private static void appendToFile(String filePath, String textToAppend) throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"        fw.write(textToAppend);","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"        fw.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":111}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Class to create todo tasks (tasks with no specific deadline)","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"     * To create a todo task","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"     * @param description the name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"     * @return the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":34}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Deals with interactions with the user","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class Ui {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"     * Prints greeting message to user from Jarvis and the question prompting for the first user","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"     * input","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    public Ui() {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"        String logo \u003d \"\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"                \"       __       ___      .______     ____    ____  __       _______.\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"                \"      |  |     /   \\\\     |   _  \\\\    \\\\   \\\\  /   / |  |     /       |\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"                \"      |  |    /  ^  \\\\    |  |_)  |    \\\\   \\\\/   /  |  |    |   (----`\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"                \".--.  |  |   /  /_\\\\  \\\\   |      /      \\\\      /   |  |     \\\\   \\\\    \\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"                \"|  `--\u0027  |  /  _____  \\\\  |  |\\\\  \\\\----.  \\\\    /    |  | .----)   |   \\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"                \" \\\\______/  /__/     \\\\__\\\\ | _| `._____|   \\\\__/     |__| |_______/    \\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"                \"                                                                    \\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"        System.out.println(\"----------------------------------\");","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        System.out.println(\"Hi! I am Jarvis, your personal assistant :)\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        System.out.println(\"----------------------------------\");","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":27}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":18}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"                \u003cLabel fx:id\u003d\"firstGreeting\"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"                       text\u003d\"Hi! I am Jarvis, your personal assistant :) What can I do for you?\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":27}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"import duke.Deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import duke.Event;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import duke.Todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":" * Class containing tests to check the correctness of the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * Checks if todo tasks are created correctly","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    public void todoCreation_todoTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Todo(\" return book\").toString(), \"[T][ ] return book\");","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     * Checks if event tasks are created correctly","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    public void eventCreation_eventTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Event(\" return book\", \"23/08/2021 17:00\").toString(),","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"                \"[E][ ] return book (at: 23 Aug 2021 17:00)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * Checks if deadline tasks are displayed correctly to users","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    public void deadlineCreation_deadlineTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Deadline(\" return book\", \"23/08/2021 17:00\").toString(),","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"                \"[D][ ] return book (by: 23 Aug 2021 17:00)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     * Checks if deadline tasks are saved in the correct format in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"    public void deadlinePrintToFile_deadlineTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Deadline(\" return book\", \"23/08/2021 17:00\").toPrintToFile(),","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"                \"[D][ ] return book (by: 23/08/2021 17:00)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * Checks if Parse.parseCommand() works correctly","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    public void parseCommand_doneTask_success() {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"        assertEquals(Parser.parseCommand(\"done 1\"), \"done\");","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":56}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"todo read book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"todo return book","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"event watch movie /at Sat 9-11.30pm","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"todo buy groceries","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"deadline go fishing /by Friday","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":18}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    //To pack JavaFX libraries into a generated JAR file","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Preshita01":29,"-":46}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"# Jarvis User Guide","lastModifiedDate":"2021-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"* Adding a todo task: `todo`","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"* Adding a deadline task: `deadline`","lastModifiedDate":"2021-09-14"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"* Adding an event task: `event`","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"* Deleting a task: `delete`","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"* Marking a task as completed: `done`","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"* Listing all tasks: `list`","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"* Listing all tasks due today: `today`","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"* Finding a specific task: `find`","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"* Adding a note: `note`","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"* Deleting a note: `delete note`","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"* Listing all notes: `notes`","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"* Exiting the program: `bye`","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"#### Notes about the command format:","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. ","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"  (e.g. in `todo TASK_DESCRIPTION`, `TASK_DESCRIPTION` is a parameter that can be used as `todo upload assignment`.)","lastModifiedDate":"2021-09-14"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"* Parameters must be in the given fixed order.","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"  ","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"### Adding a todo task: `todo`","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"Adds a todo task to the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"Format: `todo TASK_DESCRIPTION`","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"* `TASK_DESCRIPTION` can include spaces.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"Example(s): `todo upload assignment`","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"### Adding a deadline task: `deadline`","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"Adds a deadline task to the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"Format: `deadline TASK_DESCRIPTION /by DATE TIME`","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"* `TASK_DESCRIPTION` can include spaces.","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"* The format for `DATE` is dd/mm/yyyy.","lastModifiedDate":"2021-09-14"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"* The format for `TIME` is hh:mm (24h format)","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"Example(s):","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"`deadline return book /by 15/09/2021 17:00`","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"### Adding an event task: `event`","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"Adds an event task to the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"Format: `event TASK_DESCRIPTION /at DATE START_TIME-END_TIME`","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"*  `TASK_DESCRIPTION` can include spaces.","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"* The format for `DATE` is dd/mm/yyyy.","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"* The format for `START_TIME` and `END_TIME` is hh:mm (24h format)","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"Example(s):","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"`event party /at 15/09/2021 17:00-20:00`","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"Deletes a todo/deadline/event task from the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"Format: delete `TASK_INDEX`","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"* `TASK_INDEX` is the index of the task based on the list of tasks that is generated when entering the list command.","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"* The index must be a positive integer 1,2,3, …","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"Example(s):","lastModifiedDate":"2021-09-14"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"`delete 2` deletes the 2nd task in the task list","lastModifiedDate":"2021-09-14"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"### Marking a task as completed: `done`","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"Marks a todo, deadline or an event task as done.","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"Format: `done TASK_INDEX`","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"* `TASK_INDEX` is the index of the task based on the list of tasks that is generated when entering the list command.","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"* The index must be a positive integer 1,2,3, …","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"Examples:","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"`done 2` marks the 2nd task in the task list as done","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"Displays all the tasks in the task list in the order in which they were added.","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"Format: `list`","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"### Listing all tasks due today: `today`","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"Displays all the tasks in the task list that are due today. Within this list, tasks are in the order in which they ","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"were added.","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"Format: `today`","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"### Finding a specific task: `find`","lastModifiedDate":"2021-09-14"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"Displays a list of tasks that have task descriptions that matches the search keywords/phrases.","lastModifiedDate":"2021-09-14"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"Format: `find KEY_WORDS`","lastModifiedDate":"2021-09-14"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"* `KEY_WORDS` can include spaces.","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"* Search is case-sensitive (e.g `book` will not match with `Book`)","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"* Partial words can be matched (e.g. `book` can match with a task description `return book`)","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"Examples:","lastModifiedDate":"2021-09-14"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"`find web` displays a list of tasks with the word ‘web’ in the task description.","lastModifiedDate":"2021-09-14"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"### Adding a note: `note`","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"Adds a note to the notes list.","lastModifiedDate":"2021-09-14"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"Format: `note NOTE_TITLE /NOTE_BODY`","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"* `NOTE_TITLE` can include spaces.","lastModifiedDate":"2021-09-14"},{"lineNumber":110,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":111,"author":{"gitId":"Preshita01"},"content":"Examples: `note grocery list /tomatoes, milk`","lastModifiedDate":"2021-09-14"},{"lineNumber":112,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"Preshita01"},"content":"### Deleting a note: `delete note`","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"Preshita01"},"content":"Deletes a note from the notes list.","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":117,"author":{"gitId":"Preshita01"},"content":"Format: `delete note NOTE_INDEX`","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"Preshita01"},"content":"* `NOTE_INDEX` is the index of the note based on the list of notes that is generated when entering the notes command.","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"Preshita01"},"content":"* The index must be a positive integer 1,2,3, …","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"Preshita01"},"content":"Examples: `delete note 2` deletes the 2nd note in the notes list.","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":123,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"Preshita01"},"content":"### Listing all notes: `notes`","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"Preshita01"},"content":"Displays all the notes in the notes list in the order in which they were added.","lastModifiedDate":"2021-09-14"},{"lineNumber":126,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":127,"author":{"gitId":"Preshita01"},"content":"Format: `notes`","lastModifiedDate":"2021-09-14"},{"lineNumber":128,"author":{"gitId":"Preshita01"},"content":"\u003cbr/\u003e\u003cbr/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"Preshita01"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2021-09-14"},{"lineNumber":131,"author":{"gitId":"Preshita01"},"content":"Exits the program.","lastModifiedDate":"2021-09-14"},{"lineNumber":132,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":133,"author":{"gitId":"Preshita01"},"content":"Format: `bye`","lastModifiedDate":"2021-09-14"}],"authorContributionMap":{"Preshita01":118,"-":15}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * Class for tasks that need to be done before a specific date/time","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    protected String by;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    protected String timeToDisplay;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * Creates a task with a deadline","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * @param description The name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     * @param by The deadline for the task (in the format dd/mm/yyyy hh:mm - in 24 hours format)","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        assert !(description.equals(\"\")) : \"Deadline description is empty\";","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        assert (by.length() \u003d\u003d 16) : \"Timestamp is incorrect.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"        // Extracting the date, month and year numbers from the \u0027by\u0027 string","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        int date \u003d Integer.parseInt(by.substring(0, 2));","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        assert (date \u003e 0 \u0026\u0026 date \u003c 32) : \"Date is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"        int month \u003d Integer.parseInt(by.substring(3, 5));","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"        assert (month \u003e 0 \u0026\u0026 month \u003c 13) : \"Month is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"        int year \u003d Integer.parseInt(by.substring(6, 10));","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"        assert (year \u003e 0) : \"Year is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        // Extracting the event \u0027by\u0027 hour and minute numbers from the \u0027time\u0027 string","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"        int hour \u003d Integer.parseInt(by.substring(11, 13));","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        assert (hour \u003e\u003d 0 \u0026\u0026 hour \u003c 24) : \"Hour is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"        int min \u003d Integer.parseInt(by.substring(14, 16));","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"        assert (min \u003e\u003d 0 \u0026\u0026 min \u003c 60) : \"Minute is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        // Creating LocalDateTime objects for the \u0027by\u0027 of the deadline so that its format can be changed later","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"        LocalDateTime taskDate \u003d LocalDateTime.of(year, month, date, hour, min);","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        // Formatting the deadline to be displayed to users","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"        this.timeToDisplay \u003d taskDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"        deadline \u003d taskDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     * Returns the deadline of a given deadline task","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"     * @return the deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        return this.deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"     * Returns the deadline task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"     * @return the deadline task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + timeToDisplay + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"     * Returns the deadline task as a string that is to be saved in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"     * @return the deadline task as a string that is to be saved in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":79}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"     * Creates the dialog box where the profile picture of the responder and the reponse is contained.","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * @param text The response given by the responder","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     * @param img The profile picture of the responder","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"        dialog.setText(text); // Set the given text into the dialog box","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        dialog.setPadding(new Insets(10, 10, 10, 10));","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"        boolean isAnErrorMessage \u003d dialog.getText().equals(Ui.EMPTY_TODO_DESCRIPTION) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.EMPTY_DEADLINE_DESCRIPTION) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.INCOMPLETE_DEADLINE) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.WRONGLY_FORMATTED_DEADLINE_TIME) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.EMPTY_EVENT_DESCRIPTION) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.INCOMPLETE_EVENT_TIMINGS) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.WRONGLY_FORMATTED_EVENT_TIMINGS) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.UNRECOGNISED_COMMAND) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.WRONGLY_FORMATTED_DATE) ||","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"                dialog.getText().equals(Ui.WRONGLY_FORMATTED_NOTE);","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"        ","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"        if (isAnErrorMessage) {","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"            dialog.setStyle(\"-fx-text-fill: BROWN; -fx-background-color: SKYBLUE;\");","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"            dialog.setStyle(\"-fx-background-color: SKYBLUE;\");","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"        displayPicture.setImage(img); // Set the given image into the dialog box and display it","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"    private void flip() {","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"     * Creates a new dialog box containing the user\u0027s response and profile picture.","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"     * @param text Response of the user","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"     * @param img Profile picture of the user","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"     * @return The dialog box containing the user\u0027s response and profile picture","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"     * Creates a new dialog box containing the Jarvis\u0027 response and profile picture.","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"     * @param text Response of Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"     * @param img Profile picture of Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"     * @return The dialog box containing the Jarvis\u0027 response and profile picture","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"        db.flip(); // Flips Jarvis\u0027 dialog box such that its response is on the left of the user\u0027s response","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"        return db;","lastModifiedDate":"2021-08-31"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":101}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * Class which operates Jarvis the chat-bot","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Duke {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    private Storage taskStorage;","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    private Storage notesStorage;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"    private NoteList notes;","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * Retrieves all the tasks stored by Jarvis in the hard disk upon running the main method.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     * @param taskFilePath The file in which the tasks are stored","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     * @param noteFilePath The file in which the notes are stored","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    public Duke(String taskFilePath, String noteFilePath) {","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        taskStorage \u003d new Storage(taskFilePath); // To load user tasks","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"        notesStorage \u003d new Storage(noteFilePath); // To load user notes as well","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        notes \u003d new NoteList();","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"            taskStorage.retrieveTaskFileContents(); // Retrieves contents from the jarvis.txt file in user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"            notesStorage.retrieveNotesFileContents(); // Retrieves contents from the notes.txt file in user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"            System.err.println(e);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"     * Returns the response to be given by Jarvis to the user upon receiving a command.","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"     * @param input the command given by the user","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    public static String getResponse(String input) {","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"            switch (Parser.parseCommand(input)) {","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"            case \"list\":","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"                return Ui.listTasks();","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"            case \"notes\":","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"                return Ui.listNotes();","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"            case \"done\":","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseDone(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"            case \"delete\":","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseDelete(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"            case \"todo\":","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseTodo(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"            case \"deadline\":","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseDeadline(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"            case \"event\":","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseEvent(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"            case \"today\":","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"                return Ui.listTodayTasks();","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"            case \"find\":","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"                return Ui.findTasks(input);","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"            case \"note\":","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseNote(input);","lastModifiedDate":"2021-09-06"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"            case \"delete note\":","lastModifiedDate":"2021-09-06"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"                return Parser.parseDeleteNote(input);","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"            case \"bye\":","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"                return Ui.BYE;","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"            default:","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.UNRECOGNISED_COMMAND);","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"            return \"\" + e;","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":76}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Class that throws exceptions specific to Jarvis","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"    protected String message;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     * Prints the received error message to user","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     * @param message The error message to be printed","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        assert !this.message.equals(\"\") : \"Error message is empty!\";","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"     * Returns the error message","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     * @return the error message","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        return message;","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":30}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" * Class to create tasks that start at a specific time and end at a specific time.","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    protected String time; // Includes both start time and end time, in the format of hh:mm-hh:mm","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    protected String timeToDisplay; // The time format to be displayed to users (dd MMM yyyy hh:mm to hh:mm)","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"    protected LocalDateTime eventStart; // The start time of the event","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    protected LocalDateTime eventEnd; // The end time of the event","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     * Creates event tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     * @param description the name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"     * @param time The times at which the event starts and ends","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    public Event(String description, String time) {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        assert !(description.equals(\"\")) : \"Event description is empty\";","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        assert (time.length() \u003d\u003d 22) : \"Timestamp is incorrect.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        // Extracting the date, month and year numbers from the \u0027time\u0027 string","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"        int date \u003d Integer.parseInt(time.substring(0, 2));","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"        assert (date \u003e 0 \u0026\u0026 date \u003c 32) : \"Date is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"        int month \u003d Integer.parseInt(time.substring(3, 5));","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"        assert (month \u003e 0 \u0026\u0026 month \u003c 13) : \"Month is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"        int year \u003d Integer.parseInt(time.substring(6, 10));","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        assert (year \u003e 0) : \"Year is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        // Extracting the event start time hour and minute numbers from the \u0027time\u0027 string","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"        int startHour \u003d Integer.parseInt(time.substring(11, 13));","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"        assert (startHour \u003e\u003d 0 \u0026\u0026 startHour \u003c 24) : \"Start hour is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"        int startMin \u003d Integer.parseInt(time.substring(14, 16));","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        assert (startMin \u003e\u003d 0 \u0026\u0026 startMin \u003c 60) : \"Start minute is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"        // Extracting the event end time hour and minute numbers from the \u0027time\u0027 string","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        int endHour \u003d Integer.parseInt(time.substring(17, 19));","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"        assert (endHour \u003e\u003d 0 \u0026\u0026 endHour \u003c 24) : \"End hour is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"        int endMin \u003d Integer.parseInt(time.substring(20, 22));","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"        assert (endMin \u003e\u003d 0 \u0026\u0026 endMin \u003c 60) : \"End minute is not valid\";","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"        // Creating LocalDateTime objects for the start and end times of the event so that their formats can be changed","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"        // later","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"        LocalDateTime start \u003d LocalDateTime.of(year, month, date, startHour, startMin);","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"        this.eventStart \u003d start;","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"        LocalDateTime end \u003d LocalDateTime.of(year, month, date, endHour, endMin);","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        this.eventEnd \u003d end;","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"        // Formatting the time to be displayed to users","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"        this.timeToDisplay \u003d start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\")) +","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"                \" to \" + end.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"     * Returns the time at which the event starts as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"     * @return the time at which the event starts as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"    public LocalDateTime getEventStart() {","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"        return this.eventStart;","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"     * Returns the time at which the event ends as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"     * @return the time at which the event ends as a LocalDateTime object","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"    public LocalDateTime getEventEnd() {","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"        return this.eventEnd;","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + timeToDisplay + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"     * @return the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + time + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":103}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"public class Launcher {","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    private Duke jarvis \u003d new Duke(\"data/jarvis.txt\", \"data/notes.txt\"); // Instantiating Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     * Sets up the GUI for Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"     * @param stage The space to which additional scenes and panes are added for the GUI","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(jarvis);","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"            stage.show();","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":35}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    private Duke jarvis;","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    private Image jarvisImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaJarvis.png\"));","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"     * Opens up the chat box with a greeting.","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"                // Jarvis greets user upon opening the application","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"                DialogBox.getDukeDialog(Ui.firstGreeting(), jarvisImage)","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     * Sets up Jarvis.","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"     * @param d The duke object to be set up.","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"        jarvis \u003d d;","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        String response \u003d jarvis.getResponse(input);","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"                DialogBox.getUserDialog(input, userImage), // User\u0027s dialog box","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"                DialogBox.getDukeDialog(response, jarvisImage) // Jarvis\u0027 dialog box","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":65}},{"path":"src/main/java/duke/Note.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Class to create notes","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class Note {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"    private String title;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"    private String body;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     * Creates a note.","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     * @param title the title of the note","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * @param body the content to be stored in the note","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    public Note(String title, String body) {","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        this.body \u003d body;","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"     * Returns the note as a string that is to be displayed to the user.","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     * @return the given note as a string that is to be displayed to the user","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        return this.title + \": \" + this.body;","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     * Returns the note as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * notes in user\u0027s hard disk.","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"     * @return the note as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"     * notes in user\u0027s hard disk","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        return this.title + \": \" + this.body;","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Preshita01":40}},{"path":"src/main/java/duke/NoteList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" * Contains the note list and all relevant list methods","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"public class NoteList {","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    private static ArrayList\u003cNote\u003e noteList; // The array list containing all the user\u0027s notes","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    private static int counter; // Keeps track of the total number of tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * Creates the noteList and a counter to keep track of the number of notes saved in the user\u0027s","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * hard disk at any point in time","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    public NoteList() {","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        noteList \u003d new ArrayList\u003cNote\u003e(100);","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        counter \u003d 0;","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     * Returns the noteList.","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     * @return the noteList","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    public static ArrayList\u003cNote\u003e getNoteList() {","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        return NoteList.noteList;","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * Returns the number of notes currently save in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"     * @return the number of notes currently save in user\u0027s hard disk (counter member)","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    public static int getCounter() {","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"        return NoteList.counter;","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     * Adds a note to the noteList and increments the total number of notes by 1.","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     * @param note the note that is to be added to the noteList","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    public static void addNote(Note note) {","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        NoteList.noteList.add(note);","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"        NoteList.counter++;","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * Adds a note to the noteList and update the list of notes in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"     * @param currNote the note that is to be added","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending the note to the list of notes","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"     * in user\u0027s hard disk","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"    public static String addNoteAndUpdate(Note currNote) throws IOException {","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"        // Add a note to the noteList and increments the total number of notes by 1","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"        NoteList.noteList.add(currNote);","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"        NoteList.counter++;","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"        Storage.appendToNoteFile(); // Add the new note to the note file in user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"        return Ui.noteAdded(currNote); // Display Jarvis\u0027 response after adding the note","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"     * Deletes a note to the noteList and update the list of notes in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"     * @param noteNum the index of the note that is to be deleted","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in re-writing the list of notes without the","lastModifiedDate":"2021-09-06"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"     * deleted note","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"    public static String deleteNoteAndUpdate(int noteNum) throws IOException {","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"        // Delete the note from the noteList and decrement the total number of notes by 1","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"        Note currNote \u003d NoteList.getNoteList().get(noteNum);","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"        NoteList.getNoteList().remove(currNote);","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"        NoteList.counter--;","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"        Storage.rewriteNoteFile(); // Delete the new note from the note file in user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"        return Ui.noteDeleted(currNote); // Display Jarvis\u0027 response after deleting the note","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Preshita01":85}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" * Deals with making sense of the user\u0027s commands","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"     * Identifies and returns the command word from the user\u0027s input so that the corresponding methods","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"     * can be called","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"     * @param command user\u0027s input","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     * @return the extracted command word from the user\u0027s input","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    public static String parseCommand(String command) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        String keyWord \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"list\";","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        } else if (command.equals(\"notes\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"notes\";","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"done\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"done\";","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"delete note\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"delete note\";","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"delete\";","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"todo\";","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"deadline\";","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"event\";","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"today\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"today\";","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"find\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"find\";","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"bye\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"bye\";","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"        } else if (command.startsWith(\"note\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"            keyWord \u003d \"note\";","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"        return keyWord;","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"     * Checks if the task done command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"     * markAsDoneAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"done\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task that has the index keyed in by the user","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    public static String parseDone(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"        int taskNum \u003d Integer.parseInt(instruction.substring(5)) - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        // If the task number is invalid","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"        if (taskNum \u003e\u003d TaskList.getCounter()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.invalidTaskNum(taskNum));","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"        // If the task number is valid, update the task to done","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"            return TaskList.markAsDoneAndUpdate(taskNum);","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"     * Checks if the task delete command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"     * deleteTaskAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"delete\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task that has the index keyed in by the user","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"    public static String parseDelete(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"        int taskNum \u003d Integer.parseInt(instruction.substring(7)) - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"        // If the task number keyed in by the user is invalid","lastModifiedDate":"2021-09-05"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"        if (taskNum \u003e\u003d TaskList.getCounter()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.invalidTaskNum(taskNum));","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"        // If the task number keyed in by the user is valid","lastModifiedDate":"2021-09-05"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"            return TaskList.deleteTaskAndUpdate(taskNum);","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"     * Checks if the todo command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"     * addTaskAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"todo\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task description keyed in","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"    public static String parseTodo(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"        // If the description of the todo task is empty","lastModifiedDate":"2021-09-05"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"        if (instruction.length() \u003c 5) {","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.EMPTY_TODO_DESCRIPTION);","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"        // If the description of the todo task is not empty","lastModifiedDate":"2021-09-05"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"            String taskDescription \u003d instruction.substring(4);","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"            Todo newTodo \u003d new Todo(taskDescription);","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"            // Add the task to the taskList array and update the document save in the user\u0027s local computer","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"            return TaskList.addTaskAndUpdate(newTodo);","lastModifiedDate":"2021-09-13"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"Preshita01"},"content":"     * Checks if the deadline command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"Preshita01"},"content":"     * addTaskAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"deadline\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task description/no deadline/wrongly formatted deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"Preshita01"},"content":"     * keyed in","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"Preshita01"},"content":"    public static String parseDeadline(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":122,"author":{"gitId":"Preshita01"},"content":"        // If the description of the deadline task is empty","lastModifiedDate":"2021-09-05"},{"lineNumber":123,"author":{"gitId":"Preshita01"},"content":"        if (instruction.length() \u003c 10) {","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.EMPTY_DEADLINE_DESCRIPTION);","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":126,"author":{"gitId":"Preshita01"},"content":"        // If the description of the deadline task is not empty","lastModifiedDate":"2021-09-05"},{"lineNumber":127,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"Preshita01"},"content":"            String taskDescription \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"Preshita01"},"content":"            int currIndex \u003d 8;","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":131,"author":{"gitId":"Preshita01"},"content":"            // Extracting the deadline (dd/mm/yyyy hh:mm)","lastModifiedDate":"2021-09-05"},{"lineNumber":132,"author":{"gitId":"Preshita01"},"content":"            while (currIndex \u003c instruction.length() \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":133,"author":{"gitId":"Preshita01"},"content":"                    !instruction.substring(currIndex).startsWith(\" /\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":134,"author":{"gitId":"Preshita01"},"content":"                taskDescription +\u003d instruction.substring(currIndex, currIndex + 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":135,"author":{"gitId":"Preshita01"},"content":"                currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":137,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":138,"author":{"gitId":"Preshita01"},"content":"            // If the extracted deadline is too short to contain all of the relevant details","lastModifiedDate":"2021-09-05"},{"lineNumber":139,"author":{"gitId":"Preshita01"},"content":"            if (currIndex \u003d\u003d instruction.length() ||","lastModifiedDate":"2021-08-23"},{"lineNumber":140,"author":{"gitId":"Preshita01"},"content":"                    currIndex + 5 \u003e\u003d instruction.length()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.INCOMPLETE_DEADLINE);","lastModifiedDate":"2021-09-13"},{"lineNumber":142,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":143,"author":{"gitId":"Preshita01"},"content":"            // If the date keyed in by the user is formatted wrongly","lastModifiedDate":"2021-09-05"},{"lineNumber":144,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.charAt(currIndex + 7) !\u003d \u0027/\u0027 \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"Preshita01"},"content":"                    instruction.charAt(currIndex + 10) !\u003d \u0027/\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.WRONGLY_FORMATTED_DATE);","lastModifiedDate":"2021-09-13"},{"lineNumber":147,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"Preshita01"},"content":"            // If the time keyed in by the suer is formatted wrongly","lastModifiedDate":"2021-09-05"},{"lineNumber":149,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.substring(currIndex).length() \u003c 20){","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.WRONGLY_FORMATTED_DEADLINE_TIME);","lastModifiedDate":"2021-09-13"},{"lineNumber":151,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":152,"author":{"gitId":"Preshita01"},"content":"            // If the deadline is formatted correctly overall","lastModifiedDate":"2021-09-05"},{"lineNumber":153,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"Preshita01"},"content":"                String by \u003d instruction.substring(currIndex + 5);","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"Preshita01"},"content":"                Task newDeadline \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":157,"author":{"gitId":"Preshita01"},"content":"                // Add the task to the taskList array and update the task file in the user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":158,"author":{"gitId":"Preshita01"},"content":"                return TaskList.addTaskAndUpdate(newDeadline);","lastModifiedDate":"2021-09-13"},{"lineNumber":159,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":160,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"Preshita01"},"content":"     * Checks if the event command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":165,"author":{"gitId":"Preshita01"},"content":"     * addTaskAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":166,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":167,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"event\" command word","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no task description/no deadline/wrongly formatted deadline","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"Preshita01"},"content":"     * keyed in","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"Preshita01"},"content":"     * hard disk after marking a task as completed","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"Preshita01"},"content":"    public static String parseEvent(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":174,"author":{"gitId":"Preshita01"},"content":"        // If the description of the deadline task is empty","lastModifiedDate":"2021-09-05"},{"lineNumber":175,"author":{"gitId":"Preshita01"},"content":"        if (instruction.length() \u003c 7) {","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.EMPTY_EVENT_DESCRIPTION);","lastModifiedDate":"2021-09-13"},{"lineNumber":177,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"Preshita01"},"content":"            String taskDescription \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":179,"author":{"gitId":"Preshita01"},"content":"            int currIndex \u003d 5;","lastModifiedDate":"2021-08-23"},{"lineNumber":180,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":181,"author":{"gitId":"Preshita01"},"content":"            // Extracting the timestamp (format: dd/mm/yyyy hh:mm-hh:mm)","lastModifiedDate":"2021-09-05"},{"lineNumber":182,"author":{"gitId":"Preshita01"},"content":"            while (currIndex \u003c instruction.length() \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"Preshita01"},"content":"                    !instruction.substring(currIndex).startsWith(\" /\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":184,"author":{"gitId":"Preshita01"},"content":"                taskDescription +\u003d instruction.substring(currIndex, currIndex + 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":185,"author":{"gitId":"Preshita01"},"content":"                currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":186,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":187,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":188,"author":{"gitId":"Preshita01"},"content":"            // If the extracted timestamp is too short to contain all of the relevant details","lastModifiedDate":"2021-09-05"},{"lineNumber":189,"author":{"gitId":"Preshita01"},"content":"            if (currIndex \u003d\u003d instruction.length() ||","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"Preshita01"},"content":"                    currIndex + 5 \u003e\u003d instruction.length()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.INCOMPLETE_EVENT_TIMINGS);","lastModifiedDate":"2021-09-13"},{"lineNumber":192,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":193,"author":{"gitId":"Preshita01"},"content":"            // If the date keyed in by the user is formatted wrongly","lastModifiedDate":"2021-09-05"},{"lineNumber":194,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.charAt(currIndex + 7) !\u003d \u0027/\u0027 \u0026\u0026","lastModifiedDate":"2021-08-23"},{"lineNumber":195,"author":{"gitId":"Preshita01"},"content":"                    instruction.charAt(currIndex + 10) !\u003d \u0027/\u0027) {","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.WRONGLY_FORMATTED_DATE);","lastModifiedDate":"2021-09-13"},{"lineNumber":197,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":198,"author":{"gitId":"Preshita01"},"content":"            // If the timings keyed in by the suer is formatted wrongly","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"Preshita01"},"content":"            } else if (instruction.substring(currIndex).length() \u003c 25){","lastModifiedDate":"2021-08-31"},{"lineNumber":200,"author":{"gitId":"Preshita01"},"content":"                throw new DukeException(Ui.WRONGLY_FORMATTED_EVENT_TIMINGS);","lastModifiedDate":"2021-09-13"},{"lineNumber":201,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":202,"author":{"gitId":"Preshita01"},"content":"            // If the timestamp is formatted correctly overall","lastModifiedDate":"2021-09-05"},{"lineNumber":203,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"Preshita01"},"content":"                String by \u003d instruction.substring(currIndex + 5);","lastModifiedDate":"2021-08-23"},{"lineNumber":205,"author":{"gitId":"Preshita01"},"content":"                Task newEvent \u003d new Event(taskDescription, by);","lastModifiedDate":"2021-08-23"},{"lineNumber":206,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":207,"author":{"gitId":"Preshita01"},"content":"                // Add the task to the taskList array and update the task file in the user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":208,"author":{"gitId":"Preshita01"},"content":"                return TaskList.addTaskAndUpdate(newEvent);","lastModifiedDate":"2021-09-13"},{"lineNumber":209,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":210,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":212,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":213,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":214,"author":{"gitId":"Preshita01"},"content":"     * Checks if the note command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":215,"author":{"gitId":"Preshita01"},"content":"     * addNoteAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":216,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":217,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"note\" command word","lastModifiedDate":"2021-09-06"},{"lineNumber":218,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no note title/no body/wrongly formatted note","lastModifiedDate":"2021-09-06"},{"lineNumber":219,"author":{"gitId":"Preshita01"},"content":"     * keyed in","lastModifiedDate":"2021-09-06"},{"lineNumber":220,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of notes saved in the user\u0027s","lastModifiedDate":"2021-09-06"},{"lineNumber":221,"author":{"gitId":"Preshita01"},"content":"     * hard disk","lastModifiedDate":"2021-09-06"},{"lineNumber":222,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":223,"author":{"gitId":"Preshita01"},"content":"    public static String parseNote(String instruction) throws IOException, DukeException {","lastModifiedDate":"2021-09-06"},{"lineNumber":224,"author":{"gitId":"Preshita01"},"content":"        StringBuilder noteTitle \u003d new StringBuilder();","lastModifiedDate":"2021-09-06"},{"lineNumber":225,"author":{"gitId":"Preshita01"},"content":"        String noteBody;","lastModifiedDate":"2021-09-06"},{"lineNumber":226,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":227,"author":{"gitId":"Preshita01"},"content":"        int currIndex \u003d 5;","lastModifiedDate":"2021-09-06"},{"lineNumber":228,"author":{"gitId":"Preshita01"},"content":"        // Checking for the \u0027/\u0027 which separates the note title and body","lastModifiedDate":"2021-09-06"},{"lineNumber":229,"author":{"gitId":"Preshita01"},"content":"        while (currIndex \u003c instruction.length() \u0026\u0026","lastModifiedDate":"2021-09-06"},{"lineNumber":230,"author":{"gitId":"Preshita01"},"content":"                !instruction.substring(currIndex).startsWith(\" /\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":231,"author":{"gitId":"Preshita01"},"content":"            noteTitle.append(instruction.charAt(currIndex));","lastModifiedDate":"2021-09-06"},{"lineNumber":232,"author":{"gitId":"Preshita01"},"content":"            currIndex++;","lastModifiedDate":"2021-09-06"},{"lineNumber":233,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":234,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":235,"author":{"gitId":"Preshita01"},"content":"        // If the \u0027/\u0027 cannot be found, note is formatted wrongly","lastModifiedDate":"2021-09-06"},{"lineNumber":236,"author":{"gitId":"Preshita01"},"content":"        if (currIndex \u003d\u003d instruction.length()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":237,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.WRONGLY_FORMATTED_NOTE);","lastModifiedDate":"2021-09-14"},{"lineNumber":238,"author":{"gitId":"Preshita01"},"content":"        // If the note is formatted correctly","lastModifiedDate":"2021-09-14"},{"lineNumber":239,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":240,"author":{"gitId":"Preshita01"},"content":"            noteBody \u003d instruction.substring(currIndex + 2); //Extracting the note body","lastModifiedDate":"2021-09-06"},{"lineNumber":241,"author":{"gitId":"Preshita01"},"content":"            Note newNote \u003d new Note(noteTitle.toString(), noteBody);","lastModifiedDate":"2021-09-06"},{"lineNumber":242,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":243,"author":{"gitId":"Preshita01"},"content":"            // Add the note to the noteList array and update the note file in the user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":244,"author":{"gitId":"Preshita01"},"content":"            return NoteList.addNoteAndUpdate(newNote);","lastModifiedDate":"2021-09-14"},{"lineNumber":245,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":246,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":247,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":248,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":249,"author":{"gitId":"Preshita01"},"content":"     * Checks if the \u0027delete note\u0027 command keyed in by the user is correct before calling the","lastModifiedDate":"2021-09-14"},{"lineNumber":250,"author":{"gitId":"Preshita01"},"content":"     * deleteNoteAndUpdate() method.","lastModifiedDate":"2021-09-14"},{"lineNumber":251,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":252,"author":{"gitId":"Preshita01"},"content":"     * @param instruction User\u0027s input that followed the \"delete\" command word","lastModifiedDate":"2021-09-06"},{"lineNumber":253,"author":{"gitId":"Preshita01"},"content":"     * @throws DukeException if there is no note that has the index keyed in by the user","lastModifiedDate":"2021-09-06"},{"lineNumber":254,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in updated the list of note saved in the user\u0027s","lastModifiedDate":"2021-09-06"},{"lineNumber":255,"author":{"gitId":"Preshita01"},"content":"     * hard disk","lastModifiedDate":"2021-09-06"},{"lineNumber":256,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":257,"author":{"gitId":"Preshita01"},"content":"    public static String parseDeleteNote(String instruction) throws DukeException, IOException {","lastModifiedDate":"2021-09-06"},{"lineNumber":258,"author":{"gitId":"Preshita01"},"content":"        int noteNum \u003d Integer.parseInt(instruction.substring(13)) - 1;","lastModifiedDate":"2021-09-06"},{"lineNumber":259,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":260,"author":{"gitId":"Preshita01"},"content":"        // If there is no corresponding note to the number keyed in by the user","lastModifiedDate":"2021-09-06"},{"lineNumber":261,"author":{"gitId":"Preshita01"},"content":"        if (noteNum \u003e\u003d TaskList.getCounter()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":262,"author":{"gitId":"Preshita01"},"content":"            throw new DukeException(Ui.invalidNoteNum(noteNum));","lastModifiedDate":"2021-09-14"},{"lineNumber":263,"author":{"gitId":"Preshita01"},"content":"        // If there is a corresponding note to the number keyed in by the user","lastModifiedDate":"2021-09-06"},{"lineNumber":264,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-09-06"},{"lineNumber":265,"author":{"gitId":"Preshita01"},"content":"            // Delete the note from the noteList array and update the note file in the user\u0027s hard disk","lastModifiedDate":"2021-09-14"},{"lineNumber":266,"author":{"gitId":"Preshita01"},"content":"            return NoteList.deleteNoteAndUpdate(noteNum);","lastModifiedDate":"2021-09-14"},{"lineNumber":267,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":268,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":269,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":269}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":" * Deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    protected String filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"     * Creates the \u0027data\u0027 directory and \u0027jarvis.txt\u0027 file in user\u0027s hard disk to store user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     * list of tasks (if the directory and file don\u0027t already exit).","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to location in which the file is to be created","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        this.filePath \u003d filePath; // Format: directory/file","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"            StringBuilder dirName \u003d new StringBuilder();","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"            int index \u003d 0;","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"            // Extracting the directory and file name","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"            while (index \u003c filePath.length() \u0026\u0026 !filePath.substring(index).startsWith(\"/\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"                assert !(index \u003d\u003d filePath.length() - 1): \"Filepath is invalid\";","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"                dirName.append(filePath.charAt(index));","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"                index++;","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"            // If directory and file name can be extracted successfully","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"            String txtFileName \u003d filePath.substring(index + 1);","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"            File dir \u003d new File(dirName.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"            dir.mkdirs();","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"            File tmp \u003d new File(dir, txtFileName);","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"            tmp.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"            System.err.println(\"An error occurred.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * Retrieves the list of tasks from the user\u0027s hard disk and displays it to the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     * @throws FileNotFoundException if the file (\u0027jarvis.txt\u0027) containing the list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"     * cannot be found","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    public void retrieveTaskFileContents() throws FileNotFoundException {","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"        File f \u003d new File(this.filePath); // Create a File for the given file path","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"        Scanner s \u003d new Scanner(f); // Create a Scanner using the File as the source","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"        // If retrieving user tasks","lastModifiedDate":"2021-09-06"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"        if (this.filePath.equals(\"data/jarvis.txt\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"                String currLine \u003d s.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"                currLine \u003d currLine.substring(2);","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"                // If the task is a todo task","lastModifiedDate":"2021-09-06"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"                if (currLine.startsWith(\"[T]\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"                    this.retrieveTodo(currLine);","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"                // If the task is a deadline task","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"                } else if (currLine.startsWith(\"[D]\")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"                    this.retrieveDeadline(currLine);","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"                // If the task is an event task","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"                } else if (currLine.startsWith(\"[E]\")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"                    this.retrieveEvent(currLine);","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"     * Interprets the string from the user\u0027s task file that represents the todo task and adds it to the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"     * @param todoString the string from the user\u0027s task file that represents the todo task","lastModifiedDate":"2021-09-14"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"    public void retrieveTodo(String todoString) {","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"        String description \u003d \" \" + todoString.substring(7);","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"        Todo newTodo \u003d new Todo(description);","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"        TaskList.addTask(newTodo);","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"        if (todoString.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"            newTodo.markAsDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"     * Interprets the string from the user\u0027s task file that represents the deadline task and adds it to the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"     * @param deadlineString the string from the user\u0027s task file that represents the deadline task","lastModifiedDate":"2021-09-14"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"    public void retrieveDeadline(String deadlineString) {","lastModifiedDate":"2021-09-14"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"        int currIndex \u003d 7;","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"        // Find \u0027by: \u0027 which separated the task description and the deadline","lastModifiedDate":"2021-09-06"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"        while (!deadlineString.substring(currIndex).startsWith(\"by: \")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"            assert !(currIndex \u003d\u003d this.filePath.length() - 1) : \"Filepath is invalid\"; //If \u0027by: \u0027 not found","lastModifiedDate":"2021-09-14"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"            currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"        String description \u003d \" \" + deadlineString.substring(7, currIndex - 2);","lastModifiedDate":"2021-09-14"},{"lineNumber":110,"author":{"gitId":"Preshita01"},"content":"        String by \u003d deadlineString.substring(currIndex + 4, deadlineString.length() - 1);","lastModifiedDate":"2021-09-14"},{"lineNumber":111,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":112,"author":{"gitId":"Preshita01"},"content":"        Task newDeadline \u003d new Deadline(description, by); // Create new deadline task","lastModifiedDate":"2021-09-14"},{"lineNumber":113,"author":{"gitId":"Preshita01"},"content":"        TaskList.addTask(newDeadline); // Add the deadline task to the task list","lastModifiedDate":"2021-09-14"},{"lineNumber":114,"author":{"gitId":"Preshita01"},"content":"        if (deadlineString.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-09-14"},{"lineNumber":115,"author":{"gitId":"Preshita01"},"content":"            newDeadline.markAsDone(); // Mark the task as done if it has been completed","lastModifiedDate":"2021-09-14"},{"lineNumber":116,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":118,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":119,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":120,"author":{"gitId":"Preshita01"},"content":"     * Interprets the string from the user\u0027s task file that represents the event task and adds it to the task list.","lastModifiedDate":"2021-09-14"},{"lineNumber":121,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":122,"author":{"gitId":"Preshita01"},"content":"     * @param eventString the string from the user\u0027s task file that represents the event task","lastModifiedDate":"2021-09-14"},{"lineNumber":123,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":124,"author":{"gitId":"Preshita01"},"content":"    public void retrieveEvent(String eventString) {","lastModifiedDate":"2021-09-14"},{"lineNumber":125,"author":{"gitId":"Preshita01"},"content":"        int currIndex \u003d 7;","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":127,"author":{"gitId":"Preshita01"},"content":"        // Find \u0027at: \u0027 which separates the task description and timings","lastModifiedDate":"2021-09-06"},{"lineNumber":128,"author":{"gitId":"Preshita01"},"content":"        while (!eventString.substring(currIndex).startsWith(\"at: \")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":129,"author":{"gitId":"Preshita01"},"content":"            assert !(currIndex \u003d\u003d this.filePath.length() - 1) : \"Filepath is invalid\"; // If \u0027at: \u0027 not found","lastModifiedDate":"2021-09-14"},{"lineNumber":130,"author":{"gitId":"Preshita01"},"content":"            currIndex++;","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":133,"author":{"gitId":"Preshita01"},"content":"        String description \u003d \" \" + eventString.substring(7, currIndex - 2);","lastModifiedDate":"2021-09-14"},{"lineNumber":134,"author":{"gitId":"Preshita01"},"content":"        String by \u003d eventString.substring(currIndex + 4, eventString.length() - 1);","lastModifiedDate":"2021-09-14"},{"lineNumber":135,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":136,"author":{"gitId":"Preshita01"},"content":"        Task newEvent \u003d new Event(description, by); // Create new event task","lastModifiedDate":"2021-09-14"},{"lineNumber":137,"author":{"gitId":"Preshita01"},"content":"        TaskList.addTask(newEvent); // Add the event task to the task list","lastModifiedDate":"2021-09-14"},{"lineNumber":138,"author":{"gitId":"Preshita01"},"content":"        if (eventString.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-09-14"},{"lineNumber":139,"author":{"gitId":"Preshita01"},"content":"            newEvent.markAsDone(); // Mark the task as done if it has been completed","lastModifiedDate":"2021-09-14"},{"lineNumber":140,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":143,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":144,"author":{"gitId":"Preshita01"},"content":"     * Retrieves the list of notes from the user\u0027s hard disk and displays it to the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":145,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":146,"author":{"gitId":"Preshita01"},"content":"     * @throws FileNotFoundException if the file (\u0027notes.txt\u0027) containing the list of tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":147,"author":{"gitId":"Preshita01"},"content":"     * cannot be found","lastModifiedDate":"2021-09-14"},{"lineNumber":148,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":149,"author":{"gitId":"Preshita01"},"content":"    public void retrieveNotesFileContents() throws FileNotFoundException {","lastModifiedDate":"2021-09-14"},{"lineNumber":150,"author":{"gitId":"Preshita01"},"content":"        File f \u003d new File(this.filePath); // Create a File for the given file path","lastModifiedDate":"2021-09-14"},{"lineNumber":151,"author":{"gitId":"Preshita01"},"content":"        Scanner s \u003d new Scanner(f); // Create a Scanner using the File as the source","lastModifiedDate":"2021-09-14"},{"lineNumber":152,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":153,"author":{"gitId":"Preshita01"},"content":"        // If retrieving user tasks","lastModifiedDate":"2021-09-14"},{"lineNumber":154,"author":{"gitId":"Preshita01"},"content":"        if (this.filePath.equals(\"data/notes.txt\")) {","lastModifiedDate":"2021-09-14"},{"lineNumber":155,"author":{"gitId":"Preshita01"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":156,"author":{"gitId":"Preshita01"},"content":"                String currLine \u003d s.nextLine();","lastModifiedDate":"2021-09-06"},{"lineNumber":157,"author":{"gitId":"Preshita01"},"content":"                currLine \u003d currLine.substring(2);","lastModifiedDate":"2021-09-06"},{"lineNumber":158,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"Preshita01"},"content":"                StringBuilder title \u003d new StringBuilder();","lastModifiedDate":"2021-09-14"},{"lineNumber":160,"author":{"gitId":"Preshita01"},"content":"                String body;","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"Preshita01"},"content":"                int index \u003d 0;","lastModifiedDate":"2021-09-06"},{"lineNumber":163,"author":{"gitId":"Preshita01"},"content":"                //Finding the \u0027:\u0027 that separates the note title and body","lastModifiedDate":"2021-09-06"},{"lineNumber":164,"author":{"gitId":"Preshita01"},"content":"                while (index \u003c currLine.length() \u0026\u0026","lastModifiedDate":"2021-09-06"},{"lineNumber":165,"author":{"gitId":"Preshita01"},"content":"                        !currLine.substring(index).startsWith(\":\")) {","lastModifiedDate":"2021-09-06"},{"lineNumber":166,"author":{"gitId":"Preshita01"},"content":"                    assert !(index \u003d\u003d filePath.length() - 1) : \"Filepath is invalid\"; //If \u0027:\u0027 not found","lastModifiedDate":"2021-09-06"},{"lineNumber":167,"author":{"gitId":"Preshita01"},"content":"                    title.append(currLine.substring(index, index + 1));","lastModifiedDate":"2021-09-14"},{"lineNumber":168,"author":{"gitId":"Preshita01"},"content":"                    index++;","lastModifiedDate":"2021-09-06"},{"lineNumber":169,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-09-06"},{"lineNumber":170,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":171,"author":{"gitId":"Preshita01"},"content":"                //If title and body can be extracted successfully","lastModifiedDate":"2021-09-06"},{"lineNumber":172,"author":{"gitId":"Preshita01"},"content":"                body \u003d currLine.substring(index + 1);","lastModifiedDate":"2021-09-06"},{"lineNumber":173,"author":{"gitId":"Preshita01"},"content":"                Note newNote \u003d new Note(title.toString(), body);","lastModifiedDate":"2021-09-14"},{"lineNumber":174,"author":{"gitId":"Preshita01"},"content":"                NoteList.addNote(newNote);","lastModifiedDate":"2021-09-06"},{"lineNumber":175,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":176,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":177,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"Preshita01"},"content":"     * Writes to the file in user\u0027s hard disk that stores a list of tasks or to overwrite","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"Preshita01"},"content":"     * the contents of this file.","lastModifiedDate":"2021-09-14"},{"lineNumber":182,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":183,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to the file","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"Preshita01"},"content":"     * @param textToAdd the content that is to be written","lastModifiedDate":"2021-09-13"},{"lineNumber":185,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in writing to/overwriting the file","lastModifiedDate":"2021-09-13"},{"lineNumber":186,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":187,"author":{"gitId":"Preshita01"},"content":"    public static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"Preshita01"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-13"},{"lineNumber":189,"author":{"gitId":"Preshita01"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2021-09-13"},{"lineNumber":190,"author":{"gitId":"Preshita01"},"content":"        fw.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":191,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":192,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":193,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":194,"author":{"gitId":"Preshita01"},"content":"     * Appends content to the file in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":195,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":196,"author":{"gitId":"Preshita01"},"content":"     * @param filePath the relative path to the file","lastModifiedDate":"2021-09-13"},{"lineNumber":197,"author":{"gitId":"Preshita01"},"content":"     * @param textToAppend the content that is to be appended","lastModifiedDate":"2021-09-13"},{"lineNumber":198,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending to existing content of the file","lastModifiedDate":"2021-09-13"},{"lineNumber":199,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":200,"author":{"gitId":"Preshita01"},"content":"    public static void appendToFile(String filePath, String textToAppend) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":201,"author":{"gitId":"Preshita01"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode","lastModifiedDate":"2021-09-13"},{"lineNumber":202,"author":{"gitId":"Preshita01"},"content":"        fw.write(textToAppend);","lastModifiedDate":"2021-09-13"},{"lineNumber":203,"author":{"gitId":"Preshita01"},"content":"        fw.close();","lastModifiedDate":"2021-09-13"},{"lineNumber":204,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":205,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":206,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":207,"author":{"gitId":"Preshita01"},"content":"     * Appends a task to the end of a task file stored in the user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":208,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":209,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending to existing content of the file","lastModifiedDate":"2021-09-13"},{"lineNumber":210,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":211,"author":{"gitId":"Preshita01"},"content":"    public static void appendToTaskFile() throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":212,"author":{"gitId":"Preshita01"},"content":"        Storage.appendToFile(\"data/jarvis.txt\", (TaskList.getCounter()) + \".\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":213,"author":{"gitId":"Preshita01"},"content":"                TaskList.getTaskList().get(TaskList.getCounter() - 1).toPrintToFile()","lastModifiedDate":"2021-09-13"},{"lineNumber":214,"author":{"gitId":"Preshita01"},"content":"                + System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":215,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":216,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":217,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":218,"author":{"gitId":"Preshita01"},"content":"     * Appends a note to the end of a task file stored in the user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":219,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":220,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending to existing content of the file","lastModifiedDate":"2021-09-13"},{"lineNumber":221,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":222,"author":{"gitId":"Preshita01"},"content":"    public static void appendToNoteFile() throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":223,"author":{"gitId":"Preshita01"},"content":"        Storage.appendToFile(\"data/notes.txt\", (NoteList.getCounter()) + \".\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":224,"author":{"gitId":"Preshita01"},"content":"                NoteList.getNoteList().get(NoteList.getCounter() - 1).toPrintToFile()","lastModifiedDate":"2021-09-13"},{"lineNumber":225,"author":{"gitId":"Preshita01"},"content":"                + System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":226,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":227,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":228,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":229,"author":{"gitId":"Preshita01"},"content":"     * Rewrites the task file after any changes made to the TaskList.","lastModifiedDate":"2021-09-13"},{"lineNumber":230,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":231,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in re-writing the list of tasks without the","lastModifiedDate":"2021-09-13"},{"lineNumber":232,"author":{"gitId":"Preshita01"},"content":"     * deleted task","lastModifiedDate":"2021-09-13"},{"lineNumber":233,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":234,"author":{"gitId":"Preshita01"},"content":"    public static void rewriteTaskFile() throws IOException{","lastModifiedDate":"2021-09-13"},{"lineNumber":235,"author":{"gitId":"Preshita01"},"content":"        if (TaskList.getTaskList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":236,"author":{"gitId":"Preshita01"},"content":"            Storage.writeToFile(\"data/jarvis.txt\", \"\");","lastModifiedDate":"2021-09-13"},{"lineNumber":237,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":238,"author":{"gitId":"Preshita01"},"content":"            for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":239,"author":{"gitId":"Preshita01"},"content":"                if (i \u003d\u003d 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":240,"author":{"gitId":"Preshita01"},"content":"                    Storage.writeToFile(\"data/jarvis.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":241,"author":{"gitId":"Preshita01"},"content":"                            TaskList.getTaskList().get(i).toPrintToFile()","lastModifiedDate":"2021-09-13"},{"lineNumber":242,"author":{"gitId":"Preshita01"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":243,"author":{"gitId":"Preshita01"},"content":"                } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":244,"author":{"gitId":"Preshita01"},"content":"                    Storage.appendToFile(\"data/jarvis.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":245,"author":{"gitId":"Preshita01"},"content":"                            TaskList.getTaskList().get(i).toPrintToFile()","lastModifiedDate":"2021-09-13"},{"lineNumber":246,"author":{"gitId":"Preshita01"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":247,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-09-13"},{"lineNumber":248,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":249,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":250,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":251,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":252,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":253,"author":{"gitId":"Preshita01"},"content":"     * Rewrites the note file after any changes made to the NoteList.","lastModifiedDate":"2021-09-14"},{"lineNumber":254,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":255,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in re-writing the list of tasks without the","lastModifiedDate":"2021-09-13"},{"lineNumber":256,"author":{"gitId":"Preshita01"},"content":"     * deleted task","lastModifiedDate":"2021-09-13"},{"lineNumber":257,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":258,"author":{"gitId":"Preshita01"},"content":"    public static void rewriteNoteFile() throws IOException{","lastModifiedDate":"2021-09-13"},{"lineNumber":259,"author":{"gitId":"Preshita01"},"content":"        if (NoteList.getNoteList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":260,"author":{"gitId":"Preshita01"},"content":"            Storage.writeToFile(\"data/notes.txt\", \"\");","lastModifiedDate":"2021-09-13"},{"lineNumber":261,"author":{"gitId":"Preshita01"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":262,"author":{"gitId":"Preshita01"},"content":"            for (int i \u003d 0; i \u003c NoteList.getNoteList().size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":263,"author":{"gitId":"Preshita01"},"content":"                if (i \u003d\u003d 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":264,"author":{"gitId":"Preshita01"},"content":"                    Storage.writeToFile(\"data/notes.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":265,"author":{"gitId":"Preshita01"},"content":"                            NoteList.getNoteList().get(i).toPrintToFile()","lastModifiedDate":"2021-09-13"},{"lineNumber":266,"author":{"gitId":"Preshita01"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":267,"author":{"gitId":"Preshita01"},"content":"                } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":268,"author":{"gitId":"Preshita01"},"content":"                    Storage.appendToFile(\"data/notes.txt\", (i + 1) + \".\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":269,"author":{"gitId":"Preshita01"},"content":"                            NoteList.getNoteList().get(i).toPrintToFile()","lastModifiedDate":"2021-09-13"},{"lineNumber":270,"author":{"gitId":"Preshita01"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2021-09-13"},{"lineNumber":271,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-09-13"},{"lineNumber":272,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":273,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":274,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":275,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":275}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Class to create tasks (including deadline, event and todo tasks)","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"    protected String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     * Creates a task.","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"     * @param description The name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        assert !(description.equals(\"\")) : \"Task description is empty\";","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"     * Returns a status icon to indicate if a task has been completed.","lastModifiedDate":"2021-09-14"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     * @return \"[X]\" if completed and \"[ ]\" otherwise","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     * Marks a given task as completed.","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"        assert !(this.description.equals(\"\")) : \"Task description is empty.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"        return this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"        return this.getStatusIcon() + this.description;","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"     * @return the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"        return this.getStatusIcon() + this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":68}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" * Contains the task list and all relevant list methods","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    private static ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    private static int counter;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"     * Creates the taskList and a counter to keep track of the number of tasks saved in the user\u0027s","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * hard disk at any point in time.","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        taskList \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        counter \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     * Returns the taskList.","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"     * @return the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    public static ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"        assert (taskList.size() \u003d\u003d 100) : \"Task list array has not been created.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"        return TaskList.taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     * Returns the number of tasks currently save in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"     * @return the number of tasks currently save in user\u0027s hard disk (counter member)","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    public static int getCounter() {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"        assert (taskList.size() \u003d\u003d 100) : \"Task list array has not been created.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"        return TaskList.counter;","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     * Adds a task to the taskList.","lastModifiedDate":"2021-09-14"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"     * @param currTask the task that is to be added to the taskList","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    public static void addTask(Task currTask) {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"        assert (taskList.size() \u003d\u003d 100) : \"Task list array has not been created.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"        // Add the new task to the task list and increment the number of tasks by 1","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"        TaskList.taskList.add(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"        TaskList.counter++;","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"     * Adds a task to the taskList and update the list of tasks in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"     * @param currTask the task that is to be added","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in appending the task to the list of tasks","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"     * in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"    public static String addTaskAndUpdate(Task currTask) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"        assert (taskList.size() \u003d\u003d 100) : \"Task list array has not been created.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"        // Add the new task to the task list and increment the number of tasks by 1","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"        TaskList.taskList.add(currTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"        TaskList.counter++;","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"        Storage.appendToTaskFile(); //Append the new task to the task file","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"        return Ui.taskAdded(currTask); //Output to be printed to the user by Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"     * Deletes a task to the taskList and update the list of tasks in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"     * @param taskNum Number of the task that is to be deleted","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error in re-writing the list of tasks without the","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"     * deleted task","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"    public static String deleteTaskAndUpdate(int taskNum) throws IOException {","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"        assert (taskList.size() \u003d\u003d 100) : \"Task list array has not been created.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"        // Delete the task and decrement the number of tasks in the task list by 1","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"        Task currTask \u003d TaskList.getTaskList().get(taskNum);","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"        TaskList.getTaskList().remove(currTask);","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"        TaskList.counter--;","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"        Storage.rewriteTaskFile(); // Rewrite the task file to remove the deleted task","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"        return Ui.taskDeleted(currTask);","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"     * Marks a given task as completed and to update its status icon in the list of tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"     * in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"     * @throws IOException if there is an error when overwriting/appending to the contents of","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"     * the file","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"    public static String markAsDoneAndUpdate(int taskNum) throws IOException{","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"        TaskList.getTaskList().get(taskNum).isDone \u003d true; // Mark the task as done","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"        Storage.rewriteTaskFile(); // Rewrite the task file to store the newly done task","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"        return Ui.taskDone(taskNum); // Display output by Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":107}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":" * Class to create todo tasks (tasks with no specific deadline)","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"     * Creates a todo task.","lastModifiedDate":"2021-09-14"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"     * @param description the name/description of the task","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"        assert !(description.equals(\"\")) : \"Todo description is empty\";","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be displayed to the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"     * @return the given task as a string that is to be displayed to the user","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"     * Returns the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"     * @return the task as a string that is to be appended to the contents of the list of","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * tasks in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    public String toPrintToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":38}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":" * Deals with interactions with the user","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"public class Ui {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"    public static final String NO_TASKS \u003d \"There are currently no tasks on your list :)\";","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    public static final String NO_NOTES \u003d \"There are currently no notes on your list!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    public static final String BYE \u003d \"Bye! Hope to see you soon :)\";","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    // Error messages by Jarvis for todo task related errors","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"    public static final String EMPTY_TODO_DESCRIPTION \u003d \"Oops! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    // Error messages by Jarvis for deadline task related errors","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"    public static final String EMPTY_DEADLINE_DESCRIPTION \u003d \"Oops! The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    public static final String INCOMPLETE_DEADLINE \u003d \"I think you forgot to key in your deadline! Please key it\" +","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"            \" in as dd/mm/yyyy hh:mm (in 24 hours format)\";","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    public static final String WRONGLY_FORMATTED_DEADLINE_TIME \u003d \"Please include the time in the 24 hour format \" +","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"            \"(e.g. 15:00)\";","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    // Error messages by Jarvis for event task related errors","lastModifiedDate":"2021-09-14"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    public static final String EMPTY_EVENT_DESCRIPTION \u003d \"Oops! The description of an event cannot be empty.\";","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"    public static final String INCOMPLETE_EVENT_TIMINGS \u003d \"I think you forgot to key in your event timings!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"    public static final String WRONGLY_FORMATTED_EVENT_TIMINGS \u003d \"Please include the start and end times in the 24 \" +","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"            \"hour format (e.g. 15:00-16:00)\";","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    // Error messages by Jarvis for other errors","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"    public static final String UNRECOGNISED_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means :(\";","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"    public static final String WRONGLY_FORMATTED_DATE \u003d \"Please format the date as dd/mm/yyy\";","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    // Error messages by Jarvis for notes related errors","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"    public static final String WRONGLY_FORMATTED_NOTE \u003d \"Oops, the note is formatted incorrectly! Please write it as \" +","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"            \"title /body\";","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"     * Displays Jarvis\u0027 first greeting when user opens the application.","lastModifiedDate":"2021-09-14"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     * @return Jarvis\u0027 greeting to the user","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"    public static String firstGreeting() {","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"        return \"Hi! I am Jarvis, your personal assistant :) What can I do for you?\";","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"     * Displays the error message when the task number keyed in by the user is invalid.","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     * @param userInput The task number keyed in by the user","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"     * @return The error message","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"    public static String invalidTaskNum(int userInput) {","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"        return \"Hmm, I don\u0027t have task \" + (userInput + 1) + \" in my list. Please key in \u0027list\u0027 if you\u0027d like to \" +","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"                \"view your list of tasks again!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"Preshita01"},"content":"     * Displays the response by Jarvis when a task has been successfully added.","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"Preshita01"},"content":"     * @param newTask The newly added task","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"Preshita01"},"content":"     * @return The confirmation message","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"Preshita01"},"content":"    public static String taskAdded(Task newTask) {","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"Preshita01"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Got it! I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"\\t\" + newTask.toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Now you have \" + TaskList.getCounter() + \" task(s) in the list.\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"Preshita01"},"content":"        return response;","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"Preshita01"},"content":"     * Displays the response by Jarvis when the task is done.","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":76,"author":{"gitId":"Preshita01"},"content":"     * @param taskNum The number of the task that was completed","lastModifiedDate":"2021-09-14"},{"lineNumber":77,"author":{"gitId":"Preshita01"},"content":"     * @return The message to be displayed when a task is done","lastModifiedDate":"2021-09-14"},{"lineNumber":78,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"Preshita01"},"content":"    public static String taskDone(int taskNum) {","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"Preshita01"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Good job! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"\\t\" + TaskList.getTaskList().get(taskNum).toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"Preshita01"},"content":"        return response;","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"Preshita01"},"content":"     * Displays the response by Jarvis when the task is deleted.","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":89,"author":{"gitId":"Preshita01"},"content":"     * @param task The task that was deleted","lastModifiedDate":"2021-09-14"},{"lineNumber":90,"author":{"gitId":"Preshita01"},"content":"     * @return The message to be displayed when a task is deleted","lastModifiedDate":"2021-09-14"},{"lineNumber":91,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"Preshita01"},"content":"    public static String taskDeleted(Task task) {","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"Preshita01"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Noted. I\u0027ve removed this task from your main list:\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"\\t\" + task.toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Now you have \" + TaskList.getCounter() + \" task(s) in the list.\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"Preshita01"},"content":"        return response;","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"Preshita01"},"content":"     * Returns a list of tasks saved by Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"Preshita01"},"content":"     * @return a list of tasks save by Jarvis","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"Preshita01"},"content":"    public static String listTasks() {","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\\t\" + Ui.NO_TASKS; // If there are no tasks in the list","lastModifiedDate":"2021-09-13"},{"lineNumber":108,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":109,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"Preshita01"},"content":"            if (i \u003d\u003d 0) {","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"Preshita01"},"content":"                result \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":113,"author":{"gitId":"Preshita01"},"content":"            result +\u003d num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\"; //Print the task","lastModifiedDate":"2021-09-13"},{"lineNumber":114,"author":{"gitId":"Preshita01"},"content":"            num++;","lastModifiedDate":"2021-09-13"},{"lineNumber":115,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":116,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":119,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"Preshita01"},"content":"     * Returns the list of tasks set for/due today and all todo tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":122,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":123,"author":{"gitId":"Preshita01"},"content":"     * @return the list of tasks set for/due today and all todo tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":124,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"Preshita01"},"content":"    public static String listTodayTasks() {","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":127,"author":{"gitId":"Preshita01"},"content":"        result +\u003d \"Tasks scheduled for today are: \\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":128,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":129,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":130,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":131,"author":{"gitId":"Preshita01"},"content":"            //If the task is a todo, include it in today\u0027s list of tasks","lastModifiedDate":"2021-09-13"},{"lineNumber":132,"author":{"gitId":"Preshita01"},"content":"            if (TaskList.getTaskList().get(i) instanceof Todo) {","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":134,"author":{"gitId":"Preshita01"},"content":"                num++;","lastModifiedDate":"2021-09-13"},{"lineNumber":135,"author":{"gitId":"Preshita01"},"content":"            } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":136,"author":{"gitId":"Preshita01"},"content":"                // Retrieve the current year, month and date","lastModifiedDate":"2021-09-13"},{"lineNumber":137,"author":{"gitId":"Preshita01"},"content":"                int currYear \u003d LocalDateTime.now().getYear();","lastModifiedDate":"2021-09-13"},{"lineNumber":138,"author":{"gitId":"Preshita01"},"content":"                int currMonth \u003d LocalDateTime.now().getMonthValue();","lastModifiedDate":"2021-09-13"},{"lineNumber":139,"author":{"gitId":"Preshita01"},"content":"                int currDate \u003d LocalDateTime.now().getDayOfMonth();","lastModifiedDate":"2021-09-13"},{"lineNumber":140,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":141,"author":{"gitId":"Preshita01"},"content":"                // Create a LocalDateTime object to represent start and end times of the day","lastModifiedDate":"2021-09-13"},{"lineNumber":142,"author":{"gitId":"Preshita01"},"content":"                LocalDateTime start \u003d LocalDateTime.of(currYear, currMonth, currDate, 0, 0);","lastModifiedDate":"2021-09-13"},{"lineNumber":143,"author":{"gitId":"Preshita01"},"content":"                LocalDateTime end \u003d LocalDateTime.of(currYear, currMonth, currDate, 23, 59);","lastModifiedDate":"2021-09-13"},{"lineNumber":144,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":145,"author":{"gitId":"Preshita01"},"content":"                // If it is a deadline task","lastModifiedDate":"2021-09-13"},{"lineNumber":146,"author":{"gitId":"Preshita01"},"content":"                if (TaskList.getTaskList().get(i) instanceof Deadline) {","lastModifiedDate":"2021-09-13"},{"lineNumber":147,"author":{"gitId":"Preshita01"},"content":"                    //Check if the deadline is after the day starts","lastModifiedDate":"2021-09-13"},{"lineNumber":148,"author":{"gitId":"Preshita01"},"content":"                    boolean deadlineIsAfterDayStarts \u003d","lastModifiedDate":"2021-09-13"},{"lineNumber":149,"author":{"gitId":"Preshita01"},"content":"                            (((Deadline) TaskList.getTaskList().get(i)).getDeadline()).isAfter(start);","lastModifiedDate":"2021-09-13"},{"lineNumber":150,"author":{"gitId":"Preshita01"},"content":"                    // Check if the deadline is before the day end","lastModifiedDate":"2021-09-13"},{"lineNumber":151,"author":{"gitId":"Preshita01"},"content":"                    boolean deadlineIsBeforeDayEnds \u003d","lastModifiedDate":"2021-09-13"},{"lineNumber":152,"author":{"gitId":"Preshita01"},"content":"                            (((Deadline) TaskList.getTaskList().get(i)).getDeadline()).isBefore(end);","lastModifiedDate":"2021-09-13"},{"lineNumber":153,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":154,"author":{"gitId":"Preshita01"},"content":"                    if (deadlineIsAfterDayStarts \u0026\u0026 deadlineIsBeforeDayEnds) {","lastModifiedDate":"2021-09-13"},{"lineNumber":155,"author":{"gitId":"Preshita01"},"content":"                        result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":156,"author":{"gitId":"Preshita01"},"content":"                        num++;","lastModifiedDate":"2021-09-13"},{"lineNumber":157,"author":{"gitId":"Preshita01"},"content":"                    }","lastModifiedDate":"2021-09-13"},{"lineNumber":158,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":159,"author":{"gitId":"Preshita01"},"content":"                // If the event start and end times fall in between the start and end times of the day, add it to the","lastModifiedDate":"2021-09-13"},{"lineNumber":160,"author":{"gitId":"Preshita01"},"content":"                // list of tasks for the day","lastModifiedDate":"2021-09-13"},{"lineNumber":161,"author":{"gitId":"Preshita01"},"content":"                } else if (TaskList.getTaskList().get(i) instanceof Event) {","lastModifiedDate":"2021-09-13"},{"lineNumber":162,"author":{"gitId":"Preshita01"},"content":"                    //Check if the event starts after the day starts","lastModifiedDate":"2021-09-13"},{"lineNumber":163,"author":{"gitId":"Preshita01"},"content":"                    boolean eventIsAfterDayStarts \u003d","lastModifiedDate":"2021-09-13"},{"lineNumber":164,"author":{"gitId":"Preshita01"},"content":"                            (((Event) TaskList.getTaskList().get(i)).getEventStart()).isAfter(start);","lastModifiedDate":"2021-09-13"},{"lineNumber":165,"author":{"gitId":"Preshita01"},"content":"                    //Check if the event ends before the day end","lastModifiedDate":"2021-09-13"},{"lineNumber":166,"author":{"gitId":"Preshita01"},"content":"                    boolean eventIsBeforeDayEnds \u003d","lastModifiedDate":"2021-09-13"},{"lineNumber":167,"author":{"gitId":"Preshita01"},"content":"                            (((Event) TaskList.getTaskList().get(i)).getEventEnd()).isBefore(end);","lastModifiedDate":"2021-09-13"},{"lineNumber":168,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":169,"author":{"gitId":"Preshita01"},"content":"                    if (eventIsAfterDayStarts \u0026\u0026 eventIsBeforeDayEnds) {","lastModifiedDate":"2021-09-13"},{"lineNumber":170,"author":{"gitId":"Preshita01"},"content":"                        result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":171,"author":{"gitId":"Preshita01"},"content":"                        num++;","lastModifiedDate":"2021-09-13"},{"lineNumber":172,"author":{"gitId":"Preshita01"},"content":"                    }","lastModifiedDate":"2021-09-13"},{"lineNumber":173,"author":{"gitId":"Preshita01"},"content":"                }","lastModifiedDate":"2021-09-13"},{"lineNumber":174,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":175,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":176,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":177,"author":{"gitId":"Preshita01"},"content":"        // If there are no tasks for today","lastModifiedDate":"2021-09-13"},{"lineNumber":178,"author":{"gitId":"Preshita01"},"content":"        if (num \u003d\u003d 1) {","lastModifiedDate":"2021-09-13"},{"lineNumber":179,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\tLooks like there is nothing due today!\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":180,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":181,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-09-13"},{"lineNumber":182,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":183,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":185,"author":{"gitId":"Preshita01"},"content":"     * Returns the list of tasks that matches the searchPhrase.","lastModifiedDate":"2021-09-14"},{"lineNumber":186,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":187,"author":{"gitId":"Preshita01"},"content":"     * @param searchPhrase The key word/phrase that the user inputs for the search","lastModifiedDate":"2021-09-13"},{"lineNumber":188,"author":{"gitId":"Preshita01"},"content":"     * @return list of tasks that matches the searchPhrase","lastModifiedDate":"2021-09-13"},{"lineNumber":189,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":190,"author":{"gitId":"Preshita01"},"content":"    public static String findTasks(String searchPhrase) {","lastModifiedDate":"2021-09-13"},{"lineNumber":191,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":192,"author":{"gitId":"Preshita01"},"content":"        result +\u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":193,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":194,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":195,"author":{"gitId":"Preshita01"},"content":"        // Extract the search word/phrase","lastModifiedDate":"2021-09-13"},{"lineNumber":196,"author":{"gitId":"Preshita01"},"content":"        searchPhrase \u003d searchPhrase.substring(5);","lastModifiedDate":"2021-09-13"},{"lineNumber":197,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":198,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c TaskList.getTaskList().size(); i++) {","lastModifiedDate":"2021-09-13"},{"lineNumber":199,"author":{"gitId":"Preshita01"},"content":"            // Check if the search word/phrase is contained in the task description","lastModifiedDate":"2021-09-13"},{"lineNumber":200,"author":{"gitId":"Preshita01"},"content":"            if (TaskList.getTaskList().get(i).getDescription().contains(searchPhrase)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":201,"author":{"gitId":"Preshita01"},"content":"                result +\u003d \"\\t\" + num + \".\" + TaskList.getTaskList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":202,"author":{"gitId":"Preshita01"},"content":"                num++;","lastModifiedDate":"2021-09-13"},{"lineNumber":203,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-13"},{"lineNumber":204,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":205,"author":{"gitId":"Preshita01"},"content":"        // If there are no matching results","lastModifiedDate":"2021-09-13"},{"lineNumber":206,"author":{"gitId":"Preshita01"},"content":"        if (num \u003d\u003d 1) {","lastModifiedDate":"2021-09-13"},{"lineNumber":207,"author":{"gitId":"Preshita01"},"content":"            result +\u003d \"\\tNo matching results found!\\n\";","lastModifiedDate":"2021-09-13"},{"lineNumber":208,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":209,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-09-13"},{"lineNumber":210,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":212,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":213,"author":{"gitId":"Preshita01"},"content":"     * Displays the error message when the note number keyed in by the user is invalid.","lastModifiedDate":"2021-09-14"},{"lineNumber":214,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":215,"author":{"gitId":"Preshita01"},"content":"     * @param userInput The note number keyed in by the user","lastModifiedDate":"2021-09-14"},{"lineNumber":216,"author":{"gitId":"Preshita01"},"content":"     * @return The error message","lastModifiedDate":"2021-09-14"},{"lineNumber":217,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":218,"author":{"gitId":"Preshita01"},"content":"    public static String invalidNoteNum(int userInput) {","lastModifiedDate":"2021-09-14"},{"lineNumber":219,"author":{"gitId":"Preshita01"},"content":"        return \"Hmm, I don\u0027t have note \" + (userInput + 1) + \" in my list. Please key in \u0027notes\u0027 if you\u0027d like to \" +","lastModifiedDate":"2021-09-14"},{"lineNumber":220,"author":{"gitId":"Preshita01"},"content":"                \"view your list of notes again!\";","lastModifiedDate":"2021-09-14"},{"lineNumber":221,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":222,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":223,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":224,"author":{"gitId":"Preshita01"},"content":"     * Prints out the list of notes saved by Jarvis.","lastModifiedDate":"2021-09-14"},{"lineNumber":225,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":226,"author":{"gitId":"Preshita01"},"content":"    public static String listNotes() {","lastModifiedDate":"2021-09-14"},{"lineNumber":227,"author":{"gitId":"Preshita01"},"content":"        int num \u003d 1;","lastModifiedDate":"2021-09-14"},{"lineNumber":228,"author":{"gitId":"Preshita01"},"content":"        String result \u003d \"\\t\" + Ui.NO_NOTES;","lastModifiedDate":"2021-09-14"},{"lineNumber":229,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":230,"author":{"gitId":"Preshita01"},"content":"        for (int i \u003d 0; i \u003c NoteList.getNoteList().size(); i++) {","lastModifiedDate":"2021-09-14"},{"lineNumber":231,"author":{"gitId":"Preshita01"},"content":"            if (i \u003d\u003d 0) {","lastModifiedDate":"2021-09-14"},{"lineNumber":232,"author":{"gitId":"Preshita01"},"content":"                result \u003d \"\";","lastModifiedDate":"2021-09-14"},{"lineNumber":233,"author":{"gitId":"Preshita01"},"content":"            }","lastModifiedDate":"2021-09-14"},{"lineNumber":234,"author":{"gitId":"Preshita01"},"content":"            result +\u003d num + \". \" + NoteList.getNoteList().get(i).toString() + \"\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":235,"author":{"gitId":"Preshita01"},"content":"            num++;","lastModifiedDate":"2021-09-14"},{"lineNumber":236,"author":{"gitId":"Preshita01"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":237,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":238,"author":{"gitId":"Preshita01"},"content":"        return result;","lastModifiedDate":"2021-09-14"},{"lineNumber":239,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":240,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":241,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":242,"author":{"gitId":"Preshita01"},"content":"     * Displays the response by Jarvis when the note is added.","lastModifiedDate":"2021-09-14"},{"lineNumber":243,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":244,"author":{"gitId":"Preshita01"},"content":"     * @param newNote The note that was added","lastModifiedDate":"2021-09-14"},{"lineNumber":245,"author":{"gitId":"Preshita01"},"content":"     * @return The message to be displayed when a note is added","lastModifiedDate":"2021-09-14"},{"lineNumber":246,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":247,"author":{"gitId":"Preshita01"},"content":"    public static String noteAdded(Note newNote) {","lastModifiedDate":"2021-09-14"},{"lineNumber":248,"author":{"gitId":"Preshita01"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-09-14"},{"lineNumber":249,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Got it! I\u0027ve added this note:\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":250,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"\\t\" + newNote.toString() + \"\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":251,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Now you have \" + NoteList.getCounter() + \" note(s) in the list.\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":252,"author":{"gitId":"Preshita01"},"content":"        return response;","lastModifiedDate":"2021-09-14"},{"lineNumber":253,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":254,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":255,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":256,"author":{"gitId":"Preshita01"},"content":"     * Displays the response by Jarvis when the note is deleted.","lastModifiedDate":"2021-09-14"},{"lineNumber":257,"author":{"gitId":"Preshita01"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":258,"author":{"gitId":"Preshita01"},"content":"     * @param note The note that was deleted","lastModifiedDate":"2021-09-14"},{"lineNumber":259,"author":{"gitId":"Preshita01"},"content":"     * @return The message to be displayed when a note is deleted","lastModifiedDate":"2021-09-14"},{"lineNumber":260,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":261,"author":{"gitId":"Preshita01"},"content":"    public static String noteDeleted(Note note) {","lastModifiedDate":"2021-09-14"},{"lineNumber":262,"author":{"gitId":"Preshita01"},"content":"        String response \u003d \"\";","lastModifiedDate":"2021-09-14"},{"lineNumber":263,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Noted. I\u0027ve removed this note from your notes list:\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":264,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"\\t\" + note.toString() + \"\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":265,"author":{"gitId":"Preshita01"},"content":"        response +\u003d \"Now you have \" + NoteList.getCounter() + \" notes(s) in the notes list.\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":266,"author":{"gitId":"Preshita01"},"content":"        return response;","lastModifiedDate":"2021-09-14"},{"lineNumber":267,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":268,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":268}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        \u003cInsets bottom\u003d\"7.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"7.0\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":18}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"\u003cAnchorPane fx:id\u003d\"anchorPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"            fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"Preshita01":25}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"import duke.Deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"import duke.Event;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"import duke.Todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":" * Class containing tests to check the correctness of the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"     * Checks if todo tasks are created correctly","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"    public void todoCreation_todoTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Todo(\" return book\").toString(), \"[T][ ] return book\");","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"Preshita01"},"content":"     * Checks if event tasks are created correctly","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Preshita01"},"content":"    public void eventCreation_eventTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Event(\" return book\", \"23/08/2021 16:00-20:00\").toString(),","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"Preshita01"},"content":"                \"[E][ ] return book (at: 23 Aug 2021 16:00 to 20:00)\");","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"Preshita01"},"content":"     * Checks if deadline tasks are displayed correctly to users","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Preshita01"},"content":"    public void deadlineCreation_deadlineTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Deadline(\" return book\", \"23/08/2021 17:00\").toString(),","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"Preshita01"},"content":"                \"[D][ ] return book (by: 23 Aug 2021 17:00)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"Preshita01"},"content":"     * Checks if deadline tasks are saved in the correct format in user\u0027s hard disk","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Preshita01"},"content":"    public void deadlinePrintToFile_deadlineTask_success(){","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Preshita01"},"content":"        assertEquals(new Deadline(\" return book\", \"23/08/2021 17:00\").toPrintToFile(),","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Preshita01"},"content":"                \"[D][ ] return book (by: 23/08/2021 17:00)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Preshita01"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Preshita01"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"Preshita01"},"content":"     * Checks if Parse.parseCommand() works correctly","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"Preshita01"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"Preshita01"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Preshita01"},"content":"    public void parseCommand_doneTask_success() {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Preshita01"},"content":"        assertEquals(Parser.parseCommand(\"done 1\"), \"done\");","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"Preshita01"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Preshita01"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Preshita01":56}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Preshita01"},"content":"todo read book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"Preshita01"},"content":"todo return book","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"Preshita01"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"Preshita01"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"Preshita01"},"content":"event watch movie /at Sat 9-11.30pm","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Preshita01"},"content":"todo buy groceries","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Preshita01"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Preshita01"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Preshita01"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"Preshita01"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"Preshita01"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"Preshita01"},"content":"deadline go fishing /by Friday","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Preshita01"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Preshita01"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Preshita01"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"Preshita01":18}}]

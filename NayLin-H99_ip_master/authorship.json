[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":" * The type Duke that is the main of the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** storage to handle save file (loading and saving) */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    /** storage to store tasks */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    /** handles basic interaction with the user and string formatting */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    private final UI ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Duke.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     * @param filePath the file path","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        this.ui \u003d new UI();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"        // Initialise Storage with the tasks storage and the filepath to the save file","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        this.storage \u003d new Storage(this.tasks, filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        // Loading save file from the filepath","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"            storage.load();","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"            System.out.println(","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"                    UI.tabAndFormat(","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"                            \"â˜¹ OOPS!!! Please enter a proper file path! e.g.:\\n\u0027./duke.txt\u0027\"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"                    )","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"            );","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"     * The entry point of application.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"     * @param args the input arguments","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"        new Duke(\"./duke.txt\").run();","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"     * Runs Duke.","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"    public void run() {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"        // Starting with a welcome message","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"            String input \u003d ui.readCommand();","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"            try {","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"                Command userCommand \u003d new Parser(input, tasks).checkOperation();","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"                userCommand.execute();","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"                isExit \u003d userCommand.isExit();","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"                storage.save();","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"            } catch (DukeException | IllegalArgumentException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"                System.out.println(UI.tabAndFormat(e.getMessage()));","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"NayLin-H99":71,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":" * The type Duke exception.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Duke exception.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"     * @param errorString the error string.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    public DukeException(String errorString) {","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"        super(errorString);","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":18}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.command.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":" * The type Parser that parses user input and returns the appropriate command.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"public class Parser {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    /** User-inputted string */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    /** List of tasks to pass to the commands */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Parser.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"     * @param userInput the user-inputted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks     list of tasks to pass to the commands generated.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    public Parser(String userInput, TaskList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"     * Checks operation command to be executed.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"     * @return the command to be executed.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"     * @throws DukeException the duke exception for unrecognised commands.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"    public final Command checkOperation() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"        // if it is \"bye\", we return false to indicate operation stoppage","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"        if (checkBye()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkList()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"            return new ListCommand(this.tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"            return new DoneCommand(userInput, tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkDelete()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"            return new DeleteCommand(userInput, tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkFind()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"            return new FindCommand(userInput, tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkTodo()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"            return new AddCommand(AddCommandType.todo, userInput, tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkEvent()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"            return new AddCommand(AddCommandType.event, userInput, tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"        } else if (checkDeadline()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"            return new AddCommand(AddCommandType.deadline, userInput, tasks);","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the exit command is to be executed.","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkBye() {","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"        return this.userInput.equals(\"bye\");","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the list command is to be executed.","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkList() {","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"        return this.userInput.equals(\"list\");","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the done command is to be executed.","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"NayLin-H99"},"content":"        Pattern donePattern \u003d Pattern.compile(\"^done\\\\h\\\\d+$\");","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"NayLin-H99"},"content":"        Matcher doneMatcher \u003d donePattern.matcher(this.userInput);","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"NayLin-H99"},"content":"        return doneMatcher.find();","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the delete command is to be executed.","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkDelete() {","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"NayLin-H99"},"content":"        Pattern deletePattern \u003d Pattern.compile(\"^delete\\\\h\\\\d+$\");","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"NayLin-H99"},"content":"        Matcher deleteMatcher \u003d deletePattern.matcher(this.userInput);","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"NayLin-H99"},"content":"        return deleteMatcher.find();","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the add command is to be executed for a Todo task.","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkTodo() {","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"NayLin-H99"},"content":"        Pattern todoPattern \u003d Pattern.compile(\"^todo\\\\h\\\\w.*\");","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"NayLin-H99"},"content":"        Matcher todoMatcher \u003d todoPattern.matcher(this.userInput);","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"NayLin-H99"},"content":"        return todoMatcher.find();","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the add command is to be executed for an Event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkEvent() {","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"NayLin-H99"},"content":"        Pattern eventPattern \u003d Pattern.compile(\"^event\\\\h\\\\w.*/at\\\\h\\\\w.*\");","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"NayLin-H99"},"content":"        Matcher eventMatcher \u003d eventPattern.matcher(this.userInput);","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"NayLin-H99"},"content":"        return eventMatcher.find();","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the add command is to be executed for a Deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkDeadline() {","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"NayLin-H99"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(\"^deadline\\\\h\\\\w.*/by\\\\h\\\\w.*\");","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"NayLin-H99"},"content":"        Matcher deadlineMatcher \u003d deadlinePattern.matcher(this.userInput);","lastModifiedDate":"2021-08-18"},{"lineNumber":130,"author":{"gitId":"NayLin-H99"},"content":"        return deadlineMatcher.find();","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the find command is to be executed for finding tasks with matching substrings.","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean.","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"NayLin-H99"},"content":"    private boolean checkFind() {","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"NayLin-H99"},"content":"        Pattern findPattern \u003d Pattern.compile(\"^find\\\\h\\\\w.*\");","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"NayLin-H99"},"content":"        Matcher findMatcher \u003d findPattern.matcher(this.userInput);","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"NayLin-H99"},"content":"        return findMatcher.find();","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":144,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"NayLin-H99":144}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":" * The type Storage to save and load data.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"public class Storage {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    /** filepath to save and load data from */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    /** list of tasks to save data to or to load data from */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks the tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    public Storage(TaskList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        // default save file filepath","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"        filePath \u003d \"./duke.txt\";","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks    the list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"     * @param filePath the file path.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"    public Storage(TaskList tasks, String filePath) {","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"     * Loads the data from the specified file path.","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"     * @throws IOException the io exception when the file path is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"    public void load() throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"        File saveFile \u003d new File(filePath);","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"        saveFile.createNewFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"        Scanner saveReader \u003d new Scanner(saveFile);","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"        while (saveReader.hasNextLine()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"            String inputRead \u003d saveReader.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"            String[] inputs \u003d inputRead.split(\"[|]\");","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"            switch (inputs[0]) {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"            case \"T\":","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"                tasks.add(new Todo(inputs[2]));","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"            case \"D\":","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"                if (inputs.length \u003d\u003d 4) {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"                    tasks.add(new Deadline(inputs[2], inputs[3]));","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"                    break;","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"                tasks.add(new Deadline(inputs[2], inputs[3], inputs[4]));","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"            case \"E\":","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"                if (inputs.length \u003d\u003d 4) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"                    tasks.add(new Event(inputs[2], inputs[3]));","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"                    break;","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"                tasks.add(new Event(inputs[2], inputs[3], inputs[4]));","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"NayLin-H99"},"content":"            if (inputs[1].equals(\"1\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"NayLin-H99"},"content":"                tasks.markDone(tasks.size() - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"NayLin-H99"},"content":"        saveReader.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"NayLin-H99"},"content":"     * Saves the date to the specified file path.","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"NayLin-H99"},"content":"     * @throws IOException the io exception when the file path is not valid.","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"NayLin-H99"},"content":"    public void save() throws IOException {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"NayLin-H99"},"content":"        FileWriter writer \u003d new FileWriter(filePath, false);","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"NayLin-H99"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"NayLin-H99"},"content":"            writer.write(tasks.get(i).databaseString() + \"\\n\");","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"NayLin-H99"},"content":"        writer.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":97}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":" * The type Ui that handles string formatting and basic interactions with the user.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"public class UI {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"    /** line separator */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    private static final String lineBreak \u003d \"\\t____________________________________________________________\\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** scanner for reading input */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"     * Formats string argument(s) sequentially with tab before and linebreak after each string.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"     * Output is sandwiched between two lineBreaks.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"     * @param one     one string.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     * @param strings any subsequent strings to be separated by linebreak.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"     * @return the formatted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    public static String formatString(String one, String... strings) {","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d lineBreak + \"\\t\" + one + \"\\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        for (String s : strings) {","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"            result +\u003d (\"\\t\" + s + \"\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d lineBreak;","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"     * Formats an array of string inputs sequentially with tab and linebreak after each string.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"     * Output is sandwiched between two lineBreaks.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"     * @param strings array of strings.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"     * @return the formatted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"    public static String formatString(String[] strings) {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d lineBreak;","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"        for (String s : strings) {","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"            if (s \u003d\u003d null) break;","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"            result +\u003d (\"\\t\" + s + \"\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d lineBreak;","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"     * Add a tab after every newline.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"     * @param str string input.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"     * @return the formatted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"    public static String tabAllNewline(String str) {","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"        return str.replace(\"\\n\", \"\\n\\t\");","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"     * Tab and format string.","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"     * @param str string input.","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"     * @return the formatted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"    public static String tabAndFormat(String str) {","lastModifiedDate":"2021-08-16"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"        return formatString(tabAllNewline(str));","lastModifiedDate":"2021-08-16"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"     * Show welcome message.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"        // Starting Message","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"        String[] startMessage \u003d {\" ____        _        \",","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"                \"|  _ \\\\ _   _| | _____ \",","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"NayLin-H99"},"content":"                \"| | | | | | | |/ / _ \\\\\",","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"NayLin-H99"},"content":"                \"| |_| | |_| |   \u003c  __/\",","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"NayLin-H99"},"content":"                \"|____/ \\\\__,_|_|\\\\_\\\\___|\",","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"NayLin-H99"},"content":"                \"Hello! I\u0027m Duke\",","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"NayLin-H99"},"content":"                \"What can I do for you?\"};","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(UI.formatString(startMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"NayLin-H99"},"content":"     * Reads a command string from user and trims it.","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"NayLin-H99"},"content":"     * @return user-inputted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"NayLin-H99"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"NayLin-H99"},"content":"        return sc.nextLine().trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":93}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.UI;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":" * The type Add command that adds a user-specified task to a given list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** Enum that specifies the type of task being added */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final AddCommandType addType;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    /** User inputted string */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    /** List of tasks to run the command on */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Add command.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     * @param addType   task type that is being added using AddCommand","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"     * @param userInput user-inputted string","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks     list tasks to add the new task to","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    public AddCommand(AddCommandType addType, String userInput, TaskList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"        this.addType \u003d addType;","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"    public void execute() {","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"        String[] inputs \u003d this.userInput.split(\" \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"            switch (this.addType) {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"            case todo: {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"                newTask \u003d new Todo(inputs[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"            case event: {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"                String[] args \u003d inputs[1].split(\" /at \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"                String[] datetimeArgs \u003d args[1].split(\" \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"                if (datetimeArgs.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"                    newTask \u003d new Event(args[0], args[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"                    newTask \u003d new Event(args[0], datetimeArgs[0], datetimeArgs[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"            case deadline: {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"                String[] args \u003d inputs[1].split(\" /by \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"                String[] datetimeArgs \u003d args[1].split(\" \", 2);","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"                if (datetimeArgs.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"                    newTask \u003d new Deadline(args[0], args[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"                    newTask \u003d new Deadline(args[0], datetimeArgs[0], datetimeArgs[1]);","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"            System.out.println(","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"                    UI.tabAndFormat(","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"                            \"â˜¹ OOPS!!! Please enter an appropriate date (and optionally, 24-hour time)\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"                                    \"Format: YYYY-MM-DD HH:MM\"","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"                    )","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"            );","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"            return;","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks.add(newTask);","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"        String returnString \u003d \"Got it. I\u0027ve added this task:\\n  \"","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"                + newTask.toString() + \"\\n\"","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"                + \"Now you have \" + tasks.size() + \" tasks in the list.\";","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(UI.tabAndFormat(returnString));","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":81}},{"path":"src/main/java/duke/command/AddCommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":" * Enum AddCommandType that specifies the type of tasks being added using AddCommand.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"public enum AddCommandType {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"    /** Todo task */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"    todo,","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"    /** Event task */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"    event,","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /** Deadline task */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    deadline","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":13}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":" * Abstract class Command superclasses all commands for Duke.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"    /** Method to execute the specific command. */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"    public abstract void execute();","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"     * Method to check if we are exiting the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"     * @return boolean that determines if we exit the program.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"        return false;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":19}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.UI;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" * The type Delete command that deletes a user-specified tasks from a given list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /** User inputted string */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** List of tasks to run the command on */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Delete command.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"     * @param userInput user-inputted string","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks     list of tasks to delete the user-specified task from","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    public DeleteCommand(String userInput, TaskList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    public void execute() {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        String[] inputs \u003d this.userInput.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        int ind \u003d Integer.valueOf(inputs[1]) - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"Noted. I\u0027ve removed this task:\\n  \" + tasks.get(ind).toString() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        tasks.delete(ind);","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(UI.tabAndFormat(result));","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":38}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.UI;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" * The type Done command that marks a user-specified task as done from a given list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /** User inputted string */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** List of tasks to run command on */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Done command.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"     * @param userInput user-inputted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks     list of tasks to mark a task done from.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    public DoneCommand(String userInput, TaskList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    public void execute() {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        String[] inputs \u003d this.userInput.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        int ind \u003d Integer.valueOf(inputs[1]) - 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"        tasks.markDone(ind);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"Nice! I\u0027ve marked this task as done:\\n  \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"                tasks.get(ind).toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(UI.tabAndFormat(result));","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":36}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.UI;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":" * The type Exit command that exits the program Duke.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    public void execute() {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"                UI.formatString(\"Bye. Hope to see you again soon!\")","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"        );","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"        return true;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":21}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.UI;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" * The type Find command that finds a user-inputted substring in the given list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /** Substring to search for in description of tasks */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    private final String substring;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** List of tasks to search from */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Find command.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"     * @param userInput the user-inputted string.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks     the list of tasks to search from.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    public FindCommand(String userInput, TaskList tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"        this.substring \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    public void execute() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"            if (tasks.get(i).getDescription().contains(this.substring)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"                result +\u003d \"\\n\" + i + \".\" + tasks.get(i).toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(UI.tabAndFormat(result));","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"NayLin-H99":37}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.UI;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" * The type List command that lists out all tasks from a given list of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /** List of tasks to run the command on */","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new List command.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"     * @param tasks list of tasks to list tasks from","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    public ListCommand(TaskList tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    public void execute() {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"        System.out.println(","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"                UI.tabAndFormat(this.tasks.toString())","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        );","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":29}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":" * The type Deadline that has a task description and a deadline date to complete the task by.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** Identifying tag \u0027D\u0027 for deadline task */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final String identifier \u003d \"D\";","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    /** Boolean flag to check if both Date and Time are specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    private final boolean isDateAndTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    /** Stores Date specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    private final LocalDate deadlineDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    /** Stores Date and Time if both are specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    private LocalDateTime deadlineDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"    /** Stores Time specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    private LocalTime deadlineTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"     * @param description the description for deadline task.","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"     * @param deadline    the deadline date.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"     * @throws DateTimeParseException exception that is thrown if the user inputs an invalid date.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    public Deadline(String description, String deadline) throws DateTimeParseException {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"        super(description);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        isDateAndTime \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        this.deadlineDate \u003d LocalDate.parse(deadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"     * @param description  the description for deadline task","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"     * @param deadlineDate the deadline date","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"     * @param deadlineTime the deadline time","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"     * @throws DateTimeParseException exception that is thrown if the user inputs invalid date and/or time","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"    public Deadline(String description, String deadlineDate, String deadlineTime) throws DateTimeParseException {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"        this.deadlineDate \u003d LocalDate.parse(deadlineDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"        this.deadlineTime \u003d LocalTime.parse(deadlineTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"        isDateAndTime \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"        this.deadlineDateTime \u003d LocalDateTime.of(this.deadlineDate, this.deadlineTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"     * Prints out Event task with an identifier, a done marker and the date/time specified.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"     * @return String.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"[\" + identifier + \"]\";","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d (isDateAndTime","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"                ? \" (by: \" + this.deadlineDateTime.format(super.dateTimePattern) + \")\"","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"                : \" (by: \" + this.deadlineDate.format(super.datePattern) + \")\");","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-16"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"    public String databaseString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d identifier + \"|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d getStatus() ? \"1|\" : \"0|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d getDescription() + \"|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d isDateAndTime ? (this.deadlineDate + \"|\" + this.deadlineTime) : this.deadlineDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":76}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":" * The type Event that has a task description and a date the event occurs at.","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /** Identifying tag \u0027E\u0027 for Event task */","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    private final String identifier \u003d \"E\";","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    /** Stores Date specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    private final LocalDate eventDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    /** Stores Date and Time if both are specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    private LocalDateTime eventDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    /** Boolean flag to check if both Date and Time are specified by user */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    private boolean isDateAndTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"    /** Stores Time specified by use */","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    private LocalTime eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Event.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"     * @param description the description for event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"     * @param eventDate   the event date.","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"     * @throws DateTimeParseException exception thrown if user inputs an invalid date.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    public Event(String description, String eventDate) throws DateTimeParseException {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"        super(description);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        this.eventDate \u003d LocalDate.parse(eventDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Event.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"     * @param description the description for event task.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"     * @param eventDate   the event date.","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"     * @param eventTime   the event time.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"     * @throws DateTimeParseException exception thrown if user inputs an invalid date and/or time.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"    public Event(String description, String eventDate, String eventTime) throws DateTimeParseException {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        this.eventDate \u003d LocalDate.parse(eventDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"        this.eventTime \u003d LocalTime.parse(eventTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"        isDateAndTime \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"        this.eventDateTime \u003d LocalDateTime.of(this.eventDate, this.eventTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"     * Prints out Event task with an identifier, a done marker and the date/time specified.","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"     * @return String.","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"[\" + identifier + \"]\";","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d isDateAndTime","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"                ? \" (at: \" + this.eventDateTime.format(super.dateTimePattern) + \")\"","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"                : \" (at: \" + this.eventDate.format(super.datePattern) + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"    public String databaseString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d identifier + \"|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d getStatus() ? \"1|\" : \"0|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d getDescription() + \"|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d isDateAndTime ? this.eventDate + \"|\" + this.eventTime : this.eventDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":75}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":" * Abstract class Task that superclasses all Tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"    /** The formatting patterns for Tasks with date (and time) inputs. */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    protected final DateTimeFormatter dateTimePattern \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\");","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    /** The formatting patterns for Tasks with date inputs. */","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    protected final DateTimeFormatter datePattern \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    /** Description String of the Task */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    private final String description;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    /** Boolean that determines whether a task is done or not */","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"     * @param description the description for a task.","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"     * Marks a task as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"     * Gets description of the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"     * @return the description.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"        return this.description;","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"     * Gets status of the task (whether it is done or not).","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"     * @return true if the task is marked done, false otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"    protected boolean getStatus() {","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d this.isDone ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d this.description;","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"     * Returns a string to be used for saving.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"     * @return string with delimiters for saving and loading.","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"    abstract public String databaseString();","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":67}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":" * TaskList is a list for tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"public class TaskList {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"    /** Storage container to store tasks */","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"     * @param task the task to be added.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     * Returns number of Tasks stored in the storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"     * @return number of tasks.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    public int size() {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"     * Checks if the storage is empty.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"     * @return true if the list is empty, false otherwise.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"     * Marks a task as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"     * @param ind index of the task to be marked as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"    public void markDone(int ind) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        if (ind \u003c 0 || ind \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"                    \"â˜¹ OOPS!!! Index entered is not valid. \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"                            \"Please use \u0027list\u0027 and check for the appropriate index for task(s).\"","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"            );","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"        tasks.get(ind).markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"     * Gets a task from the storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"     * @param ind index of the task to get from storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"     * @return the task.","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"    public Task get(int ind) {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"        if (ind \u003c 0 || ind \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"                    \"â˜¹ OOPS!!! Index entered is not valid. \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"                            \"Please use \u0027list\u0027 and check for the appropriate index for task(s).\"","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"            );","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"        return tasks.get(ind);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"     * Deletes a task from storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"     * @param ind index of the task to delete from storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"    public void delete(int ind) {","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"NayLin-H99"},"content":"        if (ind \u003c 0 || ind \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"NayLin-H99"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"NayLin-H99"},"content":"                    \"â˜¹ OOPS!!! Index entered is not valid. \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"NayLin-H99"},"content":"                            \"Please use \u0027list\u0027 and check for the appropriate index for task(s).\"","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"NayLin-H99"},"content":"            );","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"NayLin-H99"},"content":"        tasks.remove(ind);","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"NayLin-H99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"NayLin-H99"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"NayLin-H99"},"content":"            result +\u003d (\"\\n\" + (i + 1) + \".\" + tasks.get(i).toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":95}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"package duke.task;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"/**","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":" * The type Todo that only has a task description.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":" */","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"    /** Identifying tag \u0027T\u0027 for Event task */","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"    private final String identifier \u003d \"T\";","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"     * Instantiates a new Todo.","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"     * @param description the task description.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"     * Prints out Todo task with an identifier and a done marker.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"     * @return String.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"[\" + identifier + \"]\";","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"    public String databaseString() {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d identifier + \"|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d getStatus() ? \"1|\" : \"0|\";","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"        result +\u003d getDescription();","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"        return result;","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":39}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    public void dateOnlyTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"        Deadline deadline \u003d new Deadline(\"work\", \"2021-08-23\");","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(deadline.toString(), \"[D][ ] work (by: Aug 23 2021)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    public void dateTimeTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"        Deadline deadline \u003d new Deadline(\"work\", \"2021-08-23\", \"18:00\");","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(deadline.toString(), \"[D][ ] work (by: Aug 23 2021 06:00pm)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    public void dateOnlyMarkDoneTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"        Deadline deadline \u003d new Deadline(\"work\", \"2021-08-23\");","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        deadline.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(deadline.toString(), \"[D][X] work (by: Aug 23 2021)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    public void dateTimeMarkDoneTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"        Deadline deadline \u003d new Deadline(\"work\", \"2021-08-23\", \"18:00\");","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        deadline.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(deadline.toString(), \"[D][X] work (by: Aug 23 2021 06:00pm)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidDateTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"            Deadline deadline \u003d new Deadline(\"work\", \"2021-20-23\");","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidTimeTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"            Deadline deadline \u003d new Deadline(\"work\", \"2021-08-23\", \"42:69\");","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":50}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"public class EventTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    public void dateOnlyTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"        Event event \u003d new Event(\"Jon\u0027s Birthday\", \"2021-08-23\");","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(event.toString(), \"[E][ ] Jon\u0027s Birthday (at: Aug 23 2021)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    public void dateOnlyMarkDoneTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"        Event event \u003d new Event(\"Jon\u0027s Birthday\", \"2021-08-23\");","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"        event.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(event.toString(), \"[E][X] Jon\u0027s Birthday (at: Aug 23 2021)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    public void dateTimeMarkDoneTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        Event event \u003d new Event(\"Save Harambe\", \"2021-08-23\", \"18:00\");","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        event.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(event.toString(), \"[E][X] Save Harambe (at: Aug 23 2021 06:00pm)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"    public void dateTimeTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"        Event event \u003d new Event(\"Save Harambe\", \"2021-08-23\", \"18:00\");","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(event.toString(), \"[E][ ] Save Harambe (at: Aug 23 2021 06:00pm)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidDateTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"            Event event \u003d new Event(\"work\", \"2021-20-23\");","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidTimeTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"            Event event \u003d new Event(\"work\", \"2021-08-23\", \"42:69\");","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":50}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.command.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"    public void exitTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"bye\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof ExitCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"    public void listTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"list\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof ListCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"    public void todoTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"todo cs2103t project\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof AddCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"    public void deadlineTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"deadline cs2103t project /by 2021-08-27 23:59\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof AddCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"    public void eventTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"event cs2103t project /at 2021-08-27 23:59\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof AddCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"NayLin-H99"},"content":"    public void doneTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"NayLin-H99"},"content":"        testList.add(new Todo(\"work\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"done 1\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof DoneCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"NayLin-H99"},"content":"    public void deleteTest() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"NayLin-H99"},"content":"        testList.add(new Todo(\"work\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"delete 1\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(true, test.checkOperation() instanceof DeleteCommand);","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest1() {","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"bye bye\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest2() {","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"deadline work /by \", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest3() {","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"deadline work /at 2021-08-27 23:59\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest4() {","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"event work /at \", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":113,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":114,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest5() {","lastModifiedDate":"2021-08-23"},{"lineNumber":115,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":116,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"event work /by 2021-08-27 23:59\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":117,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":118,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":119,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":120,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":121,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":122,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":123,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":124,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":125,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":126,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest6() {","lastModifiedDate":"2021-08-23"},{"lineNumber":127,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":128,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"event /at 2021-08-27 23:59\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":133,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":134,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":135,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":136,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":137,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":138,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest7() {","lastModifiedDate":"2021-08-23"},{"lineNumber":139,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":140,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"deadline /by 2021-08-27 23:59\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":141,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":144,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":149,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":150,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest8() {","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"NayLin-H99"},"content":"        testList.add(new Todo(\"work\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"done -1\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":156,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":157,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":158,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":159,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":160,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":161,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":162,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":163,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest9() {","lastModifiedDate":"2021-08-23"},{"lineNumber":164,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":165,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"done 2\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":166,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(IllegalArgumentException.class, () -\u003e test.checkOperation().execute());","lastModifiedDate":"2021-08-23"},{"lineNumber":167,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":168,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! Index entered is not valid. \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":169,"author":{"gitId":"NayLin-H99"},"content":"                \"Please use \u0027list\u0027 and check for the appropriate index for task(s).\";","lastModifiedDate":"2021-08-23"},{"lineNumber":170,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":171,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":172,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":173,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":174,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":175,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":176,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest10() {","lastModifiedDate":"2021-08-23"},{"lineNumber":177,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"NayLin-H99"},"content":"        testList.add(new Todo(\"work\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":179,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"delete -1\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":180,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e test.checkOperation());","lastModifiedDate":"2021-08-23"},{"lineNumber":181,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":182,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":184,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":185,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":186,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":187,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":188,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":189,"author":{"gitId":"NayLin-H99"},"content":"    public void invalidCommandTest11() {","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"NayLin-H99"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"NayLin-H99"},"content":"        Parser test \u003d new Parser(\"delete 2\", testList);","lastModifiedDate":"2021-08-23"},{"lineNumber":192,"author":{"gitId":"NayLin-H99"},"content":"        Exception exception \u003d assertThrows(IllegalArgumentException.class, () -\u003e test.checkOperation().execute());","lastModifiedDate":"2021-08-23"},{"lineNumber":193,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":194,"author":{"gitId":"NayLin-H99"},"content":"        String expectedMessage \u003d \"â˜¹ OOPS!!! Index entered is not valid. \" +","lastModifiedDate":"2021-08-23"},{"lineNumber":195,"author":{"gitId":"NayLin-H99"},"content":"                \"Please use \u0027list\u0027 and check for the appropriate index for task(s).\";","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"NayLin-H99"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":197,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":198,"author":{"gitId":"NayLin-H99"},"content":"        assertTrue(actualMessage.equals(expectedMessage));","lastModifiedDate":"2021-08-23"},{"lineNumber":199,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":200,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":200}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    @TempDir","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"    Path tempPath;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    public void loadAndSave() {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"        Path file \u003d tempPath.resolve(\"duke.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"        TaskList saveList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"        Todo test \u003d new Todo(\"life is tough\");","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"        test.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"        saveList.add(test);","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"        saveList.add(new Deadline(\"monke\", \"2021-08-23\", \"18:00\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"        saveList.add(new Event(\"monke\", \"2021-08-23\", \"18:00\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"        Storage saveStorage \u003d new Storage(saveList, file.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"        TaskList loadList \u003d new TaskList();","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"        Storage loadStorage \u003d new Storage(loadList, file.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"        String result \u003d \"Here are the tasks in your list:\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"                \"1.[T][X] life is tough\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"                \"2.[D][ ] monke (by: Aug 23 2021 06:00pm)\\n\" +","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"                \"3.[E][ ] monke (at: Aug 23 2021 06:00pm)\";","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"            saveStorage.save();","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"            loadStorage.load();","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"            assertEquals(loadList.toString(), result);","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"NayLin-H99"},"content":"            fail();","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"NayLin-H99"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":45}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"    public void todoTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"        Todo test \u003d new Todo(\"test string\");","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(test.toString(), \"[T][ ] test string\");","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"    public void todoMarkDoneTest() {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"        Todo test \u003d new Todo(\"test string\");","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"        test.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"        assertEquals(test.toString(), \"[T][X] test string\");","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"NayLin-H99":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"NayLin-H99"},"content":"list hello","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"NayLin-H99"},"content":"delete 1","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"NayLin-H99"},"content":"deadline cs2103t quiz /by Monday","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"NayLin-H99"},"content":"todo cs2103t project level 1","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"NayLin-H99"},"content":"todo cs2103t project level 2","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"NayLin-H99"},"content":"todo cs2103t project level 3","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"NayLin-H99"},"content":"todo cs2103t project level 4","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"NayLin-H99"},"content":"todo cs2103t project level 5","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"NayLin-H99"},"content":"todo cs2103t project level 6","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"NayLin-H99"},"content":"event Christmas /at December","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"NayLin-H99"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"NayLin-H99"},"content":"done 2","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"NayLin-H99"},"content":"delete 3","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"NayLin-H99"},"content":"done 3","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"NayLin-H99"},"content":"delete 3","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"NayLin-H99"},"content":"done 5","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"NayLin-H99"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"NayLin-H99"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"NayLin-H99"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"NayLin-H99"},"content":"event /at","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"NayLin-H99"},"content":"event hello /at","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"NayLin-H99"},"content":"event /at hello","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"NayLin-H99"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"NayLin-H99"},"content":"deadline /by","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"NayLin-H99"},"content":"deadline hello /by","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"NayLin-H99"},"content":"deadline /by hello","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"NayLin-H99"},"content":"done -1","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"NayLin-H99"},"content":"done -2 hello","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"NayLin-H99"},"content":"done 2 hello","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"NayLin-H99"},"content":"delete 1 lol","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"NayLin-H99"},"content":"done 1000","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"NayLin-H99"},"content":"done","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"NayLin-H99"},"content":"bye Duke","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"NayLin-H99"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"NayLin-H99":41}}]

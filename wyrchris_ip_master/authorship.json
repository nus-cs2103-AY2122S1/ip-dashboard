[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":"/**","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":" * A wrapper for a Deadline which is a Task that needs to be done before a date/time.","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":" *","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":" * @author Wong Yun Rui Chris","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":" */","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":"    protected String by;","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wyrchris"},"content":"    protected LocalDate byLD;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"wyrchris"},"content":"     * A public constructor to initialise a Deadline Task.","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wyrchris"},"content":"     * @param description The String description/name of the task","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"wyrchris"},"content":"     * @param by The String describing when the Deadline need to be done by","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"wyrchris"},"content":"    public Deadline(String description, String by, Boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wyrchris"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"wyrchris"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"wyrchris"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wyrchris"},"content":"            byLD \u003d LocalDate.parse(by);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wyrchris"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wyrchris"},"content":"            byLD \u003d null;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"wyrchris"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"wyrchris"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wyrchris"},"content":"                + (byLD !\u003d null","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wyrchris"},"content":"                    ? byLD.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wyrchris"},"content":"                    : this.by)","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wyrchris"},"content":"                + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wyrchris"},"content":"    public String toData() {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wyrchris"},"content":"        return \"[D] | \" + super.toData() + \" | \" + this.by;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wyrchris"},"content":"}","lastModifiedDate":"2021-08-14"},{"lineNumber":44,"author":{"gitId":"wyrchris"},"content":"// deadline task1 /by 22/08/2021 6:40pm","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"wyrchris":44}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":" * Implementation for Duke.","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":" *","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":" * @author Wong Yun Rui Chris","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"wyrchris"},"content":"     * A private method to add the new Task into list and return the corresponding String reply.","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"wyrchris"},"content":"     * @param type The type of the task that will be added","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"wyrchris"},"content":"     * @param input The corresponding description provided for the task","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"wyrchris"},"content":"     * @param isDone The boolean if the task is done","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wyrchris"},"content":"     * @throws DukeException Exceptions specific to Duke\u0027s input","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"wyrchris"},"content":"     * @return The String of the reply after adding a task","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"wyrchris"},"content":"    private String addTask(Task.TaskName type, String input, Boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wyrchris"},"content":"        Task task;","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"wyrchris"},"content":"        String[] inputArray;","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"wyrchris"},"content":"        switch (type) {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"wyrchris"},"content":"        case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"wyrchris"},"content":"            task \u003d new Todo(input, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wyrchris"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"wyrchris"},"content":"        case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"wyrchris"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-20"},{"lineNumber":33,"author":{"gitId":"wyrchris"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"wyrchris"},"content":"            inputArray \u003d input.split(type.getSplit());","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"wyrchris"},"content":"            if (inputArray.length \u003c 2) {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"wyrchris"},"content":"                throw new DukeException(\"The format for \" + type +\" is wrong.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"wyrchris"},"content":"            } else if(inputArray[0].isBlank()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"wyrchris"},"content":"                throw new DukeException(\"The description of \" + type + \" cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"wyrchris"},"content":"            } else if(inputArray[1].isBlank()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"wyrchris"},"content":"                throw new DukeException(\"The date/time is missing from \" + type +\".\");","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"wyrchris"},"content":"            task \u003d type \u003d\u003d Task.TaskName.EVENT ? new Event(inputArray[0], inputArray[1], isDone)","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wyrchris"},"content":"                    : new Deadline(inputArray[0], inputArray[1], isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wyrchris"},"content":"            break;","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"wyrchris"},"content":"        default:","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"wyrchris"},"content":"            throw new DukeException(\"Unexpected value: \" + type);","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"wyrchris"},"content":"        this.list.add(task);","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"wyrchris"},"content":"        return \"\\tGot it. I\u0027ve added this task:\\n\\t\\t \" + task","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"wyrchris"},"content":"                + \"\\n\\tNow you have \" + list.size() + \" tasks in the list.\";","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wyrchris"},"content":"     * A private method to add the new Task into list and return the corresponding String reply.","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wyrchris"},"content":"     * @param type The type of the task that will be added","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wyrchris"},"content":"     * @param input The corresponding description provided for the task","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"wyrchris"},"content":"     * @throws DukeException Exceptions specific to Duke\u0027s input","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"wyrchris"},"content":"     * @return The String of the reply after adding a task","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"wyrchris"},"content":"    private String addTask(Task.TaskName type, String input) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"wyrchris"},"content":"        return addTask(type, input, false);","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"wyrchris"},"content":"     * A private method to return the list of all the Tasks.","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"wyrchris"},"content":"     * @return The String of the list of all the tasks formatted","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"wyrchris"},"content":"    private String displayTask() {","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"wyrchris"},"content":"        StringBuilder output \u003d new StringBuilder(\"\\tHere are the tasks in your list:\\n\");","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"wyrchris"},"content":"        int i \u003d 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"wyrchris"},"content":"        for (Task task: list) {","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"wyrchris"},"content":"            String temp \u003d \"\\t\" + i + \".\" + task.toString() + \"\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"wyrchris"},"content":"            output.append(temp);","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"wyrchris"},"content":"            i++;","lastModifiedDate":"2021-08-15"},{"lineNumber":78,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":79,"author":{"gitId":"wyrchris"},"content":"        return output.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":80,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":81,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":82,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":83,"author":{"gitId":"wyrchris"},"content":"     * A private method to mark the Task at the index of the list to be done.","lastModifiedDate":"2021-08-15"},{"lineNumber":84,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":85,"author":{"gitId":"wyrchris"},"content":"     * @param input The index of the Task in the list that is to be mark as done","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"wyrchris"},"content":"     * @throws DukeException Exceptions specific to Duke\u0027s input","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"wyrchris"},"content":"     * @return The corresponding String reply after marking a task done","lastModifiedDate":"2021-08-15"},{"lineNumber":88,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":89,"author":{"gitId":"wyrchris"},"content":"    private String markTask(String input) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"wyrchris"},"content":"        int index;","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"wyrchris"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"wyrchris"},"content":"            index \u003d Integer.parseInt(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"wyrchris"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"wyrchris"},"content":"            throw new DukeException(\"The index provided is not a number.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":96,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":97,"author":{"gitId":"wyrchris"},"content":"        if (index \u003e this.list.size() || index \u003c 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"wyrchris"},"content":"            throw new DukeException(\"The index provided is not within the valid range\");","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"wyrchris"},"content":"        return \"\\tNice! I\u0027ve marked this task as done:\\n\\t\\t\" + list.get(index - 1).markDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":102,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":103,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":105,"author":{"gitId":"wyrchris"},"content":"     * Deletes the task at the specific index.","lastModifiedDate":"2021-08-20"},{"lineNumber":106,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":107,"author":{"gitId":"wyrchris"},"content":"     * @param input The index of the task in the list that is to be deleted","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"wyrchris"},"content":"     * @throws DukeException Exceptions specific to Duke\u0027s input","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"wyrchris"},"content":"     * @return The corresponding String reply after deleting a task","lastModifiedDate":"2021-08-15"},{"lineNumber":110,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":111,"author":{"gitId":"wyrchris"},"content":"    private String deleteTask(String input) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"wyrchris"},"content":"        int index;","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":114,"author":{"gitId":"wyrchris"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"wyrchris"},"content":"            index \u003d Integer.parseInt(input);","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"wyrchris"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"wyrchris"},"content":"            throw new DukeException(\"The index provided is not a number.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"wyrchris"},"content":"        if (index \u003e this.list.size() || index \u003c 1) {","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"wyrchris"},"content":"            throw new DukeException(\"The index provided is not within the valid range\");","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"wyrchris"},"content":"        Task deleted \u003d this.list.remove(index - 1);","lastModifiedDate":"2021-08-15"},{"lineNumber":124,"author":{"gitId":"wyrchris"},"content":"        return \"\\tNoted. I\u0027ve removed this task:\\n\\t\\t\" + deleted.toString()","lastModifiedDate":"2021-08-15"},{"lineNumber":125,"author":{"gitId":"wyrchris"},"content":"                + \"\\nNow you have \" + this.list.size() + \" tasks in the list.\";","lastModifiedDate":"2021-08-15"},{"lineNumber":126,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":127,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":128,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":129,"author":{"gitId":"wyrchris"},"content":"     * Handles all the text input to call the correct corresponding method","lastModifiedDate":"2021-08-20"},{"lineNumber":130,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":131,"author":{"gitId":"wyrchris"},"content":"     * @param input The text input from the user to Duke","lastModifiedDate":"2021-08-15"},{"lineNumber":132,"author":{"gitId":"wyrchris"},"content":"     * @throws DukeException Exceptions specific to Duke\u0027s input","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"wyrchris"},"content":"     * @return The corresponding String reply to the user\u0027s input","lastModifiedDate":"2021-08-15"},{"lineNumber":134,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":135,"author":{"gitId":"wyrchris"},"content":"    public String handleInput(String input) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":136,"author":{"gitId":"wyrchris"},"content":"        String[] inputArray \u003d input.split(\" \",2);","lastModifiedDate":"2021-08-15"},{"lineNumber":137,"author":{"gitId":"wyrchris"},"content":"        String reply \u003d \"\";","lastModifiedDate":"2021-08-15"},{"lineNumber":138,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":139,"author":{"gitId":"wyrchris"},"content":"        switch (inputArray[0]) {","lastModifiedDate":"2021-08-15"},{"lineNumber":140,"author":{"gitId":"wyrchris"},"content":"        case \"list\":","lastModifiedDate":"2021-08-15"},{"lineNumber":141,"author":{"gitId":"wyrchris"},"content":"            reply \u003d this.displayTask();","lastModifiedDate":"2021-08-15"},{"lineNumber":142,"author":{"gitId":"wyrchris"},"content":"            break;","lastModifiedDate":"2021-08-15"},{"lineNumber":143,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":144,"author":{"gitId":"wyrchris"},"content":"        case \"done\":","lastModifiedDate":"2021-08-15"},{"lineNumber":145,"author":{"gitId":"wyrchris"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-20"},{"lineNumber":146,"author":{"gitId":"wyrchris"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-15"},{"lineNumber":147,"author":{"gitId":"wyrchris"},"content":"            if (inputArray.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-15"},{"lineNumber":148,"author":{"gitId":"wyrchris"},"content":"                throw new DukeException(\"The index is missing.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":149,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":150,"author":{"gitId":"wyrchris"},"content":"            reply \u003d inputArray[0].equals(\"done\") ? this.markTask(inputArray[1]) : this.deleteTask(inputArray[1]);","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"wyrchris"},"content":"            saveData();","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"wyrchris"},"content":"            break;","lastModifiedDate":"2021-08-15"},{"lineNumber":153,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":154,"author":{"gitId":"wyrchris"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-15"},{"lineNumber":155,"author":{"gitId":"wyrchris"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"wyrchris"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-15"},{"lineNumber":157,"author":{"gitId":"wyrchris"},"content":"            // Fallthrough","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"wyrchris"},"content":"        case \"event\":","lastModifiedDate":"2021-08-15"},{"lineNumber":159,"author":{"gitId":"wyrchris"},"content":"            if (inputArray.length \u003c 2 || inputArray[1].isBlank()) {","lastModifiedDate":"2021-08-15"},{"lineNumber":160,"author":{"gitId":"wyrchris"},"content":"                throw new DukeException(\"The description of \" + inputArray[0] + \" cannot be empty.\");","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":162,"author":{"gitId":"wyrchris"},"content":"            reply \u003d this.addTask(Task.TaskName.getTaskType(inputArray[0]), inputArray[1]);","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"wyrchris"},"content":"            saveData();","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"wyrchris"},"content":"            break;","lastModifiedDate":"2021-08-15"},{"lineNumber":165,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":166,"author":{"gitId":"wyrchris"},"content":"        default:","lastModifiedDate":"2021-08-15"},{"lineNumber":167,"author":{"gitId":"wyrchris"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means.\");","lastModifiedDate":"2021-08-15"},{"lineNumber":168,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":169,"author":{"gitId":"wyrchris"},"content":"        return reply;","lastModifiedDate":"2021-08-15"},{"lineNumber":170,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":171,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"wyrchris"},"content":"     * Saves the data of the task in the list into a text file formatted","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":175,"author":{"gitId":"wyrchris"},"content":"    private void saveData() {","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"wyrchris"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":177,"author":{"gitId":"wyrchris"},"content":"            String path \u003d new File(\"\").getAbsoluteFile() + \"/data\";","lastModifiedDate":"2021-08-22"},{"lineNumber":178,"author":{"gitId":"wyrchris"},"content":"            File file \u003d new File(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":179,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":180,"author":{"gitId":"wyrchris"},"content":"            // create directory if not yet created","lastModifiedDate":"2021-08-22"},{"lineNumber":181,"author":{"gitId":"wyrchris"},"content":"            if (!file.isDirectory()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":182,"author":{"gitId":"wyrchris"},"content":"                file.mkdirs();","lastModifiedDate":"2021-08-22"},{"lineNumber":183,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"wyrchris"},"content":"            FileWriter fw \u003d new FileWriter(file + \"/duke.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":187,"author":{"gitId":"wyrchris"},"content":"            for (Task task: this.list) {","lastModifiedDate":"2021-08-22"},{"lineNumber":188,"author":{"gitId":"wyrchris"},"content":"                fw.write(task.toData() + System.lineSeparator());","lastModifiedDate":"2021-08-22"},{"lineNumber":189,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":190,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":191,"author":{"gitId":"wyrchris"},"content":"            fw.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":192,"author":{"gitId":"wyrchris"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":193,"author":{"gitId":"wyrchris"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":194,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":195,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":196,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":197,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":198,"author":{"gitId":"wyrchris"},"content":"     * Reads the data from the saved file if it exists to update Duke on running","lastModifiedDate":"2021-08-22"},{"lineNumber":199,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":200,"author":{"gitId":"wyrchris"},"content":"    private void readData() {","lastModifiedDate":"2021-08-22"},{"lineNumber":201,"author":{"gitId":"wyrchris"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":202,"author":{"gitId":"wyrchris"},"content":"            String path \u003d new File(\"\").getAbsoluteFile() + \"/data/duke.txt\";","lastModifiedDate":"2021-08-22"},{"lineNumber":203,"author":{"gitId":"wyrchris"},"content":"            File file \u003d new File(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":204,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":205,"author":{"gitId":"wyrchris"},"content":"            if (!file.isFile()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":206,"author":{"gitId":"wyrchris"},"content":"                return;","lastModifiedDate":"2021-08-22"},{"lineNumber":207,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":208,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":209,"author":{"gitId":"wyrchris"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2021-08-22"},{"lineNumber":210,"author":{"gitId":"wyrchris"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":211,"author":{"gitId":"wyrchris"},"content":"                String[] inputArray \u003d s.nextLine().split(\" \\\\| \");","lastModifiedDate":"2021-08-22"},{"lineNumber":212,"author":{"gitId":"wyrchris"},"content":"                Task.TaskName type \u003d Task.TaskName.getTaskType(inputArray[0]);","lastModifiedDate":"2021-08-22"},{"lineNumber":213,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":214,"author":{"gitId":"wyrchris"},"content":"                addTask(type, inputArray[2] + type.getSplit()","lastModifiedDate":"2021-08-22"},{"lineNumber":215,"author":{"gitId":"wyrchris"},"content":"                        + (type !\u003d Task.TaskName.TODO ? inputArray[3] : \"\")","lastModifiedDate":"2021-08-22"},{"lineNumber":216,"author":{"gitId":"wyrchris"},"content":"                        , inputArray[1].equals(\"1\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":217,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":218,"author":{"gitId":"wyrchris"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":219,"author":{"gitId":"wyrchris"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":220,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":221,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":222,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":229,"author":{"gitId":"wyrchris"},"content":"        System.out.println(\"Hello from\\n\" + logo + \"What can I do for you\\n\");","lastModifiedDate":"2021-08-14"},{"lineNumber":230,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":231,"author":{"gitId":"wyrchris"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-15"},{"lineNumber":232,"author":{"gitId":"wyrchris"},"content":"        duke.readData();","lastModifiedDate":"2021-08-22"},{"lineNumber":233,"author":{"gitId":"wyrchris"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":234,"author":{"gitId":"wyrchris"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-14"},{"lineNumber":235,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":236,"author":{"gitId":"wyrchris"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2021-08-14"},{"lineNumber":237,"author":{"gitId":"wyrchris"},"content":"            try {","lastModifiedDate":"2021-08-15"},{"lineNumber":238,"author":{"gitId":"wyrchris"},"content":"                System.out.println(duke.handleInput(input));","lastModifiedDate":"2021-08-15"},{"lineNumber":239,"author":{"gitId":"wyrchris"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":240,"author":{"gitId":"wyrchris"},"content":"                System.out.println(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":241,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":242,"author":{"gitId":"wyrchris"},"content":"            input \u003d sc.nextLine();","lastModifiedDate":"2021-08-14"},{"lineNumber":243,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":244,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":245,"author":{"gitId":"wyrchris"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-14"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"wyrchris":238,"-":9}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":" * Exception meant for handling those specific to Duke","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":" *","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":" * @author Wong Yun Rui Chris","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":"     * A public constructor for initialising DukeException","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":"     * @param message The message meant for the Duke Exception","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"wyrchris"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"        super(message);","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"wyrchris"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"wyrchris"},"content":"        return \":( OOPS!! \" + super.getMessage();","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"wyrchris"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"wyrchris":20}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"/**","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":" * A wrapper for an Event which is a Task that start at a specific date/time.","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":" *","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":" * @author Wong Yun Rui Chris","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":" */","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":"    protected String at;","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":"     * A public constructor to initialise an Event Task.","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wyrchris"},"content":"     * @param description The String description/name of the task","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"     * @param at The String describing when the Event takes place","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"wyrchris"},"content":"     * @param isDone The Boolean of if the task is done","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"wyrchris"},"content":"    public Event(String description, String at, Boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"wyrchris"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wyrchris"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"wyrchris"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"wyrchris"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wyrchris"},"content":"    public String toData() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wyrchris"},"content":"        return \"[E] | \" + super.toData() + \" | \" + this.at;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wyrchris"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wyrchris":30}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"/**","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":" * A wrapper for a task used by DukeList.","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":" *","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":" * @author Wong Yun Rui Chris","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":" */","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":"public class Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":"     * Enum for the different type of task","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":"    public enum TaskName {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"wyrchris"},"content":"        TODO (\"\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"        DEADLINE (\" /by \"),","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"wyrchris"},"content":"        EVENT (\" /at \");","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"wyrchris"},"content":"        private final String split;","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"wyrchris"},"content":"        TaskName(String split) {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"wyrchris"},"content":"            this.split \u003d split;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"wyrchris"},"content":"        /**","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wyrchris"},"content":"         * Returns the corresponding regex/split needed to split the string input","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wyrchris"},"content":"         * received to get correct output.","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wyrchris"},"content":"         *","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wyrchris"},"content":"         * @return","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wyrchris"},"content":"         */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wyrchris"},"content":"        public String getSplit() {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"wyrchris"},"content":"            return this.split;","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"wyrchris"},"content":"        @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"wyrchris"},"content":"        public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"wyrchris"},"content":"            return this.name().toLowerCase();","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wyrchris"},"content":"        /**","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wyrchris"},"content":"         * Returns the TaskName when provided with the string name of the type of task.","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wyrchris"},"content":"         *","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wyrchris"},"content":"         * @param s The string representation of the type of task","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wyrchris"},"content":"         * @return The corresponding TaskName","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wyrchris"},"content":"         * @throws DukeException Exception specific to Duke","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wyrchris"},"content":"         */","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wyrchris"},"content":"        public static TaskName getTaskType(String s) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"wyrchris"},"content":"            switch (s) {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"wyrchris"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"wyrchris"},"content":"                // Fallthrough","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"wyrchris"},"content":"            case \"[T]\":","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"wyrchris"},"content":"                return TODO;","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"wyrchris"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"wyrchris"},"content":"                // Fallthrough","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"wyrchris"},"content":"            case \"[D]\":","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"wyrchris"},"content":"                return DEADLINE;","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wyrchris"},"content":"            case \"event\":","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wyrchris"},"content":"                // Fallthrough","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wyrchris"},"content":"            case \"[E]\":","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"wyrchris"},"content":"                return EVENT;","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"wyrchris"},"content":"            default:","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"wyrchris"},"content":"                throw new DukeException(\"Something has gone very wrong!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"wyrchris"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"wyrchris"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"wyrchris"},"content":"    protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":68,"author":{"gitId":"wyrchris"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":69,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":70,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":71,"author":{"gitId":"wyrchris"},"content":"     * A public constructor to initialise a Task.","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":73,"author":{"gitId":"wyrchris"},"content":"     * @param description The String description/name of the task","lastModifiedDate":"2021-08-14"},{"lineNumber":74,"author":{"gitId":"wyrchris"},"content":"     * @param isDone The Boolean of if the task is done","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":76,"author":{"gitId":"wyrchris"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"wyrchris"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":78,"author":{"gitId":"wyrchris"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":80,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"wyrchris"},"content":"     * Gets the corresponding status icon for this task.","lastModifiedDate":"2021-08-20"},{"lineNumber":84,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"wyrchris"},"content":"     * @return The String representation of the status for this task","lastModifiedDate":"2021-08-14"},{"lineNumber":86,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":87,"author":{"gitId":"wyrchris"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-14"},{"lineNumber":88,"author":{"gitId":"wyrchris"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-14"},{"lineNumber":89,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":90,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":91,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":92,"author":{"gitId":"wyrchris"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":93,"author":{"gitId":"wyrchris"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-14"},{"lineNumber":94,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":95,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":96,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":97,"author":{"gitId":"wyrchris"},"content":"     * Marks the status of this task as done.","lastModifiedDate":"2021-08-14"},{"lineNumber":98,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":99,"author":{"gitId":"wyrchris"},"content":"     * @return The new String representation of this Task after the status is marked as done","lastModifiedDate":"2021-08-14"},{"lineNumber":100,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":101,"author":{"gitId":"wyrchris"},"content":"    public String markDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":102,"author":{"gitId":"wyrchris"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":103,"author":{"gitId":"wyrchris"},"content":"        return this.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":104,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":105,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"wyrchris"},"content":"     * Returns the task formatted as a text string to be stored as data in a text file.","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"wyrchris"},"content":"     * The task is stored with 1 and 0 representing the isDone status of the task with 1","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"wyrchris"},"content":"     * representing the task is done while 0 is not done separated by a vertical line","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"wyrchris"},"content":"     * then followed by the description of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"wyrchris"},"content":"     * @return The String representation of this task","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"wyrchris"},"content":"    public String toData() {","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"wyrchris"},"content":"        return (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"wyrchris"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wyrchris":117}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"/**","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":" * A wrapper for a Todos which is a task without date/time","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":" *","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":" * @author Wong Yun Rui Chris","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":" */","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":"     * A public constructor to initialise a Todos task.","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":"     * @param description The String description/name of the task","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wyrchris"},"content":"     * @param isDone The Boolean of if the task is done","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"wyrchris"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"wyrchris"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"wyrchris"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"wyrchris"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"wyrchris"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wyrchris"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wyrchris"},"content":"    public String toData() {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wyrchris"},"content":"        return \"[T] | \" + super.toData();","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wyrchris"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wyrchris"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wyrchris":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wyrchris"},"content":"deadline task1 /by Monday","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"wyrchris"},"content":"todo task2","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"wyrchris"},"content":"event task3 /at Sunday 2pm","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"wyrchris"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"wyrchris"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":6,"author":{"gitId":"wyrchris"},"content":"todo task4","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wyrchris"},"content":"event task5 /at Tuesday 3pm","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":"todo task6","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"wyrchris"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"wyrchris"},"content":"done 4","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wyrchris"},"content":"done 5","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wyrchris"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"wyrchris"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wyrchris":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"wyrchris"},"content":"if exist data\\duke.txt del data\\duke.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":21,"wyrchris":1}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"# viper.Duke project template","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"3. After that, locate the `src/main/java/viper.Duke.java` file, right-click it, and choose `Run viper.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sharmainec":2,"-":22}},{"path":"src/main/java/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.*;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import tasks.Deadlines;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import tasks.Events;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import tasks.Todos;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":" * Adds todo, deadline and event command to tasklist and storage.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    protected String cmdLine;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    public AddCommand(String cmdLine) {","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"        this.cmdLine \u003d cmdLine;","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"        String[] splitLine \u003d cmdLine.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"            if (splitLine[1].isBlank()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"                throw new DukeException(\"Oh no!! Something is missing from this \" + splitLine[0] + \" !!! â˜¹\");","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"            switch (Instruction.comparesTo(splitLine[0])) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"            case TODO:","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"                Todos addTodo \u003d new Todos(splitLine[1].trim());","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"                tasks.addTask(addTodo);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"                storage.writeTask(addTodo);","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"                String[] msg \u003d {\"Ok! I have added this task to your list:\", addTodo.toString(),","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"                    \"Now you have a total of \" + tasks.getSize() + \" task(s)!\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"                ui.showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"                String[] descDateArray \u003d splitLine[1].split(\"/by \");","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"                Deadlines addDeadline \u003d new Deadlines(descDateArray[0].trim(), descDateArray[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"                tasks.addTask(addDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"                storage.writeTask(addDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"sharmainec"},"content":"                msg \u003d new String[]{\"Oh no!! A new deadline?! It\u0027s okay, you got this!!!!\", addDeadline.toString(),","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"sharmainec"},"content":"                        \"Now you have a total of \" + tasks.getSize() + \" task(s)!\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"sharmainec"},"content":"                ui.showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"sharmainec"},"content":"            case EVENT:","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"sharmainec"},"content":"                String[] descTimeArray \u003d splitLine[1].split(\"/at \");","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"sharmainec"},"content":"                String[] dateTimeArray \u003d descTimeArray[1].split(\" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"sharmainec"},"content":"                Events addEvent \u003d new Events(descTimeArray[0].trim(), dateTimeArray[0], dateTimeArray[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"sharmainec"},"content":"                tasks.addTask(addEvent);","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"sharmainec"},"content":"                storage.writeTask(addEvent);","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"sharmainec"},"content":"                msg \u003d new String[]{\"Okie! I have added this event to your list:\", addEvent.toString(),","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"sharmainec"},"content":"                    \"Now you have a total of \" + tasks.getSize() + \" task(s)!\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"sharmainec"},"content":"                ui.showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"sharmainec"},"content":"            default:","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"sharmainec"},"content":"                ui.showInvalidTypeError();","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"sharmainec"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"sharmainec"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"sharmainec"},"content":"        } ","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"sharmainec"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"sharmainec"},"content":"        return false;","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":75}},{"path":"src/main/java/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import viper.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":" * Exits Viper and shows a bye message.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"        ui.showBye();","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"        return true;","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":22}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import viper.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":" * Represents user input","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"     * Creates tasks according to user input","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"     * @param tasks existing tasks in the tasklist","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"     * @param ui user input format","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"     * @param storage stores created command into the txt file","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"     * @throws IOException if is no user input","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"     * Represents the end of program","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"     * @return true if program should exit, otherwise do not exit program","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":28}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import viper.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":" * Deletes command specified by user based on index","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    String cmdLine;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    int index;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    public DeleteCommand(String cmdLine) {","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"        this.cmdLine \u003d cmdLine;","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"        String[] splitLine \u003d cmdLine.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"        this.index \u003d Integer.parseInt(splitLine[1]);","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"     * Executes the delete command.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"     * @param tasks current tasklist.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"     * @param ui user input format.","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"     * @param storage stores created command into the txt file.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"     * @throws IOException if task to be deleted is null.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"        if (index \u003c tasks.getSize() + 1) {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"            Task deleteTask \u003d tasks.getTask(index - 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"            ","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"            tasks.deleteTask(index - 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"            storage.deleteTask(deleteTask);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"            String[] msg \u003d {\"OK!! I have removed the following task from your list: \" + deleteTask,","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"                    \"Now you have \" + tasks.getSize() + \" task(s) left~ Yay!!!!!\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"            ui.showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"        else {","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"            ui.showInvalidIndexError();","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"sharmainec"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"sharmainec"},"content":"        return false;","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":50}},{"path":"src/main/java/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import viper.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import viper.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":" * Marks task specified by user as done, using index.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    String cmdLine;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    int index;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    public DoneCommand(String cmdLine) {","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"        this.cmdLine \u003d cmdLine;","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"        String[] splitLine \u003d cmdLine.split(\" \", 2);","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"        index \u003d Integer.parseInt(splitLine[1]);","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"        if (index \u003c tasks.getSize() + 1) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"            Task curr \u003d tasks.getTask(index - 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"            storage.doneTask(curr);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"            tasks.doneTask(index - 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"            String[] msg \u003d {\"Good job on completing your task!!!\", \"I\u0027ve marked this task as done:\", curr.toString()};","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"            ui.showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"        } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"            ui.showInvalidIndexError();","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"        return false;","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":41}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import viper.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":" * Command that search through task list and returns a new task list with items that match the keyword","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    protected String keyword;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"        TaskList findResult \u003d tasks.findTask(keyword);","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"        ui.showList(findResult, keyword);","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"        return false;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"sharmainec":28}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package commands;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import viper.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import viper.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" * Lists everything in the taskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        if (tasks.getSize() \u003e 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"            String[] msg \u003d {\"Ok!! You wanna know what you have on your list?\", \"I got you covered!!\",","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"                    \"Here are all the task(s) in your list\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"            ui.showListHeader(msg);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"                int taskNo \u003d i + 1;","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"                Task curr \u003d tasks.getTask(i);","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"                ui.printLine(taskNo + \".\" + curr.toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"            ui.printDiv();","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"        } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"            String[] msg \u003d {\"WOW! There\u0027s nothing on your list.\", \"You can add items to your list whenever you like!\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"            ui.showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"        return false;","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":36}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package exceptions;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":" * Exception thrown when user input is unknown.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"    public DukeException (String str) {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"        super(str);","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"sharmainec":12}},{"path":"src/main/java/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Instruction;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" * Represents a Deadline task that takes in date.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    public Deadlines(String description, String date) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        super(description, Instruction.DEADLINE);","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + ","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"                this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"sharmainec":24}},{"path":"src/main/java/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import viper.Instruction;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":" * Represents an event task that takes in date and time.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"public class Events extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    protected LocalTime time;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    public Events(String description, String date, String time) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"        super(description, Instruction.EVENT);","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"            this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"            this.time \u003d LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"        } catch (Exception e){","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"            throw new DukeException(\"Sorry, I do not understand what you are saying... Please follow the format:\\n\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"                    \"event presentation /at 2021-09-09 14:15\");","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"                + \" \" + time + \")\";","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"sharmainec":33}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Instruction;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":" * Represents a task in Viper.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    protected Instruction type;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    public Task(String description, Instruction type) {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"     * Returns the status of task","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"     * @return X if true, \" \" if false","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"     * Sets isDone of Task to true when task is done","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"sharmainec":38}},{"path":"src/main/java/tasks/Todos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import viper.Instruction;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":" * Represents a todo task.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"public class Todos extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"    public Todos(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"        super(description, Instruction.TODO);","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"sharmainec":19}},{"path":"src/main/java/viper/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package viper;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import commands.Command;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":" * A chatbot that manages user input tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"     * Creates a Duke, initialise Ui, Storage and TaskList","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"     * @param filePath","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"     * @throws IOException","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"    public Duke(String filePath) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"            tasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"        } catch (FileNotFoundException | DukeException | ParseException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"     * Starts duke.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"    public void run() {","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"            try {","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"sharmainec"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"sharmainec"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"sharmainec"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"sharmainec"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"sharmainec"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"sharmainec"},"content":"                ui.printLine(e.getMessage());","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"sharmainec"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"sharmainec"},"content":"        Duke duke \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"sharmainec"},"content":"        duke.run();","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sharmainec":55,"-":3}},{"path":"src/main/java/viper/Instruction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package viper;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":" * Stores the types of Instruction a command can have.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"public enum Instruction {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"    LIST(\"list\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"    DONE(\"done\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    INVALID(\"invalid\"),","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    FIND(\"find\"),","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"    ;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"    private final String s;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    Instruction(String s) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"        this.s \u003d s;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"     * Compares Instruction with string.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"     * @param str Input string.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"     * @return Instruction if such an instruction exist, otherwise invalid","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"    public static Instruction comparesTo(String str) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"        for (Instruction i : Instruction.values()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"            if (i.s.equalsIgnoreCase(str)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"                return i;","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"        return INVALID;","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"sharmainec":37}},{"path":"src/main/java/viper/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package viper;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import commands.*;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":" * deals with making sense of the user command.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"public class Parser {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"     * Returns a command based on user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"     * @param str User input.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"     * @return Command class.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"     * @throws DukeException If user input is invalid.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"    public static Command parse(String str) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"            String[] splitStr \u003d str.split(\" \", 2);","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"            if (splitStr[0].equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"                return new ListCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"            } else if (splitStr[0].equalsIgnoreCase(\"done\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"                return new DoneCommand(str);","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"            } else if (splitStr[0].equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"                return new DeleteCommand(str);","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"            } else if (splitStr[0].equalsIgnoreCase(\"todo\") || ","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"                    splitStr[0].equalsIgnoreCase(\"deadline\") ||","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"                    splitStr[0].equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"                return new AddCommand(str);","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"            } else if (splitStr[0].equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"                return new FindCommand(splitStr[1]);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"            } else if (splitStr[0].equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"                return new ByeCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"                throw new DukeException(\"Please enter a valid command so that I will be able to help you :p\");","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"            throw new DukeException(\"Oops! Please enter a command to proceed~\");","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":42}},{"path":"src/main/java/viper/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package viper;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import tasks.Deadlines;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import tasks.Events;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import tasks.Todos;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"import java.io.File;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"import java.text.DateFormat;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"import java.util.Date;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":" * Deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"public class Storage {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"    private File file;","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"    public Storage(String filePath) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"        file.createNewFile();","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"     * Reads lines from txt file, convert to respective tasks and add to task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"     * @return list of Tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"     * @throws FileNotFoundException If txt file does not exist.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"     * @throws DukeException If line read is missing any information.","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"     * @throws ParseException If string cannot be parsed to date.","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws FileNotFoundException, DukeException, ParseException {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"sharmainec"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"sharmainec"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"sharmainec"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"sharmainec"},"content":"            String readStr \u003d sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"sharmainec"},"content":"            String[] readLineArray \u003d readStr.split(\"]\", 3);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"sharmainec"},"content":"            String taskInstruction \u003d readLineArray[0].substring(1);","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"sharmainec"},"content":"            String taskIsDone \u003d readLineArray[1].substring(1);","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"sharmainec"},"content":"            String taskDesc \u003d readLineArray[2].trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"sharmainec"},"content":"            ","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"sharmainec"},"content":"            if (taskDesc.isBlank()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"sharmainec"},"content":"                throw new DukeException(\"Task description cannot be blank!!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"sharmainec"},"content":"            switch (taskInstruction) {","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"sharmainec"},"content":"            case \"T\":","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"sharmainec"},"content":"                Todos addTodo \u003d new Todos(taskDesc);","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"sharmainec"},"content":"                if (!taskIsDone.isBlank()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"sharmainec"},"content":"                    addTodo.setDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"sharmainec"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"sharmainec"},"content":"                taskList.add(addTodo);","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"sharmainec"},"content":"            case \"D\":","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"sharmainec"},"content":"                String[] descDateArray \u003d taskDesc.split(\"\\\\(by: \");","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"sharmainec"},"content":"                //convert date to the correct input format","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"sharmainec"},"content":"                DateFormat inputDeadlineDateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"sharmainec"},"content":"                Date inputDeadlineDate \u003d inputDeadlineDateFormat.parse(descDateArray[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"sharmainec"},"content":"                DateFormat outputDeadlineDateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"sharmainec"},"content":"                String outputDeadlineDate \u003d outputDeadlineDateFormat.format(inputDeadlineDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"sharmainec"},"content":"                Deadlines addDeadline \u003d new Deadlines(descDateArray[0].trim(), outputDeadlineDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"sharmainec"},"content":"                if (!taskIsDone.isBlank()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"sharmainec"},"content":"                    addDeadline.setDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"sharmainec"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"sharmainec"},"content":"                taskList.add(addDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"sharmainec"},"content":"            case \"E\":","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"sharmainec"},"content":"                String[] eventDescTimeArray \u003d taskDesc.split(\" \\\\(at: \");","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"sharmainec"},"content":"                int colonIndex \u003d eventDescTimeArray[1].indexOf(\":\");","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"sharmainec"},"content":"                String dateStr \u003d eventDescTimeArray[1].substring(0, colonIndex - 2);","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"sharmainec"},"content":"                String timeStr \u003d eventDescTimeArray[1].substring(colonIndex - 2, colonIndex + 3);","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"sharmainec"},"content":"                System.out.println(\"date: \" + dateStr);","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"sharmainec"},"content":"                System.out.println(\"time: \" + timeStr);","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"sharmainec"},"content":"                //convert date to the correct input format","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"sharmainec"},"content":"                DateFormat inputEventDateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"sharmainec"},"content":"                Date inputEventDate \u003d inputEventDateFormat.parse(dateStr.trim());","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"sharmainec"},"content":"                DateFormat outputEventDateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"sharmainec"},"content":"                String outputEventDate \u003d outputEventDateFormat.format(inputEventDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"sharmainec"},"content":"                Events addEvent \u003d new Events(eventDescTimeArray[0].trim(), outputEventDate, timeStr.trim());","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"sharmainec"},"content":"                ","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"sharmainec"},"content":"                if (!taskIsDone.isBlank()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"sharmainec"},"content":"                    addEvent.setDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":98,"author":{"gitId":"sharmainec"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"sharmainec"},"content":"                taskList.add(addEvent);","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"sharmainec"},"content":"                break;","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"sharmainec"},"content":"            default:","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"sharmainec"},"content":"                throw new IllegalStateException(\"Unexpected value: \" + taskInstruction);","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"sharmainec"},"content":"        return taskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":106,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":107,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":108,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"sharmainec"},"content":"     * Adds a line in the txt file.","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"sharmainec"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"sharmainec"},"content":"     * @throws IOException If the task is invalid.","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":113,"author":{"gitId":"sharmainec"},"content":"    public void writeTask(Task task) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":114,"author":{"gitId":"sharmainec"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2021-08-27"},{"lineNumber":115,"author":{"gitId":"sharmainec"},"content":"        fw.write(task.toString() + System.lineSeparator());","lastModifiedDate":"2021-08-27"},{"lineNumber":116,"author":{"gitId":"sharmainec"},"content":"        fw.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":117,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":118,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":119,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":120,"author":{"gitId":"sharmainec"},"content":"     * Removes line in the txt file.","lastModifiedDate":"2021-08-31"},{"lineNumber":121,"author":{"gitId":"sharmainec"},"content":"     * @param task Task to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":122,"author":{"gitId":"sharmainec"},"content":"     * @throws IOException If the task is invalid.","lastModifiedDate":"2021-08-31"},{"lineNumber":123,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":124,"author":{"gitId":"sharmainec"},"content":"    public void deleteTask(Task task) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":125,"author":{"gitId":"sharmainec"},"content":"        File tempFile \u003d File.createTempFile(\"temp\", \".txt\", file.getParentFile());","lastModifiedDate":"2021-08-27"},{"lineNumber":126,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":127,"author":{"gitId":"sharmainec"},"content":"        FileWriter fw \u003d new FileWriter(tempFile, true);","lastModifiedDate":"2021-08-27"},{"lineNumber":128,"author":{"gitId":"sharmainec"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-27"},{"lineNumber":129,"author":{"gitId":"sharmainec"},"content":"        String lineDone \u003d task.toString();","lastModifiedDate":"2021-08-27"},{"lineNumber":130,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":131,"author":{"gitId":"sharmainec"},"content":"        while(sc.hasNextLine()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":132,"author":{"gitId":"sharmainec"},"content":"            String currLine \u003d sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":133,"author":{"gitId":"sharmainec"},"content":"            if (currLine.equals(lineDone)) {","lastModifiedDate":"2021-08-27"},{"lineNumber":134,"author":{"gitId":"sharmainec"},"content":"                fw.write(\"\");","lastModifiedDate":"2021-08-27"},{"lineNumber":135,"author":{"gitId":"sharmainec"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":136,"author":{"gitId":"sharmainec"},"content":"                fw.write(currLine + System.lineSeparator());","lastModifiedDate":"2021-08-27"},{"lineNumber":137,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":138,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":139,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":140,"author":{"gitId":"sharmainec"},"content":"        fw.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":141,"author":{"gitId":"sharmainec"},"content":"        tempFile.renameTo(file);","lastModifiedDate":"2021-08-31"},{"lineNumber":142,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":143,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":144,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":145,"author":{"gitId":"sharmainec"},"content":"     * Marks task as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":146,"author":{"gitId":"sharmainec"},"content":"     * @param task Task to be marked done.","lastModifiedDate":"2021-08-31"},{"lineNumber":147,"author":{"gitId":"sharmainec"},"content":"     * @throws IOException If the task is invalid.","lastModifiedDate":"2021-08-31"},{"lineNumber":148,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":149,"author":{"gitId":"sharmainec"},"content":"    public void doneTask(Task task) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":150,"author":{"gitId":"sharmainec"},"content":"        File tempFile \u003d File.createTempFile(\"temp\", \".txt\", file.getParentFile());","lastModifiedDate":"2021-08-27"},{"lineNumber":151,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":152,"author":{"gitId":"sharmainec"},"content":"        FileWriter fw \u003d new FileWriter(tempFile, true);","lastModifiedDate":"2021-08-27"},{"lineNumber":153,"author":{"gitId":"sharmainec"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-27"},{"lineNumber":154,"author":{"gitId":"sharmainec"},"content":"        String lineDone \u003d task.toString();","lastModifiedDate":"2021-08-27"},{"lineNumber":155,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":156,"author":{"gitId":"sharmainec"},"content":"        while(sc.hasNextLine()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":157,"author":{"gitId":"sharmainec"},"content":"            String currLine \u003d sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":158,"author":{"gitId":"sharmainec"},"content":"            if (currLine.equals(lineDone)) {","lastModifiedDate":"2021-08-27"},{"lineNumber":159,"author":{"gitId":"sharmainec"},"content":"                task.setDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":160,"author":{"gitId":"sharmainec"},"content":"                fw.write(task + System.lineSeparator());","lastModifiedDate":"2021-08-27"},{"lineNumber":161,"author":{"gitId":"sharmainec"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":162,"author":{"gitId":"sharmainec"},"content":"                fw.write(currLine + System.lineSeparator());","lastModifiedDate":"2021-08-27"},{"lineNumber":163,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":164,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":165,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-27"},{"lineNumber":166,"author":{"gitId":"sharmainec"},"content":"        fw.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":167,"author":{"gitId":"sharmainec"},"content":"        tempFile.renameTo(file);","lastModifiedDate":"2021-08-31"},{"lineNumber":168,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":169,"author":{"gitId":"sharmainec"},"content":"       ","lastModifiedDate":"2021-08-27"},{"lineNumber":170,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":170}},{"path":"src/main/java/viper/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package viper;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" * Contains the list of tasks and methods for the list.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":" * Methods includes adding tasks and deleting tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"public class TaskList {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"    public void addTask(Task newTask) throws IOException {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"     * Gets the task using the index specified.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"     * @param index Index of task in task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"     * @return Task with specified index.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"     * Gets the size of a task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"     * @return Size of task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"    public int getSize() {","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"sharmainec"},"content":"     * Removes task using the index specified","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"sharmainec"},"content":"     * @param index Index of task in task list","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"sharmainec"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"sharmainec"},"content":"        if (index \u003c tasks.size()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"sharmainec"},"content":"            tasks.remove(index);","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"sharmainec"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"sharmainec"},"content":"     * Marks task using the index specified as done","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"sharmainec"},"content":"     * @param index Index of task in task list","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"sharmainec"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"sharmainec"},"content":"    public void doneTask(int index) {","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"sharmainec"},"content":"        if (index \u003c tasks.size()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"sharmainec"},"content":"            tasks.get(index).setDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"sharmainec"},"content":"    public TaskList findTask(String keyword) {","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"sharmainec"},"content":"        ArrayList\u003cTask\u003e resultTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"sharmainec"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"sharmainec"},"content":"            Task currTask \u003d tasks.get(i);","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"sharmainec"},"content":"            if (currTask.toString().contains(keyword)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"sharmainec"},"content":"                resultTasks.add(currTask);","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"sharmainec"},"content":"        return new TaskList(resultTasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":74}},{"path":"src/main/java/viper/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"package viper;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":" * deals with interactions with the user","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"public class Ui {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    private static final String INDENT \u003d \"       \";","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    private static final String DIVIDER \u003d \"\\n ---------------------------------------------------------- \\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    public void showMessage(String[] strings) {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"        for (String string : strings) {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"            System.out.println(INDENT + string);","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"    public void printLine(String str) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"        System.out.println(INDENT + str);","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"    public void printDiv() {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"sharmainec"},"content":"        String[] msg \u003d {\"Hello! I\u0027m Viper :)\", \"I love to help!\", \"How can I help you today?\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"sharmainec"},"content":"        showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"sharmainec"},"content":"    public void showBye() {","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"sharmainec"},"content":"        String[] msg \u003d {\"It was soooo fun talking to you!\", \"Bye! See you again~\", ","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"sharmainec"},"content":"                \"I will be seeing you again... right?\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"sharmainec"},"content":"        showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"sharmainec"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"sharmainec"},"content":"        String[] msg \u003d {\"Oh no, there was a problem loading this file...\", \"Wanna try another file instead?\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"sharmainec"},"content":"        showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"sharmainec"},"content":"    public void showInvalidTypeError() {","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"sharmainec"},"content":"        String[] msg \u003d {\"Oh no, I do not understand this type...\", \"So far, I am only able to understand these types:\",","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"sharmainec"},"content":"            \"Todo, Deadline, Event, List, Delete, Done, Bye\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"sharmainec"},"content":"        showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"sharmainec"},"content":"    public void showInvalidIndexError() {","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"sharmainec"},"content":"        String[] msg \u003d {\"Oh no, this index does not exist!\", \"Please make sure that index \u003c size of tasks\"};","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"sharmainec"},"content":"        showMessage(msg);","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"sharmainec"},"content":"    public void showListHeader(String[] strings) {","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"sharmainec"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"sharmainec"},"content":"        for (String string : strings) {","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"sharmainec"},"content":"            System.out.println(INDENT + string);","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"sharmainec"},"content":"    public void showList(TaskList taskList, String keyword) {","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"sharmainec"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"sharmainec"},"content":"        if (taskList.getSize() \u003e 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"sharmainec"},"content":"            printLine(\"This is what I have found based on the keyword: \" + keyword);","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"sharmainec"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"sharmainec"},"content":"                int taskNo \u003d i + 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"sharmainec"},"content":"                Task curr \u003d taskList.getTask(i);","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"sharmainec"},"content":"                printLine(taskNo + \".\" + curr.toString());","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"sharmainec"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"sharmainec"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"sharmainec"},"content":"            printLine(\"Oops, based on your keyword: \" + keyword + \", I am not able to find any match :(\");","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"sharmainec"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"sharmainec"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"sharmainec":84}},{"path":"src/test/java/CommandsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"import commands.AddCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"import commands.ByeCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import commands.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import commands.ListCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import viper.Parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"public class CommandsTest {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"    public void addCommandsTest() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"        Command userInput1 \u003d Parser.parse(\"todo homework\");","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        assertEquals(userInput1.getClass(), AddCommand.class);","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"        Command userInput2 \u003d Parser.parse(\"deadline quiz 1 /by 2021-11-10\");","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"        assertEquals(userInput2.getClass(), AddCommand.class);","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"    public void byeCommandTest() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"        Command userInput2 \u003d Parser.parse(\"bye\");","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"        assertEquals(userInput2.getClass(), ByeCommand.class);","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"    public void listCommandTest() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"        Command userInput3 \u003d Parser.parse(\"list\");","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"        assertEquals(userInput3.getClass(), ListCommand.class);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"sharmainec":32}},{"path":"src/test/java/TasksTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"import tasks.Deadlines;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"import tasks.Events;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"import tasks.Todos;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"sharmainec"},"content":"public class TasksTest {","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"sharmainec"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"sharmainec"},"content":"    public void addTodosTest() {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"sharmainec"},"content":"        Todos userInput1 \u003d new Todos(\"homework\");","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"sharmainec"},"content":"        assertEquals(\"[T][ ] homework\", userInput1.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"sharmainec"},"content":"        ","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"sharmainec"},"content":"        Todos userInput2 \u003d new Todos(\"CS2103T tutorial\");","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"sharmainec"},"content":"        assertEquals(\"[T][ ] CS2103T tutorial\", userInput2.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"sharmainec"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"sharmainec"},"content":"    public void addDeadlinesTest() {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"sharmainec"},"content":"        Deadlines userInput3 \u003d new Deadlines(\"project submission\", \"2021-09-23\");","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"sharmainec"},"content":"        assertEquals(\"[D][ ] project submission (by: Sep 23 2021)\", userInput3.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"sharmainec"},"content":"        Deadlines userInput4 \u003d new Deadlines(\"CS2103T assignment 1 submission\", \"2021-10-10\");","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"sharmainec"},"content":"        assertEquals(\"[D][ ] CS2103T assignment 1 submission (by: Oct 10 2021)\", userInput4.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"sharmainec"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"sharmainec"},"content":"    @Test","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"sharmainec"},"content":"    public void addEventsTest() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"sharmainec"},"content":"        Events userInput5 \u003d new Events(\"online recital\", \"2021-09-01\", \"18:00\");","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"sharmainec"},"content":"        assertEquals(\"[E][ ] online recital (at: Sep 01 2021 18:00)\", userInput5.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"sharmainec"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"sharmainec"},"content":"        Events userInput6 \u003d new Events(\"NYE party!!!\", \"2021-12-31\", \"23:30\");","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"sharmainec"},"content":"        assertEquals(\"[E][ ] NYE party!!! (at: Dec 31 2021 23:30)\", userInput6.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"sharmainec"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"sharmainec"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"sharmainec":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sharmainec"},"content":"todo read a book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"sharmainec"},"content":"deadline homework / by 4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"sharmainec"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"sharmainec"},"content":"event group meeting / at 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"sharmainec"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"sharmainec"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"sharmainec"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"sharmainec":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sharmainec"},"content":"java -classpath ..\\bin viper.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sharmainec":1,"-":20}}]

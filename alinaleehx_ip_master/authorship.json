[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"    mainClassName \u003d \u0027Wonderland.Launcher\u0027","lastModifiedDate":"2021-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"    archiveBaseName \u003d \"Wonderland\"","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"run {","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":20,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"**Wonderland** is your personal assistant for managing tasks, which you can use through Command Line Interface (CLI) ","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"as well as Graphical User Interface (GUI). Why bother remembering and tracking all the deadlines, events and todos ","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"when you have Wonderland? ","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"## Installation","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"### Prerequisites","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"1. If you have Java 11 installed in your computer you are all set!","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"2. Else, [download java](https://java.com/en/download/help/download_options.html).","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"### Setting Up","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"1. Download the `Wonderland.jar` from [here](https://github.com/alinaleehx/ip/releases/download/A-Release/Wonderland.jar)","lastModifiedDate":"2021-09-17"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"2. Once installed, double-click on `Wonderland.jar` to run the bot.","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"### Adding a task","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"Wonderland allows you to add 3 types of tasks:","lastModifiedDate":"2021-09-17"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"1. A todo ","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"2. A task with deadline","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"3. An event you\u0027ll be attending","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"### Deleting a task","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"Just delete a task from your task list if it\u0027s not relevant anymore!","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"### Listing all tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"Wonderland will collate your tasks and present them neatly showing all information.","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"### Marking a task as done","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":" ","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"Wonderland will mark the specified task as completed.","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"### Finding a task","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"Wonderland is able to find tasks based on the keywords you provide.","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"### Exiting the app","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"Bid farewell to Wonderland when you are done!","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"### Adding a task: `todo`, `deadline` or `event`","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"Adds a todo, deadline or event into the task list accordingly.","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"Format:","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"1. ```todo TASK_DESCRIPTION```","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"2. ```deadline TASK_DESCRIPTION /by DATE```","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"3. ```event TASK_DESCRIPTION /at DATE```","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"- DATE is in YYYY-MM-DD","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"- ```todo buy matchsticks```","lastModifiedDate":"2021-09-17"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"- ```deadline Quiz /by 2021-11-12```","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"- ```event Match /at 2021-11-01```","lastModifiedDate":"2021-09-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"Wonderland will send a message showing type, description and status ","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"of task once your task is successfully added.","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"alinaleehx"},"content":"Got it. I\u0027ve added this todo:","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"alinaleehx"},"content":"  [T][] buy matchsticks","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"alinaleehx"},"content":"Now you have 1 task in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"alinaleehx"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"alinaleehx"},"content":"### Deleting a task: `delete` ","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"alinaleehx"},"content":"Deletes the task of specified index from the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"alinaleehx"},"content":"Format:","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"alinaleehx"},"content":"```delete INDEX```","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"alinaleehx"},"content":"- Index must be greater than 0. ","lastModifiedDate":"2021-09-17"},{"lineNumber":76,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"alinaleehx"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"alinaleehx"},"content":"```delete 1```","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"alinaleehx"},"content":"Wonderland will send a message once your task have been deleted successfully.","lastModifiedDate":"2021-09-17"},{"lineNumber":81,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"alinaleehx"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":83,"author":{"gitId":"alinaleehx"},"content":"Noted! I\u0027ve removed this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"alinaleehx"},"content":"  [T][] buy matchsticks","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"alinaleehx"},"content":"Now you have 0 task in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"alinaleehx"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"alinaleehx"},"content":"### Listing all tasks: `list` ","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"alinaleehx"},"content":"Lists all the tasks from the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"alinaleehx"},"content":"Format: `list`","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"alinaleehx"},"content":"Wonderland will display all your tasks as an ordered list.","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"alinaleehx"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-17"},{"lineNumber":97,"author":{"gitId":"alinaleehx"},"content":"1. [T][ ] buy matchsticks","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"alinaleehx"},"content":"2. [D][ ] Quiz (by: Nov 12 2021)","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"alinaleehx"},"content":"3. [E][ ] Match (at: Nov 1 2021)","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"alinaleehx"},"content":"### Marking a task as done: `done` ","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"alinaleehx"},"content":"Marks the task of specified index as done.","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":105,"author":{"gitId":"alinaleehx"},"content":"Format:","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"alinaleehx"},"content":"```done INDEX```","lastModifiedDate":"2021-09-17"},{"lineNumber":107,"author":{"gitId":"alinaleehx"},"content":"- Index must be greater than 0","lastModifiedDate":"2021-09-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":110,"author":{"gitId":"alinaleehx"},"content":"```done 1```","lastModifiedDate":"2021-09-17"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":112,"author":{"gitId":"alinaleehx"},"content":"Wonderland will send a message once the specified task is marked as done.","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":114,"author":{"gitId":"alinaleehx"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"alinaleehx"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"alinaleehx"},"content":"  [T][X] buy matchsticks","lastModifiedDate":"2021-09-17"},{"lineNumber":117,"author":{"gitId":"alinaleehx"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"alinaleehx"},"content":"### Finding a task: `find` ","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"alinaleehx"},"content":"Finds a list of tasks that contains the specified keywords.","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":122,"author":{"gitId":"alinaleehx"},"content":"Format:","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"alinaleehx"},"content":"```find KEYWORD```","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":125,"author":{"gitId":"alinaleehx"},"content":"- The search is case-insensitive and returns results that matches partially ","lastModifiedDate":"2021-09-17"},{"lineNumber":126,"author":{"gitId":"alinaleehx"},"content":"  as well. e.g. `mat` will match `buy matchsticks` and `Match`. ","lastModifiedDate":"2021-09-17"},{"lineNumber":127,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"alinaleehx"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":129,"author":{"gitId":"alinaleehx"},"content":"```find mat```","lastModifiedDate":"2021-09-17"},{"lineNumber":130,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":131,"author":{"gitId":"alinaleehx"},"content":"Wonderland will show you a list of task that match with given keyword.","lastModifiedDate":"2021-09-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":134,"author":{"gitId":"alinaleehx"},"content":"Here are the matching task in your list:","lastModifiedDate":"2021-09-17"},{"lineNumber":135,"author":{"gitId":"alinaleehx"},"content":"1. [T][ ] buy matchsticks","lastModifiedDate":"2021-09-17"},{"lineNumber":136,"author":{"gitId":"alinaleehx"},"content":"2. [T][ ] Match ","lastModifiedDate":"2021-09-17"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":138,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":139,"author":{"gitId":"alinaleehx"},"content":"### Exiting the app: `bye` ","lastModifiedDate":"2021-09-17"},{"lineNumber":140,"author":{"gitId":"alinaleehx"},"content":"Exits the program","lastModifiedDate":"2021-09-17"},{"lineNumber":141,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":142,"author":{"gitId":"alinaleehx"},"content":"Format:","lastModifiedDate":"2021-09-17"},{"lineNumber":143,"author":{"gitId":"alinaleehx"},"content":"```bye```","lastModifiedDate":"2021-09-17"},{"lineNumber":144,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":145,"author":{"gitId":"alinaleehx"},"content":"### Saving the data","lastModifiedDate":"2021-09-17"},{"lineNumber":146,"author":{"gitId":"alinaleehx"},"content":"Wonderland data are saved in the hard disk automatically after any command that changes the data. ","lastModifiedDate":"2021-09-17"},{"lineNumber":147,"author":{"gitId":"alinaleehx"},"content":"There is no need to save manually.","lastModifiedDate":"2021-09-17"},{"lineNumber":148,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":149,"author":{"gitId":"alinaleehx"},"content":"## Command summary","lastModifiedDate":"2021-09-17"},{"lineNumber":150,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":151,"author":{"gitId":"alinaleehx"},"content":"Action | Format, Examples","lastModifiedDate":"2021-09-17"},{"lineNumber":152,"author":{"gitId":"alinaleehx"},"content":"--- | ---","lastModifiedDate":"2021-09-17"},{"lineNumber":153,"author":{"gitId":"alinaleehx"},"content":"**Add Todo** |```todo TASK```\u003cbr/\u003ee.g. ```todo buy noodles```","lastModifiedDate":"2021-09-17"},{"lineNumber":154,"author":{"gitId":"alinaleehx"},"content":"**Add Deadline** |```deadline TASK /by DATE```\u003cbr/\u003ee.g. ```deadline attempt quiz /by 2021-11-12```","lastModifiedDate":"2021-09-17"},{"lineNumber":155,"author":{"gitId":"alinaleehx"},"content":"**Add Event** |```event TASK /at DATE```\u003cbr/\u003ee.g. ```event family dinner /at 2022-9-10```","lastModifiedDate":"2021-09-17"},{"lineNumber":156,"author":{"gitId":"alinaleehx"},"content":"**Delete** |```delete INDEX```\u003cbr/\u003ee.g. ```delete 1```","lastModifiedDate":"2021-09-17"},{"lineNumber":157,"author":{"gitId":"alinaleehx"},"content":"**List** |`list`","lastModifiedDate":"2021-09-17"},{"lineNumber":158,"author":{"gitId":"alinaleehx"},"content":"**Done** |```done INDEX```\u003cbr\u003ee.g. ```done 1```","lastModifiedDate":"2021-09-17"},{"lineNumber":159,"author":{"gitId":"alinaleehx"},"content":"**Find** |```find KEYWORD```\u003cbr/\u003ee.g.```find home```","lastModifiedDate":"2021-09-17"},{"lineNumber":160,"author":{"gitId":"alinaleehx"},"content":"**Exit** |`bye`","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"alinaleehx":129,"-":31}},{"path":"src/main/java/Wonderland/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.Task;","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.TaskList;","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":" * The Wonderland.Wonderland.Command class encapsulates all commands behaviour for a bot.","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"public class Command {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"     * Returns added message for command to-do.","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of to-do Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"     * @return added message for command to-do.","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"     * @throws DukeException if description is empty.","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"    public String todo(String description, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\" +","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"                    \"\\nIf you don\u0027t think, you shouldn\u0027t talk!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"        return tasks.addTodo(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"     * Returns added message for command event.","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of event Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"     * @param at string of event date/time.","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of list of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"     * @return added message for command event.","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"     * @throws DukeException if description or date/time is empty or  not YYYY-MM-DD.","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"    public String event(String description, String at, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"The description of an event cannot be empty.\" +","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"                    \"\\nIf you don\u0027t think, you shouldn\u0027t talk!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"        LocalDate date;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"            date \u003d LocalDate.parse(at.trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"OOPS!! Date and Time must be specified by YYYY-MM-DD\");","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"        return tasks.addEvent(description, date);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"     * Returns added message for command deadline.","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of deadline Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"     * @param by string of deadline date/time.","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of list of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"     * @return added message for command deadline.","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"     * @throws DukeException if description or date/time is empty or not YYYY-MM-DD.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"    public String deadline(String description, String by, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"alinaleehx"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\" +","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"alinaleehx"},"content":"                    \"\\nIf you don\u0027t think, you shouldn\u0027t talk!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"alinaleehx"},"content":"        LocalDate date;","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"alinaleehx"},"content":"            date \u003d LocalDate.parse(by.trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"alinaleehx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"OOPS!! Date and Time must be specified by YYYY-MM-DD\");","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"alinaleehx"},"content":"        return tasks.addDeadline(description, date);","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"alinaleehx"},"content":"     * Returns message representing list of all items user added.","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":83,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"alinaleehx"},"content":"     * @return formatted string representing elements in records array.","lastModifiedDate":"2021-08-17"},{"lineNumber":85,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":86,"author":{"gitId":"alinaleehx"},"content":"    public String list(TaskList tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"alinaleehx"},"content":"        return tasks.list();","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"alinaleehx"},"content":"     * Returns delete message for bot.","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"alinaleehx"},"content":"     * @param index index of Wonderland.Wonderland.task to be deleted.","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of list of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"alinaleehx"},"content":"     * @return delete message for bot.","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"alinaleehx"},"content":"    public String delete(int index, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"alinaleehx"},"content":"        if (index \u003c\u003d 0) {","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"Index must be greater than 0!! \" +","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"alinaleehx"},"content":"                    \"\\nJust get it right and stop wasting time! I\u0027m late!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"alinaleehx"},"content":"        } else if (index \u003e tasks.length()) {","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(String.format(\"OOPS!!! You only have %1$d tasks\",tasks.length()));","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"alinaleehx"},"content":"        return tasks.delete(index - 1);","lastModifiedDate":"2021-09-17"},{"lineNumber":105,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":107,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":108,"author":{"gitId":"alinaleehx"},"content":"     * Return Wonderland.Wonderland.task mark as done message.","lastModifiedDate":"2021-09-17"},{"lineNumber":109,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":110,"author":{"gitId":"alinaleehx"},"content":"     * @param index index of task that is done.","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks TaskList of list of existing tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"alinaleehx"},"content":"     * @return Task mark as done message.","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":114,"author":{"gitId":"alinaleehx"},"content":"    public String done(int index, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"alinaleehx"},"content":"        if (index \u003c\u003d 0) {","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"Index must be greater than 0!! \" +","lastModifiedDate":"2021-09-17"},{"lineNumber":117,"author":{"gitId":"alinaleehx"},"content":"                    \"\\nJust get it right and stop wasting time! I\u0027m late!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"alinaleehx"},"content":"        } else if (index \u003e tasks.length()) {","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(String.format(\"OOPS!!! You only have %1$d tasks\",tasks.length()));","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"alinaleehx"},"content":"        Task done \u003d tasks.getTask(index - 1);","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"alinaleehx"},"content":"        done.markAsDone();","lastModifiedDate":"2021-08-17"},{"lineNumber":123,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"Nice! I\u0027ve marked this task as done:\\n\\t %1$s \\n\\t\", done.toString());","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":125,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":126,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"alinaleehx"},"content":"     * Return message for tasks matched with keyword.","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"alinaleehx"},"content":"     * @param keyword String of keyword to be matched.","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of list of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":132,"author":{"gitId":"alinaleehx"},"content":"     * @return message for all tasks matched with keyword.","lastModifiedDate":"2021-08-24"},{"lineNumber":133,"author":{"gitId":"alinaleehx"},"content":"     * @throws DukeException if keyword is empty.","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"alinaleehx"},"content":"    public String find(String keyword, TaskList tasks) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"alinaleehx"},"content":"        if (keyword.isEmpty()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"OOPS!!! No keyword provided.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"alinaleehx"},"content":"        return tasks.find(keyword);","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":141,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"alinaleehx":141}},{"path":"src/main/java/Wonderland/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker and a label","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    private DialogBox(String text, Image image) {","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"        Circle clip \u003d new Circle(50,40,40);","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"        displayPicture.setImage(image);","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"        displayPicture.setClip(clip);","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"    private void flip() {","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"    public static DialogBox getUserDialog(String text, Image image) {","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"        return new DialogBox(text, image);","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"    public static DialogBox getDukeDialog(String text, Image image) {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"        DialogBox db \u003d new DialogBox(text, image);","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"        db.flip();","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"        return db;","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"alinaleehx":64}},{"path":"src/main/java/Wonderland/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":" * Wonderland.DukeException class represents exceptions specific to Wonderland.Wonderland and provides","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":" * understandable error message.","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"     * Returns string representing error message.","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"     * @return string representation of error message.","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"        return super.getMessage() + \"\\n\\t\";","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"alinaleehx":21}},{"path":"src/main/java/Wonderland/Keyword.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"public enum Keyword {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"    LIST (\"list\"),","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"    DONE (\"done\"),","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"    TODO (\"todo\"),","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"    DEADLINE (\"deadline\"),","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"    EVENT (\"event\"),","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"    DELETE (\"delete\"),","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"    FIND(\"find\");","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    private String command;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"    Keyword(String command) {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"    public String toString() {","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"        return command;","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"alinaleehx":22}},{"path":"src/main/java/Wonderland/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"alinaleehx":9}},{"path":"src/main/java/Wonderland/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":" * A GUI for Wonderland using FXML.","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    private Wonderland wonderland \u003d new Wonderland();","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"            stage.setTitle(\"Wonderland\");","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"            stage.getIcons().add(new Image(\"/images/rabbit.png\"));","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(wonderland);","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"            stage.show();","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":34}},{"path":"src/main/java/Wonderland/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"    private Wonderland wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    private static final String GREET_MESSAGE \u003d \"Welcome to Wonderland! What do you want? \" +","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"            \"\\nI\u0027m running late so make it quick.\";","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rabbit.png\"));","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     * Sets up the welcome message.","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"                DialogBox.getDukeDialog(GREET_MESSAGE, dukeImage)","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"        );","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"    public void setDuke(Wonderland d) {","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"        wonderland \u003d d;","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Wonderland\u0027s reply and then appends them to","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"        DialogBox userDialogBox \u003d DialogBox.getUserDialog(userInput.getText(), userImage);","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"        DialogBox dukeDialogBox \u003d DialogBox.getDukeDialog(wonderland.getResponse(userInput.getText()), dukeImage);","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"                userDialogBox, dukeDialogBox","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"        );","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":59}},{"path":"src/main/java/Wonderland/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"public class Parser {","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"     * Checks if command is valid keyword.","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"     * @param input command","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"     * @return Keyword","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"     * @throws DukeException if command is invalid keyword.","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"    public static Keyword parse(String input) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"        switch (input) {","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"        case \"list\":","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.LIST;","lastModifiedDate":"2021-09-17"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"        case \"done\":","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.DONE;","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"        case \"todo\":","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.TODO;","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"        case \"deadline\":","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.DEADLINE;","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"        case \"event\":","lastModifiedDate":"2021-09-17"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.EVENT;","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"        case \"delete\":","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.DELETE;","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"        case \"find\":","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.FIND;","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"        default:","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"What?? That\u0027s not a valid keyword!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     * Checks if command is valid keyword.","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"     * @param input command","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"     * @return Keyword","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"     * @throws DukeException if command is invalid keyword.","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"    public static Keyword parseForGui(String input) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"        if (input.startsWith(\"list\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.LIST;","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.FIND;","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"        } else if (input.startsWith(\"done\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.DONE;","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.DELETE;","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"        } else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.TODO;","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.DEADLINE;","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"            return Keyword.EVENT;","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"        } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"            throw new DukeException(\"What?? That\u0027s not a valid keyword!\");","lastModifiedDate":"2021-09-17"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"    private static boolean checkInvalidCommand(String input, Keyword keyword) {","lastModifiedDate":"2021-09-17"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"        switch (keyword) {","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"        case DONE:","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"            return input.trim().equals(\"done\");","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"        case FIND:","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"            return input.trim().equals(\"find\");","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"alinaleehx"},"content":"        case DELETE:","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"alinaleehx"},"content":"            return input.trim().equals(\"delete\");","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"alinaleehx"},"content":"        case TODO:","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"alinaleehx"},"content":"            return input.trim().equals(\"todo\");","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"alinaleehx"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"alinaleehx"},"content":"            return input.trim().equals(\"deadline\") || !input.contains(\"/by \");","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"alinaleehx"},"content":"        case EVENT:","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"alinaleehx"},"content":"            return input.trim().equals(\"event\") || !input.contains(\"/at \");","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"alinaleehx"},"content":"        default:","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"alinaleehx"},"content":"            return true;","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":76,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"alinaleehx"},"content":"    public static String getInfo(String input, Keyword keyword) {","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"alinaleehx"},"content":"        switch (keyword) {","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"alinaleehx"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-17"},{"lineNumber":81,"author":{"gitId":"alinaleehx"},"content":"            if (checkInvalidCommand(input, keyword)) {","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"alinaleehx"},"content":"                return \" /by  \";","lastModifiedDate":"2021-09-17"},{"lineNumber":83,"author":{"gitId":"alinaleehx"},"content":"            } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"alinaleehx"},"content":"                return input.split(keyword.toString())[1];","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"alinaleehx"},"content":"        case EVENT:","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"alinaleehx"},"content":"            if (checkInvalidCommand(input, keyword)) {","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"alinaleehx"},"content":"                return \" /at  \";","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"alinaleehx"},"content":"            } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"alinaleehx"},"content":"                return input.split(keyword.toString())[1];","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"alinaleehx"},"content":"        case DONE:","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"alinaleehx"},"content":"        case DELETE:","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"alinaleehx"},"content":"            if (checkInvalidCommand(input, keyword)) {","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"alinaleehx"},"content":"                return \"-1\";","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"alinaleehx"},"content":"            } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":97,"author":{"gitId":"alinaleehx"},"content":"                return input.split(keyword.toString())[1].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"alinaleehx"},"content":"        case FIND:","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"alinaleehx"},"content":"        case TODO:","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"alinaleehx"},"content":"            if (checkInvalidCommand(input, keyword)) {","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"alinaleehx"},"content":"                return \"\";","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"alinaleehx"},"content":"            } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"alinaleehx"},"content":"                return input.split(keyword.toString())[1].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":105,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"alinaleehx"},"content":"        default:","lastModifiedDate":"2021-09-17"},{"lineNumber":107,"author":{"gitId":"alinaleehx"},"content":"            return \"\";","lastModifiedDate":"2021-09-17"},{"lineNumber":108,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":109,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":110,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"alinaleehx":110}},{"path":"src/main/java/Wonderland/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.Deadline;","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.Event;","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.Task;","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.TaskList;","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.Todo;","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"import java.io.File;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"    private final File file;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"     * Constructor for storage.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"     * @param filePath a fixed file path for records data.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"     * Returns list of tasks records from file.","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     * @return list of tasks records.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"     * @throws IOException","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"    public ArrayList\u003cTask\u003e getTasks() throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"        ArrayList\u003cTask\u003e records \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"        FileReader fileReader \u003d new FileReader(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"        BufferedReader reader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"        String line;","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"            String[] entry \u003d line.split(\"/next\", 4);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"            String taskType \u003d entry[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"            String isDone \u003d entry[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"            Task task;","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"            case \"T\":","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"                task \u003d new Todo(entry[2]);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"                checkIsDone(isDone, task);","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"                records.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"            case \"D\":","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"                task \u003d new Deadline(entry[2], LocalDate.parse(entry[3]));","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"                checkIsDone(isDone, task);","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"                records.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"            case \"E\":","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"                task \u003d new Event(entry[2], LocalDate.parse(entry[3]));","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"                checkIsDone(isDone, task);","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"                records.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"            default:","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"                throw new IOException();","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"alinaleehx"},"content":"        reader.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"alinaleehx"},"content":"        return records;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"alinaleehx"},"content":"    private void checkIsDone(String isDone, Task task) {","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"alinaleehx"},"content":"        if (isDone.equals(\"true\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":72,"author":{"gitId":"alinaleehx"},"content":"            task.markAsDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"alinaleehx"},"content":"     * Update tasks record in fixed file.","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"alinaleehx"},"content":"     * @param tasks Wonderland.Wonderland.task.TaskList of existing tasks.","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"alinaleehx"},"content":"     * @throws IOException","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"alinaleehx"},"content":"    public void writeToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"alinaleehx"},"content":"        StringBuilder textToAdd \u003d new StringBuilder();","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"alinaleehx"},"content":"        for (int i \u003d 0; i \u003c tasks.length(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"alinaleehx"},"content":"            Task task \u003d tasks.getTask(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"alinaleehx"},"content":"            textToAdd.append(task.toFileEntry());","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"alinaleehx"},"content":"            textToAdd.append(\"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"alinaleehx"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"alinaleehx"},"content":"        fw.write(textToAdd.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"alinaleehx"},"content":"        fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"alinaleehx":93}},{"path":"src/main/java/Wonderland/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"    private static final String GREET_MESSAGE \u003d \"Welcome to Wonderland! What do you want?\\n\\t\" +","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"            \"I\u0027m running late so make it quick.\\n\\t\";","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"    private static final String BYE_MESSAGE \u003d \"No time to say \u0027hello, goodbye,\u0027 I\u0027m late, I\u0027m late, I\u0027m late!\\n\\t\";","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"     * Returns formatted output string for bot message.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"     * @param input An input string.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"     * @return a formatted string for bot message.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"    private static String format(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"\\t--------------------- \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"                \"\\n\\t%1$s--------------------- \", input);","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"     * Prints greeting message for bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"    public static void greet() {","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"        System.out.println(format(GREET_MESSAGE));","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"     * Prints ending message for bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    public static void end() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"        System.out.println(format(BYE_MESSAGE));","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     * Prints messages in proper format.","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"     * @param message String to be printed properly.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"    public static void display(String message) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"        System.out.println(format(message));","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"     * Prints message for missing date in proper format.","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"     * @param keyword Wonderland.Keyword to show which message to print.","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"    public static void missingDate(Keyword keyword) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"        if (keyword.equals(Keyword.EVENT)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"            System.out.println(format(\"OOPS!!! No date for event! \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"                    \"Use format of event description /at YYYY-MM-DD \\n\\t\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"        } else if (keyword.equals(Keyword.DEADLINE)){","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"            System.out.println(format(\"OOPS!!! No date for deadline! \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"                    \"Use format of deadline description /by YYYY-MM-DD \\n\\t\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"alinaleehx":55}},{"path":"src/main/java/Wonderland/Wonderland.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.TaskList;","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"public class Wonderland {","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"    private Command commands \u003d new Command();","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    private String file_path;","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"    private final String BYE_MESSAGE \u003d \"No time to say \u0027hello, goodbye\u0027. I\u0027m late, I\u0027m late, I\u0027m late!\";","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"    private final String STORAGE_ERROR_MESSAGE \u003d \"Error in saving data to storage\";","lastModifiedDate":"2021-09-17"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"     * Constructor for Wonderland.","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"    public Wonderland() {","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"        this.file_path \u003d \"./data.txt\";","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"            this.storage \u003d new Storage(file_path);","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"            tasks \u003d new TaskList(this.storage.getTasks());","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"            this.storage \u003d new Storage(file_path);","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"            tasks \u003d new TaskList(null);","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"     * Returns the response from Wonderland given the user input to be shown on the GUI.","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"        final String errorMessage \u003d \"Not a valid command!!\";","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"        String response \u003d null;","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"            return BYE_MESSAGE;","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"        } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"            Keyword keyword \u003d null;","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"            try {","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"                keyword \u003d Parser.parseForGui(input);","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"                keyword \u003d null;","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"                return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"            switch (keyword) {","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"            case LIST:","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"                response \u003d commands.list(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"            case FIND:","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"                String key \u003d Parser.getInfo(input, keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"                try {","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d commands.find(key, tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"                    return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"            case DONE:","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"                String number \u003d Parser.getInfo(input, keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"                try {","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"                    int index \u003d Integer.parseInt(number);","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d commands.done(index, tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"                } catch (NumberFormatException err) {","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d \"Please provide a task number!!\";","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"alinaleehx"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"alinaleehx"},"content":"                    return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"alinaleehx"},"content":"            case DELETE:","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"alinaleehx"},"content":"                String toDelete \u003d Parser.getInfo(input, keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"alinaleehx"},"content":"                try {","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"alinaleehx"},"content":"                    int index \u003d Integer.parseInt(toDelete);","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d commands.delete(index, tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"alinaleehx"},"content":"                } catch (NumberFormatException err) {","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d \"Please provide a task number!!\";","lastModifiedDate":"2021-09-17"},{"lineNumber":76,"author":{"gitId":"alinaleehx"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"alinaleehx"},"content":"                    return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"alinaleehx"},"content":"            case TODO:","lastModifiedDate":"2021-09-17"},{"lineNumber":81,"author":{"gitId":"alinaleehx"},"content":"                String todo \u003d Parser.getInfo(input, keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"alinaleehx"},"content":"                try {","lastModifiedDate":"2021-09-17"},{"lineNumber":83,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d commands.todo(todo, tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"alinaleehx"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"alinaleehx"},"content":"                    return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"alinaleehx"},"content":"            case DEADLINE:","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"alinaleehx"},"content":"                String deadline \u003d Parser.getInfo(input, keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"alinaleehx"},"content":"                String[] txt \u003d deadline.split(\"/by \");","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"alinaleehx"},"content":"                try {","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d commands.deadline(txt[0].trim(), txt[1].trim(), tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"alinaleehx"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"alinaleehx"},"content":"                    return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":97,"author":{"gitId":"alinaleehx"},"content":"            case EVENT:","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"alinaleehx"},"content":"                String event \u003d Parser.getInfo(input, keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"alinaleehx"},"content":"                String[] text \u003d event.split(\"/at \");","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"alinaleehx"},"content":"                try {","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"alinaleehx"},"content":"                    response \u003d commands.event(text[0].trim(), text[1], tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"alinaleehx"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"alinaleehx"},"content":"                    return e.toString();","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":105,"author":{"gitId":"alinaleehx"},"content":"                break;","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"alinaleehx"},"content":"            default:","lastModifiedDate":"2021-09-17"},{"lineNumber":107,"author":{"gitId":"alinaleehx"},"content":"                return errorMessage;","lastModifiedDate":"2021-09-17"},{"lineNumber":108,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":109,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":110,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":111,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":112,"author":{"gitId":"alinaleehx"},"content":"            storage.writeToFile(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"alinaleehx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":114,"author":{"gitId":"alinaleehx"},"content":"            return STORAGE_ERROR_MESSAGE;","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"alinaleehx"},"content":"        return response;","lastModifiedDate":"2021-09-17"},{"lineNumber":117,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"alinaleehx"},"content":"     * Starts the bot.","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"alinaleehx"},"content":"    public void start() {","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"alinaleehx"},"content":"        Ui.greet();","lastModifiedDate":"2021-09-17"},{"lineNumber":125,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":126,"author":{"gitId":"alinaleehx"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-17"},{"lineNumber":127,"author":{"gitId":"alinaleehx"},"content":"        String input;","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"alinaleehx"},"content":"        while (!((input \u003d scanner.next().toLowerCase()).equals(\"bye\"))) {","lastModifiedDate":"2021-09-17"},{"lineNumber":129,"author":{"gitId":"alinaleehx"},"content":"            Keyword keyword \u003d null;","lastModifiedDate":"2021-09-17"},{"lineNumber":130,"author":{"gitId":"alinaleehx"},"content":"            try {","lastModifiedDate":"2021-09-17"},{"lineNumber":131,"author":{"gitId":"alinaleehx"},"content":"                keyword \u003d Parser.parse(input);","lastModifiedDate":"2021-09-17"},{"lineNumber":132,"author":{"gitId":"alinaleehx"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":133,"author":{"gitId":"alinaleehx"},"content":"                Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":134,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":135,"author":{"gitId":"alinaleehx"},"content":"            if (keyword !\u003d null) {","lastModifiedDate":"2021-09-17"},{"lineNumber":136,"author":{"gitId":"alinaleehx"},"content":"                final String errorMessage \u003d \"Not a valid command!!\";","lastModifiedDate":"2021-09-17"},{"lineNumber":137,"author":{"gitId":"alinaleehx"},"content":"                switch (keyword) {","lastModifiedDate":"2021-09-17"},{"lineNumber":138,"author":{"gitId":"alinaleehx"},"content":"                case LIST:","lastModifiedDate":"2021-09-17"},{"lineNumber":139,"author":{"gitId":"alinaleehx"},"content":"                    Ui.display(commands.list(tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":140,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":141,"author":{"gitId":"alinaleehx"},"content":"                case TODO:","lastModifiedDate":"2021-09-17"},{"lineNumber":142,"author":{"gitId":"alinaleehx"},"content":"                    try {","lastModifiedDate":"2021-09-17"},{"lineNumber":143,"author":{"gitId":"alinaleehx"},"content":"                        String text \u003d scanner.nextLine().trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":144,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(commands.todo(text, tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":145,"author":{"gitId":"alinaleehx"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":146,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":147,"author":{"gitId":"alinaleehx"},"content":"                    }","lastModifiedDate":"2021-09-17"},{"lineNumber":148,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":149,"author":{"gitId":"alinaleehx"},"content":"                case EVENT:","lastModifiedDate":"2021-09-17"},{"lineNumber":150,"author":{"gitId":"alinaleehx"},"content":"                    String[] text \u003d scanner.nextLine().split(\"/at \");","lastModifiedDate":"2021-09-17"},{"lineNumber":151,"author":{"gitId":"alinaleehx"},"content":"                    try {","lastModifiedDate":"2021-09-17"},{"lineNumber":152,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(commands.event(text[0].trim(), text[1], tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":153,"author":{"gitId":"alinaleehx"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":154,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":155,"author":{"gitId":"alinaleehx"},"content":"                    } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":156,"author":{"gitId":"alinaleehx"},"content":"                        Ui.missingDate(keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":157,"author":{"gitId":"alinaleehx"},"content":"                    }","lastModifiedDate":"2021-09-17"},{"lineNumber":158,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":159,"author":{"gitId":"alinaleehx"},"content":"                case DEADLINE:","lastModifiedDate":"2021-09-17"},{"lineNumber":160,"author":{"gitId":"alinaleehx"},"content":"                    String[] txt \u003d scanner.nextLine().split(\"/by \");","lastModifiedDate":"2021-09-17"},{"lineNumber":161,"author":{"gitId":"alinaleehx"},"content":"                    try {","lastModifiedDate":"2021-09-17"},{"lineNumber":162,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(commands.deadline(txt[0].trim(), txt[1], tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":163,"author":{"gitId":"alinaleehx"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":164,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":165,"author":{"gitId":"alinaleehx"},"content":"                    } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":166,"author":{"gitId":"alinaleehx"},"content":"                        Ui.missingDate(keyword);","lastModifiedDate":"2021-09-17"},{"lineNumber":167,"author":{"gitId":"alinaleehx"},"content":"                    }","lastModifiedDate":"2021-09-17"},{"lineNumber":168,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":169,"author":{"gitId":"alinaleehx"},"content":"                case DONE:","lastModifiedDate":"2021-09-17"},{"lineNumber":170,"author":{"gitId":"alinaleehx"},"content":"                    int doneIndex \u003d scanner.nextInt();","lastModifiedDate":"2021-09-17"},{"lineNumber":171,"author":{"gitId":"alinaleehx"},"content":"                    try {","lastModifiedDate":"2021-09-17"},{"lineNumber":172,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(commands.done(doneIndex, tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":173,"author":{"gitId":"alinaleehx"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":174,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":175,"author":{"gitId":"alinaleehx"},"content":"                    }","lastModifiedDate":"2021-09-17"},{"lineNumber":176,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":177,"author":{"gitId":"alinaleehx"},"content":"                case DELETE:","lastModifiedDate":"2021-09-17"},{"lineNumber":178,"author":{"gitId":"alinaleehx"},"content":"                    int deleteIndex \u003d (scanner.nextInt());","lastModifiedDate":"2021-09-17"},{"lineNumber":179,"author":{"gitId":"alinaleehx"},"content":"                    try {","lastModifiedDate":"2021-09-17"},{"lineNumber":180,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(commands.delete(deleteIndex, tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":181,"author":{"gitId":"alinaleehx"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":182,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":183,"author":{"gitId":"alinaleehx"},"content":"                    }","lastModifiedDate":"2021-09-17"},{"lineNumber":184,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":185,"author":{"gitId":"alinaleehx"},"content":"                case FIND:","lastModifiedDate":"2021-09-17"},{"lineNumber":186,"author":{"gitId":"alinaleehx"},"content":"                    try {","lastModifiedDate":"2021-09-17"},{"lineNumber":187,"author":{"gitId":"alinaleehx"},"content":"                        String key \u003d scanner.nextLine().trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":188,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(commands.find(key, tasks));","lastModifiedDate":"2021-09-17"},{"lineNumber":189,"author":{"gitId":"alinaleehx"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":190,"author":{"gitId":"alinaleehx"},"content":"                        Ui.display(e.toString());","lastModifiedDate":"2021-09-17"},{"lineNumber":191,"author":{"gitId":"alinaleehx"},"content":"                    }","lastModifiedDate":"2021-09-17"},{"lineNumber":192,"author":{"gitId":"alinaleehx"},"content":"                    break;","lastModifiedDate":"2021-09-17"},{"lineNumber":193,"author":{"gitId":"alinaleehx"},"content":"                default:","lastModifiedDate":"2021-09-17"},{"lineNumber":194,"author":{"gitId":"alinaleehx"},"content":"                    Ui.display(errorMessage);","lastModifiedDate":"2021-09-17"},{"lineNumber":195,"author":{"gitId":"alinaleehx"},"content":"                }","lastModifiedDate":"2021-09-17"},{"lineNumber":196,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":197,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":198,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":199,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":200,"author":{"gitId":"alinaleehx"},"content":"            storage.writeToFile(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":201,"author":{"gitId":"alinaleehx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":202,"author":{"gitId":"alinaleehx"},"content":"            System.out.println(STORAGE_ERROR_MESSAGE);","lastModifiedDate":"2021-09-17"},{"lineNumber":203,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":204,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":205,"author":{"gitId":"alinaleehx"},"content":"        scanner.close();","lastModifiedDate":"2021-09-17"},{"lineNumber":206,"author":{"gitId":"alinaleehx"},"content":"        Ui.end();","lastModifiedDate":"2021-09-17"},{"lineNumber":207,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":208,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":209,"author":{"gitId":"alinaleehx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-17"},{"lineNumber":210,"author":{"gitId":"alinaleehx"},"content":"        Wonderland bot \u003d new Wonderland();","lastModifiedDate":"2021-09-17"},{"lineNumber":211,"author":{"gitId":"alinaleehx"},"content":"        bot.start();","lastModifiedDate":"2021-09-17"},{"lineNumber":212,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":213,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"alinaleehx":213}},{"path":"src/main/java/Wonderland/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":" * The Wonderland.Wonderland.task.Deadline class extends Wonderland.Wonderland.task.Task class and encapsulate a deadline Wonderland.Wonderland.task","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":" * that need to be done before a specific date/time.","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"    private final String symbol \u003d \"[D]\";","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"     * Constructor for a deadline object.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"     * @param description String description of deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"     * @param by LocalDate of deadline due date.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"     * Returns string for saving deadline Wonderland.Wonderland.task to data file.","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"     * @return string for saving deadline Wonderland.Wonderland.task to data file.","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"    public String toFileEntry() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"        return \"D\" +\"/next\"+ super.isDone + \"/next\" + super.description + \"/next\" + this.by.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"     * Returns string representation of deadline object.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"     * @return string representation of deadline object.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"        return this.symbol + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) +\")\";","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"alinaleehx":44}},{"path":"src/main/java/Wonderland/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":" * The Wonderland.Wonderland.task.Event class extends Wonderland.Wonderland.task.Task class and encapsulate an event Wonderland.Wonderland.task","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":" * that start at a specific time and ends at a specific time.","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"    private final String symbol \u003d \"[E]\";","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    protected LocalDate at;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"     * Constructor for an event Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"     * @param description String description of event.","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"     * @param at LocalDate of event time.","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"     * Returns string for saving event Wonderland.Wonderland.task to data file.","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"     * @return string for saving event Wonderland.Wonderland.task to data file.","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"    public String toFileEntry() {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"        return \"E\" + \"/next\"+ super.isDone + \"/next\" + super.description + \"/next\" + this.at.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"     * Returns string representation of event object.","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"     * @return string representation of event object.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"        return this.symbol + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) +\")\";","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"alinaleehx":44}},{"path":"src/main/java/Wonderland/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":" * The Wonderland.Wonderland.task.Task class encapsulates a Wonderland.Wonderland.task with a String description","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":" * and a boolean representing if Wonderland.Wonderland.task is done.","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"     * Constructor for Wonderland.Wonderland.task and takes in Wonderland.Wonderland.task description.","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"     * Returns X if isDone true.","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"     * @return \"X\" if isDone true.","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"        return isDone? \"X\" : \" \";","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"     * Marks Wonderland.Wonderland.task as done.","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"    public abstract String toFileEntry();","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"     * Returns string representation of Wonderland.Wonderland.task object.","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"     * @return string representation of Wonderland.Wonderland.task object.","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"[%1$s] %2$s\", getStatusIcon(), description);","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"alinaleehx":48}},{"path":"src/main/java/Wonderland/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"    private ArrayList\u003cTask\u003e records;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"    public TaskList(ArrayList\u003cTask\u003e existingRecords) {","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"        if (existingRecords !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"            this.records \u003d existingRecords;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"            this.records \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"     * Returns message for adding a to-do task.","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of to-do task.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"     * @return added message for to-do task.","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"    public String addTodo(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"        Todo toAdd \u003d new Todo(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"        records.add(toAdd);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"Got it. I\u0027ve added this todo:\\n\\t %1$s \\n\\t\" +","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"                \"Now you have %2$d tasks in the list.\\n\\t\", toAdd.toString(), records.size());","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"     * Returns message for adding an event task.","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of event task.","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"     * @param at string of event date/time.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"     * @return added message for command event.","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"    public String addEvent(String description, LocalDate at) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"        Event toAdd \u003d new Event(description, at);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"        records.add(toAdd);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"Got it. I\u0027ve added this event:\\n\\t %1$s \\n\\t\" +","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"                \"Now you have %2$d tasks in the list.\\n\\t\", toAdd.toString(), records.size());","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"alinaleehx"},"content":"     * Returns message for adding deadline task.","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"alinaleehx"},"content":"     * @param description description of deadline task.","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"alinaleehx"},"content":"     * @param by string of deadline date/time.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"alinaleehx"},"content":"     * @return added message for adding deadline task.","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"alinaleehx"},"content":"    public String addDeadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"alinaleehx"},"content":"        Deadline toAdd \u003d new Deadline(description, by);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"alinaleehx"},"content":"        records.add(toAdd);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"Got it. I\u0027ve added this deadline:\\n\\t %1$s \\n\\t\" +","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"alinaleehx"},"content":"                \"Now you have %2$d tasks in the list.\\n\\t\", toAdd.toString(), records.size());","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"alinaleehx"},"content":"     * Returns delete message for bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"alinaleehx"},"content":"     * @param index index of task to be deleted.","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"alinaleehx"},"content":"     * @return delete message for bot.","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"alinaleehx"},"content":"    public String delete(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"alinaleehx"},"content":"        Task removedTask \u003d records.remove(index);","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"alinaleehx"},"content":"        return String.format(\"Noted! I\u0027ve removed this task:\\n\\t %1$s\\n\\t\" +","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"alinaleehx"},"content":"                \"Now you have %2$d tasks in the list.\\n\\t\", removedTask.toString(), records.size());","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"alinaleehx"},"content":"     * Returns message representing list of all items user added.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"alinaleehx"},"content":"     * @return formatted string representing elements in records array.","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"alinaleehx"},"content":"    public String list() {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"alinaleehx"},"content":"        final StringBuilder list \u003d new StringBuilder(\"Here are the tasks in your list:\\n\\t\");","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"alinaleehx"},"content":"        records.forEach((el) -\u003e list.append(","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"alinaleehx"},"content":"                String.format(\"%1$d. %2$s \\n\\t\",","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"alinaleehx"},"content":"                        records.indexOf(el) + 1, el.toString())));","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"alinaleehx"},"content":"        return list.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"alinaleehx"},"content":"     * Returns matches in task list for keyword.","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"alinaleehx"},"content":"     * @param keyword String","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"alinaleehx"},"content":"     * @return Returns matches in task list for keyword.","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"alinaleehx"},"content":"    public String find(String keyword) {","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"alinaleehx"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"alinaleehx"},"content":"        final StringBuilder matchedTasks \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\\t\");","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"alinaleehx"},"content":"        for (int i \u003d 0; i \u003c records.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"alinaleehx"},"content":"            Task current \u003d records.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"alinaleehx"},"content":"            if (current.description.toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"alinaleehx"},"content":"                result.add(current);","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"alinaleehx"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"alinaleehx"},"content":"        result.forEach((el) -\u003e matchedTasks.append(","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"alinaleehx"},"content":"                String.format(\"%1$d. %2$s \\n\\t\",","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"alinaleehx"},"content":"                        result.indexOf(el) + 1, el.toString())));","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"alinaleehx"},"content":"        return matchedTasks.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"alinaleehx"},"content":"     * Returns task at given index.","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"alinaleehx"},"content":"     * @param index int","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"alinaleehx"},"content":"     * @return task at given index.","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"alinaleehx"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"alinaleehx"},"content":"        return records.get(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"alinaleehx"},"content":"     * Returns number of tasks in tasklist.","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"alinaleehx"},"content":"     * @return number of tasks in tasklist.","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"alinaleehx"},"content":"    public int length() {","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"alinaleehx"},"content":"        return records.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"alinaleehx":121}},{"path":"src/main/java/Wonderland/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"package Wonderland.task;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"/**","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":" * The To-do class extends Wonderland.Wonderland.task.Task class and encapsulates a to-do Wonderland.Wonderland.task","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":" * with no time attached. ","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":" */","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"    private final String symbol \u003d \"[T]\";","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"     * Constructor for an to-do Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"     * @param description String description of to-do Wonderland.Wonderland.task.","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"     * Returns string for saving to-do Wonderland.Wonderland.task to data file.","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"     * @return string for saving to-do Wonderland.Wonderland.task to data file.","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"    public String toFileEntry() {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"        return \"T\" + \"/next\" + super.isDone + \"/next\" + super.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"     * Returns string representation of to-do object.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"     *","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"     * @return string representation of to-do object.","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"        return this.symbol + super.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"alinaleehx":38}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"Wonderland.MainWindow\"\u003e","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":19}},{"path":"src/test/java/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.DukeException;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"import org.junit.Test;","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.task.TaskList;","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.Command;","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"public class CommandTest {","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"    @Test","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"    public void deadline_emptyDescription_exceptionThrown() {","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"        String by \u003d \"2021-09-11\";","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"        Command command \u003d new Command();","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"            command.deadline(description, by, tasks);","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"            output \u003d e.toString().trim();","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"alinaleehx"},"content":"        assertEquals(\"OOPS!!! The description of a deadline cannot be empty.\", output);","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"alinaleehx"},"content":"    @Test","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"alinaleehx"},"content":"    public void deadline_validInput() {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"alinaleehx"},"content":"        String description \u003d \"deadline 1\";","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"alinaleehx"},"content":"        String by \u003d \"2021-09-11\";","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"alinaleehx"},"content":"        Command command \u003d new Command();","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"alinaleehx"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"alinaleehx"},"content":"        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"alinaleehx"},"content":"            output \u003d command.deadline(description, by, new TaskList(new ArrayList\u003c\u003e()));","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"alinaleehx"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"alinaleehx"},"content":"        assertEquals(tasks.addDeadline(description, LocalDate.parse(by.trim())), output);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":41}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.DukeException;","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.Keyword;","lastModifiedDate":"2021-09-17"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"import Wonderland.Parser;","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"import org.junit.Test;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"public class ParserTest {","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"alinaleehx"},"content":"    @Test","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"alinaleehx"},"content":"    public void parse_validInput() {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"alinaleehx"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"alinaleehx"},"content":"        String input \u003d \"list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"alinaleehx"},"content":"        Keyword output;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"alinaleehx"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"alinaleehx"},"content":"            output \u003d Parser.parse(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"alinaleehx"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"alinaleehx"},"content":"            output \u003d Keyword.TODO;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"            e.toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"alinaleehx"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"alinaleehx"},"content":"        assertEquals(Keyword.LIST, output);","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"alinaleehx"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"alinaleehx"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"alinaleehx"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"alinaleehx":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"alinaleehx"},"content":"todo read book","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"alinaleehx"},"content":"deadline read book /by Mon, 2pm","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"alinaleehx"},"content":"event return book /at Mon, 2-4pm","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"alinaleehx"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"alinaleehx"},"content":"done 1","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"alinaleehx"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"alinaleehx"},"content":"done 3","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"alinaleehx"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"alinaleehx":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"alinaleehx"},"content":"java -classpath ..\\bin Wonderland.Wonderland \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"alinaleehx":1,"-":20}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    ","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    ","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"    archiveVersion \u003d \"v2.0.0\"","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shermannws":17,"-":45}},{"path":"data/documentation.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"Welcome to Duke! Let us go through some functionalities of Duke together!","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"Here are some basic commands:","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"[help]","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"        Access this current page with explanation of the available features","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"[list]","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"        List out all the tasks that Duke is currently keeping track of","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"[bye]","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"        Exit the Duke Program","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"In Duke, there are 3 types of tasks that you can add, here is how you can add them:","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"[todo \u003cdescription\u003e]","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"        Add a todo task that contains a description","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"[event \u003cdescription\u003e /at \u003cyyyy-mm-dd\u003e]","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"        Add an event task that contains a description with a date of the event","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"[deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd\u003e]","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"        Add a deadline task that contains the description with a date that the deadline is due","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"You can also make use of some of these cool commands to operate on the tasks:","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"[find \u003ckeyword\u003e]","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        Sieve out all the tasks with description containing the keyword","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"[delete \u003cindex\u003e]","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"        Delete the task located at index (1-indexed)","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"[done \u003cindex\u003e]","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"        Mark the task located at index as done (1-indexed)","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"shermannws":25}},{"path":"src/main/java/duke/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a command class that adds a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private Task task;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Constructor for AddCommand.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a program terminating command.","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * Adds a task to the TaskList provided, logs the action on console and updates the data in the local storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before addition of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     * @throws DukeException If problem encountered during saving.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"        int sizeBeforeAdding \u003d list.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        list.add(task);","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"        int sizeAfterAdding \u003d list.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"        assert sizeBeforeAdding + 1 \u003d\u003d sizeAfterAdding : \"size should increase by 1\";","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"        storage.saveDukeData(list.convertToStorageString());","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"        return ui.printAndReturnAddedTaskMessage(task, list);","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":50}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents an abstract Command class.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a program terminating command.","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    public abstract boolean isAExitCommand();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"     * Executes the given command.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     * @return The message to be printed.","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     * @throws DukeException If problem encountered during execution of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    public abstract String execute(TaskList list, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":27}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" * Represents a Deadline Task which inherits from Task and contains the dateTime for the deadline.","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    private final LocalDate dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new Deadline.","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"     * @param dateTime The date of the deadline for the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    public Deadline(String description, LocalDate dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new Deadline with status.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"     * @param dateTime The date of the deadline for the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     * @param isDone The status of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"    public Deadline(String description, LocalDate dateTime, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of the task in a desired format.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     * @return The string representation of the task, prefixed with a status icon and deadlines identifier.","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        return String.format(\"[D][%s] %s (by: %s)\",","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"                getStatusIcon(),","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"                getDescription(),","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"                dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of this task that is suitable for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"     * @return The string representation of the encoded string for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"    public String encodeTaskForStorage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"        int encodedIsDone \u003d getIsDone() ? 1 : 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"        return String.format(\"D | %d | %s | %s\", encodedIsDone, getDescription(), dateTime);","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shermannws":60}},{"path":"src/main/java/duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a command to delete a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private int index;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Constructor for the delete command.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * @param index The index of the task in the TaskList to be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a program terminating command.","lastModifiedDate":"2021-09-14"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * Executes the given command to delete a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before deletion of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     * @throws DukeException If index provided is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"        int sizeBeforeDeleting \u003d list.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        Task removed \u003d list.deleteAtIndex(index);","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"        if (removed !\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"            int sizeAfterDeleting \u003d list.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"            assert sizeBeforeDeleting - 1 \u003d\u003d sizeAfterDeleting : \"size should decrease by 1\";","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"            String message \u003d","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"                    \"Noted.I\u0027ve removed this task:\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"                    + \"  \" + removed + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"                    + String.format(\"Now you have %d tasks in the list.\", list.size());","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"            storage.saveDukeData(list.convertToStorageString());","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"            return ui.printAndReturnMessage(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":58}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    private Text dialog;","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"    private void flip() {","lastModifiedDate":"2021-09-03"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-03"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-03"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"     * Returns the DialogBox of a user with the content and the image.","lastModifiedDate":"2021-09-14"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"     * @param text The content in the dialog.","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"     * @param img The image in to be associated with the user.","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"     * @return DialogBox with the content and image.","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"     * Returns the DialogBox for the Duke with the content and the image.","lastModifiedDate":"2021-09-14"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"     * @param text The content in the dialog.","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"     * @param img The image in to be associated with the Duke.","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"     * @return DialogBox with the content and image.","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"shermannws"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":73,"author":{"gitId":"shermannws"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"shermannws"},"content":"        db.flip();","lastModifiedDate":"2021-09-03"},{"lineNumber":75,"author":{"gitId":"shermannws"},"content":"        return db;","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":77,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"shermannws":77}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a Personal Assistant Chatbot that helps a person keeps track of various things.","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"    private TaskList list;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     * Constructor specifying the file path of the database to be stored and retrieved from for this bot.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     * @param filePath File path to store and retrieve the duke bot information.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"            this.list \u003d new TaskList(storage.loadDukeData());","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"            this.ui.printAndReturnMessage(e.getMessage());","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"            this.list \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     * Returns the response given a String input.","lastModifiedDate":"2021-09-14"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * @param input The input String given.","lastModifiedDate":"2021-09-14"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * @return The String that represents the response to the input.","lastModifiedDate":"2021-09-14"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"            return c.execute(list, ui, storage);","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"            ui.printAndReturnMessage(e.getMessage());","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"     * Returns the greeting message as a String.","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"     * @return The message to greet users as a String.","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"    public String getGreetingMessage() {","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"        return ui.printAndReturnGreetingsString();","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"shermannws":51,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents DukeException that contains all the Exceptions related to this program.","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":" * Represents IllegalFormatException where formatting errors are detected from the user input.","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"class IllegalFormatException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    public IllegalFormatException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":" * Represents UnknownCommandException where the input command cannot be parsed.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"class UnknownCommandException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":" * Represents InvalidIndexException where an invalid index is provided by user.","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"class InvalidIndexException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"    public InvalidIndexException() {","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"        super(\"OOPS!!! Kindly key in a valid index!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":" * Represents StorageLoadingException where an I/O error is encountered when loading data from storage.","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"class StorageLoadingException extends DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"    public StorageLoadingException() {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"        super(\"OOPS!!! There was an error loading the data from storage.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":" * Represents StorageSavingException where an I/O error is encountered when saving data to storage.","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"class StorageSavingException extends DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"    public StorageSavingException() {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"        super(\"OOPS!!! There was an error saving the data to storage. Your data might not have been saved.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":57}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" * Represents an Event Task which inherits from Task and contains the dateTime for the event.","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    private final LocalDate dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new Event.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"     * @param dateTime The date of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    public Event(String description, LocalDate dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new Event with status.","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"     * @param dateTime The date of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     * @param isDone The status of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"    public Event(String description, LocalDate dateTime, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of the task in a desired format.","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     * @return The String representation of the task, prefixed with a status icon and events identifier.","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        return String.format(\"[E][%s] %s (at: %s)\",","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"                getStatusIcon(),","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"                getDescription(),","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"                dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of this task that is suitable for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"     * @return The string representation of the encoded string for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"    public String encodeTaskForStorage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"        int encodedIsDone \u003d getIsDone() ? 1 : 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"        return String.format(\"E | %d | %s | %s\", encodedIsDone, getDescription(), dateTime);","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shermannws":60}},{"path":"src/main/java/duke/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a command to exit the program.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private static String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private final boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Constructor for the exit command.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a programme terminating command, in this case, this is a terminating command.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     * @return True.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     * Executes the command to exit the program.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @throws StorageSavingException If exception encountered when storing the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) throws StorageSavingException {","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"        ui.closeScanner();","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"        storage.saveDukeData(list.convertToStorageString());","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"        return ui.printAndReturnMessage(MESSAGE_EXIT);","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":44}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents the command to find tasks containing a particular keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private String keyword;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Constructor for the command object.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * @param keyword The keyword to be searched for.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a programme terminating command.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * Executes the task to find all tasks containing the keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     * @throws DukeException If problem encountered during execution of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"        int size \u003d list.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        TaskList newList \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"            Task current \u003d list.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"            String currentDescription \u003d current.getDescription();","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"            if (currentDescription.contains(keyword)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"                newList.add(current);","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"        int newListSize \u003d newList.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"        StringBuilder message \u003d new StringBuilder(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"        for (int i \u003d 0; i \u003c newListSize; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"            Task content \u003d newList.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"            message.append(\"\\n\").append(index).append(\".\").append(content);","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"        return ui.printAndReturnMessage(message.toString());","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":62}},{"path":"src/main/java/duke/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a command to exit the program.","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private static final String FILE_NAME \u003d \"documentation.txt\";","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private final boolean isExit;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Constructor for the exit command.","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a programme terminating command, in this case, this is a terminating command.","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     * Executes the command to exit the program.","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before execution of the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @throws StorageSavingException If exception encountered when storing the list.","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) throws StorageLoadingException {","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"        String data \u003d storage.loadTextFileData(FILE_NAME);","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"        return ui.printAndReturnMessage(data);","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"shermannws":43}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * A launcher class to workaround classpath issues. This is the entry points to the program.","lastModifiedDate":"2021-09-14"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"public class Launcher {","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Launches the application.","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * @param args CLI arguments.","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"shermannws":20}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":" * GUI for Duke using FXML.","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    private final String windowTitle \u003d \"Duke - Your Personal Assistant\";","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     * Starts the GUI for Duke.","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     * @param stage JavaFX stage object.","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"            stage.setTitle(windowTitle);","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"            stage.show();","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"shermannws":41}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     * Sets the duke instance for the program.","lastModifiedDate":"2021-09-14"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-14"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     * @param d The Duke instance to be set.","lastModifiedDate":"2021-09-14"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"        printGreetings();","lastModifiedDate":"2021-09-14"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-14"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"     * Creates one dialog box from the Duke with the greeting message.","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"    private void printGreetings() {","lastModifiedDate":"2021-09-14"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"        String response \u003d duke.getGreetingMessage();","lastModifiedDate":"2021-09-14"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-14"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-14"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"        );","lastModifiedDate":"2021-09-14"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-14"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-03"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"        );","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"shermannws":71}},{"path":"src/main/java/duke/MarkDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class MarkDoneCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"    private int index;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     * Constructor for the command to mark a task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     * @param index The index of the task to be removed.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    public MarkDoneCommand(int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a programme terminating command.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     * Executes the command to mark a task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     * @throws DukeException If index provided is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        int sizeBeforeMarking \u003d list.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"        boolean markedDone \u003d list.markDoneAtIndex(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"        if (markedDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"            int sizeAfterMarking \u003d list.size();","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"            assert sizeBeforeMarking \u003d\u003d sizeAfterMarking : \"size should remain the same\";","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"            String message \u003d","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"                    \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"                    + list.get(index);","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"            storage.saveDukeData(list.convertToStorageString());","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"            return ui.printAndReturnMessage(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":58}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" * Represents the parser that could interpret the user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"public class Parser {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Parses the input string given by the user and returns the respective commands.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * @param input The input given by user in the console.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     * @return A command corresponding to the interpreted intention of the user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"     * @throws DukeException If an error is encountered.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"        String[] splitWord \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        String firstWord \u003d splitWord[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"        if (input.equals(\"list\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"            return new PrintCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"        if (firstWord.equals(\"done\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"            int taskToBeMarkDone \u003d getTaskToBeMarkedDoneIndex(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"            return new MarkDoneCommand(taskToBeMarkDone);","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"        if (firstWord.equals(\"todo\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"            Task taskToBeAdded \u003d getTodoToBeAdded(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"            return new AddCommand(taskToBeAdded);","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"        if (firstWord.equals(\"deadline\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"            Task taskToBeAdded \u003d getDeadlineToBeAdded(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"            return new AddCommand(taskToBeAdded);","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"        if (firstWord.equals(\"event\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"            Task taskToBeAdded \u003d getEventToBeAdded(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"            return new AddCommand(taskToBeAdded);","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"        if (firstWord.equals(\"delete\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"            int taskIndexToBeRemoved \u003d getTaskToBeDeletedIndex(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"            return new DeleteCommand(taskIndexToBeRemoved);","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"        if (firstWord.equals(\"find\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"            String keyword \u003d getKeyword(input);","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"        if (input.equals(\"help\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"        throw new UnknownCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"    private static int getTaskToBeMarkedDoneIndex(String input) throws IllegalFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"        String[] splitCommand \u003d input.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"        if (splitCommand.length !\u003d 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify task to be mark done in the correct format.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"        String secondWord \u003d splitCommand[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"        boolean isAllDigitInSecondWord \u003d checkIfAllDigit(secondWord);","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"        if (!isAllDigitInSecondWord) {","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify the task to be mark done as a number.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"        return Integer.parseInt(secondWord) - 1;","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"shermannws"},"content":"    private static Task getTodoToBeAdded(String input) throws IllegalFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"shermannws"},"content":"        String[] splitCommand \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"shermannws"},"content":"        if (splitCommand.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"shermannws"},"content":"        String toDoDescription \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"shermannws"},"content":"        if (toDoDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"shermannws"},"content":"        return new ToDo(toDoDescription);","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":84,"author":{"gitId":"shermannws"},"content":"    private static Task getDeadlineToBeAdded(String input) throws IllegalFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"shermannws"},"content":"        String[] splitCommand \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"shermannws"},"content":"        if (splitCommand.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"shermannws"},"content":"        String[] splitTask \u003d splitCommand[1].split(\" /by \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"shermannws"},"content":"        String deadlineDescription \u003d splitTask[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"shermannws"},"content":"        if (deadlineDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"shermannws"},"content":"        if (splitTask.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify the deadline date in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":97,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"shermannws"},"content":"        LocalDate deadlineDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"shermannws"},"content":"            deadlineDateTime \u003d LocalDate.parse(splitTask[1]);","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"shermannws"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify the deadline date in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":104,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"shermannws"},"content":"        return new Deadline(deadlineDescription, deadlineDateTime);","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":109,"author":{"gitId":"shermannws"},"content":"    private static Task getEventToBeAdded(String input) throws IllegalFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"shermannws"},"content":"        String[] splitCommand \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"shermannws"},"content":"        if (splitCommand.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"shermannws"},"content":"        String[] splitTask \u003d splitCommand[1].split(\" /at \", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"shermannws"},"content":"        String eventDescription \u003d splitTask[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"shermannws"},"content":"        if (eventDescription.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"shermannws"},"content":"        if (splitTask.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify the event date in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"shermannws"},"content":"        LocalDate eventDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"shermannws"},"content":"            eventDateTime \u003d LocalDate.parse(splitTask[1]);","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"shermannws"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify the event date in the format yyyy-mm-dd.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":129,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"shermannws"},"content":"        return new Event(eventDescription, eventDateTime);","lastModifiedDate":"2021-09-07"},{"lineNumber":131,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":133,"author":{"gitId":"shermannws"},"content":"    private static int getTaskToBeDeletedIndex(String input) throws IllegalFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"shermannws"},"content":"        String[] splitCommand \u003d input.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"shermannws"},"content":"        if (splitCommand.length !\u003d 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify task to be removed in the correct format.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"shermannws"},"content":"        String secondWord \u003d splitCommand[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":140,"author":{"gitId":"shermannws"},"content":"        boolean isAllDigitInSecondWord \u003d checkIfAllDigit(secondWord);","lastModifiedDate":"2021-09-07"},{"lineNumber":141,"author":{"gitId":"shermannws"},"content":"        if (!isAllDigitInSecondWord) {","lastModifiedDate":"2021-09-07"},{"lineNumber":142,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify the task to be removed as a number.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":143,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"shermannws"},"content":"        return Integer.parseInt(secondWord) - 1;","lastModifiedDate":"2021-09-07"},{"lineNumber":145,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":147,"author":{"gitId":"shermannws"},"content":"    private static String getKeyword(String input) throws IllegalFormatException {","lastModifiedDate":"2021-09-07"},{"lineNumber":148,"author":{"gitId":"shermannws"},"content":"        String[] splitCommand \u003d input.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"shermannws"},"content":"        if (splitCommand.length !\u003d 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"shermannws"},"content":"            throw new IllegalFormatException(\"OOPS!!! Specify one keyword to be searched.\");","lastModifiedDate":"2021-09-07"},{"lineNumber":151,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"shermannws"},"content":"        String keyword \u003d splitCommand[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"shermannws"},"content":"        return keyword;","lastModifiedDate":"2021-09-07"},{"lineNumber":154,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":155,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":156,"author":{"gitId":"shermannws"},"content":"    private static boolean checkIfAllDigit(String s) {","lastModifiedDate":"2021-09-07"},{"lineNumber":157,"author":{"gitId":"shermannws"},"content":"        for (int i \u003d 0; i \u003c s.length(); i++) {","lastModifiedDate":"2021-09-07"},{"lineNumber":158,"author":{"gitId":"shermannws"},"content":"            if (!Character.isDigit(s.charAt(i))) {","lastModifiedDate":"2021-09-07"},{"lineNumber":159,"author":{"gitId":"shermannws"},"content":"                return false;","lastModifiedDate":"2021-09-07"},{"lineNumber":160,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":161,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"shermannws"},"content":"        return true;","lastModifiedDate":"2021-09-07"},{"lineNumber":163,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":164}},{"path":"src/main/java/duke/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents the command to print the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class PrintCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"     * Constructor for the print command.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"    public PrintCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"     * Returns true if the command is a programme terminating command.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"     * @return True if it is a terminating command and false otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    public boolean isAExitCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"        return isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"     * Executes the command to print the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     * @param list TaskList before execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * @param ui Ui object to log the execution of the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     * @param storage Storage object that references the path to store the updated list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     * @return The string to be printed.","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"    public String execute(TaskList list, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"        return ui.printAndReturnListString(list);","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":40}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":" * Represents the class that deals with loading tasks from file and saving tasks to file.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    private final String fileDir;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialise a new storage object.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"     * @param filePath The path of the txt file that stores the data to be retrieved and to be updated.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"        this.fileDir \u003d this.filePath.substring(0, this.filePath.lastIndexOf(\"/\") + 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"     * Returns the string stored in the storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     * @return The string in the storage if it is existent or an empty string otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * @throws StorageLoadingException If error encountered during loading.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"    public String loadDukeData() throws StorageLoadingException {","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"            File storageDir \u003d new File(fileDir);","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"            File storageFile \u003d new File(filePath);","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"            boolean isDirExistent \u003d storageDir.exists();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"            boolean isFileExistent \u003d storageFile.exists();","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"            if (!isDirExistent) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"                storageDir.mkdirs();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"            if (!isFileExistent) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"                storageFile.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"            Scanner scanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"            StringBuilder data \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"                data.append(scanner.nextLine()).append(\"\\n\");","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"            return data.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"            throw new StorageLoadingException();","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"     * Saves the existing data in the list into the storage file.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"     * @param data The string data to be saved.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"     * @throws StorageSavingException If error encountered during saving.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"    public void saveDukeData(String data) throws StorageSavingException {","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"            fw.write(data);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"            fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"            throw new StorageSavingException();","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"shermannws"},"content":"     * Loads the content of the file in the path \"[fileDir]/[fileName]\".","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"shermannws"},"content":"     * @param filename The name of the file to be loaded.","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"shermannws"},"content":"     * @return The string content in the file.","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"shermannws"},"content":"     * @throws StorageLoadingException If error encountered during loading.","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"shermannws"},"content":"    public String loadTextFileData(String filename) throws StorageLoadingException {","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"shermannws"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"shermannws"},"content":"            File textFile \u003d new File(fileDir + filename);","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"shermannws"},"content":"            boolean isFileExistent \u003d textFile.exists();","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"shermannws"},"content":"            if (!isFileExistent) {","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"shermannws"},"content":"                throw new StorageLoadingException();","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"shermannws"},"content":"            Scanner scanner \u003d new Scanner(textFile);","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"shermannws"},"content":"            StringBuilder data \u003d new StringBuilder();","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"shermannws"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"shermannws"},"content":"                data.append(scanner.nextLine()).append(\"\\n\");","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"shermannws"},"content":"            return data.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"shermannws"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"shermannws"},"content":"            throw new StorageLoadingException();","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shermannws":97}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a Task which contains a String description and a boolean status.","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    private final String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new Task with a boolean argument.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     * @param isDone The status of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     * Returns the status icon of the particular task.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"     * @return The status icon depending on whether the task is marked as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"     * Marks the task as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"        assert isDone : \"task should be marked done\";","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of the task in a desired format.","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"     * @return The String representation of the task, prefixed with a status icon.","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"     * Returns the description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"     * @return The description of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"        return description;","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"     * Returns the boolean value whether the task is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"shermannws"},"content":"     * @return True if the task is marked done and false if otherwise.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"shermannws"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"shermannws"},"content":"        return isDone;","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"shermannws"},"content":"     * Returns the encoded string for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"shermannws"},"content":"     * @return The string that is suitable for saving the data.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"shermannws"},"content":"    public abstract String encodeTaskForStorage();","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shermannws":84}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"import java.util.List;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":" * Represents a list that contains a \u003ccode\u003eList\u003c/code\u003e of tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"public class TaskList {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"    private final List\u003cTask\u003e list;","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new TaskList","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    public TaskList(String data) {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"        this.loadFromStorage(data);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * @param task Task to be added","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"        list.add(task);","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     * Returns the size of the list.","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"     * @return The size of the TaskList.","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    public int size() {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"        return list.size();","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"     * Returns the Task at the given index.","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"     * @param index The index to retrieve the Task from in the TaskList.","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"     * @return The Task that is located at the given index.","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"        return list.get(index);","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"     * Marks the task at the index as done.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"     * If given a valid index, returns true and mark the Task as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"     * If given an invalid index, returns false.","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"     * @param index The given index to mark the Task located there as done.","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"     * @return A boolean value, true if successfully marked as done and false if invalid index given.","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"    public boolean markDoneAtIndex(int index) {","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"        if (index \u003e size() - 1 || index \u003c 0) {","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"            return false;","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"            Task taskToBeMarkDone \u003d get(index);","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"            taskToBeMarkDone.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"shermannws"},"content":"     * Removes the task at the given index and returns that Task.","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"shermannws"},"content":"     * @param index The index of the task to be removed.","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"shermannws"},"content":"     * @return The task that is removed.","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"shermannws"},"content":"    public Task deleteAtIndex(int index) {","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"shermannws"},"content":"        if (index \u003e size() - 1 || index \u003c 0) {","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"shermannws"},"content":"            return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"shermannws"},"content":"        } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"shermannws"},"content":"            return list.remove(index);","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"shermannws"},"content":"     * Returns the string that should be printed when asked to print the current task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"shermannws"},"content":"     * @return The string that should be printed when the print command is executed.","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"shermannws"},"content":"    public String generateMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"shermannws"},"content":"        int listSize \u003d list.size();","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"shermannws"},"content":"        StringBuilder message \u003d new StringBuilder(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"shermannws"},"content":"        for (int i \u003d 0; i \u003c listSize; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"shermannws"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"shermannws"},"content":"            Task content \u003d list.get(i);","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"shermannws"},"content":"            message.append(\"\\n\").append(index).append(\".\").append(content);","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"shermannws"},"content":"        return message.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"shermannws"},"content":"     * Loads the data from storage and update the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"shermannws"},"content":"     * @param data The string data retrieved from storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"shermannws"},"content":"    private void loadFromStorage(String data) {","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"shermannws"},"content":"        String[] lines \u003d data.split(\"\\n\");","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"shermannws"},"content":"        if (lines[0].equals(\"\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"shermannws"},"content":"            return;","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"shermannws"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"shermannws"},"content":"            String[] split \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"shermannws"},"content":"            String taskType \u003d split[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"shermannws"},"content":"            boolean isDone \u003d !split[1].equals(\"0\");","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"shermannws"},"content":"            String description \u003d split[2];","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"shermannws"},"content":"            String dateTimeString;","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"shermannws"},"content":"            assert taskType.equals(\"T\")","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"shermannws"},"content":"                    || taskType.equals(\"D\")","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"shermannws"},"content":"                    || taskType.equals(\"E\")","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"shermannws"},"content":"                    : \"taskType should only be T,D,E\";","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"shermannws"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"shermannws"},"content":"            case \"T\":","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"shermannws"},"content":"                ToDo toDoTask \u003d new ToDo(description, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"shermannws"},"content":"                add(toDoTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":130,"author":{"gitId":"shermannws"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"shermannws"},"content":"            case \"D\":","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"shermannws"},"content":"                dateTimeString \u003d split[3];","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"shermannws"},"content":"                Deadline deadlineTask \u003d new Deadline(description, LocalDate.parse(dateTimeString), isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"shermannws"},"content":"                add(deadlineTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":135,"author":{"gitId":"shermannws"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"shermannws"},"content":"            case \"E\":","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"shermannws"},"content":"                dateTimeString \u003d split[3];","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"shermannws"},"content":"                Event eventTask \u003d new Event(description, LocalDate.parse(dateTimeString), isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"shermannws"},"content":"                add(eventTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":140,"author":{"gitId":"shermannws"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"shermannws"},"content":"            default:","lastModifiedDate":"2021-08-31"},{"lineNumber":142,"author":{"gitId":"shermannws"},"content":"                break;","lastModifiedDate":"2021-08-31"},{"lineNumber":143,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"shermannws"},"content":"     * Returns the string that is suitable for the storage of the entire task list in a txt file.","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"shermannws"},"content":"     * @return The string with each task encoded that is suitable for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"shermannws"},"content":"    public String convertToStorageString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"shermannws"},"content":"        int size \u003d list.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"shermannws"},"content":"        StringBuilder finalMessage \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"shermannws"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"shermannws"},"content":"            Task currentTask \u003d list.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"shermannws"},"content":"            String taskMessage \u003d currentTask.encodeTaskForStorage();","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"shermannws"},"content":"            finalMessage.append(taskMessage);","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"shermannws"},"content":"            if (i !\u003d size - 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"shermannws"},"content":"                finalMessage.append(\"\\n\");","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"shermannws"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"shermannws"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"shermannws"},"content":"        return finalMessage.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shermannws":165}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":" * Represents a ToDo Task which inherits from Task.","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new ToDo.","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"     * Constructor to initialize a new ToDo with a status.","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"     * @param description The description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"     * @param isDone The status of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of the task in a desired format.","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"     * @return The String representation of the task, prefixed with a status icon and todos identifier.","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"        return String.format(\"[T][%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"     * Returns the string representation of this task that is suitable for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"     * @return The string representation of the encoded string for storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"    public String encodeTaskForStorage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"        int encodedIsDone \u003d getIsDone() ? 1 : 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"        return String.format(\"T | %d | %s\", encodedIsDone, getDescription());","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shermannws":48}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":" * Represent the Ui class the is responsible for the interaction with user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":" * @author Sherman Ng Wei Sheng","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"public class Ui {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"    private static final String MESSAGE_GREETING \u003d","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"            \"Hello! I\u0027m Duke\\nWhat can I do for you?\\nType \u0027help\u0027 to see the wonders that I can do!\";","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"    private static final String HORIZONTAL_LINE_WITH_BREAK \u003d","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"            \"        ____________________________________________________________\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    private Scanner sc;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"     * Constructor for the Ui object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    public Ui() {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"     * Closes the scanner object.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    public void closeScanner() {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"        sc.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"     * Prints the greeting message of the Chatbot.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"     * @return The formatted string of the message.","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"    public String printAndReturnGreetingsString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"        return printAndReturnMessage(MESSAGE_GREETING);","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"     * Returns the input keyed in by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"     * @return The string that is entered by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":46,"author":{"gitId":"shermannws"},"content":"    public String getInput() {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"shermannws"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shermannws"},"content":"     * Prints the formatted list of content in Task List.","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"shermannws"},"content":"     * @return The formatted string of the message.","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":55,"author":{"gitId":"shermannws"},"content":"    public String printAndReturnListString(TaskList list) {","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"shermannws"},"content":"        String message \u003d list.generateMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shermannws"},"content":"        return printAndReturnMessage(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"shermannws"},"content":"     * Prints the log for task object being added","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"shermannws"},"content":"     * @param task The task object to be printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shermannws"},"content":"     * @param list The task list object that the task is being added to.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"shermannws"},"content":"     * @return The formatted string of the message.","lastModifiedDate":"2021-09-03"},{"lineNumber":66,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"shermannws"},"content":"    public String printAndReturnAddedTaskMessage(Task task, TaskList list) {","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"shermannws"},"content":"        String message \u003d","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"shermannws"},"content":"                \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"shermannws"},"content":"                + \"  \" + task + \"\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"shermannws"},"content":"                + String.format(\"Now you have %d tasks in the list.\", list.size());","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"shermannws"},"content":"        return printAndReturnMessage(message);","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"shermannws"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"shermannws"},"content":"     * Prints the input content to console with formatting.","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"shermannws"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"shermannws"},"content":"     * @param content The content to be printed, wrapped between horizontal lines.","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"shermannws"},"content":"     * @return The printed message.","lastModifiedDate":"2021-09-03"},{"lineNumber":80,"author":{"gitId":"shermannws"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"shermannws"},"content":"    public String printAndReturnMessage(String content) {","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"shermannws"},"content":"        String formatString \u003d","lastModifiedDate":"2021-09-14"},{"lineNumber":83,"author":{"gitId":"shermannws"},"content":"                HORIZONTAL_LINE_WITH_BREAK","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"shermannws"},"content":"                + \"        %s\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"shermannws"},"content":"                + HORIZONTAL_LINE_WITH_BREAK;","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"shermannws"},"content":"        System.out.printf(formatString, content.replaceAll(\"\\n\", \"\\n        \"));","lastModifiedDate":"2021-09-14"},{"lineNumber":87,"author":{"gitId":"shermannws"},"content":"        return content;","lastModifiedDate":"2021-09-14"},{"lineNumber":88,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":89}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"        \u003cText fx:id\u003d\"dialog\" text\u003d\"Label\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"\u003c/fx:root\u003e  ","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"shermannws":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"524.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"524.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"588.0\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"shermannws":19}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"    public void encodeTaskForStorage_notDoneDeadlineTask_encodedString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"D | 0 | testingDeadlineTaskOne | 2021-08-26\",","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"                new Deadline(\"testingDeadlineTaskOne\",","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"                        LocalDate.of(2021, 8, 26),","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"                false)","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"                        .encodeTaskForStorage());","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    public void encodeTaskForStorage_doneDeadlineTask_encodedString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"D | 1 | testingDeadlineTaskTwo | 2021-08-26\",","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"                new Deadline(\"testingDeadlineTaskTwo\",","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"                        LocalDate.of(2021, 8, 26),","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"                        true)","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"                        .encodeTaskForStorage());","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"    public void toString_notDoneDeadlineTask_string() {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"[D][ ] testingDeadlineTaskThree (by: Aug 26 2021)\",","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"                new Deadline(\"testingDeadlineTaskThree\",","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"                        LocalDate.of(2021, 8, 26),","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"                        false).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shermannws"},"content":"    public void toString_doneDeadlineTask_string() {","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"[D][X] testingDeadlineTaskFour (by: Aug 26 2021)\",","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shermannws"},"content":"                new Deadline(\"testingDeadlineTaskFour\",","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shermannws"},"content":"                        LocalDate.of(2021, 8, 26),","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shermannws"},"content":"                        true).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":43}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"    public void encodeTaskForStorage_notDoneTodoTask_encodedString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"T | 0 | testingTodoTaskOne\",","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"                new ToDo(\"testingTodoTaskOne\", false).encodeTaskForStorage());","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"    public void encodeTaskForStorage_doneTodoTask_encodedString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"T | 1 | testingTodoTaskTwo\",","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"                new ToDo(\"testingTodoTaskTwo\", true).encodeTaskForStorage());","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"    public void toString_notDoneTodoTask_string() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"[T][ ] testingTodoTaskThree\",","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"                new ToDo(\"testingTodoTaskThree\", false).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"    public void toString_doneTodoTask_string() {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"        assertEquals(\"[T][X] testingTodoTaskFour\",","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"                new ToDo(\"testingTodoTaskFour\", true).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shermannws":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shermannws"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"shermannws"},"content":"todo ","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"shermannws"},"content":"todo one","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"shermannws"},"content":"deadline","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"shermannws"},"content":"deadline ","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"shermannws"},"content":"deadline two","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"shermannws"},"content":"deadline two ","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shermannws"},"content":"deadline two /by","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shermannws"},"content":"deadline two /by ","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"deadline two /by 2021-08-25","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shermannws"},"content":"event","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"shermannws"},"content":"event ","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"shermannws"},"content":"event three","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"shermannws"},"content":"event three ","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"shermannws"},"content":"event three /at","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"event three /at ","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"shermannws"},"content":"event three /at 2021-08-25","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"shermannws"},"content":"done","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"shermannws"},"content":"done ","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"shermannws"},"content":"done 0","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"shermannws"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"shermannws"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"shermannws"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"shermannws"},"content":"delete","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"shermannws"},"content":"delete ","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"shermannws"},"content":"delete 0","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"shermannws"},"content":"delete 4","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"shermannws"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"shermannws"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"shermannws"},"content":"byebye","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"shermannws"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shermannws":33}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"shermannws"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"shermannws"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shermannws":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"shermannws"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"shermannws"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shermannws":2,"-":36}}]

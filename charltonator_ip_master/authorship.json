[{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":" * Deadline class that inherits from Task and includes a Date (the deaadline of the Task)","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"     * Constructor.","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"     * @param title the Task title","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"     * @param date the deadline","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"    public Deadline(String title, LocalDateTime date) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"        super(title);","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"     * toString method.","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"     * @return a String.","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"        if (!this.getDone()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"            return \"[D][ ]\" + this.getTitle() + \"| (by: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"            return \"[D][X]\" + this.getTitle() + \"| (by: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":36}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"        GreetingBot newBot \u003d new GreetingBot();","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"        newBot.startBot(\"./data/list.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"charltonator":12,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":" * A class that is an exception to be thrown for errors relating to the Duke.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"     * Constructor for the DukeException.","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"     * @param message the message to be printed.","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"        super(message);","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"     * the toString method of the DukeException.","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"     * @return a String","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"        return this.getMessage();","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":25}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":" * An Event class that inherits from Task and includes a time for the Task.","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"     * Constructor.","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"     * @param title title of the task.","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"     * @param date time of the task.","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"    public Event(String title, LocalDateTime date) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"        super(title);","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"     * toString method.","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"     * @return a String.","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"        if (!this.getDone()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"            return \"[E][ ]\" + this.getTitle() + \"| (at: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"            return \"[E][X]\" + this.getTitle() + \"| (at: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":37}},{"path":"src/main/java/duke/GreetingBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":" * Code for the main skeleton of the Bot. When Duke is run, An instance of this class is created and used to run it.","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"import java.io.*;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"public class GreetingBot {","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"     * The list of tasks that belongs to the bot.","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"    private LinkedList\u003cTask\u003e myList \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"     * Constructor that takes in nothing.","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"    public GreetingBot() {","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"     * Method that runs the main functions of the bot.","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"    public void startBot(String filePath) {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"charltonator"},"content":"        ui.greet();","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"charltonator"},"content":"        ui.instruct();","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"charltonator"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"charltonator"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"charltonator"},"content":"            tasks \u003d new TaskList(storage.loadData());","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"charltonator"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"charltonator"},"content":"            System.out.println(err.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"charltonator"},"content":"        store();","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"charltonator"},"content":"        ui.goodbye();","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":50,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"charltonator"},"content":"     * Method that reads input and decides what method to call to deal with the input.","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"charltonator"},"content":"    private void store() {","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"charltonator"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"charltonator"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"charltonator"},"content":"        while (true) {","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"charltonator"},"content":"            try {","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"charltonator"},"content":"                String nextLine \u003d inputScanner.nextLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"charltonator"},"content":"                int action \u003d parser.parse(nextLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"charltonator"},"content":"                if (action \u003d\u003d 0) {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"charltonator"},"content":"                    tasks.list();","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 1) {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"charltonator"},"content":"                    break;","lastModifiedDate":"2021-08-16"},{"lineNumber":69,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"charltonator"},"content":"                    tasks.setDone(nextLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"charltonator"},"content":"                    storage.updateData(tasks.getList());","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 3) {","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"charltonator"},"content":"                    tasks.deleteTask(nextLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"charltonator"},"content":"                    storage.updateData(tasks.getList());","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 4) {","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"charltonator"},"content":"                    tasks.newTodo(nextLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"charltonator"},"content":"                    storage.updateData(tasks.getList());","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 5) {","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"charltonator"},"content":"                    tasks.newDeadline(nextLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"charltonator"},"content":"                    storage.updateData(tasks.getList());","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 6) {","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"charltonator"},"content":"                    tasks.newEvent(nextLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"charltonator"},"content":"                    storage.updateData(tasks.getList());","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"charltonator"},"content":"                } else if (action \u003d\u003d 7) {","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"charltonator"},"content":"                    tasks.findTask(nextLine);","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"charltonator"},"content":"                    continue;","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"charltonator"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"charltonator"},"content":"            } catch (DukeException err) {","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"charltonator"},"content":"                System.out.println(err.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"charltonator"},"content":"                continue;","lastModifiedDate":"2021-08-17"},{"lineNumber":92,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":93,"author":{"gitId":"charltonator"},"content":"            tasks.getInfo();","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":95,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":96,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":97,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":98,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":99,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":100,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":102,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-16"},{"lineNumber":103,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":105,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":105}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":" * Class that deals with reading user input","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"public class Parser {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"     * Constructor for Parser.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"    public Parser() {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"     * Method to parse and decide what to do with next line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"     * @param input the line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"     * @return an integer signifying the next action to be taken by the bot","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"    protected int parse(String input) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"        if (input.startsWith(\"list\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"            return 0;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"bye\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"            return 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"done\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"            return 2;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"            return 3;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"            return 4;","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"charltonator"},"content":"            return 5;","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"charltonator"},"content":"            return 6;","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"charltonator"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"charltonator"},"content":"            return 7;","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Dude! I don\u0027t understand what you\u0027re saying!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"charltonator":49}},{"path":"src/main/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"class ParserTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"    void parseTestList() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"        Parser testParser \u003d new Parser();","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"        String input \u003d \"list\";","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"        assertEquals(0, testParser.parse(input));","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"    void parseTestBye() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"        Parser testParser \u003d new Parser();","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"        String input \u003d \"byebye\";","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"        assertEquals(1, testParser.parse(input));","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"    void parseTestError() throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"        Parser testParser \u003d new Parser();","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"        String input \u003d \"lalla\";","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"            testParser.parse(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"        });","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"        String expectedMessage \u003d \"Dude! I don\u0027t understand what you\u0027re saying!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"        assertEquals(expectedMessage, actualMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"charltonator":34}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import java.io.*;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":" * Class that deals with loading tasks from file and saving tasks in file","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"public class Storage {","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"    private String filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"     * Constructor for Storage/","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"     * @param filePath the path of the data file.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"     * load data from list file in data folder.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"    @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"    protected LinkedList\u003cTask\u003e loadData() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"//         Create data folder if it does not exist.","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"        File dataFolder \u003d new File(\"./data/\");","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"        if (!dataFolder.exists()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"            dataFolder.mkdir();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"            File dataFile \u003d new File(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"            if (dataFile.createNewFile() || dataFile.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"                // If dataFile does not exist (has not been created before)","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"                System.out.println(\"Seems like a new list has been created!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"                return new LinkedList\u003cTask\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"                // dataFile already has been created before","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"charltonator"},"content":"                System.out.println(\"Let\u0027s load up your list!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"charltonator"},"content":"                FileInputStream listIn \u003d new FileInputStream(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"charltonator"},"content":"                ObjectInputStream in \u003d new ObjectInputStream(listIn);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"charltonator"},"content":"                LinkedList\u003cTask\u003e myList \u003d (LinkedList\u003cTask\u003e) in.readObject();","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"charltonator"},"content":"                listIn.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"charltonator"},"content":"                in.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"charltonator"},"content":"                return myList;","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"charltonator"},"content":"        } catch (IOException | ClassNotFoundException error) {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"charltonator"},"content":"            System.out.println(error.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Something went wrong with loading a list up!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"charltonator"},"content":"     * Update data in list file.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"charltonator"},"content":"    protected void updateData(LinkedList\u003cTask\u003e myList) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"charltonator"},"content":"        if (!myList.isEmpty()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"charltonator"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"charltonator"},"content":"                FileOutputStream fileOut \u003d new FileOutputStream(\"./data/list.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"charltonator"},"content":"                ObjectOutputStream out \u003d new ObjectOutputStream(fileOut);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"charltonator"},"content":"                out.writeObject(myList);","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"charltonator"},"content":"                out.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"charltonator"},"content":"                fileOut.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"charltonator"},"content":"                System.out.println(\"I\u0027ve updated your list for you! You\u0027re welcome! :)\");","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"charltonator"},"content":"            } catch (IOException error) {","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"Something went wrong when I tried to save your list :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"charltonator"},"content":"            File dataFile \u003d new File(\"./data/list.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"charltonator"},"content":"            dataFile.delete();","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"charltonator"},"content":"            System.out.println(\"Before you leave, it seems your list is empty anyway so I\u0027ll just delete it for you!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"charltonator":73}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import java.io.Serializable;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":" * A Task class which provides the basic skeleton for what a Task should have.","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"public class Task implements Serializable {","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"    private String title;","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"     * Constructor.","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"     * @param title the title of the task.","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"    public Task(String title) {","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"     * Method to set the status of the Task to done.","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"     * @param status the value that done is to be set to.","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"    public void setDone(boolean status) {","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"        isDone \u003d status;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n[X]\" + this.title);","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"     * Retrieve the status of the task (done or not).","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"     * @return a boolean.","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"    public boolean getDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"charltonator"},"content":"     * Method that returns the title of the Task.","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"charltonator"},"content":"     * @return a String.","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"charltonator"},"content":"    public String getTitle() {","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"charltonator"},"content":"        return this.title;","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"charltonator"},"content":"     * Overriden toString method.","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"charltonator"},"content":"     * @return a String.","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"charltonator"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"charltonator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"charltonator"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"charltonator"},"content":"            return \"[ ] \" + this.title;","lastModifiedDate":"2021-08-17"},{"lineNumber":55,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"charltonator"},"content":"            return \"[X] \" + this.title;","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":63}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":" * Class that contains the list of Tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"public class TaskList {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"    private LinkedList\u003cTask\u003e myList;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"     * @param myList a LinkedList.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"    public TaskList(LinkedList\u003cTask\u003e myList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"        this.myList \u003d myList;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"     * Method that is called to display the list.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"    protected void list() throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"        if (myList.isEmpty()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Yo! Your list looks empty to me!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"        while(counter \u003c myList.size()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"            System.out.println((counter + 1) + \". \" + myList.get(counter).toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"            counter +\u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"charltonator"},"content":"     * Method that is called to set a task to done.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"charltonator"},"content":"     * @param nextLine the line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"charltonator"},"content":"    protected void setDone(String nextLine) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"charltonator"},"content":"        String[] splitWords \u003d nextLine.split(\" \");","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"charltonator"},"content":"        if (splitWords.length \u003d\u003d 1 \u0026\u0026 splitWords[0].equals(\"done\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Dude I don\u0027t think you told me which task you\u0027re talking about!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"charltonator"},"content":"        } else if (!splitWords[0].equals(\"done\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Dude, I don\u0027t understand your instructions!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"charltonator"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"charltonator"},"content":"            int taskNumber \u003d Integer.parseInt(splitWords[1]);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"charltonator"},"content":"            if (taskNumber \u003e myList.size()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"Dude I don\u0027t think you have a list THAT long!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"charltonator"},"content":"            } else if (myList.get(taskNumber - 1).getDone()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"This task is already done man!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"charltonator"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"charltonator"},"content":"                myList.get(taskNumber - 1).setDone(true);","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"charltonator"},"content":"        catch (NumberFormatException ex) {","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Woah, enter the task number properly..\");","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"charltonator"},"content":"     * Method that is called to delete a task from the list.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"charltonator"},"content":"     * @param nextLine the next line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"charltonator"},"content":"    protected void deleteTask(String nextLine) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"charltonator"},"content":"        String[] splitWords \u003d nextLine.split(\" \");","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"charltonator"},"content":"        if (splitWords.length \u003d\u003d 1 \u0026\u0026 splitWords[0].equals(\"delete\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Dude I don\u0027t think you told me which task you\u0027re talking about!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"charltonator"},"content":"        } else if (!splitWords[0].equals(\"delete\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Dude, I don\u0027t understand your instructions!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"charltonator"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"charltonator"},"content":"            int taskNumber \u003d Integer.parseInt(splitWords[1]);","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"charltonator"},"content":"            if (taskNumber \u003e myList.size()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"Dude I don\u0027t think you have a list THAT long!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"charltonator"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"charltonator"},"content":"                String infoOfTask \u003d myList.get(taskNumber - 1).toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"charltonator"},"content":"                myList.remove(taskNumber - 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"charltonator"},"content":"                System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + infoOfTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"charltonator"},"content":"        catch (NumberFormatException ex) {","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Woah, enter the task number properly..\");","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"charltonator"},"content":"     * Method to create a new Todo.","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"charltonator"},"content":"     * @param nextLine the next line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"charltonator"},"content":"    protected void newTodo(String nextLine) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"charltonator"},"content":"        if (nextLine.replaceAll(\"\\\\s\", \"\").length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Seems like your todo task was incomplete!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"charltonator"},"content":"            String[] splitLine \u003d nextLine.split(\"todo\");","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"charltonator"},"content":"            String title \u003d splitLine[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"charltonator"},"content":"            Task nextTask \u003d new Todo(title);","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"charltonator"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"charltonator"},"content":"            myList.add(nextTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"charltonator"},"content":"            System.out.println(nextTask.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"charltonator"},"content":"     * Method to create a new Deadline.","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"charltonator"},"content":"     * @param nextLine the next line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"charltonator"},"content":"    protected void newDeadline(String nextLine) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"charltonator"},"content":"        if (nextLine.replaceAll(\"\\\\s\", \"\").length() \u003d\u003d 8) {","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Seems like your deadline task was incomplete!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"charltonator"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"charltonator"},"content":"                String[] splitLine \u003d nextLine.split(\"/by \");","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"charltonator"},"content":"                String date \u003d splitLine[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"charltonator"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"charltonator"},"content":"                LocalDateTime parsedDate \u003d LocalDateTime.parse(date, formatter);","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"charltonator"},"content":"                String title \u003d splitLine[0].split(\"deadline\")[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"charltonator"},"content":"                Task nextTask \u003d new Deadline(title, parsedDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"charltonator"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"charltonator"},"content":"                myList.add(nextTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"charltonator"},"content":"                System.out.println(nextTask.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"charltonator"},"content":"            } catch (DateTimeException | ArrayIndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"I think there\u0027s a problem with your input! Enter your task in this format! \\\"yyyy-MM-dd HHmm\\\"\");","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"charltonator"},"content":"     * Method to create a new Event.","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"charltonator"},"content":"     * @param nextLine the next line of input","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"charltonator"},"content":"     * @throws DukeException","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"charltonator"},"content":"    protected void newEvent(String nextLine) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"charltonator"},"content":"        if (nextLine.replaceAll(\"\\\\s\", \"\").length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Seems like your event task was incomplete!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":143,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"charltonator"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"charltonator"},"content":"                String[] splitLine \u003d nextLine.split(\"/at \");","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"charltonator"},"content":"                String date \u003d splitLine[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"charltonator"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"charltonator"},"content":"                LocalDateTime parsedDate \u003d LocalDateTime.parse(date, formatter);","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"charltonator"},"content":"                String title \u003d splitLine[0].split(\"event\")[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"charltonator"},"content":"                Task nextTask \u003d new Event(title, parsedDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"charltonator"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"charltonator"},"content":"                myList.add(nextTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"charltonator"},"content":"                System.out.println(nextTask.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"charltonator"},"content":"            } catch (DateTimeException | ArrayIndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"I think there\u0027s a problem with your input! Enter your task in this format! \\\"yyyy-MM-dd HHmm\\\"\");","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"charltonator"},"content":"     * Method that returns the current size of list.","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"charltonator"},"content":"    protected void getInfo() {","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"charltonator"},"content":"        System.out.println(\"Now you have \" + myList.size() + \" tasks in the list. You\u0027re welcome!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"charltonator"},"content":"     * Method that gives you the list stored in the class variable","lastModifiedDate":"2021-08-22"},{"lineNumber":170,"author":{"gitId":"charltonator"},"content":"     * @return myList","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":172,"author":{"gitId":"charltonator"},"content":"    protected LinkedList\u003cTask\u003e getList() {","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"charltonator"},"content":"        return myList;","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":175,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":177,"author":{"gitId":"charltonator"},"content":"    protected void findTask(String nextLine) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":178,"author":{"gitId":"charltonator"},"content":"        String[] splitWords \u003d nextLine.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":179,"author":{"gitId":"charltonator"},"content":"        if (splitWords.length \u003d\u003d 1 \u0026\u0026 splitWords[0].equals(\"find\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":180,"author":{"gitId":"charltonator"},"content":"            throw new DukeException(\"Dude at least enter a word you want me to look for!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":181,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":182,"author":{"gitId":"charltonator"},"content":"            String keyword \u003d splitWords[1];","lastModifiedDate":"2021-08-23"},{"lineNumber":183,"author":{"gitId":"charltonator"},"content":"            LinkedList\u003cTask\u003e copyList \u003d new LinkedList\u003cTask\u003e(myList);","lastModifiedDate":"2021-08-23"},{"lineNumber":184,"author":{"gitId":"charltonator"},"content":"            copyList.removeIf(task -\u003e {","lastModifiedDate":"2021-08-23"},{"lineNumber":185,"author":{"gitId":"charltonator"},"content":"                String taskTitle \u003d task.getTitle();","lastModifiedDate":"2021-08-23"},{"lineNumber":186,"author":{"gitId":"charltonator"},"content":"                String[] taskWords \u003d taskTitle.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":187,"author":{"gitId":"charltonator"},"content":"                for (String word : taskWords) {","lastModifiedDate":"2021-08-23"},{"lineNumber":188,"author":{"gitId":"charltonator"},"content":"                    if (word.equals(keyword)) {","lastModifiedDate":"2021-08-23"},{"lineNumber":189,"author":{"gitId":"charltonator"},"content":"                        return false;","lastModifiedDate":"2021-08-23"},{"lineNumber":190,"author":{"gitId":"charltonator"},"content":"                    } else {}","lastModifiedDate":"2021-08-23"},{"lineNumber":191,"author":{"gitId":"charltonator"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":192,"author":{"gitId":"charltonator"},"content":"                return true;","lastModifiedDate":"2021-08-23"},{"lineNumber":193,"author":{"gitId":"charltonator"},"content":"//                !task.getTitle().contains(keyword)","lastModifiedDate":"2021-08-23"},{"lineNumber":194,"author":{"gitId":"charltonator"},"content":"            });","lastModifiedDate":"2021-08-23"},{"lineNumber":195,"author":{"gitId":"charltonator"},"content":"            if (copyList.isEmpty()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":196,"author":{"gitId":"charltonator"},"content":"                throw new DukeException(\"Yo! I can\u0027t find this keyword in your list!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":197,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":198,"author":{"gitId":"charltonator"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-23"},{"lineNumber":199,"author":{"gitId":"charltonator"},"content":"            int counter \u003d 0;","lastModifiedDate":"2021-08-23"},{"lineNumber":200,"author":{"gitId":"charltonator"},"content":"            while(counter \u003c copyList.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":201,"author":{"gitId":"charltonator"},"content":"                System.out.println((counter + 1) + \". \" + copyList.get(counter).toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":202,"author":{"gitId":"charltonator"},"content":"                counter +\u003d 1;","lastModifiedDate":"2021-08-23"},{"lineNumber":203,"author":{"gitId":"charltonator"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":204,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":205,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":206,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"charltonator":206}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":" * Todo class which inherits from a Task.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"     * Constructor for a Todo.","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"     * @param title takes in the title of the Task.","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"    public Todo(String title)  {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"        super(title);","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"     * The toString method.","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"     * @return a String describing the Todo.","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"        if (!this.getDone()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"            return \"[T][ ]\" + this.getTitle();","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"            return \"[T][X]\" + this.getTitle();","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":30}},{"path":"src/main/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"class TodoTest {","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"    @Test","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"    void testToString() {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"        Todo testTodo \u003d new Todo(\"eat food\");","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"        assertEquals(\"[T][ ]\" + testTodo.getTitle(), testTodo.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"charltonator":12}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":" * Ui class that deals with user interactions.","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"charltonator"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"charltonator"},"content":"public class Ui {","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"charltonator"},"content":"     * Constructor for Ui.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"charltonator"},"content":"    public Ui() {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"charltonator"},"content":"     * Method that greets the user when bot is first run.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"charltonator"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"charltonator"},"content":"    protected void greet() {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"charltonator"},"content":"        String greetingMessage \u003d \"What\u0027s up! I\u0027m Duke! What can I help you with?\";","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"charltonator"},"content":"        System.out.println(greetingMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"charltonator"},"content":"     * Method that gives basic instructions on how to use the Bot.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"charltonator"},"content":"    protected void instruct() {","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"charltonator"},"content":"        System.out.println(\"Here\u0027s the commands you can input for me!\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"charltonator"},"content":"                            \"\\\"list\\\" : lists the tasks in your list with their type and status (Done or not)\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"charltonator"},"content":"                            \"\\\"done _\\\" : enter done followed by a whitespace and the number of the task you want to be set as done\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"charltonator"},"content":"                            \"\\\"delete _\\\" : enter delete followed by a whitespace and the number of the task you wish to delete from the list!\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"charltonator"},"content":"                            \"\\\"todo __\\\" : enter todo followed by the task you wish to add to the list\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"charltonator"},"content":"                            \"\\\"deadline __ /by yyyy-mm-dd HHmm\\\" enter deadline followed by the task name and deadline in the format stated.\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"charltonator"},"content":"                            \"\\\"event __ /at yyyy-mm-dd HHmm\\\" enter deadline followed by the task name and event time in the format stated.\");","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"charltonator"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"charltonator"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"charltonator"},"content":"     * Method that gives the goodbye message to the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"charltonator"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"charltonator"},"content":"    protected void goodbye() {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"charltonator"},"content":"        String exitMessage \u003d \"Leaving just like that? Fine. See you soon I guess.\";","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"charltonator"},"content":"        System.out.println(exitMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"charltonator"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"charltonator"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"charltonator":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"charltonator"},"content":"deadline buy food /by Sunday","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"charltonator"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"charltonator":2}},{"path":"data/list.txt","fileType":"txt","isBinary":true,"lines":[],"authorContributionMap":{"charltonator":0}}]

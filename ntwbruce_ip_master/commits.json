{"authorDailyContributionsMap":{"ntwbruce":[{"date":"2021-08-15","commitResults":[{"hash":"055dc4e2f78a8a368367c8a53ab5be30f3c4e145","messageTitle":"Added greet, exit and echo functionality to Duke.java","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":6}}},{"hash":"e135849734684c21cbefa2c0da2cd4f9374a6a54","messageTitle":"Added add and list functionality to Duke.java","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":2}}},{"hash":"c4d2c85550a7b2c7fb1ff9cd59e9bf102accbb4f","messageTitle":"Created new class Task.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":0}}}]},{"date":"2021-08-16","commitResults":[{"hash":"04c63876f6ec86a4b0e444b3156686315bc4dfc0","messageTitle":"Modified Duke.java to achieve \u0027mark as done\u0027 functionality with Task objects","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":3}}},{"hash":"85a749a3fa602431281869bee761295a8b1626a3","messageTitle":"Task list number changed to be by taskList array index rather than by assigned index at Task creation","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}},{"hash":"a2d98ad01cb66bbe607720ca72d8bb7f3e042cbc","messageTitle":"Fixed output formatting for Task.java","messageBody":"","tags":["Level-3","A-Classes"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"149e2e1d1ce79c4a3cc286a94cf8ca5f56c5a4c6","messageTitle":"Removed redundant Task index attribute","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":4}}},{"hash":"9fdfba4befd7e387fc0dcb353c58728ccbc8e9d7","messageTitle":"Moved setDone() print line and taskList periods from Task.java to Duke.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}},{"hash":"27e959b043fead13aaaf22ec4ff7984aed9aa6d9","messageTitle":"Created Todo.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":0}}},{"hash":"87df72de54c0ca66d731fb689fe1ecd0090c5de0","messageTitle":"Created Deadline.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}},{"hash":"e1a07932edf0fd105d23897a797c1237ab48646d","messageTitle":"Created Event.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}},{"hash":"b083e1740ff5480bdd5b9710a6b7b8350f858647","messageTitle":"Modified Duke.java to handle different types of Tasks","messageBody":"","tags":["Level-4","A-Inheritance"],"fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":8}}},{"hash":"bfb66a00cefa28aa9eeca13e8ba35a396ac1fde8","messageTitle":"Fix intro text and close Duke.java Scanner for testing purposes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}},{"hash":"01e73c6de3fcbb95eafe68907c2f35ed3aec0d2c","messageTitle":"Created AutoUITesting test case in input.txt","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":8,"deletions":0}}}]},{"date":"2021-08-17","commitResults":[{"hash":"d425f06c47a0eabc72f7d5dfeb80782f73e5c0e2","messageTitle":"Created DukeException.java and added various potential exception outputs","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":0}}},{"hash":"bfcfe902dd5d67adce594c44916a7a8a518c0db3","messageTitle":"Added try-catch block and invalid input exception handling functionality to Duke.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":39}}},{"hash":"15a84e0112ff697230e217d812f5eabfa91ff163","messageTitle":"Modified Duke and DukeException so that Duke\u0027s catch block prints the error message","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":7}}},{"hash":"68fbdf7cf55e066d6beea1309f3ed5470b3f982b","messageTitle":"Added incomplete task input exceptions to Duke","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":2}}},{"hash":"7065df012e4a91ebcf2e56c27be509bba554a5aa","messageTitle":"Added exceptions for missing deadline time and event period","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":3}}},{"hash":"8be9c5f406dfe6519a3c70bf2147d02b594c1283","messageTitle":"Added new exception case and new catch block for NumberFormatException to handle invalid \u0027done\u0027 commands","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":3}}},{"hash":"457ceb171ce07922d99329d1135b2b46c25879d4","messageTitle":"Reformatted Duke for greater clarity","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":58,"deletions":47}}},{"hash":"a8a64e42432b9f735bda3ebc6a87d0c0106db251","messageTitle":"Reformatted Duke for greater clarity again","messageBody":"","tags":["Level-5","A-Exceptions"],"fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":5}}},{"hash":"508f7962a27b3bb702dd945e11b8135cadf5a466","messageTitle":"Modified Duke to use ArrayList for taskList instead of Task array","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":5}}},{"hash":"3168fb8be20061520b061af5daa6ea6820c3bd1b","messageTitle":"Added invalidDelete case for DukeException","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":1}}},{"hash":"b6c586e4b03506fa13830c22283bb7ffec22825c","messageTitle":"Added delete functionality with exception handling to Duke","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":0}}},{"hash":"859026499d2d4d85527aaacc0c72bbdd5587657b","messageTitle":"Modified done and delete functions to throw DukeException when given negative index values","messageBody":"","tags":["Level-6","A-Collections"],"fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}}]},{"date":"2021-08-18","commitResults":[{"hash":"fcba783aa15ac58583933bd88b226fcbe3a71781","messageTitle":"Created DukeExceptionType.java for enumeration of DukeException types","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":0}}},{"hash":"19c8e4b32d0f332daaf15af42d236c5cad98c84b","messageTitle":"Modified DukeException.java to utilise DukeExceptionType enums","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":9}}},{"hash":"f2d80e00c90837560e0e836f79c9773b9d719cdc","messageTitle":"Modified Duke.java to utilise DukeExceptionType enums","messageBody":"","tags":["A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":12}}}]},{"date":"2021-08-19","commitResults":[{"hash":"22246b8150597f588ad430dea4229fb761759366","messageTitle":"Updated Duke functions to handle unnecessary whitespaces","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":11}}}]},{"date":"2021-08-22","commitResults":[{"hash":"7edb4bd8b2a07fdbb9bb9b61a0a9bde87829ed45","messageTitle":"Format to follow Java coding standard","messageBody":"There are a few standards that the code fails to follow.\n\nLet\u0027s,\n* fix the switch case indentation\n* change boolean name bye to isBye in Duke class\n* remove unnecessary this keywords from Event, Deadline, Task classes\n\nImproves readability and follows the standard.\n","fileTypesAndContributionMap":{"java":{"insertions":84,"deletions":85}}},{"hash":"a7d2769d9f135c4a3fd9c2db240d36d988748a70","messageTitle":"Create hard disk file to save task list","messageBody":"Adding the ability to save tasks between separate uses of the program\nimproves usability, rather than have to start a new task list from\nscratch every time.\n\nWe start by creating a file \u0027duke.txt\u0027 which acts as the hard disk\nin a new directory \u0027data\u0027, and allow Duke to check if the hard disk\nexists, create it if not, and access it.\n\nLet\u0027s\n* create the folder \u0027data\u0027 in the program root folder and the file\n\u0027duke.txt\u0027 inside \u0027data\u0027 to act as a hard disk and store the task list\n* add functionality to Duke to check if \u0027data\u0027 and \u0027duke.txt\u0027 already\nexist and create them if they don\u0027t already exist\n* add exception handling in case the program is unable to create \u0027data\u0027\nand \u0027duke.txt\u0027\n","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":0},"java":{"insertions":130,"deletions":108}}}]},{"date":"2021-08-23","commitResults":[{"hash":"edf9f329c626b89bbef15a6950da611d1334d9e2","messageTitle":"Create methods for interacting with hard disk","messageBody":"Duke needs methods to interact with the hard disk whenever a change\nis made to the task list, allowing the hard disk to keep track of them.\n\nLet\u0027s create the methods addEntry, setEntryDone, and deleteEntry to\nadd, delete and set tasks to done on the hard disk.\n\nAfter this these methods will be implemented into Duke\u0027s main function.\n\nThere is also a need to abstract out the process of checking duke.txt\nupon starting the program, and adding the functionality of loading in\nthe tasks saved to the hard disk.\n","fileTypesAndContributionMap":{"java":{"insertions":81,"deletions":1}}},{"hash":"819c01cc03cb62ebad41e20e899dfa22214ff886","messageTitle":"Implement hard disk interaction methods in Duke","messageBody":"Implement the methods we added in the previous commit in the Duke\nfunction so any changes to the task list in Duke are reflected in the\nhard disk as well.\n\nAlso, create a custom string format for the tasks added to the hard\ndisk for readability.\n\nFinally, add exception cases to DukeException to deal with new potential\nexceptions.\n\nLet\u0027s\n* implement addEntry, setEntryDone and deleteEntry in the add, done\nand delete logic of the Duke.main() function\n* create a new string format for the different tasks for adding to the\nhard disk\n* implement new exception cases to deal with potential exceptions\narising from the new methods\n","fileTypesAndContributionMap":{"java":{"insertions":59,"deletions":32}}},{"hash":"2f3a10e43f6750559ee809fa8a899965356821eb","messageTitle":"Create launchDuke function in Duke class","messageBody":"To improve readability, abstract out the checking of duke.txt at the\nstart of the Duke.main() function into a function called launchDuke, and\nadd to it the loading in of the saved tasks from previous sessions.\n\nLet\u0027s\n* create the launchDuke function to handle the checking of duke.txt\nand inputing of the hard disk\u0027s saved tasks into Duke\u0027s task list\n* add exception case in the event the parsing of tasks from the hard\ndisk runs into an error (if a task was added in a wrong format etc)\n","fileTypesAndContributionMap":{"java":{"insertions":173,"deletions":123}}},{"hash":"2f17c097139b40fdebf6145035865c31612d5a4a","messageTitle":"Change Deadline to take in LocalDate parameter","messageBody":"Allow for Deadline to present deadline in a customised format.\n\nLet\u0027s\n* modify Deadline and Duke to take in a LocalDate parameter for the\ndeadline\n* add an exception case for what the user-provided deadline parameter\nis not in an acceptable format\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":5}}},{"hash":"211d65dad4521bb251132678a22f6e5c82e1dacf","messageTitle":"Allow for time to be included in deadline","messageBody":"Aside from dates, users may want to include a time in their deadline.\nThis can be achieved by overloading the Deadline constructor to allow\nfor a LocalTime parameter to be included.\n\nLet\u0027s\n* modify Deadline and the implementation of adding deadline tasks\nin Duke to allow for users to include a deadline time as well\n* modify exception case INVALIDDATE to catch DateTimeParseExceptions\narising from the Deadline constructor taking in a LocalTime parameter\n","fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":9}}},{"hash":"9d15da6140bb0f76693b81a5f328059d3b60219e","messageTitle":"Modify Event class to take in LocalDate and LocalTime parameters","messageBody":"Give users the option of providing dates and times for Event tasks in\nthe form of LocalDate and LocalTime parameters.\n\nLet\u0027s\n* overload the Event constructor to allow for the following formats\nof Event periods:\n1) Start and end dates\n2) Start and end times on one day\n3) Start date and time, end date and time\n* add exception case to deal with the potential exception of invalid\ndate/time formats\n","fileTypesAndContributionMap":{"java":{"insertions":78,"deletions":9}}},{"hash":"7bb10d89cc423f090c4f55b759f6713a8b774034","messageTitle":"Add method isTodayTask for date-based task finding","messageBody":"Improve usability by allowing users to find which tasks have a deadline\nor event on a certain specified day. First we create methods in the\nvarious task classes that checks if a deadline or event takes place on\nthat day.\n\nLet\u0027s\n* convert Task to an abstract class with the abstract isTodayTask method\n* implement isTodayTask in Deadline, Event and Todo\n","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":1}}},{"hash":"9b88689ee3d59ca9959615adddb14578d2f94831","messageTitle":"Implement date-based find function in Duke","messageBody":"Carrying on from previous commit, creating a find function allows users\nto find deadlines or events that take place on a specified day.\n\nLet\u0027s\n* implement the find functionality in Duke.main()\n* create a new exception case to handle the case when users don\u0027t give\na date or given a date in the wrong format in the find function\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":1}}},{"hash":"6640fecc194d00d647ce7f301efe2439c9a42e59","messageTitle":"Create new classes to extract from Duke","messageBody":"In line with the Object-Oriented Programming paradigm, extract these\nvarious classes from Duke so they can be worked on individually and\nDuke doesn\u0027t become bloated.\n\nLet\u0027s create new classes Storage, TaskList and Ui in preparation of\nrefactoring Duke to reduce its size and improve readability.\n","fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":15}}},{"hash":"0706ca516ec559d3a573277d69005b8203d63738","messageTitle":"Implement the Ui class","messageBody":"Extract all the parts of Duke that involve output to the console and\ndelegate them to the Ui class.\n\nLet\u0027s\n* implement methods in the Ui class to replace the console output\ncommands in Duke, so whenever there is a need to print something to\nthe console, it is handled by the Ui class\n* assign the Duke class a Ui attribute with which the message printing\nmethods are called\n","fileTypesAndContributionMap":{"java":{"insertions":109,"deletions":51}}}]},{"date":"2021-08-24","commitResults":[{"hash":"ce0e8d4a286f338bfe23917501df5d850371943e","messageTitle":"Implement the Storage class","messageBody":"Create a Storage class to manage the saving and retrieval of data to and\nfrom the hard disk.\n\nLet\u0027s extract the launchDuke, addDBEntry, deleteDBEntry and\nsetDBEntryDone methods to the Storage class and give Duke a Storage\nattribute to allow it to manage storage with the hard disk.\n","fileTypesAndContributionMap":{"java":{"insertions":173,"deletions":162}}},{"hash":"4bdb85b2b767f1399f7e83086e2b55b72f00f681","messageTitle":"Implement the TaskList class","messageBody":"Implement TaskList to handle any and all functionality to do with\naltering the task list. In addition, TaskList will also handle the\nchanges made to the storage of tasks by Storage.\n\nLet\u0027s extract any functionality to do with the task list (methods to\nadd, delete, make changes to the task list, as well as UI console output\nmethods upon task list changes) for the TaskList class to handle.\n","fileTypesAndContributionMap":{"java":{"insertions":87,"deletions":43}}},{"hash":"3c7e9d744e7d880a8de330a36e737db97a04711c","messageTitle":"Implement the Parser class","messageBody":"The Parser class takes over the Duke class\u0027s job of taking in an\ninstruction from the user, interpreting it and performing the relevant\naction after.\n\nIt will either return a Command (to be implemented) for the Duke class\nto perform, or throw an exception to the Duke class to handle.\n\nLet\u0027s implement the Parser class to parse user input and return a\nCommand to be executed.\n","fileTypesAndContributionMap":{"java":{"insertions":126,"deletions":0}}},{"hash":"a8eba9807295532e23cbcb9949dca4c74b4a8910","messageTitle":"Implement the Command class","messageBody":"A Command object takes in parsed user input from Parser and performs the\nrelevant task (exiting the program, showing list, task list functions,\netc).\n\nLet\u0027s create and implement a Command class that Duke will use to\nexecute commands from the user.\n","fileTypesAndContributionMap":{"java":{"insertions":60,"deletions":0}}},{"hash":"3ce0a11a76132ba67b02b539a56145886bda944b","messageTitle":"Refactor Duke to utilise Command and Parser","messageBody":"Now that Command and Parser have been implemented, we can refactor Duke\nto utilise them.\n\nLet\u0027s edit out the Duke logic that has been passed to Command and Parser\nand utilise those classes in the implementation of Duke\u0027s run function.\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":136}}},{"hash":"5ffc7d26131b04696b28802402f55befe25ebca2","messageTitle":"Extract different commands from the Command class","messageBody":"For greater clarity, the Command class can be made into an abstract\nclass, and create more specific Command classes (eg. AddCommand) to\nhandle each type of command.\n\nLet\u0027s\n* create new classes: AddCommand, ByeCommand, DeleteCommand,\nDoneCommand, FindCommand and ListCommand, that extend Command, which is\nmade abstract, and extract the functionality from the original class\nto the child classes\n* modify Parser to use the new classes\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":54}}},{"hash":"b42cd8f0a1c2320d198102512df8ad048736b829","messageTitle":"Organise into Packages","messageBody":"Create packages within the project\u0027s java folder to organise the various\nclasses for easier management.\n\nLet\u0027s\n* Create several packages to sort our classes into\n* Refactor and ensure correct import statements for all classes\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":81,"deletions":1},"bat":{"insertions":1,"deletions":1},"md":{"insertions":2,"deletions":2}}},{"hash":"86460a12005d84c084c24f820fcd7b7aa8d846ab","messageTitle":"Make minor formatting changes","messageBody":"At this juncture make minor modifications to improve the look of the\ncode and make amendments to adhere to coding standards.\n\nLet\u0027s\n* fix the names of DukeExceptions to follow coding standard\n* extend Ui console output lines\n","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":32}}},{"hash":"00b1b3b14806a0754b181b564212b8c3fedc94ef","messageTitle":"Add JUnit to the project","messageBody":"In order to partially automate testing of the program, introduce JUnit\nto the project to allow for organised testing of the program\u0027s various\nparts.\n\nLet\u0027s\n* create a test subfolder within the project\u0027s src folder with which\nto add JUnit support to the project\n* Add a file DukeTest with a few test cases to test various\nfunctionalities of the main Duke program\n","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":0},"java":{"insertions":108,"deletions":3}}},{"hash":"62ea0867460ebcb98c273c4168dc65b8d827f0e2","messageTitle":"Create StorageTest to JUnit test the Storage class","messageBody":"Partially automatic the testing of the Storage class and its functions.\n\nLet\u0027s implement a StorageTest class under the test folder, used to test\nthat the Storage class functions work as intended.\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":47,"deletions":0}}},{"hash":"46bc13747f73e62a3a2b7c5e6bb8e9c843623094","messageTitle":"Standardising name of program","messageBody":"Change all instances of the original intended name of the program, Duck,\nto Duke, which I started using after a while for some reason.\n\nLet\u0027s change all \u0027Duck\u0027 to \u0027Duke\u0027.\n\nIf I have the time to, I might change the program name back to Duck at\nsome point, but that will take time.\n","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":5}}}]},{"date":"2021-08-25","commitResults":[{"hash":"9c51f0b5239f5a01630c8fc91d157cdda3e4ba16","messageTitle":"Add JavaDoc for classes in the duke package","messageBody":"Add JavaDoc comments to explain functionality of public methods to aid\nusers\u0027 understanding.\n\nLet\u0027s add JavaDoc comments for public methods in the duke package\nclasses.\n","fileTypesAndContributionMap":{"java":{"insertions":148,"deletions":22}}},{"hash":"b1e97ed298218697b368db6bb3e1228dab199c7d","messageTitle":"Add JavaDoc for classes in the command package","messageBody":"Add JavaDoc comments to explain functionality of public methods to aid\nusers\u0027 understanding.\n\nLet\u0027s add JavaDoc comments for public methods in the command package\nclasses.\n","fileTypesAndContributionMap":{"java":{"insertions":43,"deletions":1}}},{"hash":"9d26104a1bb7278ad9d49561778c11524af04f1c","messageTitle":"Add JavaDoc for classes in the exception package","messageBody":"Add JavaDoc comments to explain functionality of public methods to aid\nusers\u0027 understanding.\n\nLet\u0027s add JavaDoc comments for public methods in the exception package\nclasses.\n","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"379af350aa14594280db0b3cea04909c6c2d535b","messageTitle":"Add JavaDoc for classes in the task package","messageBody":"Add JavaDoc comments to explain functionality of public methods to aid\nusers\u0027 understanding.\n\nLet\u0027s add JavaDoc comments for public methods in the task package\nclasses.\n","fileTypesAndContributionMap":{"java":{"insertions":71,"deletions":3}}},{"hash":"58dc1a352bf6660aece945dd56a79ca213f82598","messageTitle":"Improve the naming convention of DukeExceptions","messageBody":"Rewrite some exception names for greater clarity.\n\nLet\u0027s modify some DukeException names to be clearer, rearrange them for\ngreater readability.\n","fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":34}}},{"hash":"8234c4ac38cb4aef8fb046c545cef60e36a6211f","messageTitle":"Add logical block comments and fix DukeException naming","messageBody":"For greater readability of large logic blocks, split into smaller blocks\nand add comments explaining the functionality of each block.\n\nFix the naming of the DukeException names changed in the previous\ncommit.\n\nLet\u0027s\n* include logical block comments\n* fix DukeException names\n","fileTypesAndContributionMap":{"java":{"insertions":79,"deletions":36}}},{"hash":"928c5977ae0419c2f4b9094ea5fe588cd6a13ef9","messageTitle":"Create new Command class FindKeywordCommand","messageBody":"In order to implement the functionality off finding tasks by keyword,\ncreate a new command class for it. Differentiate this from the find\ncommand that finds tasks by date.\n\nLet\u0027s\n* create a FindKeywordCommand class\n* rename existing FindCommand class to FindDateCommand\n* replace instances of FindCommand to FindDateCommand\n","fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":18}}},{"hash":"0b742c48f9300a2786dcfb05f512792777305b30","messageTitle":"Implement FindKeywordCommand logic in TaskList, Ui and Task classes","messageBody":"The logic of finding tasks by keyword in TaskList calls the Ui class,\nwhich calls the Task class. Hence, modify all three to handle this\nlogic.\n\nLet\u0027s modify the above classes with the functionality of finding tasks\nin a task list with a given keyword.\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":3}}},{"hash":"db184bd30a7c21761d69dce539fc011a0be33cf2","messageTitle":"Update Parser with keyword finding functionality","messageBody":"Parser only handles date finding functionality, so update it to handle\nfinding tasks with given keyword as well.\n\nLet\u0027s add keyword finding functionality to Parser.\n","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":4}}},{"hash":"24c820512ef09fd89cf0dfe3203bdd5b414ffbda","messageTitle":"Update Parser and DukeException to handle new exceptions","messageBody":"Handle new exception cases from the newly implemented find tasks by\nkeyword functionality.\n\nLet\u0027s modify Parser, DukeException and DukeExceptionTypes to handle\nnew exceptions that the find tasks by keyword functionality could\npotentially throw.\n","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":11}}}]}]},"authorFileTypeContributionMap":{"ntwbruce":{"java":1413,"md":2,"fxml":0,"sh":0,"bat":1,"gradle":0,"txt":8}},"authorContributionVariance":{"ntwbruce":129576.56},"authorDisplayNameMap":{"ntwbruce":"CS2103T-T10-2 NG T..HELL"}}

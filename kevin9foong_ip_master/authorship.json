[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.data.TaskFileStorage;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.fulfillment.FulfillmentHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.io.ConsoleUserInputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.io.ConsoleUserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" * Main class representing the Duke helper chatbot.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    private final FulfillmentHandler fulfillmentHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    public Duke() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"        ConsoleUserInputHandler consoleUserInputHandler \u003d new ConsoleUserInputHandler();","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        UserOutputHandler userOutputHandler \u003d new ConsoleUserOutputHandler();","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"        TaskList taskList \u003d new TaskList(new TaskFileStorage());","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"        this.fulfillmentHandler \u003d new FulfillmentHandler(consoleUserInputHandler,","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"                userOutputHandler, taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     * Main method to run the application.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     * @param args unused parameter.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when errors writing or reading occur.","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        new Duke().fulfillmentHandler.runChatbot();","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kevin9foong":34,"-":3}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyDeadlineBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDeadlineBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskAddMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to add a \u003ccode\u003eDeadline\u003c/code\u003e to persisted tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    public AddDeadlineCommand(String getUserInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        super(getUserInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * Adds a \u003ccode\u003eDeadline\u003c/code\u003e to the \u003ccode\u003eTaskList\u003c/code\u003e and writes to user \u003ccode\u003eTaskAddMessage\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException                    thrown when failure due to reading or writing occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidDateTimeFormatException thrown when String representing \u003ccode\u003eDateTime\u003c/code\u003e is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidDeadlineBodyException   thrown when the data String representing the","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"     *                                        \u003ccode\u003eDeadline\u003c/code\u003e is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"     * @throws EmptyDeadlineBodyException     thrown when the data String representing the","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"     *                                        \u003ccode\u003eDeadline\u003c/code\u003e is missing.","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList)","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, InvalidDateTimeFormatException,","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"            InvalidDeadlineBodyException, EmptyDeadlineBodyException {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        Task addedDeadline \u003d taskList.addTask(new Deadline(super.getUserInputBody()));","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"        userOutputHandler.writeMessage(new TaskAddMessage(addedDeadline.toString(),","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"                taskList.getNumOfTasks()));","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":55}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyDeadlineBodyException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyEventBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDeadlineBodyException;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidEventBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskAddMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to add an \u003ccode\u003eEvent\u003c/code\u003e to persisted Tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    public AddEventCommand(String getUserInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"        super(getUserInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * Adds an \u003ccode\u003eEvent\u003c/code\u003e to the \u003ccode\u003eTaskList\u003c/code\u003e and writes to user \u003ccode\u003eEventAddMessage\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException                    thrown when failure due to reading or writing occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidEventBodyException   thrown when the data String representing the","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"     *                                        \u003ccode\u003eEvent\u003c/code\u003e is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"     * @throws EmptyEventBodyException     thrown when the data String representing the","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"     *                                        \u003ccode\u003eEvent\u003c/code\u003e is missing.","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList)","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, EmptyEventBodyException, InvalidEventBodyException {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        Task addedTask \u003d taskList.addTask(new Event(super.getUserInputBody()));","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"        userOutputHandler.writeMessage(new TaskAddMessage(addedTask.toString(),","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"                taskList.getNumOfTasks()));","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":55}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyTodoBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskAddMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to add a \u003ccode\u003eToDo\u003c/code\u003e to persisted Tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    public AddTodoCommand(String getUserInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"        super(getUserInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * Adds an \u003ccode\u003eToDo\u003c/code\u003e to the \u003ccode\u003eTaskList\u003c/code\u003e and writes to user \u003ccode\u003eToDoAddMessage\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException            thrown when failure due to reading or writing occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     * @throws EmptyTodoBodyException thrown when the data String representing the","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     *                                \u003ccode\u003eToDo\u003c/code\u003e is missing.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList)","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, EmptyTodoBodyException {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        Task addedToDo \u003d taskList.addTask(new ToDo(super.getUserInputBody()));","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        userOutputHandler.writeMessage(new TaskAddMessage(addedToDo.toString(),","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"                taskList.getNumOfTasks()));","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":49}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.ByeMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to add a \u003ccode\u003eToDo\u003c/code\u003e to persisted Tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    public ByeCommand(String userInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"        super(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"     * Writes to the user to say bye.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"        userOutputHandler.writeMessage(new ByeMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * Returns true to indicate program should terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     * @return true to indicate program should terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":36}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" * Represents a user command.","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"    private final String userInputBody;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    protected Command(String userInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"        this.userInputBody \u003d userInputBody;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"     * Handles this command.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException   thrown when failure reading/writing to the target storage occurs.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     * @throws DukeException thrown when user input is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"    public abstract void execute(UserOutputHandler userOutputHandler, TaskList taskList)","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"     * Checks if program should terminate after this command.","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"     * @return boolean value which indicates whether program should terminate after command.","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    protected String getUserInputBody() {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        return this.userInputBody;","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":42}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"public enum CommandType {","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"    LIST, TODO, DEADLINE, EVENT, DELETE, DONE, FIND, BYE;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"     * Returns Command classification based on the given string.","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"     * @param commandText string which matches command name.","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"     * @return Command representing the given string command, or null if no command matched.","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    public static CommandType getCommand(String commandText) {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"        for (CommandType cmd : CommandType.values()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"            if (commandText.toUpperCase().equals(cmd.toString())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"                return cmd;","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"        return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"kevin9foong":20}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.Message;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskDeleteMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * Represents a user command to delete the specified \u003ccode\u003eTask\u003c/code\u003e for persisted Tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    public DeleteTaskCommand(String getUserInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"        super(getUserInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * Deletes the \u003ccode\u003eTask\u003c/code\u003e with the given task number.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidTaskNumberException thrown when the task associated with the given number is not found.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList) throws InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"            // user input is 1 greater than index.","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"            int index \u003d Integer.parseInt(super.getUserInputBody()) - 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"            Task deletedTask \u003d taskList.deleteTask(index);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"            userOutputHandler.writeMessage(new TaskDeleteMessage(deletedTask.toString(), taskList.getNumOfTasks()));","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        } catch (NumberFormatException | IOException nfe) {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"            userOutputHandler.writeMessage(new Message(MessageConstants.MESSAGE_INVALID_INTEGER));","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":51}},{"path":"src/main/java/duke/command/FindTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyFindBodyException;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskFindListMessage;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to find all tasks with contains specified text filter String","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * in its description.","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"public class FindTasksCommand extends Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    public FindTasksCommand(String userInputBody) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"        super(userInputBody);","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * Returns all Tasks which contain the text filter String in its description.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList) throws EmptyFindBodyException {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        String textFilter \u003d super.getUserInputBody();","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        if (textFilter \u003d\u003d null) {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"            throw new EmptyFindBodyException();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        List\u003cTask\u003e matchedTasks \u003d taskList.getAllTasks().stream().filter(task -\u003e","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"                task.getDescription().contains(textFilter)).collect(Collectors.toList());","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        userOutputHandler.writeMessage(new TaskFindListMessage(matchedTasks));","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate that program should not be terminated after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate that program should not be terminated after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"kevin9foong":50}},{"path":"src/main/java/duke/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskListMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to display all tasks that have been persisted.","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"public class ListTasksCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    public ListTasksCommand(String userInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"        super(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"     * Retrieves all tasks from the \u003ccode\u003eTaskList\u003c/code\u003e and writes message to user to","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     * display all tasks in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        userOutputHandler.writeMessage(new TaskListMessage(taskList.getAllTasks()));","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":39}},{"path":"src/main/java/duke/command/MarkTaskDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.Message;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.TaskDoneMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * Represents user command to mark specified task as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"public class MarkTaskDoneCommand extends Command {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    public MarkTaskDoneCommand(String userInputBody) {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"        super(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * Marks the specified \u003ccode\u003eTask\u003c/code\u003e as done and writes to user to indicate that \u003ccode\u003eTask\u003c/code\u003e has been","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     * successfully marked as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     * @param userOutputHandler handles outputting messages to the output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList          handles task operations including adding, deleting, marking as done and retrieval.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidTaskNumberException thrown when the task associated with the given number is not found.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    public void execute(UserOutputHandler userOutputHandler, TaskList taskList) throws InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"            // user input is 1 greater than index.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"            int index \u003d Integer.parseInt(super.getUserInputBody()) - 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"            Task doneTask \u003d taskList.setDone(index);","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"            userOutputHandler.writeMessage(new TaskDoneMessage(doneTask));","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        } catch (NumberFormatException | IOException nfe) {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"            userOutputHandler.writeMessage(new Message(MessageConstants.MESSAGE_INVALID_INTEGER));","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     * Returns false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"     * @return false to indicate program should not terminate after command is executed.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":52}},{"path":"src/main/java/duke/data/TaskFileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.data;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.io.FileInputOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" * This class encapsulates the data layer for storing Tasks in a file.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" * Provides saving and loading functionality from the file used to store \u003ccode\u003eTask\u003c/code\u003e","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * data.","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"public class TaskFileStorage implements TaskStorage {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    private final FileInputOutputHandler taskFileInputOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"     * Initializes a \u003ccode\u003eTaskFileOutputHandler\u003c/code\u003e which performs read and write","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"     * operations on file on specified file path.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when failure to read or write occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    public TaskFileStorage() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        String taskFilePath \u003d \"data/tasks.txt\";","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        taskFileInputOutputHandler \u003d new FileInputOutputHandler(taskFilePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    private static List\u003cTask\u003e convertRepresentationStringsToTaskList(List\u003cString\u003e taskRepresentations) {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        for (String taskRep : taskRepresentations) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"            Task task \u003d Task.getTaskFromRepresentation(taskRep);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"                taskList.add(task);","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        return taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"    private static List\u003cString\u003e convertTaskListToRepresentationStrings(List\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"        List\u003cString\u003e taskRepresentations \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"            taskRepresentations.add(task.getTaskRepresentation());","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"        return taskRepresentations;","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"     * Writes the string representation of each task in given task list into a text file.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"     * @param taskList list of tasks to be stored.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when failure to write to file occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"    public void saveTasks(List\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"        taskFileInputOutputHandler.saveLinesToFile(convertTaskListToRepresentationStrings(taskList));","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"     * Reads the file containing string representations of tasks and returns the task list stored.","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"     * @return list of tasks stored in text file.","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when failure to read from file occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"    public List\u003cTask\u003e loadTasks() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"        return convertRepresentationStringsToTaskList(taskFileInputOutputHandler.readLinesFromFile());","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":71}},{"path":"src/main/java/duke/data/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.data;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * Interface which defines behaviour of the storage used to store tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"public interface TaskStorage {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    void saveTasks(List\u003cTask\u003e taskList) throws IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    List\u003cTask\u003e loadTasks() throws IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":17}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Represents a generic \u003ccode\u003eException\u003c/code\u003e originating due to functionality failure by the","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" * Duke helper chat bot.","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":13}},{"path":"src/main/java/duke/exceptions/EmptyDeadlineBodyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to missing description or due date in the String","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" * representation of \u003ccode\u003eDeadline\u003c/code\u003e data.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"public class EmptyDeadlineBodyException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    public EmptyDeadlineBodyException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_EMPTY_DEADLINE_BODY);","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":15}},{"path":"src/main/java/duke/exceptions/EmptyEventBodyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to missing description or venue in the String","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" * representation of \u003ccode\u003eEvent\u003c/code\u003e data.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"public class EmptyEventBodyException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    public EmptyEventBodyException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_EMPTY_EVENT_BODY);","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":15}},{"path":"src/main/java/duke/exceptions/EmptyFindBodyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to missing text filter when issuing \u003ccode\u003eFindTaskCommand\u003c/code\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class EmptyFindBodyException extends DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public EmptyFindBodyException() {","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_EMPTY_TEXT_FILTER);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/exceptions/EmptyTodoBodyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to missing description in the String","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" * representation of \u003ccode\u003eToDo\u003c/code\u003e data.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"public class EmptyTodoBodyException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    public EmptyTodoBodyException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_EMPTY_TODO_BODY);","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":16}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to unsupported command provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_INVALID_COMMAND);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/exceptions/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to unsupported format of \u003ccode\u003eDateTime\u003c/code\u003e String provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class InvalidDateTimeFormatException extends DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public InvalidDateTimeFormatException() {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_INVALID_DATETIME_FORMAT);","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/exceptions/InvalidDeadlineBodyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to unsupported format of \u003ccode\u003eDeadline\u003c/code\u003e data String provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class InvalidDeadlineBodyException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public InvalidDeadlineBodyException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_INVALID_DEADLINE_FORMAT);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/exceptions/InvalidEventBodyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to unsupported format of \u003ccode\u003eEvent\u003c/code\u003e data String provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class InvalidEventBodyException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public InvalidEventBodyException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_INVALID_EVENT_FORMAT);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/exceptions/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.MessageConstants;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents an \u003ccode\u003eException\u003c/code\u003e due to no tasks being found associated with provided task number.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class InvalidTaskNumberException extends DukeException {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public InvalidTaskNumberException() {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_INVALID_TASK_NUMBER);","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/fulfillment/FulfillmentHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.fulfillment;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserInputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.GreetingMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.Message;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * This class handles user input and handles user\u0027s commands.","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"public class FulfillmentHandler {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    private final UserInputHandler consoleUserInputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    private final UserOutputHandler consoleUserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    public FulfillmentHandler(UserInputHandler consoleUserInputHandler,","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"                              UserOutputHandler consoleUserOutputHandler, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        this.consoleUserInputHandler \u003d consoleUserInputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        this.consoleUserOutputHandler \u003d consoleUserOutputHandler;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     * Initializes the Chatbot.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when an error connecting","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"     *                     to input/output stream occurs.","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    public void runChatbot() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        handleGreeting();","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"            String userInput \u003d consoleUserInputHandler.readInput();","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"            try {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"                Command userCommand \u003d Parser.parse(userInput);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"                userCommand.execute(consoleUserOutputHandler, taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"                isExit \u003d userCommand.isExit();","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"                consoleUserOutputHandler.writeMessage(new Message(e.getMessage()));","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    private void handleGreeting() {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        consoleUserOutputHandler.writeMessage(new GreetingMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":55}},{"path":"src/main/java/duke/fulfillment/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.fulfillment;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.command.CommandType;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import duke.command.FindTasksCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import duke.command.ListTasksCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import duke.command.MarkTaskDoneCommand;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" * Utility class which provides methods for parsing and understanding user input.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"public class Parser {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"    private Parser() {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * Parses user input and returns the appropriate \u003ccode\u003eCommand\u003c/code\u003e which","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     * corresponds to user input.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     * @param userInput String which represents user\u0027s command for chat bot.","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     * @return corresponding command as understood from user\u0027s input.","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     * @throws DukeException thrown when user\u0027s input is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"    public static Command parse(String userInput) throws DukeException {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        String[] splitUserInput \u003d userInput.trim().split(\" \", 2);","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        CommandType userCommandType \u003d CommandType.getCommand(splitUserInput[0].trim());","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        String userInputBody \u003d null;","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        if (splitUserInput.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"            userInputBody \u003d splitUserInput[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        if (userCommandType !\u003d null) {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"            switch (userCommandType) {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"            case LIST:","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"                return new ListTasksCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"            case TODO:","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"                return new AddTodoCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"                return new AddDeadlineCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"            case EVENT:","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"                return new AddEventCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"            case DONE:","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"                return new MarkTaskDoneCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"            case DELETE:","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"                return new DeleteTaskCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"            case FIND:","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"                return new FindTasksCommand(userInputBody);","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"            case BYE:","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"                return new ByeCommand(userInputBody);","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"            // default case in case unexpected no matches occurs.","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"            default:","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":67}},{"path":"src/main/java/duke/io/ConsoleUserInputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.io;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * Handles reading from input source.","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"public class ConsoleUserInputHandler implements UserInputHandler {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    private final BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"     * Reads a line of input from the console.","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"     * @return String which contains user input from the console.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when failure to read from console occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    public String readInput() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        return br.readLine();","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":24}},{"path":"src/main/java/duke/io/ConsoleUserOutputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.io;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.Message;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Handles writing to output destination.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class ConsoleUserOutputHandler implements UserOutputHandler {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"     * Writes specified message to the standard output.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"     * @param msg \u003ccode\u003eMessage\u003c/code\u003e containing String data to be written as output.","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    public void writeMessage(Message msg) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"        System.out.println(msg.toString());","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":21}},{"path":"src/main/java/duke/io/FileInputOutputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.io;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import java.util.LinkedList;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" * Encapsulates functionality for reading and writing strings to and from a specified target file.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"public class FileInputOutputHandler {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    private final BufferedReader br;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"     * Instantiates a \u003ccode\u003eFileIO\u003c/code\u003e object.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"     * Creates directories and files at the filepath provided if it does not exist.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * @param filePath filepath of file to read from and write to.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when error reading or writing to target file occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    public FileInputOutputHandler(String filePath) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"        File tasksFile \u003d new java.io.File(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        // handle the case when the file does not initially exist","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        if (!tasksFile.exists()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"            if (!tasksFile.getParentFile().exists()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"                tasksFile.getParentFile().mkdirs();","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"            tasksFile.createNewFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        this.br \u003d new BufferedReader(new FileReader(tasksFile));","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     * Reads target file line by line.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"     * @return List of strings containing each line of target file.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when error reading from file occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"    public List\u003cString\u003e readLinesFromFile() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"        List\u003cString\u003e fileLines \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"        String fileLine \u003d br.readLine();","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"        while (fileLine !\u003d null \u0026\u0026 !fileLine.isBlank()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"            fileLines.add(fileLine);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"            fileLine \u003d br.readLine();","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"        return fileLines;","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"     * Writes each String of given list on a new line to the target file.","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"     * @param lines List of strings to write to target file.","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when error writing to file occurs.","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"    public void saveLinesToFile(List\u003cString\u003e lines) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"        try (FileWriter fw \u003d new FileWriter(this.filePath)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"            for (String line : lines) {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"                fw.write(line);","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"                fw.write(\"\\n\");","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":73}},{"path":"src/main/java/duke/io/UserInputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.io;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Defines the behaviour required to handle and support user input.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public interface UserInputHandler {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    String readInput() throws IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":12}},{"path":"src/main/java/duke/io/UserOutputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.io;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.Message;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Defines the behaviour required to handle output to the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public interface UserOutputHandler {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    void writeMessage(Message msg);","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":12}},{"path":"src/main/java/duke/messages/ByeMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Class is responsible for generating message to say bye to user.","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public class ByeMessage extends Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    public ByeMessage() {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_BYE);","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":12}},{"path":"src/main/java/duke/messages/GreetingMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Class is responsible for generating message to greet user.","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public class GreetingMessage extends Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    public GreetingMessage() {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_GREETING);","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":12}},{"path":"src/main/java/duke/messages/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Encapsulates textual data to be output to the user.","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public class Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    private String messageText;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"    private final String separator \u003d","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"            \"____________________________________________________________\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    public Message() {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    public Message(String messageText) {","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"        this.messageText \u003d messageText;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    public void setMessageText(String messageText) {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"        this.messageText \u003d messageText;","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        return separator + \"\\n\" + this.messageText + \"\\n\" + separator;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":29}},{"path":"src/main/java/duke/messages/MessageConstants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Utility class containing message constants.","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public class MessageConstants {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_GREETING \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_TASK_ADD_HEADER \u003d \"Got it. I\u0027ve added this task:\\n\\t\";","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_TASK_DONE_HEADER \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_TASK_LIST_HEADER \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_FIND_TASK_LIST \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_TASK_DELETE_HEADER \u003d \"Noted. I\u0027ve removed this task:\\n\\t\";","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_INVALID_COMMAND \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"            \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_EMPTY_TODO_BODY \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"            \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_EMPTY_EVENT_BODY \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"            \"☹ The description \u0026 at fields of an event are not provided. Try eg. \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"                    \"\\\"event \u003cdescription\u003e /at \u003cvenue\u003e\\\" instead.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_EMPTY_DEADLINE_BODY \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"            \"☹ The description \u0026 by fields of a deadline are not provided eg.\" +","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"                    \"\\\"deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd\u003e\\\" instead\";","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_EMPTY_TEXT_FILTER \u003d \"☹ No text filter provided. \"","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"            + \"Try \\\"find \u003ctext filter\u003e\\\" instead.\";","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_INVALID_EVENT_FORMAT \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"            \"☹ The format of event provided is invalid. \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"                    \"Try \\\"event \u003cdescription\u003e /at \u003cvenue\u003e\\\" instead.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_INVALID_DEADLINE_FORMAT \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"            \"☹ The format of deadline provided is invalid. \" +","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"                    \"Try \\\"deadline \u003cdescription\u003e /by \u003cyyyy-mm-dd\u003e\\\" instead.\";","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"            \"☹ The format of the date and time provided is invalid. \"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"                    + \"Try \\\"yyyy-mm-dd\\\" instead.\";","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_INVALID_TASK_NUMBER \u003d","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"            \"☹ Task number provided is invalid. Please try another number.\";","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    public static final String MESSAGE_INVALID_INTEGER \u003d \"☹ Task number must be valid integer. eg. \\\"done 1\\\"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    // hide constructor for utility class","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"    private MessageConstants() {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":44}},{"path":"src/main/java/duke/messages/TaskAddMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Class is responsible for generating message to indicate the given task has been added.","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public class TaskAddMessage extends Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    public TaskAddMessage(String taskText, int numOfTasks) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_TASK_ADD_HEADER","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"                + taskText","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"                + \"\\nNow you have \"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"                + numOfTasks","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"                + (numOfTasks \u003d\u003d 1 ? \" task \" : \" tasks \")","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"                + \"in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":17}},{"path":"src/main/java/duke/messages/TaskDeleteMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Class is responsible for generating a message when the given task has been deleted.","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public class TaskDeleteMessage extends Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    public TaskDeleteMessage(String taskDescription, int numOfTasks) {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_TASK_DELETE_HEADER","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"                + taskDescription","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"                + \"\\nNow you have \" + numOfTasks","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"                + (numOfTasks \u003d\u003d 1 ? \" task \" : \" tasks \")","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"                + \"in the list.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":16}},{"path":"src/main/java/duke/messages/TaskDoneMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Class is responsible for generating message indicating given task is marked as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class TaskDoneMessage extends Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public TaskDoneMessage(Task task) {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        super(MessageConstants.MESSAGE_TASK_DONE_HEADER + \"\\n\\t\" + task.toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":14}},{"path":"src/main/java/duke/messages/TaskFindListMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"public class TaskFindListMessage extends Message {","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"    public TaskFindListMessage(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"        super.setMessageText(MessageConstants.MESSAGE_FIND_TASK_LIST","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"            + generateListMessageText(tasks));","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    private String generateListMessageText(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"        StringBuilder listMessageBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"        for (int index \u003d 0; index \u003c tasks.size(); index++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"            listMessageBuilder","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"                    .append(\"\\n\")","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"                    .append(index + 1)","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"                    .append(\".\")","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"                    .append(tasks.get(index).toString());","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        return listMessageBuilder.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"kevin9foong":24}},{"path":"src/main/java/duke/messages/TaskListMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.messages;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * Class is responsible for generating message to list all tasks","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * based on given task list.","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"public class TaskListMessage extends Message {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    public TaskListMessage(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"        super.setMessageText(MessageConstants.MESSAGE_TASK_LIST_HEADER","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"                + generateListMessageText(tasks));","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     * Generates message from given list.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"     * @param tasks tasks to be included in the message.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"     * @return user-friendly message including textual representations of all tasks","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * provided in the given list.","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"    private String generateListMessageText(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        StringBuilder listMessageBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        for (int index \u003d 0; index \u003c tasks.size(); index++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"            listMessageBuilder","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"                    .append(\"\\n\")","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"                    .append(index + 1)","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"                    .append(\".\")","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"                    .append(tasks.get(index).toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        return listMessageBuilder.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":37}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyDeadlineBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDeadlineBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" * Represents a completable \u003ccode\u003eTask\u003c/code\u003e with a description and a date to be completed by.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"    private final LocalDate by;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"     * Instantiates a \u003ccode\u003eDeadline\u003c/code\u003e from its data String representation.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"     * @param deadlineDataText String containing data in the form \u0027description /by yyyy-mm-dd\u0027.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"     * @throws EmptyDeadlineBodyException     thrown when deadline description or by date are not provided.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidDeadlineBodyException   thrown when the data String representation is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidDateTimeFormatException thrown when the \u003ccode\u003eDateTime\u003c/code\u003e format for the by date provided","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"     *                                        is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    public Deadline(String deadlineDataText) throws EmptyDeadlineBodyException, InvalidDeadlineBodyException,","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"            InvalidDateTimeFormatException {","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        if (deadlineDataText \u003d\u003d null || deadlineDataText.isEmpty()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"            throw new EmptyDeadlineBodyException();","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        String[] deadlineData \u003d deadlineDataText.split(\"/by \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        if (deadlineData.length !\u003d 2 || deadlineData[0].isEmpty() || deadlineData[1].isEmpty()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidDeadlineBodyException();","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        super.setDescription(deadlineData[0].trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"            this.by \u003d LocalDate.parse(deadlineData[1].trim());","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidDateTimeFormatException();","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"    public Deadline(String description, boolean isDone, LocalDate by) {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"        super.setDescription(description);","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"        super.setIsDone(isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"    public String getTaskRepresentation() {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"        return TaskType.DEADLINE + \",\" + super.getTaskRepresentation() + this.by + \",\";","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"        return \"[D]\" + super.toString()","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"                + \" (by: \" + by.getMonth() + \" \" + by.getDayOfMonth() + \" \" + by.getYear() + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":60}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyEventBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidEventBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" * Represents a completable \u003ccode\u003eTask\u003c/code\u003e with a description and a venue.","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    private final String at;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"     * Instantiates an \u003ccode\u003eEvent\u003c/code\u003e from its data String representation.","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"     * @param eventDataText String containing data in the form \u0027description /at venue\u0027.","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidEventBodyException thrown when the data String representation is invalid.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"     * @throws EmptyEventBodyException   thrown when the description or venue is missing from the","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     *                                   data String representation.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"    public Event(String eventDataText) throws InvalidEventBodyException, EmptyEventBodyException {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"        if (eventDataText \u003d\u003d null || eventDataText.isEmpty()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"            throw new EmptyEventBodyException();","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        String[] eventData \u003d eventDataText.split(\"/at \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        if (eventData.length !\u003d 2 || eventData[0].isEmpty() || eventData[1].isEmpty()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidEventBodyException();","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"        super.setDescription(eventData[0].trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        this.at \u003d eventData[1].trim();","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"    public Event(String description, boolean isDone, String at) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        super.setDescription(description);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        super.setIsDone(isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    public String getTaskRepresentation() {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"        return TaskType.EVENT + \",\" + super.getTaskRepresentation() + this.at + \",\";","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":49}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * This class encapsulates a user-added task","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    private String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"     * Extracts data from given taskRepresentation and returns the specific subclass of","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"     * Task associated with the given String task representation.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"     * @param taskRepresentation comma separated String representation of a task.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"     * @return Task with data extracted from the given String representation of the Task.","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    public static Task getTaskFromRepresentation(String taskRepresentation) {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        String[] taskData \u003d taskRepresentation.split(\",\");","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"        boolean isDone \u003d taskData[1].equals(\"X\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        switch (TaskType.valueOf(taskData[0])) {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"            return new Deadline(taskData[2], isDone, LocalDate.parse(taskData[3]));","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        case EVENT:","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"            return new Event(taskData[2], isDone, taskData[3]);","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"        case TODO:","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"            return new ToDo(taskData[2], isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        default:","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"            return null;","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        return this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"     * Set description of this task.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     * @param description description to be set as.","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    protected void setDescription(String description) {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    protected void setIsDone(boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"     * Convert this task\u0027s data to representation to be saved in file.","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"     * @return representation of this task\u0027s data","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"    public String getTaskRepresentation() {","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"        return (isDone ? \"X,\" : \",\") + description + \",\";","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"     * Returns textual representation of this \u003ccode\u003eTask\u003c/code\u003e and its data.","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"     * @return String representing this \u003ccode\u003eTask\u003c/code\u003e and its data.","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":76}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.data.TaskFileStorage;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.data.TaskStorage;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" * Represents a list of tasks and provides functionality to manipulate tasks contained within the list.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"public class TaskList {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    private TaskStorage taskStorage;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    public TaskList(TaskStorage taskStorage) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"        this.taskStorage \u003d taskStorage;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        tasks \u003d taskStorage.loadTasks();","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"     * Writes current taskList to the Task storage to be persisted.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"     * @param tasksToSave List of tasks to be saved to Task storage.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when failure to write to Task storage occurs.","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"    private void saveTasksToStorage(List\u003cTask\u003e tasksToSave) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        if (taskStorage \u003d\u003d null) {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"            taskStorage \u003d new TaskFileStorage();","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        taskStorage.saveTasks(tasksToSave);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"     * Get task associated with index number in taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"     * @param index index of task to get.","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"     * @return task associated with index number in taskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidTaskNumberException thrown when index provided exceeds valid index range.","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"    public Task getTask(int index) throws InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"     * Adds a new task to the TaskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"     * @param task task to be added.","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"     * @return task that has been added to TaskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when errors writing to storage occur.","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"    public Task addTask(Task task) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"        saveTasksToStorage(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"        return task;","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"     * Marks task as done and updates the \u003ccode\u003eTaskStorage\u003c/code\u003e file.","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"     * @param index index of task to mark as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"     * @return task that has been marked as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException thrown when errors writing to storage occur.","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"    public Task setDone(int index) throws IOException, InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"        Task doneTask \u003d getTask(index);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"        doneTask.setIsDone(true);","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":"        saveTasksToStorage(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"        return doneTask;","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"kevin9foong"},"content":"     * Deletes task associated with given index number","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"kevin9foong"},"content":"     * @param index index of task to delete","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"kevin9foong"},"content":"     * @return deleted task","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidTaskNumberException thrown when index provided exceeds valid index range","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"kevin9foong"},"content":"     * @throws IOException                thrown when errors writing to storage occur","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"kevin9foong"},"content":"    public Task deleteTask(int index) throws InvalidTaskNumberException, IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"kevin9foong"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"kevin9foong"},"content":"        Task removedTask \u003d tasks.remove(index);","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"kevin9foong"},"content":"        saveTasksToStorage(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"kevin9foong"},"content":"        return removedTask;","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"kevin9foong"},"content":"     * Retrieves a new list containing all tasks in the taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"kevin9foong"},"content":"     * @return new list containing copy of all tasks from the taskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"kevin9foong"},"content":"    public List\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"kevin9foong"},"content":"        return new ArrayList\u003c\u003e(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"kevin9foong"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"kevin9foong"},"content":"     * Gets the number of tasks in the taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"kevin9foong"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"kevin9foong"},"content":"     * @return int representing number of tasks in the taskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"kevin9foong"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"kevin9foong"},"content":"    public int getNumOfTasks() {","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"kevin9foong"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":114}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":" * Contains the specific types of Tasks supported.","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"public enum TaskType {","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    DEADLINE, EVENT, TODO","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":10}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyTodoBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":" * Represents a completable \u003ccode\u003eTask\u003c/code\u003e that only has a description.","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":" *","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":" * @author kevin9foong","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    public ToDo(String description) throws EmptyTodoBodyException {","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"        if (description \u003d\u003d null || description.isEmpty()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"            throw new EmptyTodoBodyException();","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"            super.setDescription(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"        super.setDescription(description);","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"        super.setIsDone(isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    public String getTaskRepresentation() {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        return TaskType.TODO + \",\" + super.getTaskRepresentation();","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":33}},{"path":"src/test/java/duke/command/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.command;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.data.TaskStorageStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.EmptyDeadlineBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidDeadlineBodyException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import duke.io.UserOutputHandlerStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"class AddDeadlineCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    void executingCommandWorks_userInput_addsDeadlineToTaskList() throws IOException, InvalidDateTimeFormatException,","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"            InvalidDeadlineBodyException, EmptyDeadlineBodyException, InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        AddDeadlineCommand addDeadlineCommand \u003d new AddDeadlineCommand(\"x /by 2021-12-12\");","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"        Deadline expectedDeadline \u003d new Deadline(\"x\", false, LocalDate.parse(\"2021-12-12\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        UserOutputHandlerStub userOutputHandlerStub \u003d new UserOutputHandlerStub();","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        TaskList taskList \u003d new TaskList(new TaskStorageStub());","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        addDeadlineCommand.execute(userOutputHandlerStub, taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(\"____________________________________________________________\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"                \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"                \"\\t[D][ ] x (by: DECEMBER 12 2021)\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"                \"Now you have 1 task in the list.\\n\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"                \"____________________________________________________________\", userOutputHandlerStub.getWrittenMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(1, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(expectedDeadline.getTaskRepresentation(), taskList.getTask(0).getTaskRepresentation());","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":38}},{"path":"src/test/java/duke/data/TaskStorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.data;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"public class TaskStorageStub implements TaskStorage {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    public void saveTasks(List\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"        tasks \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    public List\u003cTask\u003e loadTasks() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"        return tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":21}},{"path":"src/test/java/duke/io/UserOutputHandlerStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.io;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.messages.Message;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"public class UserOutputHandlerStub implements UserOutputHandler {","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"    private String writtenMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"    public void writeMessage(Message msg) {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"        this.writtenMessage \u003d msg.toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    public String getWrittenMessage() {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"        return this.writtenMessage;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":16}},{"path":"src/test/java/duke/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import duke.data.TaskStorageStub;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import duke.exceptions.InvalidTaskNumberException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"class TaskListTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"    void canGetAllTasksWhenNoTasks_noTasks_returnsEmptyList() throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"        TaskList taskList \u003d new TaskList(new TaskStorageStub());","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(new ArrayList\u003c\u003e(), taskList.getAllTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    void canAddTasks_tasksToAdd_returnsListWithAddedTasks()","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        TaskList taskList \u003d new TaskList(new TaskStorageStub());","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"        Deadline deadline \u003d new Deadline(\"deadline\", true, LocalDate.parse(\"2021-12-12\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"        Event event \u003d new Event(\"event\", false, \"home\");","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        ToDo todo \u003d new ToDo(\"todo\", false);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(1, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(deadline, taskList.getTask(0));","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(event);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(2, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(event, taskList.getTask(1));","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(3, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(todo, taskList.getTask(2));","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    void canDeleteTasks_tasksAndTaskIndexToDelete_returnsListWithNoDeletedTasks()","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"        TaskList taskList \u003d new TaskList(new TaskStorageStub());","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"        Deadline deadline \u003d new Deadline(\"deadline\", true, LocalDate.parse(\"2021-12-12\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"        Event event \u003d new Event(\"event\", false, \"home\");","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"        ToDo todo \u003d new ToDo(\"todo\", false);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(1, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(deadline, taskList.getTask(0));","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"        taskList.deleteTask(0);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(event);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"        taskList.deleteTask(0);","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(todo, taskList.getTask(0));","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(1, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"        taskList.deleteTask(0);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(0, taskList.getNumOfTasks());","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"    void canMarkTaskAsDone_tasksAndTaskIndexToMarkDone_returnsListWithDoneTask()","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"            throws IOException, InvalidTaskNumberException {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"        TaskList taskList \u003d new TaskList(new TaskStorageStub());","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"        Deadline deadline \u003d new Deadline(\"deadline\", true, LocalDate.parse(\"2021-12-12\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"        Event event \u003d new Event(\"event\", false, \"home\");","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"        ToDo todo \u003d new ToDo(\"todo\", false);","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"        Event doneEvent \u003d new Event(\"event\", true, \"home\");","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"        ToDo doneTodo \u003d new ToDo(\"todo\", true);","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(event);","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(event, taskList.getTask(1));","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(todo, taskList.getTask(2));","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"kevin9foong"},"content":"        taskList.setDone(1);","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(doneEvent.getTaskRepresentation(), event.getTaskRepresentation());","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"kevin9foong"},"content":"        taskList.setDone(2);","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(doneTodo.getTaskRepresentation(), todo.getTaskRepresentation());","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"kevin9foong"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"kevin9foong"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"kevin9foong":85}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":"todo xyz","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"delete 0","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"deadline x /by z","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"event y /at z","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"todo 111","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"delete 3","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"test adding a task","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"deadline test adding a deadline /by 2021-19-22","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"event test adding an event /at 11.15am monday 16/08/21","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"todo test adding a todo","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"done 4","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"blah","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"done 1234","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"done 0","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"done xyz1","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"event 1","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"deadline 1","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"event /at 123","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"event 1 /at 2","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"deadline 1 /by 2021-12-12","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"todo h","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"deadline hehe /by 2020-12-12","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"event hello /at home","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"find h","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"find heh","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"find he","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"find lo","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"delete 1","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":"list","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"find","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"kevin9foong":68}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"dir /S /B ..\\src\\main\\java\\*.java \u003e sources.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin @sources.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"kevin9foong":3}}]

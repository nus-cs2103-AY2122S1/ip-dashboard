[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"TLChicken":18,"-":45}},{"path":"src/main/java/duke/BaseTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":" *  This class encapsulates a Task element in Duke\u0027s TDList, and features","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":" *  various methods to manipulate the Task.","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"public abstract class BaseTask {","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"    private String taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"     * This enum identifies the different types of tasks available.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"    public enum TaskType {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"        NONE,","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"        TODO,","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"        EVENT,","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"        DEADLINE","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"     * A constructor for the Base Task used to directly create new tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"     * @param taskName The name and description of the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"     * @param isDone True if task was already completed, false if task is still incomplete.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"    public BaseTask(String taskName, boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"     * Sets the current task as finished.","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase if the task being marked as done was already done.","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"    public void setAsDone() throws DukeExceptionBase {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"        if (isTaskDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"The specified task was already done.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"     * Checks whether the task is finished.","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"     * @return true if finished, false if undone.","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"    public boolean isTaskDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"        return isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"     * Gets the name/description of the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"     * @return the name/description of the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"        return taskName;","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"     * Gets the name/description of the task, as well as whether it is done","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"     * neatly formatted in one line.","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"     * @return the String containing the line describing the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"    public String getLineOfTaskInfo() {","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"        String taskTypeCheckbox \u003d this.getTaskTypeStringHeader();","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"        String doneCheckboxStr \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"        if (isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"            doneCheckboxStr \u003d \"[X]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"            doneCheckboxStr \u003d \"[ ]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"        String returnThis \u003d taskTypeCheckbox + doneCheckboxStr + \" \" + this.getTaskDescription();","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"        return returnThis;","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"     * Gets the type of the Task in enum form.","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"     * @return the enum representing the type of the current task.","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"        return TaskType.NONE;","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the letter representing the task type in square brackets.","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"TLChicken"},"content":"     * @return a string containing [X] where X is the letter representing the task type.","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"TLChicken"},"content":"    public String getTaskTypeStringHeader() {","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"TLChicken"},"content":"        return \"[ ]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the task\u0027s name and additional descriptions if applicable.","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"TLChicken"},"content":"     * @return the string describing the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"TLChicken"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"TLChicken"},"content":"        return this.getTaskName();","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"TLChicken"},"content":"     * Returns the extra info this task contains, if any.","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"TLChicken"},"content":"     * @return the String containing the extra info of this task if any. Returns null if there is none.","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"TLChicken"},"content":"    public String getTaskExtraInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"TLChicken"},"content":"        return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"TLChicken"},"content":"     * Searches task to see if it matches provided keywords.","lastModifiedDate":"2021-08-29"},{"lineNumber":124,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"TLChicken"},"content":"     * @param keywords The keywords to use during the search.","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"TLChicken"},"content":"     * @return true if the task matches, false otherwise.","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":128,"author":{"gitId":"TLChicken"},"content":"    public boolean searchForKeywords(String keywords) {","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"TLChicken"},"content":"        return this.taskName.contains(keywords);","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"TLChicken"},"content":"     * Check the type of task represented by the current command.","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"TLChicken"},"content":"     * @param command The command inputted by the user.","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"TLChicken"},"content":"     * @return the task type. Returns NONE if it is not a task.","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"TLChicken"},"content":"    public static BaseTask.TaskType checkTaskType(String command) {","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"TLChicken"},"content":"        if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"TLChicken"},"content":"            return BaseTask.TaskType.DEADLINE;","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"TLChicken"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"TLChicken"},"content":"            return BaseTask.TaskType.EVENT;","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"TLChicken"},"content":"        } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"TLChicken"},"content":"            return BaseTask.TaskType.TODO;","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"TLChicken"},"content":"            return BaseTask.TaskType.NONE;","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"TLChicken"},"content":"     * Given the short form representing a task type, this function returns the enum representing it.","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"TLChicken"},"content":"     * @param taskLetter the letter of the task type that is wanted.","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"TLChicken"},"content":"     * @return the enum representing the wanted task type.","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"TLChicken"},"content":"    public static BaseTask.TaskType convertTaskLetterToEnum(String taskLetter) {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"TLChicken"},"content":"        if (taskLetter.equals(\"T\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"TLChicken"},"content":"            return TaskType.TODO;","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"TLChicken"},"content":"        } else if (taskLetter.equals(\"D\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"TLChicken"},"content":"            return TaskType.DEADLINE;","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"TLChicken"},"content":"        } else if (taskLetter.equals(\"E\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"TLChicken"},"content":"            return TaskType.EVENT;","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"TLChicken"},"content":"            return TaskType.NONE;","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":166}},{"path":"src/main/java/duke/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":" *  This class encapsulates a Task element of Deadline type in Duke\u0027s TDList, and features","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":" *  various methods to manipulate the Task.","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"public class DeadlineTask extends BaseTask {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"    /** \u0027by when\u0027 data is given in date form and stored here. */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"    private LocalDate byWhenDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"     * Used for creating a new Deadline Task.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"     * @param taskName the name or description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"     * @param byWhen describes when the task should be completed by.","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"     *               (In the format: D/M/YY, DD/MM/YYYY or DD Month YYYY)","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when the byWhen field is not given in an acceptable format.","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"    public DeadlineTask(String taskName, String byWhen) throws DukeExceptionBase {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"        super(taskName, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"        this.parseByWhenInput(byWhen);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"     * Used for creating a new Deadline Task with ability to set all attributes.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"     * @param taskName the name or description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"     * @param byWhen describes when the task should be completed by.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"     * @param isCompleted true if task was already complete, false if incomplete.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when the byWhen field is not given in an acceptable format.","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"    public DeadlineTask(String taskName, String byWhen, boolean isCompleted) throws DukeExceptionBase {","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"        super(taskName, isCompleted);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"        this.parseByWhenInput(byWhen);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"     * Stores the byWhen data of this Deadline Task, in LocalDate form.","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"     * @param byWhen the time the task is upposed to be done by.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when the byWhen field is not given in an acceptable format.","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"    private void parseByWhenInput(String byWhen) throws DukeExceptionBase {","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"        if (byWhen.length() \u003c\u003d 5) {","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"DeadlineTask must contain a Date in \u0027D/M/YY\u0027,\"","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"                    + \" \u0027DD/MM/YYYY\u0027 or \u0027DD Month YYYY\u0027 formats.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"        // Check if year is in YY or YYYY form","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"        String last4Char \u003d byWhen.substring(byWhen.length() - 4);","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"        boolean hasSlash \u003d last4Char.contains(\"/\");","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"        String first3Char \u003d byWhen.substring(0, 3);","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"        boolean hasSpaceAtFront \u003d first3Char.contains(\" \");","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"        DateTimeFormatter formatterToUse \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"        if (hasSlash) {","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"            formatterToUse \u003d DateTimeFormatter.ofPattern(\"d/M/yy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"        } else if (hasSpaceAtFront) {","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"            formatterToUse \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"            formatterToUse \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"        // Tries parsing the date string.","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"            LocalDate byDate \u003d LocalDate.parse(byWhen, formatterToUse);","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"            this.byWhenDate \u003d byDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Deadline Date does not follow the format required. \"","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"                    + \"DeadlineTask must contain a Date in \u0027D/M/YY\u0027, \u0027DD/MM/YYYY\u0027 or \u0027DD Month YYYY\u0027 formats\");","lastModifiedDate":"2021-09-05"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"     * Gets the String representation of the by when.","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"     * @return String representation of the LocalDate or an empty String if the Date field is empty.","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"    private String getByWhenStr() {","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"        if (this.byWhenDate \u003d\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"            return \"\";","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"            DateTimeFormatter longDateFormat \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"            return this.byWhenDate.format(longDateFormat);","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"TLChicken"},"content":"     * Gets the type of the Task in enum form.","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":98,"author":{"gitId":"TLChicken"},"content":"     * @return the enum representing the type of the current task.","lastModifiedDate":"2021-08-18"},{"lineNumber":99,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"TLChicken"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"TLChicken"},"content":"        return TaskType.DEADLINE;","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the letter representing the task type in square brackets.","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"TLChicken"},"content":"     * @return a string containing [X] where X is the letter representing the task type.","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"TLChicken"},"content":"    public String getTaskTypeStringHeader() {","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"TLChicken"},"content":"        return \"[D]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the task\u0027s name and additional descriptions if applicable.","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"TLChicken"},"content":"     * @return the string describing the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"TLChicken"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"TLChicken"},"content":"        return this.getTaskName() + \"(by: \" + this.getByWhenStr() + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"TLChicken"},"content":"     * Returns the extra info this task contains, which is the by when data.","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"TLChicken"},"content":"     * @return the String containing the extra info of this task if any. Returns null if there is none.","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"TLChicken"},"content":"    public String getTaskExtraInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"TLChicken"},"content":"        return this.getByWhenStr();","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":137}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"    private void flip() {","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-05"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"        db.flip();","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"        return db;","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"TLChicken":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":" * This class contains the main Duke class that runs the chat bot.","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"    /** Storage and Management of Duke Objects. */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"    private static Duke dukeInstance;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"    /** Tracks whether the exit command was used. */","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    private boolean isExited;","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"    private DukeCommandParser currDukeCmdParser;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    private DukeStorageManager currStorageMgr;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"    private DukeUi currUiCtrl;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"    private DukeListMgr currDukeList;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    private Duke() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"        this.currDukeList \u003d new DukeListMgr();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"        this.currUiCtrl \u003d new DukeUi();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"        this.currDukeCmdParser \u003d new DukeCommandParser();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"        this.isExited \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"        // Processes the path to use to access storage file","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"            Path xmlPath \u003d Paths.get(\"dukeDocs\", \"listSave1.xml\");","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"            //System.out.println(xmlPath.getFileName());","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"            this.currStorageMgr \u003d new DukeStorageManager(xmlPath);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"        } catch (InvalidPathException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"            // If there was an error loading the save file, then create a new empty one.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"            this.currStorageMgr \u003d new DukeStorageManager();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"            // There is no Duke instance to print the error msg yet","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"            // If there was an error loading the save file, then create a new empty one.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"            this.currStorageMgr \u003d new DukeStorageManager();","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"     * Use to get the current instance of Duke that is running.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"     * Creates a new instance of Duke if there is none running.","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"     * @return the Duke object that is running.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"    public static Duke getCurrDuke() {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"        if (dukeInstance \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"            dukeInstance \u003d new Duke();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"        return dukeInstance;","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"     * Gets Duke\u0027s Command Parser.","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"     * @return the current Duke Command Parser.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"    public DukeCommandParser getCurrDukeCmdParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"        return this.currDukeCmdParser;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"     * Gets Duke\u0027s Storage Manager.","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"     * @return the current Duke Storage Manager.","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"    public DukeStorageManager getCurrStorageMgr() {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"        return this.currStorageMgr;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"     * Gets Duke\u0027s current list manager.","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"     * @return the current list manager.","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"    public DukeListMgr getCurrListMgr() {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"        return this.currDukeList;","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"     * The main method that starts the whole program.","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"     * @param currDuke The instance of Duke to start.","lastModifiedDate":"2021-09-05"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"TLChicken"},"content":"    public static void dukeStarter(Duke currDuke) {","lastModifiedDate":"2021-09-05"},{"lineNumber":95,"author":{"gitId":"TLChicken"},"content":"        assert (currDuke.currStorageMgr !\u003d null) : \"Duke Storage not initialised\";","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"TLChicken"},"content":"        // Load Save File only after Duke is created.","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"TLChicken"},"content":"        currDuke.getCurrStorageMgr().reloadSaveFromXmlDoc();","lastModifiedDate":"2021-09-05"},{"lineNumber":98,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":99,"author":{"gitId":"TLChicken"},"content":"        System.out.println(\"Duke is running in the folder: \" + System.getProperty(\"user.dir\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"TLChicken"},"content":"        // Show Welcome Message","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"TLChicken"},"content":"        // currDuke.currUiCtrl.printWelcomeMessage();","lastModifiedDate":"2021-09-05"},{"lineNumber":103,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"TLChicken"},"content":"        // Start accepting input (Not necessary anymore)","lastModifiedDate":"2021-09-05"},{"lineNumber":105,"author":{"gitId":"TLChicken"},"content":"        // currDuke.runInputLoopMain();","lastModifiedDate":"2021-09-05"},{"lineNumber":106,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":107,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":109,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":111,"author":{"gitId":"TLChicken"},"content":"     * Use when the user enters something new in the GUI, in order to process the command.","lastModifiedDate":"2021-09-05"},{"lineNumber":112,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":113,"author":{"gitId":"TLChicken"},"content":"     * @param lastInput What the user entered into the GUI.","lastModifiedDate":"2021-09-05"},{"lineNumber":114,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":115,"author":{"gitId":"TLChicken"},"content":"    public void acceptUserInput(String lastInput) {","lastModifiedDate":"2021-09-05"},{"lineNumber":116,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":117,"author":{"gitId":"TLChicken"},"content":"            this.processCmdInput(lastInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":118,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase dukeE) {","lastModifiedDate":"2021-09-05"},{"lineNumber":119,"author":{"gitId":"TLChicken"},"content":"            dukeE.dukeSayErrorMsg();","lastModifiedDate":"2021-09-05"},{"lineNumber":120,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":121,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":122,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":123,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"TLChicken"},"content":"     * Runs to process the command input using the command parser.","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"TLChicken"},"content":"     * @param lastInput   The command to process.","lastModifiedDate":"2021-08-18"},{"lineNumber":127,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when an invalid command gets entered.","lastModifiedDate":"2021-08-28"},{"lineNumber":128,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"TLChicken"},"content":"    private void processCmdInput(String lastInput) throws DukeExceptionBase {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"TLChicken"},"content":"        // Get the type of command that this input represents","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"TLChicken"},"content":"        DukeCommandParser.CommandType cmdType \u003d this.currDukeCmdParser.parse(lastInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"TLChicken"},"content":"        BaseTask.TaskType currTaskType \u003d BaseTask.checkTaskType(lastInput);","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"TLChicken"},"content":"        if (cmdType \u003d\u003d DukeCommandParser.CommandType.BYE) {","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"TLChicken"},"content":"            this.dukeExiter();","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"TLChicken"},"content":"        } else if (cmdType \u003d\u003d DukeCommandParser.CommandType.LIST) {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"TLChicken"},"content":"            this.listOutTdl();","lastModifiedDate":"2021-09-05"},{"lineNumber":140,"author":{"gitId":"TLChicken"},"content":"        } else if (cmdType \u003d\u003d DukeCommandParser.CommandType.MARK_TASK_DONE) {","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"TLChicken"},"content":"            this.markItemDoneInTdl(lastInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":142,"author":{"gitId":"TLChicken"},"content":"        } else if (cmdType \u003d\u003d DukeCommandParser.CommandType.DEL_TASK) {","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"TLChicken"},"content":"            this.deleteTaskInTdl(lastInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":144,"author":{"gitId":"TLChicken"},"content":"        } else if (cmdType \u003d\u003d DukeCommandParser.CommandType.ADD_TASK) {","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"TLChicken"},"content":"            this.addToTdl(lastInput, currTaskType);","lastModifiedDate":"2021-09-05"},{"lineNumber":146,"author":{"gitId":"TLChicken"},"content":"        } else if (cmdType \u003d\u003d DukeCommandParser.CommandType.FIND) {","lastModifiedDate":"2021-08-29"},{"lineNumber":147,"author":{"gitId":"TLChicken"},"content":"            this.findTaskInTdl(lastInput);","lastModifiedDate":"2021-09-05"},{"lineNumber":148,"author":{"gitId":"TLChicken"},"content":"        } else if (cmdType \u003d\u003d DukeCommandParser.CommandType.HELP) {","lastModifiedDate":"2021-09-08"},{"lineNumber":149,"author":{"gitId":"TLChicken"},"content":"            this.showHelpScreen();","lastModifiedDate":"2021-09-08"},{"lineNumber":150,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":151,"author":{"gitId":"TLChicken"},"content":"            unknownCommandEntered();","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":153,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":154,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":155,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":156,"author":{"gitId":"TLChicken"},"content":"     * Runs when program is going to exit.","lastModifiedDate":"2021-08-17"},{"lineNumber":157,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":158,"author":{"gitId":"TLChicken"},"content":"    private void dukeExiter() {","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"TLChicken"},"content":"        dukeSays(\"Bye. Hope to see you soon!\");","lastModifiedDate":"2021-08-17"},{"lineNumber":160,"author":{"gitId":"TLChicken"},"content":"        this.isExited \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":162,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":163,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":164,"author":{"gitId":"TLChicken"},"content":"     * Used when Duke is supposed to say something.","lastModifiedDate":"2021-08-17"},{"lineNumber":165,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-17"},{"lineNumber":166,"author":{"gitId":"TLChicken"},"content":"     * @param printThis The message to print inside Duke\u0027s text bubble","lastModifiedDate":"2021-08-17"},{"lineNumber":167,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":168,"author":{"gitId":"TLChicken"},"content":"    public static void dukeSays(String printThis) {","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"TLChicken"},"content":"        Duke currDuke \u003d Duke.getCurrDuke();","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"TLChicken"},"content":"        assert (currDuke.currUiCtrl !\u003d null) : \"Duke UI not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":172,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":173,"author":{"gitId":"TLChicken"},"content":"        // Updated to work with new UI Controller which contains a buffer","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"TLChicken"},"content":"        currDuke.currUiCtrl.addToDukeBuffer(printThis);","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":176,"author":{"gitId":"TLChicken"},"content":"        // Buffer release is now done by Main Window","lastModifiedDate":"2021-09-05"},{"lineNumber":177,"author":{"gitId":"TLChicken"},"content":"        // currDuke.currUiCtrl.dukeBufferRelease();","lastModifiedDate":"2021-09-05"},{"lineNumber":178,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"TLChicken"},"content":"     * Used to add something that Duke will say later into it\u0027s UI buffer.","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"TLChicken"},"content":"     * @param printLater The message that Duke will say when the buffer is released.","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":185,"author":{"gitId":"TLChicken"},"content":"    public static void dukeLaterSay(String printLater) {","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"TLChicken"},"content":"        Duke currDuke \u003d Duke.getCurrDuke();","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"TLChicken"},"content":"        assert (currDuke.currUiCtrl !\u003d null) : \"Duke UI not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":189,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":190,"author":{"gitId":"TLChicken"},"content":"        currDuke.currUiCtrl.addToDukeBuffer(printLater);","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":192,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":193,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":194,"author":{"gitId":"TLChicken"},"content":"     * Used to empty the text buffer containing what Duke is going to say.","lastModifiedDate":"2021-09-05"},{"lineNumber":195,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":196,"author":{"gitId":"TLChicken"},"content":"     * @return what Duke is going to say.","lastModifiedDate":"2021-09-05"},{"lineNumber":197,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":198,"author":{"gitId":"TLChicken"},"content":"    public String flushUiBuffer() {","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"TLChicken"},"content":"        return this.currUiCtrl.dukeBufferRelease();","lastModifiedDate":"2021-09-05"},{"lineNumber":200,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":201,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":202,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":203,"author":{"gitId":"TLChicken"},"content":"     * Shows the help screen for Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":204,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":205,"author":{"gitId":"TLChicken"},"content":"    private void showHelpScreen() {","lastModifiedDate":"2021-09-08"},{"lineNumber":206,"author":{"gitId":"TLChicken"},"content":"        this.currUiCtrl.showHelpScreen();","lastModifiedDate":"2021-09-08"},{"lineNumber":207,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":208,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":209,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":210,"author":{"gitId":"TLChicken"},"content":"     * Used to get the Welcome Message in String form. Also prints the welcome message in the console.","lastModifiedDate":"2021-09-05"},{"lineNumber":211,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":212,"author":{"gitId":"TLChicken"},"content":"     * @return the Welcome Message.","lastModifiedDate":"2021-09-05"},{"lineNumber":213,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":214,"author":{"gitId":"TLChicken"},"content":"    public String getWelcomeMessage() {","lastModifiedDate":"2021-09-05"},{"lineNumber":215,"author":{"gitId":"TLChicken"},"content":"        return this.currUiCtrl.printWelcomeMessage();","lastModifiedDate":"2021-09-05"},{"lineNumber":216,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":217,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":218,"author":{"gitId":"TLChicken"},"content":"    private void unknownCommandEntered() throws DukeExceptionBase {","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"TLChicken"},"content":"        throw new DukeExceptionBase(\"Please enter something valid!\");","lastModifiedDate":"2021-08-18"},{"lineNumber":220,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":221,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":222,"author":{"gitId":"TLChicken"},"content":"    private void addToTdl(String str, BaseTask.TaskType currTaskType) throws DukeExceptionBase {","lastModifiedDate":"2021-09-05"},{"lineNumber":223,"author":{"gitId":"TLChicken"},"content":"        assert (this.currDukeList !\u003d null) : \"Duke List not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":224,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":225,"author":{"gitId":"TLChicken"},"content":"        this.currDukeList.tdlAdd(str, currTaskType);","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":227,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":228,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":229,"author":{"gitId":"TLChicken"},"content":"    private void listOutTdl() {","lastModifiedDate":"2021-09-05"},{"lineNumber":230,"author":{"gitId":"TLChicken"},"content":"        assert (this.currDukeList !\u003d null) : \"Duke List not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":231,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":232,"author":{"gitId":"TLChicken"},"content":"        this.currDukeList.printOutWholeList();","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":234,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":235,"author":{"gitId":"TLChicken"},"content":"    private void markItemDoneInTdl(String command) throws DukeExceptionBase {","lastModifiedDate":"2021-09-05"},{"lineNumber":236,"author":{"gitId":"TLChicken"},"content":"        assert (this.currDukeList !\u003d null) : \"Duke List not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":237,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":238,"author":{"gitId":"TLChicken"},"content":"        if (command.length() \u003c 6) {","lastModifiedDate":"2021-08-18"},{"lineNumber":239,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"You need to specify a task to set as done.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":240,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":241,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":242,"author":{"gitId":"TLChicken"},"content":"        String taskNumberStr \u003d command.substring(5);","lastModifiedDate":"2021-08-18"},{"lineNumber":243,"author":{"gitId":"TLChicken"},"content":"        int taskNo \u003d -1;","lastModifiedDate":"2021-08-18"},{"lineNumber":244,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":245,"author":{"gitId":"TLChicken"},"content":"            taskNo \u003d Integer.parseInt(taskNumberStr);","lastModifiedDate":"2021-08-18"},{"lineNumber":246,"author":{"gitId":"TLChicken"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":247,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Please enter an integer.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":248,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":249,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":250,"author":{"gitId":"TLChicken"},"content":"        String dukeOutput \u003d this.currDukeList.markTaskAsDone(taskNo);","lastModifiedDate":"2021-08-25"},{"lineNumber":251,"author":{"gitId":"TLChicken"},"content":"        dukeSays(dukeOutput);","lastModifiedDate":"2021-08-18"},{"lineNumber":252,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":253,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":254,"author":{"gitId":"TLChicken"},"content":"    private void deleteTaskInTdl(String command) throws DukeExceptionBase {","lastModifiedDate":"2021-09-05"},{"lineNumber":255,"author":{"gitId":"TLChicken"},"content":"        assert (this.currDukeList !\u003d null) : \"Duke List not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":256,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":257,"author":{"gitId":"TLChicken"},"content":"        if (command.length() \u003c 8) {","lastModifiedDate":"2021-08-18"},{"lineNumber":258,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"You need to specify a task to delete.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":259,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":260,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":261,"author":{"gitId":"TLChicken"},"content":"        String taskNumberStr \u003d command.substring(7);","lastModifiedDate":"2021-08-18"},{"lineNumber":262,"author":{"gitId":"TLChicken"},"content":"        int taskNo \u003d -1;","lastModifiedDate":"2021-08-18"},{"lineNumber":263,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":264,"author":{"gitId":"TLChicken"},"content":"            taskNo \u003d Integer.parseInt(taskNumberStr);","lastModifiedDate":"2021-08-18"},{"lineNumber":265,"author":{"gitId":"TLChicken"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":266,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Please enter an integer.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":267,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":268,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":269,"author":{"gitId":"TLChicken"},"content":"        String dukeOutput \u003d this.currDukeList.deleteTask(taskNo);","lastModifiedDate":"2021-08-25"},{"lineNumber":270,"author":{"gitId":"TLChicken"},"content":"        dukeSays(dukeOutput);","lastModifiedDate":"2021-08-18"},{"lineNumber":271,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":272,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":273,"author":{"gitId":"TLChicken"},"content":"    private void findTaskInTdl(String command) throws DukeExceptionBase {","lastModifiedDate":"2021-09-05"},{"lineNumber":274,"author":{"gitId":"TLChicken"},"content":"        assert (this.currDukeList !\u003d null) : \"Duke List not initialised!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":275,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":276,"author":{"gitId":"TLChicken"},"content":"        if (command.length() \u003c 6) {","lastModifiedDate":"2021-08-29"},{"lineNumber":277,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"You need to specify a keyword to find.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":278,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":279,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":280,"author":{"gitId":"TLChicken"},"content":"        String keywordStr \u003d command.substring(5);","lastModifiedDate":"2021-08-29"},{"lineNumber":281,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":282,"author":{"gitId":"TLChicken"},"content":"        String dukeOutput \u003d this.currDukeList.findMatchingTaskInList(keywordStr);","lastModifiedDate":"2021-08-29"},{"lineNumber":283,"author":{"gitId":"TLChicken"},"content":"        dukeSays(dukeOutput);","lastModifiedDate":"2021-08-29"},{"lineNumber":284,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":285,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":286,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"TLChicken":284,"-":3}},{"path":"src/main/java/duke/DukeCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":" * This class encapsulates the command parser for Duke which process the commands","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":" * inputted into Duke by users.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"public class DukeCommandParser {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"     * This enum identifies the different possible command types.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"        ADD_TASK,","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"        BYE,","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"        LIST,","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"        MARK_TASK_DONE,","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"        DEL_TASK,","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"        UNKNOWN,","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"        FIND,","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"        HELP","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"     * Starts up a new command parser for use with Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"    public DukeCommandParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"     * Parses the given command input and return the command type.","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"     * @param cmd The command input to parse.","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"     * @return the type of the command.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"    public CommandType parse(String cmd) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"        BaseTask.TaskType currTaskType \u003d BaseTask.checkTaskType(cmd);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"        if (cmd.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"            return CommandType.BYE;","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"        } else if (cmd.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"            return CommandType.LIST;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"        } else if (cmd.length() \u003e\u003d 4 \u0026\u0026 cmd.substring(0, 4).equals(\"done\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"            return CommandType.MARK_TASK_DONE;","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"        } else if (cmd.length() \u003e\u003d 6 \u0026\u0026 cmd.substring(0, 6).equals(\"delete\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"            return CommandType.DEL_TASK;","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"        } else if (cmd.startsWith(\"find\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"            return CommandType.FIND;","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"        } else if (cmd.equals(\"help\") || cmd.startsWith(\"help \")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"            return CommandType.HELP;","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"        } else if (currTaskType !\u003d BaseTask.TaskType.NONE) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"            return CommandType.ADD_TASK;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"            return CommandType.UNKNOWN;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"TLChicken":60}},{"path":"src/main/java/duke/DukeExceptionBase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":" * This class encapsulates the exceptions that Duke throws out when something goes wrong.","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"public class DukeExceptionBase extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"    private String exceptionMsg;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"     * Constructor to create a new Duke Exception.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"     * @param msg The message that Duke will print due to this exception.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"    public DukeExceptionBase(String msg) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"        this.exceptionMsg \u003d msg;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"     * Ask Duke to print out this exception\u0027s error message.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"    public void dukeSayErrorMsg() {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"        Duke.dukeSays(this.exceptionMsg);","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"     * The exception\u0027s toString method to print out the exception message.","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"     * @return the exception message for the current exception object.","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"        return exceptionMsg;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":34}},{"path":"src/main/java/duke/DukeListMgr.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":" * This class encapsulates the list element that Duke uses to store tasks.","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"public class DukeListMgr {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"    private ArrayList\u003cBaseTask\u003e toDoList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"     * Constructor to create a new list manager.","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"    public DukeListMgr() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"     * Used for adding things to the to do list.","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"     * @param str   Thing to add to the list.","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"     * @param currTaskType The type of the task to add.","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when an invalid input is entered.","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"    public void tdlAdd(String str, BaseTask.TaskType currTaskType) throws DukeExceptionBase {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"        assert (this.toDoList !\u003d null) : \"Duke internal List is missing!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"        int indexOfSlash \u003d -1;","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"        switch (currTaskType) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"        case TODO:","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d processTodoTask(str);","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"        case EVENT:","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d processEventTask(str);","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"        case DEADLINE:","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d processDeadlineTask(str);","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"        default:","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Wrong type of task input to tdlAdd.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"        toDoList.add(createdTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"        this.triggerSaveTasks();","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"        Duke.dukeSays(\"Ok, I have added this task: \\n\" + createdTask.getLineOfTaskInfo()","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"            + \"\\nCurrent total amount of tasks in list: \" + toDoList.size());","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"    private static BaseTask processDeadlineTask(String str) throws DukeExceptionBase {","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"        int indexOfSlash;","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"        indexOfSlash \u003d str.indexOf(\"/by\");","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"        if (indexOfSlash \u003d\u003d -1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Your Deadline task needs a \u0027/by\u0027 description.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"        String deadlineTaskName \u003d str.substring(9, indexOfSlash);","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"        String deadlineByWhen;","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"            deadlineByWhen \u003d str.substring(indexOfSlash + 4);","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Adding a deadline description is required.\");","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"        createdTask \u003d new DeadlineTask(deadlineTaskName, deadlineByWhen);","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"        return createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"    private static BaseTask processEventTask(String str) throws DukeExceptionBase {","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"        int indexOfSlash;","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"        indexOfSlash \u003d str.indexOf(\"/at\");","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"        if (indexOfSlash \u003d\u003d -1) {","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Your Event task needs a \u0027/at\u0027 description.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"        String eventTaskName \u003d str.substring(6, indexOfSlash);","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"        String eventAtWhere \u003d \"\";","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"            eventAtWhere \u003d str.substring(indexOfSlash + 4);","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Adding a event description is required.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"        createdTask \u003d new EventTask(eventTaskName, eventAtWhere);","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"        return createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"TLChicken"},"content":"    private static BaseTask processTodoTask(String str) throws DukeExceptionBase {","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"TLChicken"},"content":"        String todoContents \u003d \"\";","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"TLChicken"},"content":"            todoContents \u003d str.substring(5);","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"TLChicken"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"The description of your todo cannot be empty.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"TLChicken"},"content":"        createdTask \u003d new ToDosTask(todoContents);","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"TLChicken"},"content":"        return createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":107,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"TLChicken"},"content":"     * Used to mark the corresponding task as done.","lastModifiedDate":"2021-08-18"},{"lineNumber":112,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"TLChicken"},"content":"     * @param taskNo The task number in the list.","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"TLChicken"},"content":"     * @return Duke\u0027s output from this command","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when an invalid task is specified or if task is already done.","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"TLChicken"},"content":"    public String markTaskAsDone(int taskNo) throws DukeExceptionBase {","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"TLChicken"},"content":"        assert (this.toDoList !\u003d null) : \"Duke internal List is missing!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":119,"author":{"gitId":"TLChicken"},"content":"        //Task list starts from 1 instead of 0 so input in command is 1 more than","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"TLChicken"},"content":"        //the task\u0027s index in the list","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"TLChicken"},"content":"        int taskIndex \u003d taskNo - 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":123,"author":{"gitId":"TLChicken"},"content":"        if (!(taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c toDoList.size())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":124,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Invalid Task Specified\");","lastModifiedDate":"2021-09-08"},{"lineNumber":125,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":126,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":127,"author":{"gitId":"TLChicken"},"content":"        BaseTask currTask \u003d toDoList.get(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"TLChicken"},"content":"        currTask.setAsDone();","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"TLChicken"},"content":"        this.triggerSaveTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"TLChicken"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + currTask.getLineOfTaskInfo();","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"TLChicken"},"content":"     * Used to delete tasks from the list.","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"TLChicken"},"content":"     * @param taskNo The task number to delete.","lastModifiedDate":"2021-08-18"},{"lineNumber":138,"author":{"gitId":"TLChicken"},"content":"     * @return Duke\u0027s output from this command","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when an invalid task is specified.","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"TLChicken"},"content":"    public String deleteTask(int taskNo) throws DukeExceptionBase {","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"TLChicken"},"content":"        assert (this.toDoList !\u003d null) : \"Duke internal List is missing!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":143,"author":{"gitId":"TLChicken"},"content":"        int taskIndex \u003d taskNo - 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"TLChicken"},"content":"        if (!(taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c toDoList.size())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Invalid Task Specified\");","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":149,"author":{"gitId":"TLChicken"},"content":"        BaseTask currTask \u003d toDoList.get(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"TLChicken"},"content":"        toDoList.remove(taskIndex);","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"TLChicken"},"content":"        this.triggerSaveTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"TLChicken"},"content":"        return \"Ok, this task has been removed:\\n\" + currTask.getLineOfTaskInfo()","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"TLChicken"},"content":"                + \"\\nCurrent total amount of tasks in list: \" + toDoList.size();","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":158,"author":{"gitId":"TLChicken"},"content":"     * Finds matching tasks in the list using a keyword.","lastModifiedDate":"2021-08-29"},{"lineNumber":159,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":160,"author":{"gitId":"TLChicken"},"content":"     * @param keyword the word to search for.","lastModifiedDate":"2021-08-29"},{"lineNumber":161,"author":{"gitId":"TLChicken"},"content":"     * @return the output of the search.","lastModifiedDate":"2021-08-29"},{"lineNumber":162,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when there is invalid input.","lastModifiedDate":"2021-08-29"},{"lineNumber":163,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":164,"author":{"gitId":"TLChicken"},"content":"    public String findMatchingTaskInList(String keyword) throws DukeExceptionBase {","lastModifiedDate":"2021-08-29"},{"lineNumber":165,"author":{"gitId":"TLChicken"},"content":"        assert (this.toDoList !\u003d null) : \"Duke internal List is missing!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"TLChicken"},"content":"        if (keyword.contains(\" \")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":167,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"find only works with keywords. (A keyword cannot contain spaces)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":168,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":170,"author":{"gitId":"TLChicken"},"content":"        ArrayList\u003cBaseTask\u003e foundTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":171,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":172,"author":{"gitId":"TLChicken"},"content":"        for (BaseTask currTask : this.toDoList) {","lastModifiedDate":"2021-08-29"},{"lineNumber":173,"author":{"gitId":"TLChicken"},"content":"            boolean isMatching \u003d currTask.searchForKeywords(keyword);","lastModifiedDate":"2021-08-29"},{"lineNumber":174,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":175,"author":{"gitId":"TLChicken"},"content":"            if (isMatching) {","lastModifiedDate":"2021-08-29"},{"lineNumber":176,"author":{"gitId":"TLChicken"},"content":"                foundTaskList.add(currTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":177,"author":{"gitId":"TLChicken"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":178,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":179,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":180,"author":{"gitId":"TLChicken"},"content":"        if (foundTaskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-29"},{"lineNumber":181,"author":{"gitId":"TLChicken"},"content":"            return \"There were no matching tasks.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":182,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":183,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":184,"author":{"gitId":"TLChicken"},"content":"        // List out the matching tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":185,"author":{"gitId":"TLChicken"},"content":"        String printThis \u003d this.getListFromTaskList(foundTaskList);","lastModifiedDate":"2021-08-29"},{"lineNumber":186,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":187,"author":{"gitId":"TLChicken"},"content":"        return \"Here are the matching tasks found: \\n\" + printThis;","lastModifiedDate":"2021-08-29"},{"lineNumber":188,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":189,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":190,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":191,"author":{"gitId":"TLChicken"},"content":"     * Used to print out contents of the list nicely.","lastModifiedDate":"2021-08-18"},{"lineNumber":192,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":193,"author":{"gitId":"TLChicken"},"content":"    public void printOutWholeList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"TLChicken"},"content":"        String printThis \u003d this.getListFromTaskList(this.toDoList);","lastModifiedDate":"2021-08-29"},{"lineNumber":195,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":196,"author":{"gitId":"TLChicken"},"content":"        Duke.dukeSays(\"Here are your current tasks: \\n\" + printThis);","lastModifiedDate":"2021-08-29"},{"lineNumber":197,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":198,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":199,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":200,"author":{"gitId":"TLChicken"},"content":"     * Converts the input list of tasks into a String listing out all the tasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":201,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":202,"author":{"gitId":"TLChicken"},"content":"     * @param taskList the task list to get the list from.","lastModifiedDate":"2021-08-29"},{"lineNumber":203,"author":{"gitId":"TLChicken"},"content":"     * @return the String containing the converted task list.","lastModifiedDate":"2021-08-29"},{"lineNumber":204,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":205,"author":{"gitId":"TLChicken"},"content":"    private String getListFromTaskList(ArrayList\u003cBaseTask\u003e taskList) {","lastModifiedDate":"2021-08-29"},{"lineNumber":206,"author":{"gitId":"TLChicken"},"content":"        String printThis \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":207,"author":{"gitId":"TLChicken"},"content":"        String nextLine \u003d \"\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":208,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":209,"author":{"gitId":"TLChicken"},"content":"        int serialNo \u003d 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":210,"author":{"gitId":"TLChicken"},"content":"        for (BaseTask ele : taskList) {","lastModifiedDate":"2021-08-29"},{"lineNumber":211,"author":{"gitId":"TLChicken"},"content":"            String endOfCurrLine \u003d nextLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":212,"author":{"gitId":"TLChicken"},"content":"            if (serialNo \u003d\u003d taskList.size()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":213,"author":{"gitId":"TLChicken"},"content":"                endOfCurrLine \u003d \"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":214,"author":{"gitId":"TLChicken"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":215,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":216,"author":{"gitId":"TLChicken"},"content":"            String currLine \u003d serialNo + \". \" + ele.getLineOfTaskInfo() + endOfCurrLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":217,"author":{"gitId":"TLChicken"},"content":"            printThis \u003d printThis + currLine;","lastModifiedDate":"2021-08-18"},{"lineNumber":218,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":219,"author":{"gitId":"TLChicken"},"content":"            serialNo++;","lastModifiedDate":"2021-08-18"},{"lineNumber":220,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":221,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":222,"author":{"gitId":"TLChicken"},"content":"        return printThis;","lastModifiedDate":"2021-08-29"},{"lineNumber":223,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":224,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":225,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"TLChicken"},"content":"     * Triggers the saving of the current state of the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":227,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":228,"author":{"gitId":"TLChicken"},"content":"    public void triggerSaveTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":229,"author":{"gitId":"TLChicken"},"content":"        Duke currDuke \u003d Duke.getCurrDuke();","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"TLChicken"},"content":"        currDuke.getCurrStorageMgr().saveCurrentTasks(this.toDoList);","lastModifiedDate":"2021-08-25"},{"lineNumber":231,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":233,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"TLChicken"},"content":"     * Loads a new ArrayList of tasks for use with Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":235,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":236,"author":{"gitId":"TLChicken"},"content":"     * @param loadedTasks the ArrayList of BaseTasks to load.","lastModifiedDate":"2021-08-25"},{"lineNumber":237,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"TLChicken"},"content":"    public void loadTaskList(ArrayList\u003cBaseTask\u003e loadedTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"TLChicken"},"content":"        this.toDoList \u003d loadedTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":240,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":241,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":242,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":242}},{"path":"src/main/java/duke/DukeStorageManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"import java.io.File;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"import javax.xml.parsers.DocumentBuilder;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"import javax.xml.parsers.DocumentBuilderFactory;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"import javax.xml.parsers.ParserConfigurationException;","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.OutputKeys;","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.Transformer;","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.TransformerConfigurationException;","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.TransformerException;","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.TransformerFactory;","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.dom.DOMSource;","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"import javax.xml.transform.stream.StreamResult;","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"import org.w3c.dom.Document;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"import org.w3c.dom.Element;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"import org.w3c.dom.Node;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"import org.w3c.dom.NodeList;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"import org.xml.sax.SAXException;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":" * This class encapsulates the local storage functions of Duke.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"public class DukeStorageManager {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"    /** The local storage file. */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"    private File saveFile \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"    /** The Document (XML) file after the saveFile is loaded */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"    private Document xmlSaveFileDoc \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"    /** ArrayList to contain loaded tasks before sending over to ListManager */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"    private ArrayList\u003cBaseTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"     * Loads storage file from the provided path.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"     * If failed then calls the method to create a new blank file instead.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"     * @param savePath the path to the save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase when there are errors while loading the save file.","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"    public DukeStorageManager(Path savePath) throws DukeExceptionBase {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"            this.saveFile \u003d savePath.toFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"The save file: \" + this.saveFile);","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"            if (!this.saveFile.exists()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"                createBlankSaveFile();","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"                this.xmlSaveFileDoc \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"                return;","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"            DocumentBuilderFactory documentBuilderFactory \u003d DocumentBuilderFactory.newInstance();","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"            DocumentBuilder documentBuilder \u003d documentBuilderFactory.newDocumentBuilder();","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"            this.xmlSaveFileDoc \u003d documentBuilder.parse(this.saveFile);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"        } catch (ParserConfigurationException parserE) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"            this.failedToLoadSaveFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"        } catch (SAXException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"            this.failedToLoadSaveFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"            this.failedToLoadSaveFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"        if (this.xmlSaveFileDoc \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"            throw new DukeExceptionBase(\"Failed to load saved XML File.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"     * Constructor to create a new blank file for use as storage instead of loading.","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"    public DukeStorageManager() {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"        this.createBlankSaveFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"     * Runs when an exception is thrown while trying to load or parse the XML Save File.","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"     * @throws DukeExceptionBase as the Save File cannot be loaded.","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"    private void failedToLoadSaveFile() throws DukeExceptionBase {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"        throw new DukeExceptionBase(\"Failed to load saved XML File.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"     * Creates a new blank save file if there is no save file already present in local storage.","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"    private void createBlankSaveFile() {","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"        this.saveFile \u003d new File(\"dukeDocs\" + File.separator + \"listSave1.xml\");","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"TLChicken"},"content":"        if (this.saveFile.exists()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"Unusable save file already exists at save file location.\");","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"TLChicken"},"content":"            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"TLChicken"},"content":"                // Create parent directory if it does not exist yet.","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"TLChicken"},"content":"                File dukeDocsFolder \u003d this.saveFile.getParentFile();","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"TLChicken"},"content":"                if (!dukeDocsFolder.exists()) {","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"TLChicken"},"content":"                    dukeDocsFolder.mkdirs();","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"TLChicken"},"content":"                }","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"TLChicken"},"content":"                this.saveFile.createNewFile();","lastModifiedDate":"2021-08-28"},{"lineNumber":105,"author":{"gitId":"TLChicken"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"TLChicken"},"content":"                System.out.println(\"UNABLE TO CREATE NEW SAVE FILE!! (IOException)\");","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"TLChicken"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"TLChicken"},"content":"     * Run this to reload the save data from the XML doc obj into Duke\u0027s","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"TLChicken"},"content":"     * List Manager.","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"TLChicken"},"content":"    public void reloadSaveFromXmlDoc() {","lastModifiedDate":"2021-09-05"},{"lineNumber":116,"author":{"gitId":"TLChicken"},"content":"        if (this.xmlSaveFileDoc \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"TLChicken"},"content":"            Duke.dukeLaterSay(\"No save file to load from.\");","lastModifiedDate":"2021-09-05"},{"lineNumber":118,"author":{"gitId":"TLChicken"},"content":"            return;","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"TLChicken"},"content":"        Element xmlRoot \u003d xmlSaveFileDoc.getDocumentElement();","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"TLChicken"},"content":"        NodeList taskList \u003d xmlRoot.getElementsByTagName(\"taskList\");","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"TLChicken"},"content":"        // There should be only 1 taskList node","lastModifiedDate":"2021-08-28"},{"lineNumber":125,"author":{"gitId":"TLChicken"},"content":"        if (taskList.getLength() \u003e 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"TLChicken"},"content":"            Duke.dukeLaterSay(\"Loaded XML file contains more than 1 task list.\"","lastModifiedDate":"2021-09-08"},{"lineNumber":127,"author":{"gitId":"TLChicken"},"content":"                    + \" Only first one will be loaded.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":128,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"TLChicken"},"content":"        Node firstTaskList \u003d taskList.item(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"TLChicken"},"content":"        NodeList taskAssetList \u003d firstTaskList.getChildNodes();","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"TLChicken"},"content":"        for (int id \u003d 0; id \u003c taskAssetList.getLength(); id++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"TLChicken"},"content":"            Node currTaskAsset \u003d taskAssetList.item(id);","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"TLChicken"},"content":"            this.processTaskNode(currTaskAsset);","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"TLChicken"},"content":"        // Send the loaded task list into the list manager.","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"TLChicken"},"content":"        Duke.getCurrDuke().getCurrListMgr().loadTaskList(this.loadedTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"TLChicken"},"content":"     * Processes individual Task Node from XML Save File.","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"TLChicken"},"content":"     * @param currTaskAsset the relevant Task Node Object.","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"TLChicken"},"content":"    private void processTaskNode(Node currTaskAsset) {","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"TLChicken"},"content":"        if (currTaskAsset.getNodeName().equals(\"taskAsset\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"TLChicken"},"content":"            // Confirms that this taskAsset has contents","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"TLChicken"},"content":"            if (currTaskAsset.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"TLChicken"},"content":"                loadTaskAssetFromNode((Element) currTaskAsset);","lastModifiedDate":"2021-09-08"},{"lineNumber":153,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"TLChicken"},"content":"            } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":155,"author":{"gitId":"TLChicken"},"content":"                System.out.println(\"Current loaded Task Asset is empty.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":156,"author":{"gitId":"TLChicken"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":157,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":158,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"Non-TaskAsset found in taskList: \" + currTaskAsset.getNodeName());","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":160,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"TLChicken"},"content":"    private void loadTaskAssetFromNode(Element currTaskAsset) {","lastModifiedDate":"2021-09-08"},{"lineNumber":164,"author":{"gitId":"TLChicken"},"content":"        // Convert to DOM Element so that we can get elements by Tag Name","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"TLChicken"},"content":"        Element currTaskAssetElement \u003d currTaskAsset;","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"TLChicken"},"content":"        // Gets various contents common to all task types","lastModifiedDate":"2021-08-28"},{"lineNumber":168,"author":{"gitId":"TLChicken"},"content":"        Node taskTypeNode \u003d getFirstNodeByTagName(currTaskAssetElement, \"taskType\");","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"TLChicken"},"content":"        Node taskDataNode \u003d getFirstNodeByTagName(currTaskAssetElement, \"taskData\");","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"TLChicken"},"content":"        Node taskCompletedNode \u003d getFirstNodeByTagName(currTaskAssetElement, \"taskCompleted\");","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"TLChicken"},"content":"        boolean isCurrTaskCompleted \u003d taskCompletedNode.getTextContent().equals(\"true\");","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"TLChicken"},"content":"        processCurrLoadedTaskNode(currTaskAssetElement, taskTypeNode, taskDataNode, isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":175,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":176,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":177,"author":{"gitId":"TLChicken"},"content":"    private void processCurrLoadedTaskNode(Element currTaskAssetElement, Node taskTypeNode, Node taskDataNode,","lastModifiedDate":"2021-09-08"},{"lineNumber":178,"author":{"gitId":"TLChicken"},"content":"                                           boolean isCurrTaskCompleted) {","lastModifiedDate":"2021-09-08"},{"lineNumber":179,"author":{"gitId":"TLChicken"},"content":"        // Initialise Variables for Switch Statement","lastModifiedDate":"2021-09-08"},{"lineNumber":180,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"TLChicken"},"content":"        // Get extra info for task if needed and create task","lastModifiedDate":"2021-08-28"},{"lineNumber":183,"author":{"gitId":"TLChicken"},"content":"        BaseTask.TaskType currTaskType \u003d BaseTask.convertTaskLetterToEnum(taskTypeNode.getTextContent());","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"TLChicken"},"content":"        switch (currTaskType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":185,"author":{"gitId":"TLChicken"},"content":"        case TODO:","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d processCurrLoadedTodoTaskNode(taskDataNode, isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":187,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"TLChicken"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d processCurrLoadedDeadlineTaskNode(currTaskAssetElement, taskDataNode, isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":190,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"TLChicken"},"content":"        case EVENT:","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d processCurrLoadedEventTaskNode(currTaskAssetElement, taskDataNode, isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":193,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"TLChicken"},"content":"        case NONE:","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"TLChicken"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-08"},{"lineNumber":196,"author":{"gitId":"TLChicken"},"content":"        default:","lastModifiedDate":"2021-09-05"},{"lineNumber":197,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"Unknown Task Type Loaded: \"","lastModifiedDate":"2021-09-05"},{"lineNumber":198,"author":{"gitId":"TLChicken"},"content":"                    + currTaskType + \" with data: \" + taskDataNode.getTextContent());","lastModifiedDate":"2021-09-05"},{"lineNumber":199,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":200,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-09-05"},{"lineNumber":201,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":203,"author":{"gitId":"TLChicken"},"content":"        // In case of error while creating task - Don\u0027t add it to the list","lastModifiedDate":"2021-08-28"},{"lineNumber":204,"author":{"gitId":"TLChicken"},"content":"        if (createdTask !\u003d null) {","lastModifiedDate":"2021-08-28"},{"lineNumber":205,"author":{"gitId":"TLChicken"},"content":"            this.loadedTasks.add(createdTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":207,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":208,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"TLChicken"},"content":"    private BaseTask processCurrLoadedEventTaskNode(Element currTaskAssetElement, Node taskDataNode,","lastModifiedDate":"2021-09-08"},{"lineNumber":210,"author":{"gitId":"TLChicken"},"content":"                                                    boolean isCurrTaskCompleted) {","lastModifiedDate":"2021-09-08"},{"lineNumber":211,"author":{"gitId":"TLChicken"},"content":"        Node taskExtraInfoNode;","lastModifiedDate":"2021-09-08"},{"lineNumber":212,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":213,"author":{"gitId":"TLChicken"},"content":"        taskExtraInfoNode \u003d getFirstNodeByTagName(currTaskAssetElement, \"taskExtraInfo\");","lastModifiedDate":"2021-09-08"},{"lineNumber":214,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":215,"author":{"gitId":"TLChicken"},"content":"        createdTask \u003d new EventTask(taskDataNode.getTextContent(),","lastModifiedDate":"2021-09-08"},{"lineNumber":216,"author":{"gitId":"TLChicken"},"content":"                taskExtraInfoNode.getTextContent(), isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":217,"author":{"gitId":"TLChicken"},"content":"        return createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":218,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":220,"author":{"gitId":"TLChicken"},"content":"    private BaseTask processCurrLoadedTodoTaskNode(Node taskDataNode, boolean isCurrTaskCompleted) {","lastModifiedDate":"2021-09-08"},{"lineNumber":221,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":222,"author":{"gitId":"TLChicken"},"content":"        createdTask \u003d new ToDosTask(taskDataNode.getTextContent(), isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":223,"author":{"gitId":"TLChicken"},"content":"        return createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":224,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":225,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"TLChicken"},"content":"    private BaseTask processCurrLoadedDeadlineTaskNode(Element currTaskAssetElement, Node taskDataNode,","lastModifiedDate":"2021-09-08"},{"lineNumber":227,"author":{"gitId":"TLChicken"},"content":"                                                       boolean isCurrTaskCompleted) {","lastModifiedDate":"2021-09-08"},{"lineNumber":228,"author":{"gitId":"TLChicken"},"content":"        Node taskExtraInfoNode;","lastModifiedDate":"2021-09-08"},{"lineNumber":229,"author":{"gitId":"TLChicken"},"content":"        BaseTask createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":230,"author":{"gitId":"TLChicken"},"content":"        taskExtraInfoNode \u003d getFirstNodeByTagName(currTaskAssetElement, \"taskExtraInfo\");","lastModifiedDate":"2021-09-08"},{"lineNumber":231,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":232,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":233,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d new DeadlineTask(taskDataNode.getTextContent(),","lastModifiedDate":"2021-09-08"},{"lineNumber":234,"author":{"gitId":"TLChicken"},"content":"                    taskExtraInfoNode.getTextContent(), isCurrTaskCompleted);","lastModifiedDate":"2021-09-08"},{"lineNumber":235,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":236,"author":{"gitId":"TLChicken"},"content":"            // If date format of this Deadline Task is wrong, then don\u0027t load it.","lastModifiedDate":"2021-09-08"},{"lineNumber":237,"author":{"gitId":"TLChicken"},"content":"            createdTask \u003d null;","lastModifiedDate":"2021-09-08"},{"lineNumber":238,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":239,"author":{"gitId":"TLChicken"},"content":"        return createdTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":240,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":241,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":242,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":243,"author":{"gitId":"TLChicken"},"content":"     * Gets the first node in the XML heirarchy with the given tag name.","lastModifiedDate":"2021-08-25"},{"lineNumber":244,"author":{"gitId":"TLChicken"},"content":"     * @param parentEle the Parent Element Node to search.","lastModifiedDate":"2021-08-25"},{"lineNumber":245,"author":{"gitId":"TLChicken"},"content":"     * @param tagName the tag to search for.","lastModifiedDate":"2021-08-25"},{"lineNumber":246,"author":{"gitId":"TLChicken"},"content":"     * @return the first Node found in the Parent Element Node with the corresponding tagName.","lastModifiedDate":"2021-08-25"},{"lineNumber":247,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":248,"author":{"gitId":"TLChicken"},"content":"    private Node getFirstNodeByTagName(Element parentEle, String tagName) {","lastModifiedDate":"2021-08-25"},{"lineNumber":249,"author":{"gitId":"TLChicken"},"content":"        NodeList tagNodeList \u003d parentEle.getElementsByTagName(tagName);","lastModifiedDate":"2021-08-25"},{"lineNumber":250,"author":{"gitId":"TLChicken"},"content":"        if (tagNodeList.getLength() \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":251,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"Node with tag: \" + tagName + \" not found.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":252,"author":{"gitId":"TLChicken"},"content":"            return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":253,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":254,"author":{"gitId":"TLChicken"},"content":"            return tagNodeList.item(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":255,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":256,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":257,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":258,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":259,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":260,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":261,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":262,"author":{"gitId":"TLChicken"},"content":"     * Triggers saving of the current state of the task list as a XML file.","lastModifiedDate":"2021-08-25"},{"lineNumber":263,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":264,"author":{"gitId":"TLChicken"},"content":"     * @param listOfTasks The ArrayList containing the tasks to be saved.","lastModifiedDate":"2021-08-25"},{"lineNumber":265,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":266,"author":{"gitId":"TLChicken"},"content":"    public void saveCurrentTasks(ArrayList\u003cBaseTask\u003e listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":267,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":268,"author":{"gitId":"TLChicken"},"content":"            DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();","lastModifiedDate":"2021-08-25"},{"lineNumber":269,"author":{"gitId":"TLChicken"},"content":"            DocumentBuilder documentBuilder \u003d dbf.newDocumentBuilder();","lastModifiedDate":"2021-08-25"},{"lineNumber":270,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":271,"author":{"gitId":"TLChicken"},"content":"            // Create new XML File","lastModifiedDate":"2021-08-25"},{"lineNumber":272,"author":{"gitId":"TLChicken"},"content":"            Document newXmlDoc \u003d documentBuilder.newDocument();","lastModifiedDate":"2021-08-25"},{"lineNumber":273,"author":{"gitId":"TLChicken"},"content":"            // Overwrite the current XML Save file in the Storage Manager","lastModifiedDate":"2021-08-25"},{"lineNumber":274,"author":{"gitId":"TLChicken"},"content":"            this.xmlSaveFileDoc \u003d newXmlDoc;","lastModifiedDate":"2021-08-25"},{"lineNumber":275,"author":{"gitId":"TLChicken"},"content":"            // Create saveFile root tag","lastModifiedDate":"2021-08-25"},{"lineNumber":276,"author":{"gitId":"TLChicken"},"content":"            Element saveFileRoot \u003d newXmlDoc.createElement(\"saveFile\");","lastModifiedDate":"2021-08-25"},{"lineNumber":277,"author":{"gitId":"TLChicken"},"content":"            newXmlDoc.appendChild(saveFileRoot);","lastModifiedDate":"2021-08-25"},{"lineNumber":278,"author":{"gitId":"TLChicken"},"content":"            // Create taskList container","lastModifiedDate":"2021-08-25"},{"lineNumber":279,"author":{"gitId":"TLChicken"},"content":"            Element taskListElement \u003d newXmlDoc.createElement(\"taskList\");","lastModifiedDate":"2021-08-25"},{"lineNumber":280,"author":{"gitId":"TLChicken"},"content":"            saveFileRoot.appendChild(taskListElement);","lastModifiedDate":"2021-08-25"},{"lineNumber":281,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":282,"author":{"gitId":"TLChicken"},"content":"            int counter \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":283,"author":{"gitId":"TLChicken"},"content":"            for (BaseTask currTask : listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":284,"author":{"gitId":"TLChicken"},"content":"                Element convertedTaskAsset \u003d this.createTaskAssetElement(currTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":285,"author":{"gitId":"TLChicken"},"content":"                convertedTaskAsset.setAttribute(\"id\", Integer.toString(counter));","lastModifiedDate":"2021-08-25"},{"lineNumber":286,"author":{"gitId":"TLChicken"},"content":"                taskListElement.appendChild(convertedTaskAsset);","lastModifiedDate":"2021-08-25"},{"lineNumber":287,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":288,"author":{"gitId":"TLChicken"},"content":"                counter++;","lastModifiedDate":"2021-08-25"},{"lineNumber":289,"author":{"gitId":"TLChicken"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":290,"author":{"gitId":"TLChicken"},"content":"            // Now write the file to local storage","lastModifiedDate":"2021-08-25"},{"lineNumber":291,"author":{"gitId":"TLChicken"},"content":"            this.writeCurrXmlDocToDisk();","lastModifiedDate":"2021-09-05"},{"lineNumber":292,"author":{"gitId":"TLChicken"},"content":"        } catch (ParserConfigurationException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":293,"author":{"gitId":"TLChicken"},"content":"            Duke.dukeLaterSay(\"Document builder cannot be created. (List not saved)\");","lastModifiedDate":"2021-08-25"},{"lineNumber":294,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":295,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":296,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":297,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":298,"author":{"gitId":"TLChicken"},"content":"     * Converts a given Task into a format storable in the XML save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":299,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":300,"author":{"gitId":"TLChicken"},"content":"     * @param currTask the respective task in question.","lastModifiedDate":"2021-08-25"},{"lineNumber":301,"author":{"gitId":"TLChicken"},"content":"     * @return the task converted into an XML Element.","lastModifiedDate":"2021-08-25"},{"lineNumber":302,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":303,"author":{"gitId":"TLChicken"},"content":"    private Element createTaskAssetElement(BaseTask currTask) {","lastModifiedDate":"2021-08-25"},{"lineNumber":304,"author":{"gitId":"TLChicken"},"content":"        BaseTask.TaskType currTaskType \u003d currTask.getTaskType();","lastModifiedDate":"2021-08-25"},{"lineNumber":305,"author":{"gitId":"TLChicken"},"content":"        Element createdTaskElement;","lastModifiedDate":"2021-08-25"},{"lineNumber":306,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":307,"author":{"gitId":"TLChicken"},"content":"        String taskTypeStr \u003d currTask.getTaskTypeStringHeader().substring(1, 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":308,"author":{"gitId":"TLChicken"},"content":"        String taskName \u003d currTask.getTaskName();","lastModifiedDate":"2021-08-25"},{"lineNumber":309,"author":{"gitId":"TLChicken"},"content":"        boolean isTaskDone \u003d currTask.isTaskDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":310,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":311,"author":{"gitId":"TLChicken"},"content":"        // Create General Task Element","lastModifiedDate":"2021-08-25"},{"lineNumber":312,"author":{"gitId":"TLChicken"},"content":"        createdTaskElement \u003d this.xmlSaveFileDoc.createElement(\"taskAsset\");","lastModifiedDate":"2021-08-25"},{"lineNumber":313,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":314,"author":{"gitId":"TLChicken"},"content":"        // Create General Task Data Elements","lastModifiedDate":"2021-08-25"},{"lineNumber":315,"author":{"gitId":"TLChicken"},"content":"        Element taskTypeElement \u003d this.xmlSaveFileDoc.createElement(\"taskType\");","lastModifiedDate":"2021-08-25"},{"lineNumber":316,"author":{"gitId":"TLChicken"},"content":"        Element taskDataElement \u003d this.xmlSaveFileDoc.createElement(\"taskData\");","lastModifiedDate":"2021-08-25"},{"lineNumber":317,"author":{"gitId":"TLChicken"},"content":"        Element taskCompletedElement \u003d this.xmlSaveFileDoc.createElement(\"taskCompleted\");","lastModifiedDate":"2021-08-25"},{"lineNumber":318,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":319,"author":{"gitId":"TLChicken"},"content":"        taskTypeElement.setTextContent(taskTypeStr);","lastModifiedDate":"2021-08-25"},{"lineNumber":320,"author":{"gitId":"TLChicken"},"content":"        taskDataElement.setTextContent(taskName);","lastModifiedDate":"2021-08-25"},{"lineNumber":321,"author":{"gitId":"TLChicken"},"content":"        taskCompletedElement.setTextContent(Boolean.toString(isTaskDone));","lastModifiedDate":"2021-08-25"},{"lineNumber":322,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":323,"author":{"gitId":"TLChicken"},"content":"        createdTaskElement.appendChild(taskTypeElement);","lastModifiedDate":"2021-08-25"},{"lineNumber":324,"author":{"gitId":"TLChicken"},"content":"        createdTaskElement.appendChild(taskDataElement);","lastModifiedDate":"2021-08-25"},{"lineNumber":325,"author":{"gitId":"TLChicken"},"content":"        createdTaskElement.appendChild(taskCompletedElement);","lastModifiedDate":"2021-08-25"},{"lineNumber":326,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":327,"author":{"gitId":"TLChicken"},"content":"        createdTaskElement \u003d createTaskXmlElement(currTask, currTaskType, createdTaskElement);","lastModifiedDate":"2021-09-08"},{"lineNumber":328,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":329,"author":{"gitId":"TLChicken"},"content":"        return createdTaskElement;","lastModifiedDate":"2021-09-08"},{"lineNumber":330,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":331,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":332,"author":{"gitId":"TLChicken"},"content":"    private Element createTaskXmlElement(BaseTask currTask, BaseTask.TaskType currTaskType,","lastModifiedDate":"2021-09-08"},{"lineNumber":333,"author":{"gitId":"TLChicken"},"content":"                                         Element createdTaskElement) {","lastModifiedDate":"2021-09-08"},{"lineNumber":334,"author":{"gitId":"TLChicken"},"content":"        switch (currTaskType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":335,"author":{"gitId":"TLChicken"},"content":"        case TODO:","lastModifiedDate":"2021-08-25"},{"lineNumber":336,"author":{"gitId":"TLChicken"},"content":"            // Do nothing extra","lastModifiedDate":"2021-08-25"},{"lineNumber":337,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":338,"author":{"gitId":"TLChicken"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-25"},{"lineNumber":339,"author":{"gitId":"TLChicken"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-08"},{"lineNumber":340,"author":{"gitId":"TLChicken"},"content":"        case EVENT:","lastModifiedDate":"2021-08-25"},{"lineNumber":341,"author":{"gitId":"TLChicken"},"content":"            // Extra Task Data Processing","lastModifiedDate":"2021-08-25"},{"lineNumber":342,"author":{"gitId":"TLChicken"},"content":"            Element taskExtraInfoElement \u003d this.xmlSaveFileDoc.createElement(\"taskExtraInfo\");","lastModifiedDate":"2021-08-25"},{"lineNumber":343,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":344,"author":{"gitId":"TLChicken"},"content":"            taskExtraInfoElement.setTextContent(currTask.getTaskExtraInfo());","lastModifiedDate":"2021-08-25"},{"lineNumber":345,"author":{"gitId":"TLChicken"},"content":"            createdTaskElement.appendChild(taskExtraInfoElement);","lastModifiedDate":"2021-08-25"},{"lineNumber":346,"author":{"gitId":"TLChicken"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":347,"author":{"gitId":"TLChicken"},"content":"        case NONE:","lastModifiedDate":"2021-08-25"},{"lineNumber":348,"author":{"gitId":"TLChicken"},"content":"            // Fallthrough","lastModifiedDate":"2021-09-08"},{"lineNumber":349,"author":{"gitId":"TLChicken"},"content":"        default:","lastModifiedDate":"2021-09-05"},{"lineNumber":350,"author":{"gitId":"TLChicken"},"content":"            Duke.dukeLaterSay(\"Unidentified task type expected,\"","lastModifiedDate":"2021-09-08"},{"lineNumber":351,"author":{"gitId":"TLChicken"},"content":"                    + \" cannot save this task: \" + currTask.toString());","lastModifiedDate":"2021-09-08"},{"lineNumber":352,"author":{"gitId":"TLChicken"},"content":"            createdTaskElement \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":353,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":354,"author":{"gitId":"TLChicken"},"content":"        return createdTaskElement;","lastModifiedDate":"2021-08-25"},{"lineNumber":355,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":356,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":357,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":358,"author":{"gitId":"TLChicken"},"content":"     * Starts writing the current XML file in the Document thing to Disk.","lastModifiedDate":"2021-08-25"},{"lineNumber":359,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":360,"author":{"gitId":"TLChicken"},"content":"    private void writeCurrXmlDocToDisk() {","lastModifiedDate":"2021-09-05"},{"lineNumber":361,"author":{"gitId":"TLChicken"},"content":"        if (this.xmlSaveFileDoc \u003d\u003d null) {","lastModifiedDate":"2021-08-25"},{"lineNumber":362,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"XML Document is null.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":363,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":364,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":365,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":366,"author":{"gitId":"TLChicken"},"content":"            // Use Transformer Factory to save files to local storage","lastModifiedDate":"2021-08-25"},{"lineNumber":367,"author":{"gitId":"TLChicken"},"content":"            TransformerFactory transformerFactory \u003d TransformerFactory.newInstance();","lastModifiedDate":"2021-08-25"},{"lineNumber":368,"author":{"gitId":"TLChicken"},"content":"            Transformer transformer \u003d transformerFactory.newTransformer();","lastModifiedDate":"2021-08-25"},{"lineNumber":369,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":370,"author":{"gitId":"TLChicken"},"content":"            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");","lastModifiedDate":"2021-08-25"},{"lineNumber":371,"author":{"gitId":"TLChicken"},"content":"            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");","lastModifiedDate":"2021-08-25"},{"lineNumber":372,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":373,"author":{"gitId":"TLChicken"},"content":"            DOMSource xmlToWriteSource \u003d new DOMSource(this.xmlSaveFileDoc);","lastModifiedDate":"2021-08-25"},{"lineNumber":374,"author":{"gitId":"TLChicken"},"content":"            FileWriter currFileWriter \u003d new FileWriter(this.saveFile);","lastModifiedDate":"2021-08-25"},{"lineNumber":375,"author":{"gitId":"TLChicken"},"content":"            StreamResult currStreamResult \u003d new StreamResult(currFileWriter);","lastModifiedDate":"2021-08-25"},{"lineNumber":376,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":377,"author":{"gitId":"TLChicken"},"content":"            transformer.transform(xmlToWriteSource, currStreamResult);","lastModifiedDate":"2021-08-25"},{"lineNumber":378,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":379,"author":{"gitId":"TLChicken"},"content":"        } catch (TransformerConfigurationException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":380,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"Unable to create Transformer.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":381,"author":{"gitId":"TLChicken"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":382,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"IO Exception\");","lastModifiedDate":"2021-08-25"},{"lineNumber":383,"author":{"gitId":"TLChicken"},"content":"        } catch (TransformerException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":384,"author":{"gitId":"TLChicken"},"content":"            System.out.println(\"Error while using transformer.transform\");","lastModifiedDate":"2021-08-25"},{"lineNumber":385,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":386,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":387,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":388,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"TLChicken":388}},{"path":"src/main/java/duke/DukeUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":" * This class encapsulates the interactions between Duke and the Command Line Interface.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"public class DukeUi {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"    /** Default line separator designs. */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"    private static String sepLine \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"    private static String sepLineOpen \u003d \"///\u003c\u003c\u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Duke Says: \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e\u003e\u003e\\\\\\\\\\\\\";","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"    private static String sepLineClose \u003d \"\\\\\\\\\\\\\u003c\u003c\u003c\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e\u003e\u003e///\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"    /** Buffer containing what Duke is going to say. */","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    private ArrayList\u003cString\u003e dukeUiBuffer;","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"     * Constructor for a new Duke UI Manager","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"    public DukeUi() {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"        dukeUiBuffer \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"     * Adds a string into Duke\u0027s UI buffer for printing later.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"     * @param addThis the String to add into the buffer.","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"    public void addToDukeBuffer(String addThis) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"        assert dukeUiBuffer !\u003d null : \"Duke UI Buffer is missing!!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"        dukeUiBuffer.add(addThis);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"     * Used to release what Duke wants to say from the buffer.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"     * This would print the message between 2 line separators.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"     * @return the String containing what Duke says at one go.","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"    public String dukeBufferRelease() {","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"        // GUI Output","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"        String returnThis \u003d \"\";","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"        for (String dukeLine : dukeUiBuffer) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"            returnThis \u003d returnThis + dukeLine + \"\\n\";","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"        // Text Output","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"        System.out.println(\"\");","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"        System.out.println(sepLineOpen);","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"        System.out.println(returnThis);","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"        System.out.println(sepLineClose);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"        // Clear Duke output buffer so it can accept new lines","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"        this.dukeUiBuffer.clear();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"        return returnThis;","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"     * Prints and returns the welcome message.","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"     * @return the Welcome Message.","lastModifiedDate":"2021-09-05"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"    public String printWelcomeMessage() {","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"        String returnThis;","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"        String logo \u003d \"The DUKE SEAGULL\";","lastModifiedDate":"2021-09-05"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"        returnThis \u003d \"Hello from\\n\" + logo;","lastModifiedDate":"2021-09-05"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"        returnThis \u003d returnThis + \"\\nGive me something to do!\";","lastModifiedDate":"2021-09-05"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"        System.out.println(returnThis);","lastModifiedDate":"2021-09-05"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"        System.out.println(sepLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"        return returnThis;","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"     * Add the help screen for Duke into the UI buffer.","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"    public void showHelpScreen() {","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"Welcome to Duke Help!!!\");","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"Command Summary:\");","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"Adding Tasks:\");","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"todo \u003ctaskName\u003e  \u003e\u003e Adds a todo task.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"deadline \u003ctaskName\u003e \\\\by \u003cdate\u003e \");","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"    \u003e\u003e Adds a Deadline Task.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"    Date must be in format: \u0027D/M/YY\u0027, \u0027DD/MM/YYYY\u0027 or \u0027DD Month YYYY\u0027.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"event \u003ctaskName\u003e \\\\at \u003ceventLocation\u003e.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"Task Processing:\");","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"list  \u003e\u003e Lists out current task list.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"done \u003ctaskNo\u003e  \u003e\u003e Sets indicated task to \u0027Done\u0027.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":107,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"delete \u003ctaskNo\u003e \u003e\u003e Deletes the indicated task.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":110,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"find \u003cthing\u003e \u003e\u003e Searches task list for thing.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":111,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"bye    \u003e\u003e Closes Duke :(\");","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"TLChicken"},"content":"        addToDukeBuffer(\"help OR help \u003canything\u003e  \u003e\u003e Shows this help screen.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":118,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"TLChicken":119}},{"path":"src/main/java/duke/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":" *  This class encapsulates a Task element of Event type in Duke\u0027s TDList, and features","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":" *  various methods to manipulate the Task.","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"public class EventTask extends BaseTask {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"    private String atContents;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"     * Constructor for creating a new Event Task.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"     * @param taskName the name or description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"     * @param atContents describes where the task should be completed at.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    public EventTask(String taskName, String atContents) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"        super(taskName, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"        this.atContents \u003d atContents;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"     * Used for creating a new Event Task with ability to set all attributes.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"     * @param taskName the name or description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"     * @param atContents describes where the task should be completed at.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"     * @param isCompleted whether the task is already completed.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"    public EventTask(String taskName, String atContents, boolean isCompleted) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"        super(taskName, isCompleted);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"        this.atContents \u003d atContents;","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"     * Gets the type of the Task in enum form.","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"     * @return the enum representing the type of the current task.","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"        return TaskType.EVENT;","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the letter representing the task type in square brackets.","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"     * @return a string containing [X] where X is the letter representing the task type.","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"    public String getTaskTypeStringHeader() {","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"        return \"[E]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the task\u0027s name and additional descriptions if applicable.","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"     * @return the string describing the task.","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"        return this.getTaskName() + \"(at: \" + this.atContents + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"     * Returns the extra info this task contains, which is the at where data.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"     * @return the String containing the extra info of this task if any. Returns null if there is none.","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"    public String getTaskExtraInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"        return this.atContents;","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":74}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"public class Launcher {","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"TLChicken":11}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":" * This class encapsulates the main class that starts Duke with a GUI.","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    private Duke currDuke \u003d Duke.getCurrDuke();","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"            scene.getRoot().setStyle(\"-fx-font-family: \u0027Courier New\u0027\");","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(currDuke);","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"            stage.show();","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"            Duke.dukeStarter(currDuke);","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"TLChicken":43}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Cat.png\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/ROTS.png\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"     * Initialises the GUI and shows Welcome Message.","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"                DialogBox.getDukeDialog(Duke.getCurrDuke().getWelcomeMessage(), dukeImage)","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"        );","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"     * Sets the current instance of Duke.","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"     * @param d the Duke Instance to set.","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"        } else {","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"            duke.acceptUserInput(input);","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"            String response \u003d duke.flushUiBuffer();","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-05"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"            );","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"            userInput.clear();","lastModifiedDate":"2021-09-05"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"TLChicken":71}},{"path":"src/main/java/duke/ToDosTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":" *  This class encapsulates a Task element of ToDo type in Duke\u0027s TDList, and features","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":" *  various methods to manipulate the Task.","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"public class ToDosTask extends BaseTask {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"     * Constructor for creating a new To Do Task.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"     * @param taskName the name or description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"    public ToDosTask(String taskName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"        super(taskName, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"     * Constructor for directly creating and setting all attributes of a To Do Task,","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"     * for example when loading it from a Save File.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"     * @param taskName the name or description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"     * @param isCompleted whether the task is already completed.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"    public ToDosTask(String taskName, boolean isCompleted) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"        super(taskName, isCompleted);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"     * Gets the type of the Task in enum form.","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"     * @return the enum representing the type of the current task.","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"        return TaskType.TODO;","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"     * Returns a string containing the letter representing the task type in square brackets.","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"     * @return a string containing [X] where X is the letter representing the task type.","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"    public String getTaskTypeStringHeader() {","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"        return \"[T]\";","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":54}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"  \u003c/children\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"TLChicken":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"      \u003c/content\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"  \u003c/children\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"TLChicken":19}},{"path":"src/test/java/duke/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"package duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"TLChicken"},"content":"    public void byWhenDate_enterLongDate_storesProperly() {","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"TLChicken"},"content":"        DeadlineTask dlTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"TLChicken"},"content":"            dlTask \u003d new DeadlineTask(\"Homework \", \"12 March 2020\");","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"TLChicken"},"content":"        String byWhenStr \u003d dlTask.getTaskExtraInfo();","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"TLChicken"},"content":"        assertEquals(\"12 March 2020\", byWhenStr);","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"TLChicken"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"TLChicken"},"content":"    public void byWhenDate_enterLongDate2_storesProperly() {","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"TLChicken"},"content":"        DeadlineTask dlTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"TLChicken"},"content":"            dlTask \u003d new DeadlineTask(\"Homework \", \"12 January 2020\");","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"TLChicken"},"content":"        String byWhenStr \u003d dlTask.getTaskExtraInfo();","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"TLChicken"},"content":"        assertEquals(\"12 January 2020\", byWhenStr);","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"TLChicken"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"TLChicken"},"content":"    public void byWhenDate_enterLongDateSingleDigitDate_storesProperly() {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"TLChicken"},"content":"        DeadlineTask dlTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"TLChicken"},"content":"            dlTask \u003d new DeadlineTask(\"Homework \", \"5 May 1993\");","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"TLChicken"},"content":"        String byWhenStr \u003d dlTask.getTaskExtraInfo();","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"TLChicken"},"content":"        assertEquals(\"05 May 1993\", byWhenStr);","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"TLChicken"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"TLChicken"},"content":"    public void byWhenDate_enterSlashDate1_storesProperly() {","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"TLChicken"},"content":"        DeadlineTask dlTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"TLChicken"},"content":"            dlTask \u003d new DeadlineTask(\"Homework \", \"5/5/1993\");","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"TLChicken"},"content":"        String byWhenStr \u003d dlTask.getTaskExtraInfo();","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"TLChicken"},"content":"        assertEquals(\"05 May 1993\", byWhenStr);","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"TLChicken"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"TLChicken"},"content":"    public void byWhenDate_enterSlashDate2_storesProperly() {","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"TLChicken"},"content":"        DeadlineTask dlTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"TLChicken"},"content":"            dlTask \u003d new DeadlineTask(\"Homework \", \"15/1/2019\");","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"TLChicken"},"content":"        String byWhenStr \u003d dlTask.getTaskExtraInfo();","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"TLChicken"},"content":"        assertEquals(\"15 January 2019\", byWhenStr);","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"TLChicken"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"TLChicken"},"content":"    public void testListStringHeader() {","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"TLChicken"},"content":"        DeadlineTask dlTask \u003d null;","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"TLChicken"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"TLChicken"},"content":"            dlTask \u003d new DeadlineTask(\"Homework \", \"5/1/1956\");","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"TLChicken"},"content":"        } catch (DukeExceptionBase e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"TLChicken"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"TLChicken"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"TLChicken"},"content":"        String headerStr \u003d dlTask.getTaskTypeStringHeader();","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"TLChicken"},"content":"        assertEquals(\"[D]\", headerStr);","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"TLChicken"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"TLChicken"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"TLChicken"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"TLChicken":93}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"TLChicken"},"content":"todo Read Book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"TLChicken"},"content":"todo item number 2","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"TLChicken"},"content":"event go there /at 2 min","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"TLChicken"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"TLChicken"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"TLChicken"},"content":"deadline finish Week 2 Tasks /by Thursday","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"TLChicken"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"TLChicken"},"content":"todo Task Number 5","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"TLChicken"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"TLChicken"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"TLChicken":10}}]

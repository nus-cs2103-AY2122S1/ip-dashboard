[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.command.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.command.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.command.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.command.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import duke.util.Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":" * The Duke program. The input loop is abstracted here.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private static final String REWELCOME_MESSAGE \u003d \"Welcome back!\\nWhat can Duke do for you once again?\";","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private static final String LIST_MESSAGE \u003d \"Here are the tasks in your list:\\n%s\";","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    private static final String NO_TASKS_IN_LIST_MESSAGE \u003d \"You have no tasks currently. Go create some!\";","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    private static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n %s\";","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_NUMBER \u003d \"Please input a valid task number\";","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    private static final String TOO_MANY_ARGUMENTS_LIST_MESSAGE \u003d \"An argument after \u0027list\u0027 is not required. Just \u0027list\u0027 will do.\";","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"    // Errors","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_DELETE_NUMBER_MESSAGE \u003d \"Please input a number after the delete command\";","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_DONE_NUMBER_MESSAGE \u003d \"Please input a number after the done command\";","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"     * The input loop. Handles user input, creates tasks and outputs messages accordingly.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     * @param taskList The TaskList object to read from and write to","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     * @param storage The Storage object to read from and write to","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    private static void inputLoop(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        boolean canContinue \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"        while (canContinue) {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"            String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"                String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"                String remainingText \u003d Parser.getRemainingText(firstWord, input);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"                Command command \u003d Command.initialiseCommand(firstWord);","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"                switch (command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"                case LIST:","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"                    if (!remainingText.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"                        throw new DukeException(TOO_MANY_ARGUMENTS_LIST_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"                    if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"                        Message.display_message(NO_TASKS_IN_LIST_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"                    } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"                        Message.display_message(String.format(LIST_MESSAGE, taskList));","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"                case DONE:","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"                    if (remainingText.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"                        throw new DukeException(MISSING_DONE_NUMBER_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"                    try {","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"                        int taskIndex \u003d Integer.parseInt(remainingText);","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"                        Message.display_message(String.format(DONE_MESSAGE, taskList.markTaskAsDone(taskIndex)));","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"                    } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"                        throw new DukeException(INVALID_NUMBER);","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"                case DELETE:","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"                    if (remainingText.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"                        throw new DukeException(MISSING_DELETE_NUMBER_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"                    }","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"                    try {","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"                        int taskIndex \u003d Integer.parseInt(remainingText);","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"                        Message.display_message(taskList.deleteTask(taskIndex));","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"                    } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"                        throw new DukeException(INVALID_NUMBER);","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"                case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"                    ToDo myTodo \u003d ToDo.newTodo(remainingText);","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"                    Message.display_message(taskList.addTask(myTodo));","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"                case FIND:","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"                    Message.display_message(taskList.findTask(remainingText));","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"                case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"                    Deadline myDeadline \u003d Deadline.newDeadline(remainingText, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"                    Message.display_message(taskList.addTask(myDeadline));","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"                case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"                    Event myEvent \u003d Event.newEvent(remainingText, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"                    Message.display_message(taskList.addTask(myEvent));","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"                case BYE:","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"                    canContinue \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"                    break;","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"                storage.updateTaskListToFile(taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"            } catch (DukeException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"                Message.display_message(err.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"yourally2"},"content":"        sc.close();","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"yourally2"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"yourally2"},"content":"        Storage myStorage \u003d new Storage();","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"yourally2"},"content":"        if (!myStorage.didTaskFileExist()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"yourally2"},"content":"            Message.display_message(WELCOME_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"yourally2"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"yourally2"},"content":"            Message.display_message(REWELCOME_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"yourally2"},"content":"        myStorage.readTaskFile(taskList);","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"yourally2"},"content":"        inputLoop(taskList, myStorage);","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"yourally2"},"content":"        Message.display_message(EXIT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yourally2":119,"-":3}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" * Represents all the first words typed into the input for Duke","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"public enum Command {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"    BYE,","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    LIST,","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    DONE,","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    FIND,","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    DELETE,","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    DEADLINE,","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    EVENT,","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    TODO;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String INCOHERENT_INPUT_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * Method to create a command, throwing an error if it\u0027s not part of the enums","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param commandString The first word in the input","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @return A command representing one of the enums above","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    public static Command initialiseCommand(String commandString) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"            return Command.valueOf(commandString.toUpperCase());","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        } catch (IllegalArgumentException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INCOHERENT_INPUT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":35}},{"path":"src/main/java/duke/command/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" * Deadline is created by \u0027deadline eat breakfast /by 0800\u0027.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" * Deadlines are a type of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    private final DateTime dueDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    private static final String DEADLINE_DELIMITER \u003d \"/by\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027D\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_DEADLINE_MESSAGE \u003d \"Invalid use of deadline command. Use \u0027deadline \u003ctext\u003e /by \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_DEADLINE_MESSAGE \u003d \"Some arguments are missing. Use \u0027deadline \u003ctext\u003e /by \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Deadline save is given in the wrong format\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * Constructor for the deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param dueDate The date where it is due, to be converted to a DateTime object","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Deadline is finished","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    private Deadline(String text, String dueDate, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        this.dueDate \u003d new DateTime(dueDate);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"     * Factory method for creating a deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027deadline\u0027 string","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Deadline is finished","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     * @return A Deadline object","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    public static Deadline newDeadline(String input, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"        if (input.split(\" \").length \u003c 3) {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_DEADLINE_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"        String[] deadlineInfo \u003d input.split(DEADLINE_DELIMITER);","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"        if (deadlineInfo.length \u003c 2) {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_DEADLINE_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        String deadline \u003d deadlineInfo[1].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"        String deadlineText \u003d deadlineInfo[0].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        return new Deadline(deadlineText, deadline, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"     * Factory method for creating a deadline object from taskList.txt.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027D |\u0027 string.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     * @return A Deadline object","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"    public static Deadline newDeadlineFromSave(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 3) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        String isDone \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"        String deadlineText \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"        String deadline \u003d inputArr[2].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        return new Deadline(deadlineText, deadline, isDone.equals(\"1\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"     * The format of the Deadline in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Deadline in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat(){","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s | %s\", SYMBOL, super.getDoneInt(), this.getText(), this.dueDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"    };","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"     * The format of the deadline in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the deadline in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[%c]%s (by: %s)\", SYMBOL, super.toString(), this.dueDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":87}},{"path":"src/main/java/duke/command/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" * Event is created by \u0027event eat breakfast /at 0800\u0027.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" * Events are a type of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    private final DateTime eventDatetime;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    private static final String EVENT_DELIMITER \u003d \"/at\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027E\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_EVENT_MESSAGE \u003d \"Invalid use of event command. Use \u0027event \u003ctext\u003e /at \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_EVENT_MESSAGE \u003d \"Some arguments are missing. Use \u0027event \u003ctext\u003e /at \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Event save is given in the wrong format\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * Constructor for the event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the event","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param eventDatetime The date where it is due, to be converted to a DateTime object","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Event is finished","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    private Event(String text, String eventDatetime, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        this.eventDatetime \u003d new DateTime(eventDatetime);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"     * Factory method for creating a event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027event\u0027 string","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Event is finished","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     * @return An Event object","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    public static Event newEvent(String input, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        if (input.split(\" \").length \u003c 3) {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_EVENT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"        String[] eventInfo \u003d input.split(EVENT_DELIMITER);","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"        if (eventInfo.length \u003c 2) {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_EVENT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"        String event \u003d eventInfo[1].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        String eventText \u003d eventInfo[0].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        return new Event(eventText, event, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * Factory method for creating a event object from taskList.txt.","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027E |\u0027 string.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     * @return A Event object","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"    public static Event newEventFromSave(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 3) {","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"        String isDone \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"        String eventText \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        String event \u003d inputArr[2].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"        return new Event(eventText, event, isDone.equals(\"1\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"     * The format of the Event in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Event in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s | %s\", SYMBOL, super.getDoneInt(), this.getText(), this.eventDatetime);","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"    };","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"     * The format of the event in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the event in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), this.eventDatetime);","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":88}},{"path":"src/main/java/duke/command/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":" * Deadline, Event, and ToDo inherit from Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":" * Represents an object in the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"    private final String text;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"     * Constructor for the Task object","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"     * @param text Description of the Task","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Task is done","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    public Task(String text, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"        this.text \u003d text;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * Marks the Task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * Gets the done status of the task in a string. Used for the console.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * @return The string representation of the done status","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    private String getDoneStatus() {","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        return this.isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     * Gets the done status of the task as an integer. Used for taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     * @return The integer representation of the done status","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    public int getDoneInt() {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"        return this.isDone ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * Gets the description of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"    public String getText() {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        return this.text;","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"     * The save format of the Task used for taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"     * @return The String representation of the Task used for taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"    abstract String getSaveFormat();","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     * The String representation of the Task used in the console.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     * @return The String representation of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[%s] %s\", getDoneStatus(), getText());","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"yourally2":66}},{"path":"src/main/java/duke/command/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.util.Message;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import java.util.List;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" * A TaskList which stores Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"public class TaskList {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private final List\u003cTask\u003e taskArr;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String OUT_OF_BOUNDS_TASK \u003d \"Could not find task. Check the task number again?\";","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String NUMBER_OF_TASKS_MESSAGE \u003d \"Now you have %d %s in the list.\";","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private static final String ADD_TASK_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n  %s\\n\" + NUMBER_OF_TASKS_MESSAGE;","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    private static final String REMOVE_TASK_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n %s\\n\" + NUMBER_OF_TASKS_MESSAGE;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private static final String ERROR_SAVING_MESSAGE \u003d \"Error reading taskLst. Symbol not found.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private static final String NO_TASK_FOUND_MESSAGE \u003d \"Unfortunately no tasks with that name are found\";","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    private static final String MATCHING_TASKS_MESSAGE \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    // Nouns for plural and singular","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    private String taskWord() {","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"        return this.size() \u003c\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     * Constructor for TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        this.taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     * The size of the array storing the Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"     * @return The size of the array storing the Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    public int size() {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"        return taskArr.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     * Adds a task to the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * @param task The task to be added","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     * @return Message when task is added","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        this.taskArr.add(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"        return String.format(ADD_TASK_MESSAGE, task, this.size(), taskWord());","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     * Finds tasks which matches the input string and prints the output","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     * @param input The input string","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     * @return Returns a string message with the matching Tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"    public String findTask(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        StringBuilder printedList \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        for (Task task : this.taskArr) {","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"            if (task.getText().contains(input)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"                // Index from 1 onwards","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"                String indexStr \u003d Integer.toString(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"                printedList.append(String.format(\"%s. %s\\n\", indexStr, task));","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"                index++;","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"            printedList.insert(0, NO_TASK_FOUND_MESSAGE );","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"            printedList.insert(0, MATCHING_TASKS_MESSAGE );","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"        // Remove the last newline","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"        return printedList.toString().trim();","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"     * Adds a task from the format in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"     * @param input The format in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"     * @throws ArrayIndexOutOfBoundsException When","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"    public void addSavedTask(String input) throws ArrayIndexOutOfBoundsException, DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"        String symbol \u003d inputArr[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(symbol, input);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"        switch (symbol.charAt(0)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"        case ToDo.SYMBOL:","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"            ToDo myTodo \u003d ToDo.newToDoFromSave(remainingText);","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"            this.addTask(myTodo);","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"        case Deadline.SYMBOL:","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"            Deadline myDeadline \u003d Deadline.newDeadlineFromSave(remainingText);","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"            this.addTask(myDeadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"        case Event.SYMBOL:","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"            Event myEvent \u003d Event.newEventFromSave(remainingText);","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"            this.addTask(myEvent);","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"yourally2"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(ERROR_SAVING_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"yourally2"},"content":"     * Marks a task as done according to the index","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"yourally2"},"content":"     * @param taskIndex Index of task to be done","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"yourally2"},"content":"     * @return Returns the String message when the task is done","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"yourally2"},"content":"    public String markTaskAsDone(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"yourally2"},"content":"        // Task index starts from 1","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"yourally2"},"content":"        int index \u003d taskIndex - 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"yourally2"},"content":"            Task task \u003d taskArr.get(index);","lastModifiedDate":"2021-08-18"},{"lineNumber":123,"author":{"gitId":"yourally2"},"content":"            task.markDone();","lastModifiedDate":"2021-08-18"},{"lineNumber":124,"author":{"gitId":"yourally2"},"content":"            return task.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":125,"author":{"gitId":"yourally2"},"content":"        } catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(OUT_OF_BOUNDS_TASK);","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"yourally2"},"content":"     * Deletes the task from the tasklist","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"yourally2"},"content":"     * @param taskIndex The index to delete","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"yourally2"},"content":"     * @return Returns the String message when the task is done","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"yourally2"},"content":"    public String deleteTask(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"yourally2"},"content":"        // Task index starts from 1","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"yourally2"},"content":"        int index \u003d taskIndex - 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"yourally2"},"content":"            Task task \u003d taskArr.remove(index);","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"yourally2"},"content":"            return String.format(REMOVE_TASK_MESSAGE, task, this.size(), taskWord());","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"yourally2"},"content":"        } catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(OUT_OF_BOUNDS_TASK);","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"yourally2"},"content":"     * Gets all the tasks in the format for taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"yourally2"},"content":"     * @return the tasks in the format for taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":154,"author":{"gitId":"yourally2"},"content":"        StringBuilder printedList \u003d new StringBuilder();","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"yourally2"},"content":"        for (Task task : taskArr) {","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"yourally2"},"content":"            printedList.append(String.format(\"%s\\n\", task.getSaveFormat()));","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":158,"author":{"gitId":"yourally2"},"content":"        // Remove the last newline","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"yourally2"},"content":"        return printedList.toString().trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":160,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":162,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"yourally2"},"content":"     * Gets all the tasks in the format for the console","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"yourally2"},"content":"     * @return the tasks in the format for the console","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"yourally2"},"content":"        StringBuilder printedList \u003d new StringBuilder();","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"yourally2"},"content":"        for (int i \u003d 0; i \u003c taskArr.size(); i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"yourally2"},"content":"            // Index from 1 onwards","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"yourally2"},"content":"            String index \u003d Integer.toString(i + 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":173,"author":{"gitId":"yourally2"},"content":"            printedList.append(String.format(\"%s. %s\\n\", index, this.taskArr.get(i)));","lastModifiedDate":"2021-08-18"},{"lineNumber":174,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":175,"author":{"gitId":"yourally2"},"content":"        // Remove the last newline","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"yourally2"},"content":"        return printedList.toString().trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"yourally2":178}},{"path":"src/main/java/duke/command/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" * Event is created by \u0027todo eat breakfast\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" * Events are a type of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"public class ToDo extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027T\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_TODO_MESSAGE \u003d \"Please input text after the todo command\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Todo save is given in the wrong format\";","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"     * Constructor for the todo object.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the todo","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the todo is finished","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private ToDo(String text, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * Factory method for creating a todo object.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027todo\u0027 string","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @return A Todo object","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    public static ToDo newTodo(String input) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_TODO_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        String todoText \u003d input.trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        return new ToDo(todoText, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"     * Factory method for creating a todo object from taskList.txt.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027T |\u0027 string.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"     * @return A Todo object","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    public static ToDo newToDoFromSave(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        String isDone \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"        String text \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        return new ToDo(text, isDone.equals(\"1\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     * The format of the Todo in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Todo in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat(){","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s\", SYMBOL, super.getDoneInt(), this.getText());","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"    };","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"     * The format of the todo in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the todo in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[%c]%s\", SYMBOL, super.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":73}},{"path":"src/main/java/duke/util/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":" * Represents a date and a time","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"public class DateTime {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    // TODO: multiple regexes for date","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String DATE_REGEX \u003d \"(\\\\d{4}-\\\\d{2}-\\\\d{2}).+\";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    // Negative lookahead the dash so it doesn\u0027t capture the date","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private static final String TIME_REGEX \u003d \"(\\\\d{4})(?!-)(.+)?\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private LocalTime time;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * Constructor for DateTime object","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * @param input the String with a date and time","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    public DateTime(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        Pattern datePattern \u003d Pattern.compile(DATE_REGEX);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        Matcher dateMatcher \u003d datePattern.matcher(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        if (dateMatcher.matches()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            date \u003d LocalDate.parse(dateMatcher.group(1));","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        Pattern timePattern \u003d Pattern.compile(TIME_REGEX);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        Matcher timeMatcher \u003d timePattern.matcher(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        if (timeMatcher.matches()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"            time \u003d LocalTime.parse(timeMatcher.group(1), DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"     * Converts the date to a string","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * @return the date in string format","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    private String dateToString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        return date !\u003d null ? date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")): null;","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"     * Converts the time to a string","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"     * @return the time in string format","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"    private String timeToString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"        return time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\"hh.mm a\")) : null;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"     * Outputs the DateTime in the following format","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"     * @return The DateTime in the following format","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"        // Thanks to https://stackoverflow.com/a/59323744/12499338","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        return Stream.of(dateToString(), timeToString())","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"                        .filter(Objects::nonNull)","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"                        .collect(Collectors.joining(\" \"));","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yourally2":72}},{"path":"src/main/java/duke/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":" * Class to handle exceptions","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"    public DukeException(String error) {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"        super(error);","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":10}},{"path":"src/main/java/duke/util/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static java.lang.Math.max;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" * Class to handle the UI shown to the end user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"public class Message {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"    private static final int BOX_LENGTH \u003d 80;","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"    private static final int INDENT_LENGTH \u003d 4;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    private static final String INDENT \u003d \" \".repeat(INDENT_LENGTH);","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    // Message methods","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"     * Prints a horizontal line to the console","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static void horizontal_line() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"        System.out.print(\"_\".repeat(BOX_LENGTH) + \"\\n\");","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * Displays the message in a text box","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param message The message to display","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    public static void display_message(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"        horizontal_line();","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"        String[] lineArr \u003d message.split(\"\\n\");","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        // Print sides of the box","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        for (String line : lineArr) {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"            int remainingSpace \u003d max(BOX_LENGTH - line.length() - INDENT_LENGTH - 2, 0);","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"            System.out.println(\"|\" + INDENT + line + \" \".repeat(remainingSpace) + \"|\");","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        horizontal_line();","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":37}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":" * Parser to take care of parsing input given by the user","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"     * Returns the string following the first word","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"     * @param firstWord The word you want to exclude","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"     * @param input The string including the first word","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"     * @return The remaining string","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    public static String getRemainingText(String firstWord, String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"        if (input.length() \u003e firstWord.length() + 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"            remainingText \u003d input.substring(firstWord.length() + 1).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"        return remainingText;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yourally2":21}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.command.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":" * Storage class for storing the TaskList in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    private static final String OUTER_DIR \u003d \"data\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private static final String FILE \u003d \"taskList.txt\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String[] FILE_PATH_ARR \u003d  {\".\", OUTER_DIR , FILE};","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String CREATE_FILE_ERROR \u003d \"An error occurred. Unable to create taskList file.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private static final String FILE_NOT_FOUND_MESSAGE \u003d \"An error occurred. Unable to find file.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_TASKLIST_MESSAGE \u003d \"Error reading taskLst. TaskList is probably invalid.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private final File taskFile;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    private boolean didTaskFileExist \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * Constructor for Storage","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    public Storage() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        taskFile \u003d new File(getPath());","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        this.createOuterDirectory();","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            if (!taskFile.createNewFile()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"                this.didTaskFileExist \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"            System.out.println(CREATE_FILE_ERROR);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"     * Returns whether the task file exists or not","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"     * @return whether the task file exists or not","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"    public boolean didTaskFileExist() {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"        return this.didTaskFileExist;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"     * Copies the contents of the taskList into taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"     * @param taskList the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    public void updateTaskListToFile(TaskList taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"            FileWriter fileWriter \u003d new FileWriter(taskFile, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"            bufferedWriter.write(taskList.getSaveFormat());","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"            bufferedWriter.flush();","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"            System.out.println(\"Error writing task to file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"     * Copies taskList.txt into TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"     * @param taskList the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    public void readTaskFile(TaskList taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"            Scanner taskScanner \u003d new Scanner(this.taskFile);","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"            while (taskScanner.hasNextLine()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"                String taskLine \u003d taskScanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"                taskList.addSavedTask(taskLine);","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"            taskScanner.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"            Message.display_message(FILE_NOT_FOUND_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"        } catch (ArrayIndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"            Message.display_message(INVALID_TASKLIST_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"            Message.display_message(err.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"     * Gets the path to taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"     * @return Path to taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"    private String getPath() {","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"        return String.join(File.separator, FILE_PATH_ARR);","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"     * Creates the outer directory. In this case data","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"    private void createOuterDirectory() {","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"        File directory \u003d new File(OUTER_DIR);","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"        directory.mkdirs();","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"yourally2":104}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"import duke.command.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.command.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.command.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import duke.command.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import duke.util.Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    public void taskList_addToDo_toDoAdded() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"todo make breakfast every morning\";","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, inputString);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"            ToDo myTodo \u003d ToDo.newTodo(remainingText);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            Message.display_message(taskList.addTask(myTodo));","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            Message.display_message(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        assertEquals(\"1. [T][ ] make breakfast every morning\", taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    public void taskList_addDeadline_deadlineAdded() {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"deadline make breakfast /by 0800\";","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, inputString);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"            Deadline myDeadline \u003d Deadline.newDeadline(remainingText, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"            Message.display_message(taskList.addTask(myDeadline));","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"            Message.display_message(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        assertEquals(\"1. [D][ ] make breakfast (by: 08.00 AM)\", taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    public void taskList_addEvent_eventAdded() {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"event go to concert /at 0800\";","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, inputString);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"            Event myEvent \u003d Event.newEvent(remainingText, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"            Message.display_message(taskList.addTask(myEvent));","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"            Message.display_message(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"        assertEquals(\"1. [E][ ] go to concert (at: 08.00 AM) \", taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"    private static final String INCOHERENT_INPUT_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"    public void command_initialiseCommand_illegalCommandExceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"I don\u0027t know how to use Duke\";","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"        String actual \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"            Command.initialiseCommand(firstWord);","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"            actual \u003d err.getMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"            Message.display_message(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"        assertEquals(INCOHERENT_INPUT_MESSAGE, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"    private static final String OUTER_DIR \u003d \"data\";","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"    private static final String FILE \u003d \"taskList.txt\";","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"    private static final String[] FILE_PATH_ARR \u003d  {\".\", OUTER_DIR , FILE};","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"    public void storage_updateTaskListToFile_fileUpdated() {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"        Storage myStorage \u003d new Storage();","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"            taskList.addTask(ToDo.newTodo(\"eat lunch\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"            myStorage.updateTaskListToFile(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"            Scanner taskScanner \u003d new Scanner(new File(String.join(File.separator, FILE_PATH_ARR)));","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"            String taskLine \u003d taskScanner.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"            taskScanner.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"yourally2"},"content":"            assertEquals(\"T | 0 | eat lunch\", taskLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"yourally2"},"content":"            System.out.println(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"yourally2"},"content":"            Message.display_message(\"An error occurred. Unable to find file.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"yourally2"},"content":"    public void storage_readTaskFile_fileRead() {","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"yourally2"},"content":"        Storage myStorage \u003d new Storage();","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"yourally2"},"content":"            FileWriter fileWriter \u003d new FileWriter(String.join(File.separator, FILE_PATH_ARR), false);","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"yourally2"},"content":"            fileWriter.write(\"T | 0 | eat lunch\");","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"yourally2"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"yourally2"},"content":"            myStorage.readTaskFile(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"yourally2"},"content":"            assertEquals(\"T | 0 | eat lunch\", taskList.getSaveFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"yourally2"},"content":"            // Clear the file after use","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"yourally2"},"content":"            FileWriter fileWriterClearFile \u003d new FileWriter(String.join(File.separator, FILE_PATH_ARR), false);","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"yourally2"},"content":"            fileWriterClearFile.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"yourally2"},"content":"            Message.display_message(\"An error occurred. Unable to find file.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"yourally2"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"yourally2"},"content":"            System.out.println(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yourally2":134}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"todo eat lunch","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"deadline finish assignment /by Dec 20th","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"event eat food party /at Aug 20th 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"todo eat dinner","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"todo find friends","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"blah","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"toijoijdo","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yourally2":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yourally2":2,"-":36}}]

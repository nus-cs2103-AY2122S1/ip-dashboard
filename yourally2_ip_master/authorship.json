[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"# Duke","lastModifiedDate":"2021-09-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"![Screenshot of Duke](./docs/Ui.png)","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"A command-based todo list made using JavaFX.  ","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"You can add tasks, deadlines, events, and even timed tasks.  ","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"You can download it [here](https://github.com/yourally2/ip/releases/tag/v1.0).","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"## Features","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"- A nice GUI","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"- Add Tasks (Deadlines, Events, Todos, and Timed Todos)","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"- Delete Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"- View Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"- Complete Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"- Find Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"- List all your Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"## Overview","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"### `todo` - Adds a Todo","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"Adds a task to the todolist","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"`todo eat breakfast`","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"### `todo ... /for` (Overloaded) - Adds a timed todo","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"Adds a timed todo to the todolist","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"`todo eat breakfast /for 30 mins`","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"[F][ ] eat breakfast (for: 30 mins)","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"### `deadline` - Adds a deadline with an end date","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"Adds a deadline to the todolist","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"`event go to 2103 lecture /at 2021-09-17 1600`","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"[E][ ] go to 2103 lecture (at: Sep 17 2021 04.00 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"### `delete \u003cnumber\u003e` - Deletes a Task","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"Deletes a task from the todolist according to its index, starting from 1","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"`delete 1`","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"### `done \u003cnumber\u003e` - Completes a Task","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"Completes a task from the todolist according to its index, starting from 1","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"`done 1`","lastModifiedDate":"2021-09-17"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-17"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"### `find \u003ctext\u003e` - Finds a Task","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"Finds a task that matches the given string","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"`find breakfast`","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"1. [T][ ] eat breakfast","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"### `list` - Lists all available Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"Lists all available Tasks in the current TaskList.","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"`list`","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"yourally2"},"content":"1. [T][ ] eat breakfast","lastModifiedDate":"2021-09-17"},{"lineNumber":107,"author":{"gitId":"yourally2"},"content":"2. [T][ ] eat lunch","lastModifiedDate":"2021-09-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yourally2":103,"-":5}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"dependencies {","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":21,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"# Duke","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"![Screenshot of Duke](Ui.png)","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"A command-based todo list made using JavaFX.  ","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"You can add tasks, deadlines, events, and even timed tasks.","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"- A nice GUI","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"- Add Tasks (Deadlines, Events, Todos, and Timed Todos)","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"- Delete Tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"- View Tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"- Complete Tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"- Find Tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"- List all your Tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"## Overview","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"### `todo` - Adds a Todo","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"Adds a task to the todolist  ","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"  ","lastModifiedDate":"2021-09-16"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"`todo eat breakfast`  ","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"### `todo ... /for` (Overloaded) - Adds a timed todo","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"Adds a timed todo to the todolist  ","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"`todo eat breakfast /for 30 mins`","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"[F][ ] eat breakfast (for: 30 mins)","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"### `deadline` - Adds a deadline with an end date","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"Adds a deadline to the todolist  ","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"`event go to 2103 lecture /at 2021-09-17 1600`","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"[E][ ] go to 2103 lecture (at: Sep 17 2021 04.00 PM)","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"### `delete \u003cnumber\u003e` - Deletes a Task","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"Deletes a task from the todolist according to its index, starting from 1   ","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"`delete 1`","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"### `done \u003cnumber\u003e` - Completes a Task","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"Completes a task from the todolist according to its index, starting from 1  ","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"`done 1`","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"[T][ ] eat breakfast","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"Now you have x tasks in the list.","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"### `find \u003ctext\u003e` - Finds a Task","lastModifiedDate":"2021-09-16"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"Finds a task that matches the given string   ","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"`find breakfast`","lastModifiedDate":"2021-09-16"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-16"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-16"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-09-16"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"1. [T][ ] eat breakfast","lastModifiedDate":"2021-09-16"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"```","lastModifiedDate":"2021-09-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"### `list` - Lists all available Tasks","lastModifiedDate":"2021-09-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"Lists all available Tasks in the current TaskList.  ","lastModifiedDate":"2021-09-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"`list`","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"Output:","lastModifiedDate":"2021-09-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-16"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-16"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"1. [T][ ] eat breakfast","lastModifiedDate":"2021-09-16"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"2. [T][ ] eat lunch","lastModifiedDate":"2021-09-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"yourally2":80,"-":26}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.gui.Main;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":" * The Duke program. The input loop is abstracted here.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    /** Storage file path */","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    public static final String OUTER_DIR \u003d \"data\";","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    public static final String FILE \u003d \"taskList.txt\";","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    /** Instance variables */","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private Storage myStorage;","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * Constructor for Duke.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * @param filePath The path used to store the tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    public Duke(Path filePath) {","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        myStorage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"            taskList \u003d new TaskList(myStorage.load());","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"            // Only time where error messages are displayed in the cli","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(err.getMessage());","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * Returns Duke\u0027s response as a String.","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * @return Duke\u0027s response as a String.","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2021-09-03"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"            String reply \u003d command.execute(taskList, ui, myStorage);","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"            myStorage.updateTaskListToFile(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"            assert reply !\u003d null \u0026\u0026 !reply.equals(\"\") : \"Reply should not be blank\";","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"            return reply;","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"            return err.getMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"     * Closes the Scanner from Ui.","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"    public void closeScanner() {","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        this.ui.closeScanner();","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"     * Launches the Duke application.","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"     * @param args Arguments to be passed on to Main","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yourally2":77,"-":2}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.EXIT_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Represents the bye command.","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"bye\";","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    protected ByeCommand() {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"        return EXIT_MESSAGE;","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":29}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.task.TimedToDo.TIMED_TODO_DELIMITER;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" * Represents the input of the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private static final String INCOHERENT_INPUT_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"     * Creates a command, throwing an error if it\u0027s not part of the enums.","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     * @param commandString The first word in the input.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     * @return A command representing one of the enums above.","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    public static Command initialiseCommand(String commandString, String remainingText) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"        switch (commandString) {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"        case TodoCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"            // Overload the todo command","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"            if (remainingText.contains(TIMED_TODO_DELIMITER)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"                return new TimedTodoCommand(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"            } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"                return new TodoCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        case ListCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            return new ListCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        case FindCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            return new FindCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        case EventCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"            return new EventCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        case DoneCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"            return new DoneCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"        case DeleteCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"            return new DeleteCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        case DeadlineCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"            return new DeadlineCommand(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        case ByeCommand.COMMAND:","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"        default:","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INCOHERENT_INPUT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException The exception to be thrown.","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":60}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Represents the command equivalent of the deadline task.","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private Deadline deadline;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    protected DeadlineCommand(String remainingText) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        deadline \u003d Deadline.createNewDeadline(remainingText, false);","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        assert deadline !\u003d null : \"deadline should not be null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        return taskList.addTask(deadline);","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":33}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.INVALID_NUMBER;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.MISSING_DELETE_NUMBER_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":" * Represents the delete command.","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"delete\";","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    private String remainingText;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    protected DeleteCommand(String remainingText) {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"        this.remainingText \u003d remainingText;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"            if (remainingText.isEmpty()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"                throw new DukeException(MISSING_DELETE_NUMBER_MESSAGE);","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"            int taskIndex \u003d Integer.parseInt(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"            return taskList.deleteTask(taskIndex);","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_NUMBER);","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":42}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.DONE_MESSAGE;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.INVALID_NUMBER;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.MISSING_DONE_NUMBER_MESSAGE;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":" * Represents the done command.","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"done\";","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private String remainingText;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    protected DoneCommand(String remainingText) {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"        this.remainingText \u003d remainingText;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            if (remainingText.isEmpty()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"                throw new DukeException(MISSING_DONE_NUMBER_MESSAGE);","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"            int taskIndex \u003d Integer.parseInt(remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"            return String.format(DONE_MESSAGE, taskList.markTaskAsDone(taskIndex));","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_NUMBER);","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":42}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Represents the command equivalent of the Event task.","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"event\";","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private Event event;","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    protected EventCommand(String remainingText) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"        event \u003d Event.createNewEvent(remainingText, false);","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        assert event !\u003d null : \"event should not be null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        return taskList.addTask(event);","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" * Represents the find command.","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"find\";","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    private String remainingText;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    protected FindCommand(String remainingText) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"        this.remainingText \u003d remainingText;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"        return taskList.findTask(remainingText);","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":29}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.LIST_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.NO_TASKS_IN_LIST_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.TOO_MANY_ARGUMENTS_LIST_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":" * Represents the list command.","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"list\";","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private String remainingText;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    protected ListCommand(String remainingText) {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"        this.remainingText \u003d remainingText;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException The exception to be thrown.","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        if (!remainingText.isEmpty()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(TOO_MANY_ARGUMENTS_LIST_MESSAGE);","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"            return NO_TASKS_IN_LIST_MESSAGE;","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"            return String.format(LIST_MESSAGE, taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":42}},{"path":"src/main/java/duke/command/TimedTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.task.TimedToDo;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Represents the command equivalent of the Timed Todo task.","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class TimedTodoCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    private TimedToDo timedTodo;","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    protected TimedTodoCommand(String remainingText) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"        timedTodo \u003d TimedToDo.createNewTimedTodo(remainingText, false);","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"        assert timedTodo !\u003d null : \"timed todo should not be null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        return taskList.addTask(timedTodo);","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"yourally2":31}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.command;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Represents the command equivalent of the Todo task.","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    protected static final String COMMAND \u003d \"todo\";","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private ToDo todo;","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    protected TodoCommand(String remainingText) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"        todo \u003d ToDo.createNewTodo(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * Executes the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * @param taskList The taskList keeping track of the tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param ui The Ui used for the user interface.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param storage The storage object taking care of writing and reading the text file.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        assert todo !\u003d null : \"todo should not be null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        return taskList.addTask(todo);","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":32}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":" * The Dialog Box. Has DukeDialogBox and UserDialogBox as it\u0027s children.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * Acts as the constructor for DialogBox.","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * @param fxmlResourceDir The location of the FXML file.","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @param img The Image file to display.","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    protected DialogBox(String fxmlResourceDir, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(fxmlResourceDir));","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        this.cropToCircle();","lastModifiedDate":"2021-09-03"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"    protected void flip() {","lastModifiedDate":"2021-09-03"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * Crops the displayPicture into a circle.","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    private void cropToCircle() {","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"        Circle circle \u003d new Circle(displayPicture.getFitWidth() / 2, displayPicture.getFitHeight() / 2, 20);","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        displayPicture.setClip(circle);","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":62}},{"path":"src/main/java/duke/gui/DukeDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.gui;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.WELCOME_MESSAGE;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" * The Dialog box belonging to Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"public class DukeDialogBox extends DialogBox {","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private Label dukeDialog;","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"     * Acts as the constructor for the Dialog Box belonging to Duke.","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     * @param text The text of the dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * @param img The Profile picture of the user saying dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private DukeDialogBox(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"        super(\"/view/DukeDialogBox.fxml\", img);","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"        dukeDialog.setText(text);","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * Returns the dialog box facing the appropriate side.","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     * @param text The text of the dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     * @param img The Profile picture of the user saying dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"     * @return The dialog box facing the appropriate side.","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"    public static DialogBox getDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        var db \u003d new DukeDialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        db.flip();","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        return db;","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"     * Welcomes the user to Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"     * @param dialogContainer The dialogContainer to put the dialog in.","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * @param dukeImage The image of Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    public static void welcomeUser(VBox dialogContainer, Image dukeImage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        dialogContainer.getChildren().add(DukeDialogBox.getDialog(WELCOME_MESSAGE, dukeImage));","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"yourally2":50}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.gui;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.Duke.FILE;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import static duke.Duke.OUTER_DIR;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private Duke duke \u003d new Duke(Paths.get(OUTER_DIR, FILE));","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     * Starts the GUI.","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * @param stage The stage object to start the GUI.","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-02"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"            scene.getRoot().setStyle(\"-fx-font-family: \u0027Arial\u0027\");","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcomeuser();","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"            stage.show();","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-02"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-02"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":41}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.gui;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static duke.util.Ui.EXIT_MESSAGE;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":" * Represents the controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-02"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     * Initialises the dialogContainer and scrollPane.","lastModifiedDate":"2021-09-15"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-02"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     * Sets the MainWindow object to the correct instance of Duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"     * @param duke The appropriate instance of duke.","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    public void setDuke(Duke duke) {","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * Welcomes the user when he/she first logs in.","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"    public void welcomeuser() {","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        DukeDialogBox.welcomeUser(dialogContainer, dukeImage);","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-02"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-02"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        String input \u003d userInput.getText().trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        if (input.equals(\"\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"            return;","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"        // Idea and code from alissayarmantho\u0027s issue","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        if (response.equals(EXIT_MESSAGE)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"            duke.closeScanner();","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"            Platform.exit();","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"        /* Alternates between user and Duke dialog boxes. */","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-02"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"                UserDialogBox.getDialog(input, userImage),","lastModifiedDate":"2021-09-03"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"                DukeDialogBox.getDialog(response, dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        );","lastModifiedDate":"2021-09-02"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-02"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":80}},{"path":"src/main/java/duke/gui/UserDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.gui;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" * The Dialog box belonging to the User.","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"public class UserDialogBox extends DialogBox {","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    private Label userDialog;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"     * Represents the constructor for the Dialog Box belonging to the User.","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"     * @param text The text of the dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"     * @param img The Profile picture of the user saying dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private UserDialogBox(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"        super(\"/view/UserDialogBox.fxml\", img);","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"        userDialog.setText(text);","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * Returns the dialog box facing the appropriate side.","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * @param text The text of the dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @param img The Profile picture of the user saying dialog box.","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * @return The dialog box facing the appropriate side.","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"    public static DialogBox getDialog(String text, Image img) {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        return new UserDialogBox(text, img);","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"yourally2":35}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" * Deadline is created by \u0027deadline eat breakfast /by 0800\u0027.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Deadlines are a type of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027D\u0027;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private static final String DEADLINE_DELIMITER \u003d \"/by\";","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    /* Messages */","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_DEADLINE_MESSAGE \u003d \"Invalid use of deadline command. \"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"            + \"Use \u0027deadline \u003ctext\u003e /by \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_DEADLINE_FORMAT_MESSAGE \u003d \"Invalid DateTime format for deadline. \"","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"            + \"DateTime must be in the format of yyyy-MM-dd HHmm (2019-02-01 1800)\";","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_DEADLINE_MESSAGE \u003d \"Some arguments are missing. \"","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"            + \"Use \u0027deadline \u003ctext\u003e /by \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Deadline save is given in the wrong format\";","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    private DateTime dueDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * Represents the constructor for the deadline object.","lastModifiedDate":"2021-09-15"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the deadline.","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     * @param dueDate The date where it is due, to be converted to a DateTime object.","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Deadline is finished.","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"    private Deadline(String text, String dueDate, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"            this.dueDate \u003d new DateTime(dueDate);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"        } catch (DateTimeParseException err) {","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_DEADLINE_FORMAT_MESSAGE);","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating a deadline object.","lastModifiedDate":"2021-09-15"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027deadline\u0027 string.","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Deadline is finished.","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     * @return A Deadline object.","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    public static Deadline createNewDeadline(String input, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"        if (input.split(\" \").length \u003c 3) {","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_DEADLINE_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"        String[] deadlineInfo \u003d input.split(DEADLINE_DELIMITER);","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"        if (deadlineInfo.length \u003c 2) {","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_DEADLINE_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        String deadline \u003d deadlineInfo[1].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"        String deadlineText \u003d deadlineInfo[0].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        return new Deadline(deadlineText, deadline, isDone);","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating a deadline object from taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027D |\u0027 string.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"     * @return A Deadline object.","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"    public static Deadline createNewDeadlineFromSave(String input) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 3) {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"        String doneString \u003d inputArr[0].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"        String deadlineText \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"        String deadline \u003d inputArr[2].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"        return new Deadline(deadlineText, deadline, doneString.equals(\"1\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the Deadline in taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Deadline in taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s | %s\", SYMBOL, super.getDoneInt(),","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"                this.getText(), this.dueDate.getSaveFormat());","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the deadline in console.","lastModifiedDate":"2021-09-15"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the deadline in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[%c]%s (by: %s)\", SYMBOL, super.toString(), this.dueDate);","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":103}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" * Event is created by \u0027event eat breakfast /at 0800\u0027.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * Events are a type of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027E\u0027;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private static final String EVENT_DELIMITER \u003d \"/at\";","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    /* Messages */","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_EVENT_MESSAGE \u003d \"Invalid use of event command.\"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"            + \" Use \u0027event \u003ctext\u003e /at \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_EVENT_FORMAT_MESSAGE \u003d \"Invalid DateTime format for event. \"","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"            + \"DateTime must be in the format of yyyy-MM-dd HHmm (2019-02-01 1800)\";","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_EVENT_MESSAGE \u003d \"Some arguments are missing. Use \u0027event \u003ctext\u003e /at \u003cdatetime\u003e\u0027\";","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Event save is given in the wrong format\";","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    private DateTime eventDatetime;","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * Represents the constructor for the event object.","lastModifiedDate":"2021-09-15"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the event.","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     * @param eventDatetime The date where it is due, to be converted to a DateTime object.","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Event is finished.","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    private Event(String text, String eventDatetime, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"            this.eventDatetime \u003d new DateTime(eventDatetime);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        } catch (DateTimeParseException err) {","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_EVENT_FORMAT_MESSAGE);","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating an event object.","lastModifiedDate":"2021-09-15"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027event\u0027 string.","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Event is finished.","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * @return An Event object.","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"    public static Event createNewEvent(String input, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        if (input.split(\" \").length \u003c 3) {","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_EVENT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"        String[] eventInfo \u003d input.split(EVENT_DELIMITER);","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"        if (eventInfo.length \u003c 2) {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_EVENT_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        String event \u003d eventInfo[1].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        String eventText \u003d eventInfo[0].trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"        return new Event(eventText, event, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating an event object from taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027E |\u0027 string.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"     * @return A Event object.","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"    public static Event createNewEventFromSave(String input) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 3) {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        String doneString \u003d inputArr[0].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"        String eventText \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"        String event \u003d inputArr[2].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"        return new Event(eventText, event, doneString.equals(\"1\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the Event in taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Event in taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s | %s\", SYMBOL, super.getDoneInt(), this.getText(),","lastModifiedDate":"2021-09-01"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"                this.eventDatetime.getSaveFormat());","lastModifiedDate":"2021-09-01"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the event in console.","lastModifiedDate":"2021-09-15"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the event in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), this.eventDatetime);","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":102}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":" * Deadline, Event, and ToDo inherit from Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":" * Represents an object in the TaskList.","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"    private String text;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"     * Represents the constructor for the Task object.","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"     * @param text Description of the Task.","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Task is done.","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    public Task(String text, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        this.text \u003d text;","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     * Marks the Task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * Gets the done status of the task in a string. Used for the console.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     * @return The string representation of the done status.","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    private String getDoneStatus() {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        return this.isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     * Gets the done status of the task as an integer. Used for taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"     * @return The integer representation of the done status.","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    public int getDoneInt() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        return this.isDone ? 1 : 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * Gets the description of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"     * @return Description of the Task.","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    public String getText() {","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"        return this.text;","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     * Gets the save format of the Task used for taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     * @return The String representation of the Task used for taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"    abstract String getSaveFormat();","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"     * Gets the String representation of the Task used in the console.","lastModifiedDate":"2021-09-15"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"     * @return The String representation of the Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[%s] %s\", getDoneStatus(), getText());","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"yourally2":72}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import java.util.List;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":" * A TaskList which stores Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"public class TaskList {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private static final String OUT_OF_BOUNDS_TASK \u003d \"Could not find task. Check the task number again?\";","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private static final String NUMBER_OF_TASKS_MESSAGE \u003d \"Now you have %d %s in the list.\";","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    private static final String ADD_TASK_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n  %s\\n\" + NUMBER_OF_TASKS_MESSAGE;","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private static final String REMOVE_TASK_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n %s\\n\" + NUMBER_OF_TASKS_MESSAGE;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String ERROR_SAVING_MESSAGE \u003d \"Error reading taskLst. Symbol not found.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String NO_TASK_FOUND_MESSAGE \u003d \"Unfortunately no tasks with that name are found\";","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    private static final String MATCHING_TASKS_MESSAGE \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private List\u003cTask\u003e taskArr;","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * Represents the constructor for TaskList which creates a taskList from taskList.txt","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    public TaskList(String taskList) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"        this.taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        String[] taskArrStr \u003d taskList.split(\"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        for (String task : taskArrStr) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"            this.addSavedTask(task);","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"     * Represents the constructor for TaskList to create an empty taskList","lastModifiedDate":"2021-09-15"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"        this.taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    // Nouns for plural and singular","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    private String taskWord() {","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        return this.getSize() \u003c\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     * Gets the size of the array storing the Tasks.","lastModifiedDate":"2021-09-15"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"     * @return The size of the array storing the Tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        return taskArr.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     * Adds a task to the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     * @param task The task to be added","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"     * @return Message when task is added","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        this.taskArr.add(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        return String.format(ADD_TASK_MESSAGE, task, this.getSize(), taskWord());","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"     * Finds tasks which matches the input string and prints the output.","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"     * @param input The input string.","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"     * @return Returns a string message with the matching Tasks.","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"    public String findTask(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"        StringBuilder printedList \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"        for (Task task : this.taskArr) {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"            if (task.getText().contains(input)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"                // Index from 1 onwards","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"                String indexStr \u003d Integer.toString(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"                printedList.append(String.format(\"%s. %s\\n\", indexStr, task));","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"                index++;","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"            printedList.insert(0, NO_TASK_FOUND_MESSAGE);","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"            printedList.insert(0, MATCHING_TASKS_MESSAGE);","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"        // Remove the last newline","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"        return printedList.toString().trim();","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"     * Adds a task from the format in taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"     * @param input The format in taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"     * @throws ArrayIndexOutOfBoundsException Error when for invalid taskList.","lastModifiedDate":"2021-09-11"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"    public void addSavedTask(String input) throws ArrayIndexOutOfBoundsException, DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"        if (input \u003d\u003d null || input.equals(\"\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"            return;","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"yourally2"},"content":"        String symbol \u003d inputArr[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(symbol, input);","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"yourally2"},"content":"        switch (symbol.charAt(0)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"yourally2"},"content":"        case ToDo.SYMBOL:","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"yourally2"},"content":"            ToDo myTodo \u003d ToDo.createNewToDoFromSave(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"yourally2"},"content":"            this.addTask(myTodo);","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"yourally2"},"content":"        case TimedToDo.SYMBOL:","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"yourally2"},"content":"            TimedToDo myTimedToDo \u003d TimedToDo.createNewTimedTodoFromSave(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"yourally2"},"content":"            this.addTask(myTimedToDo);","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-09-08"},{"lineNumber":118,"author":{"gitId":"yourally2"},"content":"        case Deadline.SYMBOL:","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"yourally2"},"content":"            Deadline myDeadline \u003d Deadline.createNewDeadlineFromSave(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":120,"author":{"gitId":"yourally2"},"content":"            this.addTask(myDeadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"yourally2"},"content":"        case Event.SYMBOL:","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"yourally2"},"content":"            Event myEvent \u003d Event.createNewEventFromSave(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":124,"author":{"gitId":"yourally2"},"content":"            this.addTask(myEvent);","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"yourally2"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"yourally2"},"content":"        default:","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(ERROR_SAVING_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"yourally2"},"content":"     * Marks a task as done according to the index.","lastModifiedDate":"2021-09-11"},{"lineNumber":133,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"yourally2"},"content":"     * @param taskIndex Index of task to be done.","lastModifiedDate":"2021-09-11"},{"lineNumber":135,"author":{"gitId":"yourally2"},"content":"     * @return Returns the String message when the task is done.","lastModifiedDate":"2021-09-11"},{"lineNumber":136,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":137,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"yourally2"},"content":"    public String markTaskAsDone(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"yourally2"},"content":"        // Task index starts from 1","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"yourally2"},"content":"        int index \u003d taskIndex - 1;","lastModifiedDate":"2021-08-18"},{"lineNumber":141,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"yourally2"},"content":"            Task task \u003d taskArr.get(index);","lastModifiedDate":"2021-08-18"},{"lineNumber":143,"author":{"gitId":"yourally2"},"content":"            task.markDone();","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"yourally2"},"content":"            return task.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"yourally2"},"content":"        } catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(OUT_OF_BOUNDS_TASK);","lastModifiedDate":"2021-08-19"},{"lineNumber":147,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":148,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"yourally2"},"content":"     * Deletes the task from the taskList.","lastModifiedDate":"2021-09-11"},{"lineNumber":152,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"yourally2"},"content":"     * @param taskIndex The index to delete.","lastModifiedDate":"2021-09-11"},{"lineNumber":154,"author":{"gitId":"yourally2"},"content":"     * @return Returns the String message when the task is done.","lastModifiedDate":"2021-09-11"},{"lineNumber":155,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":156,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"yourally2"},"content":"    public String deleteTask(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":158,"author":{"gitId":"yourally2"},"content":"        // Task index starts from 1","lastModifiedDate":"2021-08-19"},{"lineNumber":159,"author":{"gitId":"yourally2"},"content":"        int index \u003d taskIndex - 1;","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"yourally2"},"content":"            Task task \u003d taskArr.remove(index);","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"yourally2"},"content":"            return String.format(REMOVE_TASK_MESSAGE, task, this.getSize(), taskWord());","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"yourally2"},"content":"        } catch (IndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(OUT_OF_BOUNDS_TASK);","lastModifiedDate":"2021-08-19"},{"lineNumber":165,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":166,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"yourally2"},"content":"     * Gets all the tasks in the format for taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":170,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"yourally2"},"content":"     * @return the tasks in the format for taskList.txt.","lastModifiedDate":"2021-09-11"},{"lineNumber":172,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"yourally2"},"content":"        StringBuilder printedList \u003d new StringBuilder();","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"yourally2"},"content":"        for (Task task : taskArr) {","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"yourally2"},"content":"            printedList.append(String.format(\"%s\\n\", task.getSaveFormat()));","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"yourally2"},"content":"        // Remove the last newline","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"yourally2"},"content":"        return printedList.toString().trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":182,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"yourally2"},"content":"     * Gets all the tasks in the format for the console.","lastModifiedDate":"2021-09-11"},{"lineNumber":184,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"yourally2"},"content":"     * @return the tasks in the format for the console.","lastModifiedDate":"2021-09-11"},{"lineNumber":186,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":188,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":189,"author":{"gitId":"yourally2"},"content":"        StringBuilder printedList \u003d new StringBuilder();","lastModifiedDate":"2021-08-18"},{"lineNumber":190,"author":{"gitId":"yourally2"},"content":"        for (int i \u003d 0; i \u003c taskArr.size(); i++) {","lastModifiedDate":"2021-08-18"},{"lineNumber":191,"author":{"gitId":"yourally2"},"content":"            // Index from 1 onwards","lastModifiedDate":"2021-08-18"},{"lineNumber":192,"author":{"gitId":"yourally2"},"content":"            String index \u003d Integer.toString(i + 1);","lastModifiedDate":"2021-08-18"},{"lineNumber":193,"author":{"gitId":"yourally2"},"content":"            printedList.append(String.format(\"%s. %s\\n\", index, this.taskArr.get(i)));","lastModifiedDate":"2021-08-18"},{"lineNumber":194,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":195,"author":{"gitId":"yourally2"},"content":"        // Remove the last newline","lastModifiedDate":"2021-08-18"},{"lineNumber":196,"author":{"gitId":"yourally2"},"content":"        return printedList.toString().trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":197,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":198,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"yourally2":198}},{"path":"src/main/java/duke/task/TimedToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.task;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" * TimedToDos are created by \u0027todo eat breakfast /for 2 hours\u0027.","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"public class TimedToDo extends Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027F\u0027;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    public static final String TIMED_TODO_DELIMITER \u003d \"/for\";","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_TIMED_TODO_MESSAGE \u003d \"Invalid use of timed todo command.\"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"            + \" Use \u0027todo \u003ctext\u003e /for \u003cduration\u003e\u0027\";","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_TIMED_TODO_MESSAGE \u003d \"Some arguments are missing. Use \u0027todo \u003ctext\u003e /for \u003cduration\u003e\u0027\";","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Timed todo save is given in the wrong format\";","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private String duration;","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"     * Constructor for the TimedToDo object.","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the TimedTodo.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * @param duration The amount of time.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the TimedTodo is finished.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    private TimedToDo(String text, String duration, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating a timed todo object.","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027todo\u0027 string.","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the Timed Todo is finished.","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     * @return A timed todo object.","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    public static TimedToDo createNewTimedTodo(String input, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        if (input.split(\" \").length \u003c 3) {","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_TIMED_TODO_MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"        String[] todoInfo \u003d input.split(TIMED_TODO_DELIMITER);","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"        if (todoInfo.length \u003c 2) {","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_TIMED_TODO_MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"        String duration \u003d todoInfo[1].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        String todoText \u003d todoInfo[0].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        return new TimedToDo(todoText, duration, isDone);","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating a timed todo object from taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027F |\u0027 string.","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"     * @return A Timed Todo object.","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given.","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"    public static TimedToDo createNewTimedTodoFromSave(String input) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 3) {","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"        String doneString \u003d inputArr[0].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        String todoText \u003d inputArr[1].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"        String todo \u003d inputArr[2].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"        return new TimedToDo(todoText, todo, doneString.equals(\"1\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the Timed Todo in taskList.txt","lastModifiedDate":"2021-09-15"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Timed Todo in taskList.txt","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s | %s\", SYMBOL, super.getDoneInt(), this.getText(),","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"                this.duration);","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the Timed Todo in console.","lastModifiedDate":"2021-09-15"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Timed Todo in console.","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[F]%s (for: %s)\", super.toString(), this.duration);","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"yourally2":90}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" * Event is created by \u0027todo eat breakfast\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" * Events are a type of Task.","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"    public static final char SYMBOL \u003d \u0027T\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    // Messages","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    private static final String MISSING_TODO_MESSAGE \u003d \"Please input text after the todo command\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_SAVE_MESSAGE \u003d \"Todo save is given in the wrong format\";","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"     * Acts as the constructor for the todo object.","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     * @param text The description of the todo","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     * @param isDone Whether the todo is finished","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    private ToDo(String text, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"        super(text, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating a todo object.","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining input after the initial \u0027todo\u0027 string","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     * @return A Todo object","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    public static ToDo createNewTodo(String input) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(MISSING_TODO_MESSAGE);","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        String todoText \u003d input.trim();","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"        return new ToDo(todoText, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"     * Acts as the factory method for creating a todo object from taskList.txt.","lastModifiedDate":"2021-09-15"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"     * @param input The remaining string after the \u0027T |\u0027 string.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"     * @return A Todo object","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown according to the message given","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"    public static ToDo createNewToDoFromSave(String input) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"        if (inputArr.length !\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_SAVE_MESSAGE);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        String doneString \u003d inputArr[0].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"        String text \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"        return new ToDo(text, doneString.equals(\"1\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the Todo in taskList.txt","lastModifiedDate":"2021-09-15"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the Todo in taskList.txt","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        return String.format(\"%c | %d | %s\", SYMBOL, super.getDoneInt(), this.getText());","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"     * Gets the format of the todo in console.","lastModifiedDate":"2021-09-15"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"     * @return The String format of the todo in console.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"        return String.format(\"[%c]%s\", SYMBOL, super.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":77}},{"path":"src/main/java/duke/util/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" * Represents a date and a time.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"public class DateTime {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    private static final String SAVE_FILE_FORMAT \u003d \"MMM dd yyyy hh.mm a\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    private static final String COMMAND_LINE_FORMAT \u003d \"yyyy-MM-dd HHmm\";","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"     * Acts as the constructor for DateTime object.","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"     * @param input the String with a date and time.","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    public DateTime(String input) throws DateTimeParseException {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"        dateTime \u003d LocalDateTime.parse(input, DateTimeFormatter.ofPattern(COMMAND_LINE_FORMAT));","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * Gets the string format for taskList.txt.","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @return The string format for taskList.txt.","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(COMMAND_LINE_FORMAT));","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"     * Outputs the DateTime in the following format.","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     * @return The DateTime in the following format.","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(SAVE_FILE_FORMAT));","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yourally2":44}},{"path":"src/main/java/duke/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":" * Class to handle exceptions.","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"     * Acts as the constructor for the exception.","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"     * @param error The error message of the exception.","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    public DukeException(String error) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"        super(error);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":15}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":" * Parser to take care of parsing input given by the user.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"     * Returns the string following the first word.","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"     * @param firstWord The word you want to exclude.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"     * @param input The string including the first word.","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"     * @return The remaining string.","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    public static String getRemainingText(String firstWord, String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        if (input.length() \u003e firstWord.length() + 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"            remainingText \u003d input.substring(firstWord.length() + 1).trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"        return remainingText;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     * Parses the input given and returns the appropriate Command.","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"     * @param input User input given.","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"     * @return A command based on the input given.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException An exception thrown when initialising the command.","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, input);","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        return Command.initialiseCommand(firstWord, remainingText);","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yourally2":37}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":" * Storage class for storing the TaskList in taskList.txt.","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    private static final String CREATE_FILE_ERROR \u003d \"An error occurred. Unable to create taskList file.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    private static final String FILE_NOT_FOUND_MESSAGE \u003d \"An error occurred. Unable to find file.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    private static final String INVALID_TASKLIST_MESSAGE \u003d \"Error reading taskLst. TaskList is probably invalid.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    private File taskFile;","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"     * Constructor for Storage.","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"        taskFile \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"        createOuterDirectory(taskFile);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"            taskFile.createNewFile();","lastModifiedDate":"2021-09-15"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"            System.out.println(CREATE_FILE_ERROR);","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"     * Copies the contents of the taskList into taskList.txt.","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"     * @param taskList the TaskList.","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    public void updateTaskListToFile(TaskList taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"            FileWriter fileWriter \u003d new FileWriter(taskFile, false);","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"            bufferedWriter.write(taskList.getSaveFormat());","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"            bufferedWriter.flush();","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"            System.out.println(\"Error writing task to file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"     * Copies taskList.txt into TaskList.","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"     * @param taskList the TaskList.","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException The exception to be thrown.","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    public void readTaskFile(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"            Scanner taskScanner \u003d new Scanner(this.taskFile);","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"            while (taskScanner.hasNextLine()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"                String taskLine \u003d taskScanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"                taskList.addSavedTask(taskLine);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"            taskScanner.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(FILE_NOT_FOUND_MESSAGE);","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        } catch (ArrayIndexOutOfBoundsException err) {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(INVALID_TASKLIST_MESSAGE);","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"     * Outputs a string representing the tasks in taskList.txt.","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"     * @return A string representing the tasks in taskList.txt.","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"     * @throws DukeException Exception to be handled.","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"    public String load() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"        StringBuilder taskList \u003d new StringBuilder();","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"            Scanner taskScanner \u003d new Scanner(this.taskFile);","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"            while (taskScanner.hasNextLine()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"                String taskLine \u003d taskScanner.nextLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"                taskList.append(taskLine).append(\"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"            taskScanner.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"            throw new DukeException(FILE_NOT_FOUND_MESSAGE);","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"        return taskList.toString();","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"     * Creates the outer directory. In this case the directory data.","lastModifiedDate":"2021-09-01"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"    private static void createOuterDirectory(File taskFile) {","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"        taskFile.getParentFile().mkdirs();","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"yourally2":100}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"package duke.util;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import static java.lang.Math.max;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":" * Class to handle the UI shown to the end user.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"public class Ui {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    /** Messages */","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    public static final String LIST_MESSAGE \u003d \"Here are the tasks in your list:\\n%s\";","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    public static final String NO_TASKS_IN_LIST_MESSAGE \u003d \"You have no tasks currently. Go create some!\";","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"    public static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n %s\";","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    public static final String INVALID_NUMBER \u003d \"Please input a valid task number\";","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"    public static final String TOO_MANY_ARGUMENTS_LIST_MESSAGE \u003d \"An argument after \u0027list\u0027 is not required. \"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"            + \"Just \u0027list\u0027 will do.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"    /** Errors */","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    public static final String MISSING_DELETE_NUMBER_MESSAGE \u003d \"Please input a number after the delete command\";","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"    public static final String MISSING_DONE_NUMBER_MESSAGE \u003d \"Please input a number after the done command\";","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    /** Properties of Message Box */","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"    private static final int BOX_LENGTH \u003d 120;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"    private static final int INDENT_LENGTH \u003d 4;","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"    private static final String INDENT \u003d \" \".repeat(INDENT_LENGTH);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"    /** Class Instance Members */","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"    private Scanner sc;","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"     * Acts as the constructor for Ui class.","lastModifiedDate":"2021-09-15"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"    public Ui() {","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"     * Prints a horizontal line to the console.","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"    private static void printHorizontalLine() {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        System.out.print(\"_\".repeat(BOX_LENGTH) + \"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"     * Displays the message in a text box.","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"     * Only used for tests and error messages handled before duke is initialised.","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"     * @param message The message to display.","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"    public static void displayMessage(String message) {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        printHorizontalLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"        String[] lineArr \u003d message.split(\"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"        // Print sides of the box","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"        for (String line : lineArr) {","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"            int remainingSpace \u003d max(BOX_LENGTH - line.length() - INDENT_LENGTH - 2, 0);","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"            System.out.println(\"|\" + INDENT + line + \" \".repeat(remainingSpace) + \"|\");","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        printHorizontalLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"     * Closes the scanner.","lastModifiedDate":"2021-09-15"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"    public void closeScanner() {","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"        sc.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"yourally2":70}},{"path":"src/main/resources/view/DukeDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"        \u003cLabel fx:id\u003d\"dukeDialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"duke-dialog-box\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" styleClass\u003d\"profile-pic\" fitHeight\u003d\"46.0\" fitWidth\u003d\"46.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    \u003cstylesheets\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        \u003cURL value\u003d\"@../css/index.css\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    \u003c/stylesheets\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"        \u003cTextField fx:id\u003d\"userInput\" styleClass\u003d\"user-input\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"        \u003cButton fx:id\u003d\"sendButton\" styleClass\u003d\"send-btn\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"chat-window\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"    \u003cstylesheets\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"        \u003cURL value\u003d\"@../css/index.css\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"    \u003c/stylesheets\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":23}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"        \u003cLabel fx:id\u003d\"userDialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"user-dialog-box\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" styleClass\u003d\"profile-pic\" fitHeight\u003d\"46.0\" fitWidth\u003d\"46.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"    \u003cstylesheets\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"        \u003cURL value\u003d\"@../css/index.css\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"    \u003c/stylesheets\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"yourally2":20}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"import duke.util.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"yourally2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"yourally2"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"yourally2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"yourally2"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"yourally2"},"content":"    public void taskList_addToDo_toDoAdded() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"todo make breakfast every morning\";","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, inputString);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"yourally2"},"content":"            ToDo myTodo \u003d ToDo.createNewTodo(remainingText);","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(taskList.addTask(myTodo));","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(err.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"yourally2"},"content":"        assertEquals(\"1. [T][ ] make breakfast every morning\", taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"yourally2"},"content":"    public void taskList_addDeadline_deadlineAdded() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"deadline make breakfast /by 0800\";","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, inputString);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"yourally2"},"content":"            Deadline myDeadline \u003d Deadline.createNewDeadline(remainingText, false);","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(taskList.addTask(myDeadline));","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(err.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"yourally2"},"content":"        assertEquals(\"1. [D][ ] make breakfast (by: 08.00 AM)\", taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"yourally2"},"content":"    public void taskList_addEvent_eventAdded() {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"event go to concert /at 0800\";","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"yourally2"},"content":"        String remainingText \u003d Parser.getRemainingText(firstWord, inputString);","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"yourally2"},"content":"            Event myEvent \u003d Event.createNewEvent(remainingText, false);","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(taskList.addTask(myEvent));","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(err.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"yourally2"},"content":"        assertEquals(\"1. [E][ ] go to concert (at: 08.00 AM)\", taskList.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"yourally2"},"content":"    private static final String INCOHERENT_INPUT_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"yourally2"},"content":"    public void command_initialiseCommand_illegalCommandExceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"yourally2"},"content":"        String inputString \u003d \"I don\u0027t know how to use Duke\";","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"yourally2"},"content":"        String actual \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"yourally2"},"content":"        String[] inputArr \u003d inputString.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"yourally2"},"content":"        String firstWord \u003d inputArr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"yourally2"},"content":"            Command.initialiseCommand(firstWord, \"\");","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"yourally2"},"content":"            actual \u003d err.getMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(err.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"yourally2"},"content":"        assertEquals(INCOHERENT_INPUT_MESSAGE, actual);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"yourally2"},"content":"    private static final String OUTER_DIR \u003d \"data\";","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"yourally2"},"content":"    private static final String FILE \u003d \"taskList.txt\";","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"yourally2"},"content":"    private static final String[] FILE_PATH_ARR \u003d  {\".\", OUTER_DIR , FILE};","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"yourally2"},"content":"    public void storage_updateTaskListToFile_fileUpdated() {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"yourally2"},"content":"        Storage myStorage \u003d new Storage(Paths.get(OUTER_DIR, FILE));","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"yourally2"},"content":"            taskList.addTask(ToDo.createNewTodo(\"eat lunch\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"yourally2"},"content":"            myStorage.updateTaskListToFile(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"yourally2"},"content":"            Scanner taskScanner \u003d new Scanner(new File(String.join(File.separator, FILE_PATH_ARR)));","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"yourally2"},"content":"            String taskLine \u003d taskScanner.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"yourally2"},"content":"            taskScanner.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"yourally2"},"content":"            assertEquals(\"T | 0 | eat lunch\", taskLine);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"yourally2"},"content":"        } catch (DukeException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"yourally2"},"content":"            System.out.println(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(\"An error occurred. Unable to find file.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"yourally2"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"yourally2"},"content":"    public void storage_readTaskFile_fileRead() {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"yourally2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"yourally2"},"content":"        Storage myStorage \u003d new Storage(Paths.get(OUTER_DIR, FILE));","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"yourally2"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"yourally2"},"content":"            FileWriter fileWriter \u003d new FileWriter(String.join(File.separator, FILE_PATH_ARR), false);","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"yourally2"},"content":"            fileWriter.write(\"T | 0 | eat lunch\");","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"yourally2"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"yourally2"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"yourally2"},"content":"            myStorage.readTaskFile(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"yourally2"},"content":"            assertEquals(\"T | 0 | eat lunch\", taskList.getSaveFormat());","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"yourally2"},"content":"            // Clear the file after use","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"yourally2"},"content":"            FileWriter fileWriterClearFile \u003d new FileWriter(String.join(File.separator, FILE_PATH_ARR), false);","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"yourally2"},"content":"            fileWriterClearFile.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"yourally2"},"content":"        } catch (FileNotFoundException | DukeException err) {","lastModifiedDate":"2021-09-11"},{"lineNumber":130,"author":{"gitId":"yourally2"},"content":"            Ui.displayMessage(\"An error occurred. Unable to find file.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"yourally2"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"yourally2"},"content":"            System.out.println(err.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"yourally2"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"yourally2"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"yourally2"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"yourally2":135}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yourally2"},"content":"todo eat lunch","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"yourally2"},"content":"deadline finish assignment /by Dec 20th","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"yourally2"},"content":"event eat food party /at Aug 20th 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"yourally2"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"yourally2"},"content":"todo eat dinner","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"yourally2"},"content":"todo find friends","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"yourally2"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"yourally2"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"yourally2"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"yourally2"},"content":"blah","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"yourally2"},"content":"toijoijdo","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"yourally2"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"yourally2"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"yourally2"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"yourally2":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"yourally2"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yourally2":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"yourally2"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"yourally2"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yourally2":2,"-":36}}]

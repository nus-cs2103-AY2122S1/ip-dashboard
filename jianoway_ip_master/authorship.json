[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"# InferiorDuke","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"Welcome, ***stalker***, to my *personal* rendition of ~~Duke~~ aka InferiorDuke, where I try to follow requirements for my iP in hopes of passing this module!","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"\u003e \"If it ain\u0027t broke, don\u0027t fix it\" - Thomas Bertram Lance ([Source](https://digital.hagley.org/Nationbiz_197705#page/30/mode/2up))","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"# Features","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"As this is a work in progress, most of the features currently available are still being worked upon with many more planned for the future!","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"## Available Features ‚úîÔ∏è","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"* Able to add 3 different types of tasks (Event, Deadline and ToDo)","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"* View your Task list with the list command, with your tasks stored locally on your computer","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"* Mark tasks as done or undone with the done and undo commands","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"* Delete tasks from the Task list","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"## Upcoming Key Features üìù","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"1. Implement Graphical User Interface (GUI) ","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"2. Implement Gradle","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"3. Add JavaDocs to all public methods availble","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"## Additional Optionals","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"- [X] Add JavaDocs to all public methods","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"- [ ] All code 100% CheckStyle","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"- [ ] Make cute logo for InferiorDuke","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"# Code Quality","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"Hopefully, my code is in accordance to the quality acceptable by our tutors and professors. An sample would be as follows:","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"```java","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"## Errors","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"One thing you might notice about my code is that I chose to create my errors as DukeErrors as seen below:","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"```java","lastModifiedDate":"2021-09-03"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    public class DukeException extends Exception","lastModifiedDate":"2021-09-03"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"```","lastModifiedDate":"2021-09-03"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"I used to use DukeErrors as an enumeration but I decided that making it extend the Exception class would make the flow of logic cleaner.","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"-":5,"jianoway":43}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"plugins {","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"repositories {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    mavenCentral()","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"dependencies {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.1\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"test {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    testLogging {","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        showExceptions true","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        showCauses true","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        showStackTraces true","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"application {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    mainClassName \u003d \"duke.launcher.Launcher\"","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"shadowJar {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"checkstyle {","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"run{","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jianoway":60}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"T_~_1_~_Water Plants","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"D_~_0_~_Submit iP UG_~_12/09/2021","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"E_~_0_~_Tom\u0027s Birthday_~_21/12/2021","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"jianoway":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"# InferiorDuke","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"Welcome, ***stalker***, to my *personal* rendition of ~~Duke~~ aka InferiorDuke, the task list bot more insecure than you!","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"Please be patient with him as he\u0027s kind of slow and stupid, and sometimes he doesn\u0027t perform things that he should but with enough patient, love and warmth, InferiorDuke will one day flourish into the beautiful flower he can be!","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"\u003e \"If it ain\u0027t broke, don\u0027t fix it\" - Thomas Bertram Lance ([Source](https://digital.hagley.org/Nationbiz_197705#page/30/mode/2up))","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"# Table of Contents","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"  - [Adding Tasks](#adding-tasks)","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    - [ToDo](#todo)","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    - [Deadline](#deadline)","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    - [Event](#event)","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"  - [Viewing the Task List](#viewing-the-task-list)","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"  - [Editing the Task List](#editing-the-task-list)","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    - [Mark as Done](#mark-as-done)","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    - [Undo Task](#undo-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    - [Delete Task](#delete-task)","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"  - [Exiting InferiorDuke](#exiting-inferiorduke)","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"# Features ‚úîÔ∏è","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"InferiorDuke is a task list bot that can help you track up to 3 different types of tasks: ToDos, Events and Deadlines.","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"## Adding Tasks","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"As mentioned above, there are three types of tasks and each will be added to your task list differently!","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"### ToDo üóíÔ∏è","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"A task without a set date for completion and can be added with the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    todo \u003cDescription\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"### Deadline ‚è∞","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"A task with a set date for completion and can be added with the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    ","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    deadline \u003cDescription\u003e /by \u003cDate\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"### Event ü•≥","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"An event is an occurrence at a certain time and can be added with the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    event \u003cDescription\u003e /at \u003cDate\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"## Viewing the Task List","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"InferiorDuke is able to display the tasks in your task list with the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    list","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"---","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"## Editing the Task List","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"In order to edit entries in the task list, you have to use the following commands with respect to the position of the task you wish to edit in the task list.","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"### Mark as Done","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"You can mark a task as done with the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"    done \u003cIndex\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"### Undo Task","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"You can mark a task as undone with the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"    undo \u003cIndex\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"### Delete Task","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"You can delete a task from the task list with the following command:","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"    delete \u003cIndex\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"--- ","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"## Exiting InferiorDuke","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"You can exit program by running the following command:","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"    bye    ","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"-":13,"jianoway":78}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"@rem limitations under the License.","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"@rem","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"@rem Find java.exe","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"echo.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"echo.","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"goto fail","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":":findJavaFromJavaHome","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"echo.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"echo.","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"goto fail","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":":execute","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"@rem Setup the command line","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"@rem Execute Gradle","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":":end","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":":fail","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"exit /b 1","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":":mainEnd","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":":omega","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jianoway":89}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    private Response response;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    private String filePath \u003d \"data/duke.txt\";","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * Constructor for the Duke object.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public Duke() {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        response \u003d new Response();","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"Invalid file path.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        Command c \u003d Parser.parse(input, tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        return c.execute(tasks, response, storage);","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"-":1,"jianoway":37}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"            stage.show();","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":33}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * The AddCommand class extends the Command class and is the Command that","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * adds a Task to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /** The Task being added by the Command. */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private Task taskToAdd;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * The constructor for the AddCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param task The Task to be added to the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        super(CommandType.ADD, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        this.taskToAdd \u003d task;","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when a","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"     * Task is added to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param response The Ui object to interact with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        storage.addToStorage(taskToAdd);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        tasks.addToTaskList(taskToAdd);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        return response.showAddTaskMessage(taskToAdd, tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":40}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This abstract class provides the framework for Commands to be implemented.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    /** The boolean that determines if a Command terminates the user interaction. */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    /** The Command type for the object in question. */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    private CommandType commandType;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * The constructor for the Command object.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @param commandType The Command type","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     * @param isExit Boolean if its terminating or not","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public Command(CommandType commandType, boolean isExit) {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    /** The execute method to be implemented by the Commands. */","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    public abstract String execute(TaskList tasks, Response response, Storage storage);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    /** The types of Commands. */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        ADD,","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        DELETE,","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        DONE,","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        UNDO,","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        ERROR,","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        EXIT,","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        LIST,","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        SEARCH,","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        SORT","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    /** Checks if the Command is terminating. */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        return isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"     * This method gets the Command type of the object.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"     * @return The Command\u0027s type","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    public CommandType getCommandType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        return this.commandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":60}},{"path":"src/main/java/duke/commands/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * The EditCommand class extends the Command class and is the Command that","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * edits a Task to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /** The line to be edited. */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private int lineNumber;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EditCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param commandType The Command type","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param lineNumber The line to be edited","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    public EditCommand(CommandType commandType, int lineNumber) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        super(commandType, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        this.lineNumber \u003d lineNumber;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    * The execute command that executes the necessary actions when a Task","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    * is edited in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    * @param response The Ui object to interact with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        Task editedTask \u003d tasks.editTaskList(lineNumber, this.getCommandType());","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        storage.editStorage(lineNumber, this.getCommandType());","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        return response.showEditTaskMessage(editedTask, this.getCommandType(), tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":41}},{"path":"src/main/java/duke/commands/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.errors.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * The ErrorCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public class ErrorCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /** The error code. */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private final DukeException dukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * The constructor for the ErrorCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param dukeException The error code","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public ErrorCommand(DukeException dukeException) {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        super(CommandType.ERROR, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        this.dukeException \u003d dukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when an","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"     * error is issued.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param response The Ui object to interact with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"            throw this.dukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"            return response.showError(e);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":42}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * The ExitCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    /** The constructor for the ExitCommand object. */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        super(CommandType.EXIT, true);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    * The execute command that executes the necessary actions when issued with the Exit Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    * @param response The Ui object to interact with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        return response.showExitMessage();","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":29}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * The ListCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    /** The constructor for the ListCommand object. */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        super(CommandType.LIST, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when issued with the List Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @param response The Ui object to interact with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        return response.showTaskList(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":28}},{"path":"src/main/java/duke/commands/SearchCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * The SearchCommand class extends the Command class and is the Command that searches","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * for a Task in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"public class SearchCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    /** The String to be searched for in the Tasks in the TaskList. */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    private String searchString;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * The constructor for the SearchCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @param searchString The String being searched for","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    public SearchCommand(String searchString) {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        super(CommandType.SEARCH, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        this.searchString \u003d searchString;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when issued with the Search Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * @param response The Ui object to interact with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e listFound \u003d tasks.searchTaskList(this.searchString, tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        return response.showSearchMessage(listFound);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":42}},{"path":"src/main/java/duke/commands/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Response;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * The ListCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    /** The constructor for the ListCommand object. */","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    public SortCommand() {","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        super(CommandType.SORT, false);","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when issued with the List Command.","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @param response The Ui object to interact with the user","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        tasks.sort();","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        storage.updateWithTaskList(tasks);","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        return response.showTaskList(tasks);","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"jianoway":30}},{"path":"src/main/java/duke/errors/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"/** The abstract class to be extended by the DukeException subclasses. */","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"    /** The error code. */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    private final int errorCode;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"     * The constructor for the DukeException.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     * @param errorCode The error code","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    protected DukeException (int errorCode) {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        assert -1 \u003c\u003d errorCode : \"Invalid error code~\";","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        this.errorCode \u003d errorCode;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    public abstract String getErrorDescription();","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * Gets the error message of the DukeError object.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     * @return The error code","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    public int getErrorCode() {","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        return this.errorCode;","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    public String getMessage() {","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        final String dukeErrorString \u003d \"DukeError \";","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        return dukeErrorString + this.getErrorCode() + \": \" + this.getErrorDescription();","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":35}},{"path":"src/main/java/duke/errors/EmptyDeadlineDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptyDeadlineDateException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptyDeadlineDateException object.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptyDeadlineDateException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(4);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Your deadline is missing a date.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EmptyDeadlineDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptyDeadlineDescriptionException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptyDeadlineDescriptionException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptyDeadlineDescriptionException() {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(3);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Empty descriptions for Deadlines are not allowed!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EmptyEventDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptyEventDateException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptyEventDateException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptyEventDateException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(6);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Your event is missing a date.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EmptyEventDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptyEventDescriptionException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptyEventDescriptionException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptyEventDescriptionException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(5);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Empty descriptions for Events are not allowed!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EmptyListNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptyListNumberException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptyListNumberException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptyListNumberException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(7);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please indicate which item on your list you would like to modify.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EmptySearchStringException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptySearchStringException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptySearchStringException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptySearchStringException() {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(14);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please key in something for me to find!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EmptyToDoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EmptyToDoDescriptionException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EmptyToDoDescriptionException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EmptyToDoDescriptionException() {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(2);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Empty descriptions for ToDos are not allowed!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/EscapeCharacterException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class EscapeCharacterException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EscapeCharacterException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public EscapeCharacterException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(0);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please do not use the \\\\n in your input as it makes me sad. ):\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the InvalidCommandException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public InvalidCommandException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(-1);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Unrecognised command detected. Please try again.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/InvalidDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class InvalidDateFormatException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the InvalidDateFormatException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public InvalidDateFormatException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(12);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Invalid date. Please use the dd-mm-yyyy convention!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/InvalidListNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class InvalidListNumberException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the InvalidListNumberException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public InvalidListNumberException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(9);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please use a valid list number!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/ListFullException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class ListFullException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the ListFullException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public ListFullException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(10);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"The list is full, \"","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"            + \"please remove an existing Task before trying to add a new Task.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":20}},{"path":"src/main/java/duke/errors/PollutedExitCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class PollutedExitCommandException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the PollutedExitCommandException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public PollutedExitCommandException() {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(13);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please only type \u0027bye\u0027 to exit\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/PollutedListCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class PollutedListCommandException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the PollutedListCommandException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public PollutedListCommandException() {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(1);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please only type \u0027list\u0027 to view the task list.\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/PollutedSortCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class PollutedSortCommandException extends DukeException {","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the PollutedListCommandException.","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public PollutedSortCommandException() {","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(15);","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please only type \u0027sort\u0027 to sort task list.\";","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/SeparatorInStringException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class SeparatorInStringException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the SeparatorInStringException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public SeparatorInStringException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(11);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Please do not use \u0027_~_\u0027 in your input as it breaks me! ):\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/errors/TooManyInputsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class TooManyInputsException extends DukeException {","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    private final String errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * The constructor for the TooManyInputsException.","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public TooManyInputsException () {","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(8);","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.errorDescription \u003d \"Too many inputs!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public String getErrorDescription() {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        return this.errorDescription;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"jianoway":19}},{"path":"src/main/java/duke/launcher/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.launcher;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.Main;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"public class Launcher {","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":13}},{"path":"src/main/java/duke/parser/Cleaner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":" * The Cleaner class helps to validate user input as we are working","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":" * off the assumption that all user input is evil.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"public class Cleaner {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"     * This method takes in the user input and cleans it so that we are","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     * better able to control the output of our parser. It also helps to","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     * prevent malicious code that would possibly break Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned command String","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    public String clean(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        final String blank \u003d \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        final String escapeCharacterErrorMessage \u003d \"ESCAPE_CHARACTER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        final String separatorInStringErrorMessage \u003d \"SEPARATOR_IN_STRING_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        final String invalidCommandErrorMessage \u003d \"INVALID_COMMAND_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.length() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"            return blank;","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.contains(\"\\n\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"            return escapeCharacterErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.contains(\"_~_\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"            return separatorInStringErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        String[] stringArray \u003d fullCommand.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        String firstWord \u003d stringArray[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        switch (firstWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        case \"list\":","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"            return listCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"            return todoCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"            return deadlineCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        case \"event\":","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"            return eventCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        case \"done\":","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"            return markDoneCleaner(fullCommand, currentCapacity);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        case \"undo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"            return markUndoCleaner(fullCommand, currentCapacity);","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"            return deleteCleaner(fullCommand, currentCapacity);","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"            return byeCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"            return findCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        case \"sort\":","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"            return sortCleaner(fullCommand);","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"            return invalidCommandErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the find command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned find command","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    private String findCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        final String emptySearchStringErrorMessage \u003d \"EMPTY_SEARCH_STRING_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        final String findString \u003d \"find \";","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"            return emptySearchStringErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        String searchString \u003d fullCommand.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        return findString + searchString.strip();","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the list command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned list command","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    private String listCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        final String errorMessage \u003d \"POLLUTED_LIST_COMMAND_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        final String listString \u003d \"list\";","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003e\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"            return errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"            return listString;","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the bye command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned bye command","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"    private String byeCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"        final String errorMessage \u003d \"POLLUTED_EXIT_COMMAND_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"        final String byeString \u003d \"bye\";","lastModifiedDate":"2021-09-07"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003e 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"            return errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"            return byeString;","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the sort command and flags errors if found.","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned sort command","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"    private String sortCleaner(String fullCommand) {","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"        final String errorMessage \u003d \"POLLUTED_SORT_COMMAND_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"        final String sortString \u003d \"sort\";","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003e\u003d 5) {","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"            return errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"            return sortString;","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the todo command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned todo command","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"    public static String todoCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"        final String errorMessage \u003d \"EMPTY_TODO_DESCRIPTION_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003c 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"            return errorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"            return fullCommand.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the list command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned list command","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"    public static String deadlineCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":"        final String emptyDescriptionErrorMessage \u003d \"EMPTY_DEADLINE_DESCRIPTION_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"        final String emptyDateErrorMessage \u003d \"EMPTY_DEADLINE_DATE_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"        final String invalidDateErrorMessage \u003d \"INVALID_DATE_FORMAT_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.split(\"/by\")[0].strip().length() \u003d\u003d 8) {","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":"            return emptyDescriptionErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"        } else if (!fullCommand.contains(\"/by\")","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/by\").length \u003c 2","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/by\")[1].strip().length() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":"            return emptyDateErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"            if (CustomDateFormatter.getLocalDateFromString(fullCommand.split(\"/by\")[1].strip()) \u003d\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"                return invalidDateErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":156,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"jianoway"},"content":"            return fullCommand.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the list command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned list command","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"jianoway"},"content":"    public static String eventCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"jianoway"},"content":"        final String emptyDescriptionErrorMessage \u003d \"EMPTY_EVENT_DESCRIPTION_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":169,"author":{"gitId":"jianoway"},"content":"        final String emptyDateErrorMessage \u003d \"EMPTY_EVENT_DATE_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":170,"author":{"gitId":"jianoway"},"content":"        final String invalidDateErrorMessage \u003d \"INVALID_DATE_FORMAT_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":171,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.split(\"/at\")[0].strip().length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"jianoway"},"content":"            return emptyDescriptionErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":173,"author":{"gitId":"jianoway"},"content":"        } else if (!fullCommand.contains(\"/at\")","lastModifiedDate":"2021-08-26"},{"lineNumber":174,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/at\").length \u003c 2","lastModifiedDate":"2021-08-26"},{"lineNumber":175,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/at\")[1].strip().length() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"jianoway"},"content":"            return emptyDateErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":177,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"jianoway"},"content":"            if (CustomDateFormatter.getLocalDateFromString(fullCommand.split(\"/at\")[1].strip()) \u003d\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"jianoway"},"content":"                return invalidDateErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":180,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":181,"author":{"gitId":"jianoway"},"content":"            return fullCommand.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the done command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":188,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":189,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":190,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned done command","lastModifiedDate":"2021-08-26"},{"lineNumber":191,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":192,"author":{"gitId":"jianoway"},"content":"    public static String markDoneCleaner(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":193,"author":{"gitId":"jianoway"},"content":"        final String emptyIndexErrorMessage \u003d \"EMPTY_LIST_NUMBER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":194,"author":{"gitId":"jianoway"},"content":"        final String tooManyInputsErrorMessage \u003d \"TOO_MANY_INPUTS_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":195,"author":{"gitId":"jianoway"},"content":"        final String invalidIndexErrorMessage \u003d \"INVALID_LIST_NUMBER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":196,"author":{"gitId":"jianoway"},"content":"        final String doneString \u003d \"done \";","lastModifiedDate":"2021-09-07"},{"lineNumber":197,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().split(\" \").length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"jianoway"},"content":"            return emptyIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":199,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.strip().split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"jianoway"},"content":"            return tooManyInputsErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":201,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"jianoway"},"content":"            String digit \u003d fullCommand.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"jianoway"},"content":"            char[] chars \u003d digit.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"jianoway"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":205,"author":{"gitId":"jianoway"},"content":"            for (char c : chars) {","lastModifiedDate":"2021-08-26"},{"lineNumber":206,"author":{"gitId":"jianoway"},"content":"                if (Character.isDigit(c)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":207,"author":{"gitId":"jianoway"},"content":"                    sb.append(c);","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":209,"author":{"gitId":"jianoway"},"content":"                    return invalidIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":210,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":211,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":212,"author":{"gitId":"jianoway"},"content":"            Integer intToCheck \u003d Integer.parseInt(sb.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":213,"author":{"gitId":"jianoway"},"content":"            if (intToCheck \u003e currentCapacity","lastModifiedDate":"2021-08-26"},{"lineNumber":214,"author":{"gitId":"jianoway"},"content":"                    || intToCheck \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":215,"author":{"gitId":"jianoway"},"content":"                return invalidIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":216,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":217,"author":{"gitId":"jianoway"},"content":"                intToCheck -\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":218,"author":{"gitId":"jianoway"},"content":"                return doneString + intToCheck;","lastModifiedDate":"2021-09-07"},{"lineNumber":219,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":220,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":221,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":222,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":223,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":224,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the undo command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":225,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":226,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":227,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":228,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned undo command","lastModifiedDate":"2021-08-26"},{"lineNumber":229,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":230,"author":{"gitId":"jianoway"},"content":"    public static String markUndoCleaner(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":231,"author":{"gitId":"jianoway"},"content":"        final String emptyIndexErrorMessage \u003d \"EMPTY_LIST_NUMBER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":232,"author":{"gitId":"jianoway"},"content":"        final String tooManyInputsErrorMessage \u003d \"TOO_MANY_INPUTS_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":233,"author":{"gitId":"jianoway"},"content":"        final String invalidIndexErrorMessage \u003d \"INVALID_LIST_NUMBER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":234,"author":{"gitId":"jianoway"},"content":"        final String undoString \u003d \"undo \";","lastModifiedDate":"2021-09-07"},{"lineNumber":235,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().split(\" \").length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":236,"author":{"gitId":"jianoway"},"content":"            return emptyIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":237,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.strip().split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":238,"author":{"gitId":"jianoway"},"content":"            return tooManyInputsErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":239,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":240,"author":{"gitId":"jianoway"},"content":"            String digit \u003d fullCommand.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":241,"author":{"gitId":"jianoway"},"content":"            char[] chars \u003d digit.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":242,"author":{"gitId":"jianoway"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":243,"author":{"gitId":"jianoway"},"content":"            for (char c : chars) {","lastModifiedDate":"2021-08-26"},{"lineNumber":244,"author":{"gitId":"jianoway"},"content":"                if (Character.isDigit(c)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":245,"author":{"gitId":"jianoway"},"content":"                    sb.append(c);","lastModifiedDate":"2021-08-26"},{"lineNumber":246,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":247,"author":{"gitId":"jianoway"},"content":"                    return invalidIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":248,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":249,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":250,"author":{"gitId":"jianoway"},"content":"            Integer intToCheck \u003d Integer.parseInt(sb.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":251,"author":{"gitId":"jianoway"},"content":"            if (intToCheck \u003e currentCapacity","lastModifiedDate":"2021-08-26"},{"lineNumber":252,"author":{"gitId":"jianoway"},"content":"                    || intToCheck \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":253,"author":{"gitId":"jianoway"},"content":"                return invalidIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":254,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":255,"author":{"gitId":"jianoway"},"content":"                intToCheck -\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":256,"author":{"gitId":"jianoway"},"content":"                return undoString + intToCheck;","lastModifiedDate":"2021-09-07"},{"lineNumber":257,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":258,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":259,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":260,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":261,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":262,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the delete command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":263,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":264,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":265,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":266,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned delete command","lastModifiedDate":"2021-08-26"},{"lineNumber":267,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":268,"author":{"gitId":"jianoway"},"content":"    public static String deleteCleaner(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":269,"author":{"gitId":"jianoway"},"content":"        final String emptyIndexErrorMessage \u003d \"EMPTY_LIST_NUMBER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":270,"author":{"gitId":"jianoway"},"content":"        final String tooManyInputsErrorMessage \u003d \"TOO_MANY_INPUTS_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":271,"author":{"gitId":"jianoway"},"content":"        final String invalidIndexErrorMessage \u003d \"INVALID_LIST_NUMBER_EXCEPTION\";","lastModifiedDate":"2021-09-07"},{"lineNumber":272,"author":{"gitId":"jianoway"},"content":"        final String deleteString \u003d \"delete \";","lastModifiedDate":"2021-09-07"},{"lineNumber":273,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().split(\" \").length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":274,"author":{"gitId":"jianoway"},"content":"            return emptyIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":275,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.strip().split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":276,"author":{"gitId":"jianoway"},"content":"            return tooManyInputsErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":277,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":278,"author":{"gitId":"jianoway"},"content":"            String digit \u003d fullCommand.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":279,"author":{"gitId":"jianoway"},"content":"            char[] chars \u003d digit.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":280,"author":{"gitId":"jianoway"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":281,"author":{"gitId":"jianoway"},"content":"            for (char c : chars) {","lastModifiedDate":"2021-08-26"},{"lineNumber":282,"author":{"gitId":"jianoway"},"content":"                if (Character.isDigit(c)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":283,"author":{"gitId":"jianoway"},"content":"                    sb.append(c);","lastModifiedDate":"2021-08-26"},{"lineNumber":284,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":285,"author":{"gitId":"jianoway"},"content":"                    return invalidIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":286,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":287,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":288,"author":{"gitId":"jianoway"},"content":"            Integer intToCheck \u003d Integer.parseInt(sb.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":289,"author":{"gitId":"jianoway"},"content":"            if (intToCheck \u003e currentCapacity","lastModifiedDate":"2021-08-26"},{"lineNumber":290,"author":{"gitId":"jianoway"},"content":"                    || intToCheck \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":291,"author":{"gitId":"jianoway"},"content":"                return invalidIndexErrorMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":292,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":293,"author":{"gitId":"jianoway"},"content":"                intToCheck -\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":294,"author":{"gitId":"jianoway"},"content":"                return deleteString + intToCheck;","lastModifiedDate":"2021-09-07"},{"lineNumber":295,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":296,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":297,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":298,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":298}},{"path":"src/main/java/duke/parser/CustomDateFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"// The code below was referenced from","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"// https://stackoverflow.com/questions/23488721/how-to-check-if-string-matches-date-pattern-using-time-api","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * This class helps to format some common possible String inputs for dates","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" * to parse them as LocalDate objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"public class CustomDateFormatter {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /** The array of common patterns with time. */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    private final String[] patternsWithTime \u003d new String[] {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        \"dd-mm-yyyy HH:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        \"dd-mm-yyyy hh:mm:ss.s\",","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        \"yyyy-mm-dd hh:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        \"yyyy-mm-dd hh:mm:ss.s\",","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        \"MMM dd yyyy HH:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        \"dd MMM yyyy HH:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    };","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    /** The array of common patterns without time. */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    private final String[] patternsWithoutTime \u003d new String[] {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        \"dd/MM/yyyy\",","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        \"dd/mm/yyyy\",","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        \"dd MMM yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        \"dd-mm-yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        \"dd-mm-yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        \"dd-MM-yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        \"dd mm yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        \"dd mm yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        \"dd MM yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        \"dd/mm/yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        \"dd.mm.yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        \"dd.mm.yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        \"dd.MM.yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        \"dd/M/yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        \"yyyy-mm-dd\",","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    };","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     * This method helps to get the LocalDate object from a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @param str The string to be formatted","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    public static LocalDate getLocalDateFromString(String str) {","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        CustomDateFormatter formatter \u003d new CustomDateFormatter();","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        return formatter.formatWithoutTime(str);","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"     * This method helps to get the LocalDateTime object from a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"     * @param text The string to be formatted","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"    public LocalDateTime formatWithTime(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        for (String pattern: patternsWithTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"                return LocalDateTime.parse(text, DateTimeFormatter.ofPattern(pattern));","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"                System.out.println(\"Invalid date time exception caught!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * This method helps to get the LocalDate object from a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     * @param text The string to be formatted","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    public LocalDate formatWithoutTime(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        for (String pattern: patternsWithoutTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"                return LocalDate.parse(text, DateTimeFormatter.ofPattern(pattern));","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"                System.out.println(\"Invalid date time exception caught!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"        return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":93}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import duke.commands.EditCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import duke.commands.ErrorCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import duke.commands.SearchCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"import duke.commands.SortCommand;","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptyDeadlineDateException;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptyDeadlineDescriptionException;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptyEventDateException;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptyEventDescriptionException;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptyListNumberException;","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptySearchStringException;","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"import duke.errors.EmptyToDoDescriptionException;","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"import duke.errors.EscapeCharacterException;","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"import duke.errors.InvalidCommandException;","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"import duke.errors.InvalidDateFormatException;","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"import duke.errors.InvalidListNumberException;","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"import duke.errors.ListFullException;","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"import duke.errors.PollutedExitCommandException;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"import duke.errors.PollutedListCommandException;","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"import duke.errors.PollutedSortCommandException;","lastModifiedDate":"2021-09-07"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"import duke.errors.SeparatorInStringException;","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"import duke.errors.TooManyInputsException;","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":" * This class helps to parse the cleaned user input after the input validation process to produce the","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":" * appropriate Command object for execution.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"     * This command parses the clean user input to produce the appropriate","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"     * Command object.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     * @param taskList The current TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    public static Command parse(String fullCommand, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        Cleaner cl \u003d new Cleaner();","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"        String cleanCommand \u003d cl.clean(fullCommand, taskList.getCapacity());","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        assert !cleanCommand.isBlank() : \"Command is blank!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        String firstWord \u003d cleanCommand.split(\" \")[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        switch (firstWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        case \"list\":","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"            return todoParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"            return deadlineParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        case \"event\":","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"            return eventParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        case \"done\":","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"            return markDoneParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        case \"undo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"            return markUndoParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"            return deleteParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"            return findParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        case \"sort\":","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"            return new SortCommand();","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"            assert !firstWord.equals(\"error\") : \"Invalid fallthrough.\";","lastModifiedDate":"2021-09-06"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"            return errorParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the find Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    public static Command findParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        String searchString \u003d input.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"        return new SearchCommand(searchString);","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the todo Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"    public static Command todoParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"        String description \u003d input.substring(5).strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"        assert !description.isBlank() : \"Description is blank!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"        return new AddCommand(new ToDo(description));","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the event Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"    public static Command eventParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"        String withoutEvent \u003d input.substring(6).strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"        String[] eventArray \u003d withoutEvent.split(\"/at\");","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"        String description \u003d eventArray[0].strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"        assert !description.isBlank() : \"Description is blank!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"        LocalDate date \u003d CustomDateFormatter.getLocalDateFromString(eventArray[1].strip());","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"        return new AddCommand(new Event(description, date));","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the deadline Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"    public static Command deadlineParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"        String withoutDeadline \u003d input.substring(9).strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"        String[] deadlineArray \u003d withoutDeadline.split(\"/by\");","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"        String description \u003d deadlineArray[0].strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"        assert !description.isBlank() : \"Description is blank!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"        LocalDate date \u003d CustomDateFormatter.getLocalDateFromString(deadlineArray[1].strip());","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"        return new AddCommand(new Deadline(description, date));","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the done Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"    public static Command markDoneParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"        int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":"        return new EditCommand(CommandType.DONE, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the undo Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"jianoway"},"content":"    public static Command markUndoParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"jianoway"},"content":"        int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"jianoway"},"content":"        return new EditCommand(CommandType.UNDO, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the delete Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"jianoway"},"content":"    public static Command deleteParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"jianoway"},"content":"        int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"jianoway"},"content":"        return new EditCommand(CommandType.DELETE, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":174,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the error Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":175,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"jianoway"},"content":"     * @param errorParse The cleaned user input","lastModifiedDate":"2021-09-01"},{"lineNumber":177,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"jianoway"},"content":"    public static Command errorParser(String errorParse) {","lastModifiedDate":"2021-09-01"},{"lineNumber":180,"author":{"gitId":"jianoway"},"content":"        switch (errorParse) {","lastModifiedDate":"2021-09-01"},{"lineNumber":181,"author":{"gitId":"jianoway"},"content":"        case \"INVALID_COMMAND_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":182,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new InvalidCommandException());","lastModifiedDate":"2021-09-01"},{"lineNumber":183,"author":{"gitId":"jianoway"},"content":"        case \"ESCAPE_CHARACTER_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":184,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EscapeCharacterException());","lastModifiedDate":"2021-09-01"},{"lineNumber":185,"author":{"gitId":"jianoway"},"content":"        case \"POLLUTED_LIST_COMMAND_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":186,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new PollutedListCommandException());","lastModifiedDate":"2021-09-01"},{"lineNumber":187,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_TODO_DESCRIPTION_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":188,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptyToDoDescriptionException());","lastModifiedDate":"2021-09-01"},{"lineNumber":189,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_DEADLINE_DESCRIPTION_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":190,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptyDeadlineDescriptionException());","lastModifiedDate":"2021-09-01"},{"lineNumber":191,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_DEADLINE_DATE_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":192,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptyDeadlineDateException());","lastModifiedDate":"2021-09-01"},{"lineNumber":193,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_EVENT_DESCRIPTION_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":194,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptyEventDescriptionException());","lastModifiedDate":"2021-09-01"},{"lineNumber":195,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_EVENT_DATE_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":196,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptyEventDateException());","lastModifiedDate":"2021-09-01"},{"lineNumber":197,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_LIST_NUMBER_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":198,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptyListNumberException());","lastModifiedDate":"2021-09-01"},{"lineNumber":199,"author":{"gitId":"jianoway"},"content":"        case \"TOO_MANY_INPUTS_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":200,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new TooManyInputsException());","lastModifiedDate":"2021-09-01"},{"lineNumber":201,"author":{"gitId":"jianoway"},"content":"        case \"INVALID_LIST_NUMBER_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":202,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new InvalidListNumberException());","lastModifiedDate":"2021-09-01"},{"lineNumber":203,"author":{"gitId":"jianoway"},"content":"        case \"LIST_FULL_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":204,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new ListFullException());","lastModifiedDate":"2021-09-01"},{"lineNumber":205,"author":{"gitId":"jianoway"},"content":"        case \"SEPARATOR_IN_STRING_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":206,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new SeparatorInStringException());","lastModifiedDate":"2021-09-01"},{"lineNumber":207,"author":{"gitId":"jianoway"},"content":"        case \"INVALID_DATE_FORMAT_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":208,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new InvalidDateFormatException());","lastModifiedDate":"2021-09-01"},{"lineNumber":209,"author":{"gitId":"jianoway"},"content":"        case \"POLLUTED_EXIT_COMMAND_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":210,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new PollutedExitCommandException());","lastModifiedDate":"2021-09-01"},{"lineNumber":211,"author":{"gitId":"jianoway"},"content":"        case \"EMPTY_SEARCH_STRING_EXCEPTION\":","lastModifiedDate":"2021-09-01"},{"lineNumber":212,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new EmptySearchStringException());","lastModifiedDate":"2021-09-01"},{"lineNumber":213,"author":{"gitId":"jianoway"},"content":"        case \"POLLUTED_SORT_COMMAND_EXCEPTION\":","lastModifiedDate":"2021-09-07"},{"lineNumber":214,"author":{"gitId":"jianoway"},"content":"            return new ErrorCommand(new PollutedSortCommandException());","lastModifiedDate":"2021-09-07"},{"lineNumber":215,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-09-01"},{"lineNumber":216,"author":{"gitId":"jianoway"},"content":"            return null;","lastModifiedDate":"2021-09-01"},{"lineNumber":217,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":218,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":219,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":220,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":220}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"import duke.parser.CustomDateFormatter;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    private File storageFile;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     * Constructor for a Storage object.","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"     * @param filePath","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        assert !filePath.isBlank() : \"File Path is blank!\";","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        this.storageFile \u003d new File(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * This method edits the file stored locally to edit mark as done,","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     * undo or delete the Task specified by the lineNumber.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"     * @param lineNumber The line on which the Task is to be edited","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"     * @param commandType The type of edit to be made","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    public void editStorage(int lineNumber, CommandType commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        int actualLineNumber \u003d lineNumber + 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"            Scanner myScanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"            String newFileString \u003d editStorageScanner(","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"                    myScanner,","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"                    actualLineNumber,","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"                    commandType","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"            );","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"            myScanner.close();","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"            writeToFile(newFileString);","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"File not found!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    private String editStorageScanner(Scanner myScanner, int lineNumber, CommandType commandType) {","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        int currentLine \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        String newFileString \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        while (myScanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"            String nextLine \u003d myScanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"            if (currentLine \u003d\u003d lineNumber) {","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"                switch (commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"                case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"                    char[] doneArray \u003d nextLine.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"                    doneArray[4] \u003d \u00271\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"                    newFileString +\u003d addParagraph(String.valueOf(doneArray));","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"                case UNDO:","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"                    char[] undoArray \u003d nextLine.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"                    undoArray[4] \u003d \u00270\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"                    newFileString +\u003d addParagraph(String.valueOf(undoArray));","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"                case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"                    // Fallthrough","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"                default:","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"                    newFileString +\u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"                newFileString +\u003d addParagraph(nextLine);","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"            currentLine +\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        if (newFileString.endsWith(\"\\n\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"            newFileString \u003d newFileString.substring(0, newFileString.length() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"        return newFileString;","lastModifiedDate":"2021-09-01"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"    private String addParagraph(String str) {","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"        return str + \"\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    private void writeToFile(String newFileString) {","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"            FileWriter myWriter \u003d new FileWriter(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"            myWriter.write(newFileString);","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"            myWriter.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"IOException caught~\");","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"     * Writes the local file with the updated status of the","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"     * TaskList.","lastModifiedDate":"2021-09-07"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"     * @param taskList","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"    public void updateWithTaskList(TaskList taskList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d taskList.getArrayList();","lastModifiedDate":"2021-09-07"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"        String newFileString \u003d \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"        for (Task task : taskArrayList) {","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"            String str \u003d \"%s\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"            newFileString +\u003d String.format(str, task.getDataString());","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"        if (newFileString.endsWith(\"\\n\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"            newFileString \u003d newFileString.substring(0, newFileString.length() - 1);","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"        writeToFile(newFileString);","lastModifiedDate":"2021-09-07"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"     * This method loads the TaskList in from the locally stored file","lastModifiedDate":"2021-08-30"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"     * as specified by the file path passed into Duke.","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"     * @return The ArrayList used to create the TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e newArrayList \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"            Scanner myScanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"            while (myScanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"                String nextLine \u003d myScanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"                if (nextLine.length() \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"                    newArrayList.add(getTask(nextLine));","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"            throw e;","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":"        return newArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":"     * This is mainly a helper method to help the load method","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"     * retrieve Tasks based on the divider.","lastModifiedDate":"2021-08-30"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":"     * @param task The String version of the Task","lastModifiedDate":"2021-08-30"},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Task object","lastModifiedDate":"2021-08-30"},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"    public static Task getTask(String task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"        Character taskType \u003d task.charAt(0);","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"jianoway"},"content":"        switch(taskType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"jianoway"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"jianoway"},"content":"            String[] todoArray \u003d task.split(\"_~_\");","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"jianoway"},"content":"            ToDo newToDo \u003d new ToDo(todoArray[2]);","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"jianoway"},"content":"            if (todoArray[1].equals(\"1\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"jianoway"},"content":"                newToDo.markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"jianoway"},"content":"            return newToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"jianoway"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"jianoway"},"content":"            String[] deadlineArray \u003d task.split(\"_~_\");","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"jianoway"},"content":"            Deadline newDeadline \u003d","lastModifiedDate":"2021-08-30"},{"lineNumber":167,"author":{"gitId":"jianoway"},"content":"                new Deadline(deadlineArray[2], CustomDateFormatter.getLocalDateFromString(deadlineArray[3]));","lastModifiedDate":"2021-08-30"},{"lineNumber":168,"author":{"gitId":"jianoway"},"content":"            if (deadlineArray[1].equals(\"1\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"jianoway"},"content":"                newDeadline.markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"jianoway"},"content":"            return newDeadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"jianoway"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"jianoway"},"content":"            String[] eventArray \u003d task.split(\"_~_\");","lastModifiedDate":"2021-08-26"},{"lineNumber":174,"author":{"gitId":"jianoway"},"content":"            Event newEvent \u003d","lastModifiedDate":"2021-08-30"},{"lineNumber":175,"author":{"gitId":"jianoway"},"content":"                new Event(eventArray[2], CustomDateFormatter.getLocalDateFromString(eventArray[3]));","lastModifiedDate":"2021-08-30"},{"lineNumber":176,"author":{"gitId":"jianoway"},"content":"            if (eventArray[1].equals(\"1\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"jianoway"},"content":"                newEvent.markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"jianoway"},"content":"            return newEvent;","lastModifiedDate":"2021-08-26"},{"lineNumber":180,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":181,"author":{"gitId":"jianoway"},"content":"            return new ToDo(\"Please delete this entry. I am a bug!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":187,"author":{"gitId":"jianoway"},"content":"     * Adds the Task object to the local file as specified by the","lastModifiedDate":"2021-08-30"},{"lineNumber":188,"author":{"gitId":"jianoway"},"content":"     * constructor.","lastModifiedDate":"2021-08-30"},{"lineNumber":189,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":190,"author":{"gitId":"jianoway"},"content":"     * @param task The Task object to be added to the local file","lastModifiedDate":"2021-08-30"},{"lineNumber":191,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":192,"author":{"gitId":"jianoway"},"content":"    public void addToStorage(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":193,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":194,"author":{"gitId":"jianoway"},"content":"            Scanner myScanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":195,"author":{"gitId":"jianoway"},"content":"            if (myScanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"jianoway"},"content":"                FileWriter myWriter \u003d new FileWriter(storageFile, true);","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"jianoway"},"content":"                myWriter.write(\"\\n\" + task.getDataString());","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"jianoway"},"content":"                myWriter.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"jianoway"},"content":"                FileWriter myWriter \u003d new FileWriter(storageFile, true);","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"jianoway"},"content":"                myWriter.write(task.getDataString());","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"jianoway"},"content":"                myWriter.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"jianoway"},"content":"            myScanner.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":205,"author":{"gitId":"jianoway"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":206,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"IOException from FileWriter caught.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":207,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":209,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":210,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":211,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":212,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":212}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public class Deadline extends SingleTimedTask {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"     * The constructor for the Deadline object.","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     * @param description The description of the Deadline","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     * @param date The due date","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public Deadline(String description, LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        super(description, date);","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        this.taskType \u003d \"D\";","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        String str \u003d super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        str +\u003d String.format(\" (by: %s)\", this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        return str;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        String str \u003d super.getDataString();","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        return String.format(\"%s_~_%s\", str, this.date.format(DateTimeFormatter.ofPattern(\"d/MM/yyyy\")));","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        Deadline otherDeadline \u003d (Deadline) object;","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        return this.date.equals(otherDeadline.date)","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.getStatusIcon().equals(otherDeadline.getStatusIcon())","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.description.equals(otherDeadline.description)","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.taskType.equals(otherDeadline.taskType);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":40}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public class Event extends SingleTimedTask {","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     * The constructor for an Event object.","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     * @param description The description of the Event.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     * @param date The date of the Event.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    public Event(String description, LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        super(description, date);","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        this.taskType \u003d \"E\";","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        String str \u003d super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        str +\u003d String.format(\" (at: %s)\", this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        return str;","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        String str \u003d super.getDataString();","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        return String.format(\"%s_~_%s\", str, this.date.format(DateTimeFormatter.ofPattern(\"d/MM/yyyy\")));","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        Event otherEvent \u003d (Event) object;","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        return this.date.equals(otherEvent.date)","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.getStatusIcon().equals(otherEvent.getStatusIcon())","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.description.equals(otherEvent.description)","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.taskType.equals(otherEvent.taskType);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":41}},{"path":"src/main/java/duke/task/SingleTimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"public abstract class SingleTimedTask extends Task {","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"     * Constructor for the SingleTimedTask object.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     * @param description Description of the SingleTimedTask","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     * @param date Date of the SingleTimedTask","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public SingleTimedTask(String description, LocalDate date) {","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        super(description);","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        return super.toString();","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        return this.date;","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"jianoway":28}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"    protected String taskType;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    protected Task() {","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        this.description \u003d \"NONE\";","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"     * The public access constructor for inherited classes","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"     * to implement or override.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * @param description","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        return this.description;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    public String getStatusInt() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        return (isDone ? \"1\" : \"0\");","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    public void markUndone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        return String.format(\"[%s][%s] %s\", this.taskType, this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        return String.format(\"%s_~_%s_~_%s\", this.taskType, this.getStatusInt(), this.description);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        return this.taskType;","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"jianoway":58}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    public TaskList(ArrayList\u003cTask\u003e arrayList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        this.taskList \u003d arrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"     * This method searches the TaskList for any Tasks with the","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * description containing the searchString.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param searchString The String being searched for","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList being searched","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @return The ArrayList of Tasks that contain the searchString","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    public ArrayList\u003cTask\u003e searchTaskList(String searchString, TaskList tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e taskList \u003d tasks.getArrayList();","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"            if (task.getDescription().contains(searchString)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"                arrayList.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        return arrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"     * @param task The Task to be added","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    public void addToTaskList(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"     * This method edits the Task List depending on the","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"     * CommandType of the Command.","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"     * @param lineNumber","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @param commandType","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    public Task editTaskList(int lineNumber, CommandType commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        switch(commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"        case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"            taskList.get(lineNumber).markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"            return taskList.get(lineNumber);","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        case UNDO:","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"            taskList.get(lineNumber).markUndone();","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"            return taskList.get(lineNumber);","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"        case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"            return taskList.remove(lineNumber);","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"            return null;","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     * Sorts the task list by task type and date.","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"    public void sort() {","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        taskList.sort(new Comparator\u003cTask\u003e() {","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"            @Override","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"            public int compare(Task t1, Task t2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"                return compareTwoTasks(t1, t2);","lastModifiedDate":"2021-09-07"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"        });","lastModifiedDate":"2021-09-07"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"    private int compareTwoTasks(Task t1, Task t2) {","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"        String type1 \u003d t1.taskType;","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        String type2 \u003d t2.taskType;","lastModifiedDate":"2021-09-07"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        if (!type1.equals(type2)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"            return type1.compareTo(type2);","lastModifiedDate":"2021-09-07"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"            if (type1.equals(\"T\")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"                return t1.description.compareTo(t2.description);","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"                SingleTimedTask tT1 \u003d (SingleTimedTask) t1;","lastModifiedDate":"2021-09-07"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"                SingleTimedTask tT2 \u003d (SingleTimedTask) t2;","lastModifiedDate":"2021-09-07"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"                return tT1.getDate().compareTo(tT2.getDate());","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"    public int getCapacity() {","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    public ArrayList\u003cTask\u003e getArrayList() {","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":101}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"     * This is a constructor for the ToDo object.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"     * @param description The description of the ToDo","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.taskType \u003d \"T\";","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        ToDo otherTodo \u003d (ToDo) object;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        return this.getStatusIcon().equals(otherTodo.getStatusIcon())","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.description.equals(otherTodo.description)","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"                \u0026\u0026 this.taskType.equals(otherTodo.taskType);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        return super.getDataString();","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":26}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    private void flip() {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        db.flip();","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        return db;","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    private Image userImage \u003d new Image(","lastModifiedDate":"2021-09-07"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaUser.png\"))","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    );","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    private Image dukeImage \u003d new Image(","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"))","lastModifiedDate":"2021-09-07"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    );","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"     * Initializes the GUI with the base properties and greeting message.","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"                DialogBox.getDukeDialog(Response.showWelcome(), dukeImage)","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        );","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    @FXML","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        final String byeMessage \u003d \"Good bye!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        if (response.equals(byeMessage)) {","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"            System.out.println(byeMessage);","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"            System.exit(0);","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        );","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":72}},{"path":"src/main/java/duke/ui/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import duke.errors.DukeException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class Response {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    public static String pluralOrNo(int cap) {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        return cap \u003c\u003d 1 ? \"\" : \"s\";","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * Returns the Welcome Message.","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @return Welcome Message String","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public static String showWelcome() {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        final String welcomeMessage \u003d \"Henlo, Duke here! How can I be of assistance?\";","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        return welcomeMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    public String showError(DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        return e.getMessage();","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * This method displays the message in the CLI when a","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * Task is added to the Task List.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"     * @param task The Task being added","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"     * @param taskList The Task List being added to","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    public String showAddTaskMessage(Task task, TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        int size \u003d taskList.getCapacity();","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        final String addTaskMessage \u003d \"Got it. I\u0027ve added this task:\\n    %s\\n\"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"                + \"Now you have %d task%s in the list\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        return String.format(addTaskMessage, task , size, pluralOrNo(size));","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"     * This method displays the message in the CLI when a","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     * Task in the Task List is editted.","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @param task The Task being edited","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * @param taskList The Task List being edited","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    public String showEditTaskMessage(Task task, CommandType commandType, TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        final String deleteMessage \u003d \"Noted. Ive removed this task:\\n    %s\\n\"","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"                    + \"Now you have %d task%s in the list\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        final String doneMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n    %s\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"        final String undoMessage \u003d \"I\u0027ve marked this task as undone:\\n    %s\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"        final String blank \u003d \"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        switch(commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"            int size \u003d taskList.getCapacity();","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"            return String.format(deleteMessage, task, size, pluralOrNo(size));","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"            return String.format(doneMessage, task);","lastModifiedDate":"2021-09-07"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        case UNDO:","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"            return String.format(undoMessage, task);","lastModifiedDate":"2021-09-07"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"            return blank;","lastModifiedDate":"2021-09-07"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"     * This method displays the Tasks in the Task List","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"     * in the CLI.","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @param taskList The Task List to be displayed","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    public String showTaskList(TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"        final String noTasksMessage \u003d \"You have no tasks!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e arrayList \u003d taskList.getArrayList();","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        int currentCapacity \u003d arrayList.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        if (currentCapacity \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"            String toPrint \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"            for (int i \u003d 0; i \u003c currentCapacity; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"                Task task \u003d arrayList.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"                toPrint +\u003d String.format(\"%d. %s\\n\", i + 1, task);","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"            return toPrint;","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"            return noTasksMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"     *  This method displays the Tasks in the Task List matching","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"     *  the user\u0027s searchString.","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"     * @param tasks The ArrayList containing the Tasks to be displayed.","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"    public String showSearchMessage(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"        final String noTasksFoundMessage \u003d \"Sorry, no tasks match your search query!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"        final String searchStringFriend \u003d \"    %s. %s\\n\";","lastModifiedDate":"2021-09-07"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"        if (size \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"            return noTasksFoundMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"            String searchString \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"            for (int i \u003d 1; i \u003c\u003d size; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"                searchString +\u003d String.format(searchStringFriend, i, tasks.get(i - 1));","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"            return searchString;","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"     * This method returns the Exit Message.","lastModifiedDate":"2021-09-07"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-09-07"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"     * @return Exit Message","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"    public String showExitMessage() {","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"        final String byeMessage \u003d \"Good bye!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"        return byeMessage;","lastModifiedDate":"2021-09-07"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"     * This method reads in the next user input via the CLI.","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"     * @return The user input","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":134}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: grey;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"558.0\" /\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"324.0\" AnchorPane.topAnchor\u003d\"558.0\" /\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: grey;\" /\u003e","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jianoway":19}},{"path":"src/test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"T_~_0_~_1","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok3","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok4","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"D_~_0_~_ok_~_12/12/2019","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":4}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    public void dummyTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":12}},{"path":"src/test/java/duke/parser/CleanerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"public class CleanerTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    public void cleanerClean_invalidListCommand_errorMessage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        Cleaner cl \u003d new Cleaner();","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        assertEquals(\"POLLUTED_LIST_COMMAND_EXCEPTION\", cl.clean(\"list 2\", 1));","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        assertEquals(\"POLLUTED_LIST_COMMAND_EXCEPTION\", cl.clean(\"list 9oe9\", 1));","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        assertEquals(\"INVALID_COMMAND_EXCEPTION\", cl.clean(\"lists\", 1));","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":15}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    public void storageLoad_validFilePath_correctArrayList() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e correctArraylistOfTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        correctArraylistOfTasks.add(new ToDo(\"1\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        correctArraylistOfTasks.add((new ToDo(\"ok3\")));","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        correctArraylistOfTasks.add((new ToDo(\"ok4\")));","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        correctArraylistOfTasks.add(new Deadline(\"ok\", LocalDate.of(2019, 12, 12)));","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        Storage testStorage \u003d new Storage(\"src/test/data/duke.txt\");","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"            assertEquals(correctArraylistOfTasks, testStorage.load());","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    public void storageLoad_invalidFilePath_fileNotFoundExceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        Storage testStorage \u003d new Storage(\"dduke.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        String expectedMessage \u003d \"dduke.txt (No such file or directory)\";","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        FileNotFoundException exception \u003d assertThrows(FileNotFoundException.class, () -\u003e {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            testStorage.load();","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        });","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        assertEquals(expectedMessage, exception.getMessage());","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":45}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"invalid test","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":" invalid test","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":" list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"todo Water Plants","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"todo Feed Cows","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"event Kay\u0027s Birthday /at 32 May","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"deadline Submit proposal /by 33 May","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"done 4","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"done 5","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"undo 4","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"delete 2","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":18}}]

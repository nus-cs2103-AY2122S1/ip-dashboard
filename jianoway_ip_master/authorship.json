[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok3","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok4","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"D_~_0_~_ok_~_12/12/2019","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"D_~_1_~_ok_~_12/12/2903","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":5}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"Invalid file path.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    public void run() {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"            String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"            Command c \u003d Parser.parse(fullCommand, tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"            c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"            if (c.isExit()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"-":1,"jianoway":46}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * The AddCommand class extends the Command class and is the Command that","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * adds a Task to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /** The Task being added by the Command. */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private Task taskToAdd;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * The constructor for the AddCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param task The Task to be added to the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        super(CommandType.ADD, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        this.taskToAdd \u003d task;","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when a","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"     * Task is added to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param ui The Ui object to interact with the user","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        storage.addToStorage(taskToAdd);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        tasks.addToTaskList(taskToAdd);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        ui.showAddTaskMessage(taskToAdd, tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":40}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * This abstract class provides the framework for Commands to be implemented.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    /** The execute method to be implemented by the Commands. */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    /** The boolean that determines if a Command terminates the user interaction. */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    /** The types of Commands. */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        ADD,","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        DELETE,","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        DONE,","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        UNDO,","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        ERROR,","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        EXIT,","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        LIST,","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        SEARCH","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    /** The Command type for the object in question. */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    private CommandType commandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    /** Checks if the Command is terminating. */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        return isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"     * The constructor for the Command object.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"     * @param commandType The Command type","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"     * @param isExit Boolean if its terminating or not","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    public Command(CommandType commandType, boolean isExit) {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     * This method gets the Command type of the object.","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"     * @return The Command\u0027s type","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    public CommandType getCommandType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"        return this.commandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":57}},{"path":"src/main/java/duke/commands/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * The EditCommand class extends the Command class and is the Command that","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * edits a Task to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /** The line to be edited. */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private int lineNumber;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * The constructor for the EditCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param commandType The Command type","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param lineNumber The line to be edited","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    public EditCommand(CommandType commandType, int lineNumber) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        super(commandType, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        this.lineNumber \u003d lineNumber;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"  /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"   * The execute command that executes the necessary actions when a Task","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"   * is edited in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"   *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"   * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"   * @param ui The Ui object to interact with the user","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"   * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"   */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"  public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        Task editedTask \u003d tasks.editTaskList(lineNumber, this.getCommandType());","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        storage.editStorage(lineNumber, this.getCommandType());","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        ui.showEditTaskMessage(editedTask, this.getCommandType(), tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":41}},{"path":"src/main/java/duke/commands/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.errors.DukeError;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * The ErrorCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"public class ErrorCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    /** The error code. */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    private final int code;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     * The constructor for the ErrorCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param code The error code","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public ErrorCommand(int code) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        super(CommandType.ERROR, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        this.code \u003d code;","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when an","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"     * error is issued.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param ui The Ui object to interact with the user","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        DukeError e \u003d DukeError.getError(this.code);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        ui.showError(e);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":39}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * The ExitCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    /** The constructor for the ExitCommand object. */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        super(CommandType.EXIT, true);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"  /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"   * The execute command that executes the necessary actions when issued with the Exit Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"   *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"   * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"   * @param ui The Ui object to interact with the user","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"   * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"   */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"  public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        ui.showExitMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":29}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":" * The ListCommand class extends the Command class and is the Command that * edits a Task to the","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":" * TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    /** The constructor for the ListCommand object. */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        super(CommandType.LIST, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when issued with the List Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     * @param ui The Ui object to interact with the user","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        ui.showTaskList(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":28}},{"path":"src/main/java/duke/commands/SearchCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * The SearchCommand class extends the Command class and is the Command that searches","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * for a Task in the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"public class SearchCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    /** The String to be searched for in the Tasks in the TaskList. */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    private String searchString;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     * The constructor for the SearchCommand object.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @param searchString The String being searched for","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    public SearchCommand(String searchString) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        super(CommandType.SEARCH, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        this.searchString \u003d searchString;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"     * The execute command that executes the necessary actions when issued with the Search Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"     * @param tasks The TaskList to be added to","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"     * @param ui The Ui object to interact with the user","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"     * @param storage The Storage object that stores the TaskList on the Local Machine","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e  listFound \u003d tasks.searchTaskList(this.searchString, tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"        ui.showSearchMessage(listFound);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":41}},{"path":"src/main/java/duke/errors/DukeError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.errors;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":" * The enumeration of the known errors produced by Duke. I opted to use enums instead of","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":" * making a class that extends the Exceptions class as it is cleaner to flag since the CLI","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" * is the mode of interaction with the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"public enum DukeError {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    INVALID_COMMAND(-1, \"Unrecognised command detected. Please try again.\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    ESCAPE_CHARACTER(0, \"Please do not use the \\\\n in your input as it makes me sad. ):\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    POLLUTED_LIST_COMMAND(1, \"Please only type \u0027list\u0027 to view the task list.\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"    EMPTY_TODO_DESCRIPTION(2, \"Empty descriptions for ToDos are not allowed!\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    EMPTY_DEADLINE_DESCRIPTION(3, \"Empty descriptions for Deadlines are not allowed!\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    EMPTY_DEADLINE_DATE(4, \"Your deadline is missing a date.\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    EMPTY_EVENT_DESCRIPTION(5, \"Empty descriptions for Events are not allowed!\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    EMPTY_EVENT_DATE(6, \"Your event is missing a date.\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    EMPTY_LIST_NUMBER(7, \"Please indicate which item on your list you would like to modify.\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    TOO_MANY_INPUTS(8, \"Too many inputs!\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    INVALID_LIST_NUMBER(9, \"Please use a valid list number!\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    LIST_FULL(10, \"The list is full, \"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"            + \"please remove an existing Task before trying to add a new Task.\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    SEPARATOR_DETECTED(11, \"Please do not use \u0027_~_\u0027 in your input as it breaks me! ):\"),","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    INVALID_DATE_FORMAT(12, \"Invalid date. Please use the dd-mm-yyyy convention!\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    POLLUTED_EXIT_COMMAND(13, \"Please only type \u0027bye\u0027 to exit\"),","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    EMPTY_SEARCH_STRING(14, \"Please key in something for me to find!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    /** The error code. */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    private final int code;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    /** The error message. */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    private final String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"     * This method gets the respective DukeError from the code.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"     * @param code The error code","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"     * @return The respective DukeError","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"    public static DukeError getError(int code) {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        switch (code) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            case -1:","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"                return DukeError.INVALID_COMMAND;","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"            case 0:","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"                return DukeError.ESCAPE_CHARACTER;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"            case 1:","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"                return DukeError.POLLUTED_LIST_COMMAND;","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"            case 2:","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_TODO_DESCRIPTION;","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"            case 3:","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_DEADLINE_DESCRIPTION;","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"            case 4:","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_DEADLINE_DATE;","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"            case 5:","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_EVENT_DESCRIPTION;","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"            case 6:","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_EVENT_DATE;","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"            case 7:","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_LIST_NUMBER;","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"            case 8:","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"                return DukeError.TOO_MANY_INPUTS;","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"            case 9:","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"                return DukeError.INVALID_LIST_NUMBER;","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"            case 10:","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"                return DukeError.LIST_FULL;","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"            case 11:","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"                return DukeError.SEPARATOR_DETECTED;","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"            case 12:","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"                return DukeError.INVALID_DATE_FORMAT;","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"            case 13:","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"                return DukeError.POLLUTED_EXIT_COMMAND;","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"            case 14:","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"                return DukeError.EMPTY_SEARCH_STRING;","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"                return null;","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"     * The constructor for the DukeError.","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"     * @param code The error code","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"     * @param description The error message","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"    DukeError(int code, String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        this.code \u003d code;","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"     * Gets the description of the DukeError object.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"     * @return The error message","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"        return description;","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"     * Gets the error message of the DukeError object.","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"     * @return The error code","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"    public int getCode() {","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"        return code;","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"        return \"Error \" + code + \": \" + description;","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":111}},{"path":"src/main/java/duke/parser/Cleaner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":" * The Cleaner class helps to validate user input as we are working","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":" * off the assumption that all user input is evil.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"public class Cleaner {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"     * This method takes in the user input and cleans it so that we are","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"     * better able to control the output of our parser. It also helps to","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"     * prevent malicious code that would possibly break Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned command String","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    public String clean(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.length() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"            return \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.contains(\"\\n\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"            return \"error 0\";","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.contains(\"_~_\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"            return \"error 11\";","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        String[] stringArray \u003d fullCommand.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        String firstWord \u003d stringArray[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        switch (firstWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"            case \"list\":","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"                return listCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"                return todoCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"                return deadlineCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"            case \"event\":","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"                return eventCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"            case \"done\":","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"                return markDoneCleaner(fullCommand, currentCapacity);","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"            case \"undo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"                return markUndoCleaner(fullCommand, currentCapacity);","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"                return deleteCleaner(fullCommand, currentCapacity);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"                return byeCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"            case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"                return findCleaner(fullCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"                return \"error -1\";","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the find command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned find command","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"    private String findCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003d\u003d 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"            return \"error 14\";","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        String searchString \u003d fullCommand.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        return \"find \" + searchString.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the list command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned list command","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"    private String listCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003e\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"            return \"error 1\";","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"            return \"list\";","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the bye command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned bye command","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    private String byeCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003e 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"            return \"error 1\";","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"            return \"bye\";","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the todo command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned todo command","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"    public static String todoCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().length() \u003c 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"            return \"error 2\";","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"            return fullCommand.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the list command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned list command","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"    public static String deadlineCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.split(\"/by\")[0].strip().length() \u003d\u003d 8) {","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"            return \"error 3\";","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"        } else if (!fullCommand.contains(\"/by\")","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/by\").length \u003c 2","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/by\")[1].strip().length() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"            return \"error 4\";","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"            if (CustomDateFormatter.getLocalDateFromString(fullCommand.split(\"/by\")[1].strip()) \u003d\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"                return \"error 12\";","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"            return fullCommand.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the list command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned list command","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"    public static String eventCleaner(String fullCommand) {","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.split(\"/at\")[0].strip().length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"            return \"error 5\";","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"        } else if (!fullCommand.contains(\"/at\")","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/at\").length \u003c 2","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"                || fullCommand.split(\"/at\")[1].strip().length() \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"            return \"error 6\";","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"            if (CustomDateFormatter.getLocalDateFromString(fullCommand.split(\"/at\")[1].strip()) \u003d\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":"                return \"error 12\";","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"            return fullCommand.strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the done command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned done command","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"jianoway"},"content":"    public static String markDoneCleaner(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().split(\" \").length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"jianoway"},"content":"            return \"error 7\";","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.strip().split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"jianoway"},"content":"            return \"error 8\";","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"jianoway"},"content":"            String digit \u003d fullCommand.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"jianoway"},"content":"            char[] chars \u003d digit.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"jianoway"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"jianoway"},"content":"            for (char c : chars) {","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"jianoway"},"content":"                if (Character.isDigit(c)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"jianoway"},"content":"                    sb.append(c);","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"jianoway"},"content":"                    return \"error 9\";","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"jianoway"},"content":"            Integer intToCheck \u003d Integer.parseInt(sb.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":174,"author":{"gitId":"jianoway"},"content":"            if (intToCheck \u003e currentCapacity","lastModifiedDate":"2021-08-26"},{"lineNumber":175,"author":{"gitId":"jianoway"},"content":"                    || intToCheck \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"jianoway"},"content":"                return \"error 9\";","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"jianoway"},"content":"                intToCheck -\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"jianoway"},"content":"                return \"done \" + intToCheck;","lastModifiedDate":"2021-08-26"},{"lineNumber":180,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":181,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the undo command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":188,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":189,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned undo command","lastModifiedDate":"2021-08-26"},{"lineNumber":190,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":191,"author":{"gitId":"jianoway"},"content":"    public static String markUndoCleaner(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":192,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().split(\" \").length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":193,"author":{"gitId":"jianoway"},"content":"            return \"error 7\";","lastModifiedDate":"2021-08-26"},{"lineNumber":194,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.strip().split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":195,"author":{"gitId":"jianoway"},"content":"            return \"error 8\";","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"jianoway"},"content":"            String digit \u003d fullCommand.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"jianoway"},"content":"            char[] chars \u003d digit.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"jianoway"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"jianoway"},"content":"            for (char c : chars) {","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"jianoway"},"content":"                if (Character.isDigit(c)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"jianoway"},"content":"                    sb.append(c);","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"jianoway"},"content":"                    return \"error 9\";","lastModifiedDate":"2021-08-26"},{"lineNumber":205,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":206,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":207,"author":{"gitId":"jianoway"},"content":"            Integer intToCheck \u003d Integer.parseInt(sb.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"jianoway"},"content":"            if (intToCheck \u003e currentCapacity","lastModifiedDate":"2021-08-26"},{"lineNumber":209,"author":{"gitId":"jianoway"},"content":"                    || intToCheck \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":210,"author":{"gitId":"jianoway"},"content":"                return \"error 9\";","lastModifiedDate":"2021-08-26"},{"lineNumber":211,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":212,"author":{"gitId":"jianoway"},"content":"                intToCheck -\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":213,"author":{"gitId":"jianoway"},"content":"                return \"undo \" + intToCheck;","lastModifiedDate":"2021-08-26"},{"lineNumber":214,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":215,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":216,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":217,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":218,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":219,"author":{"gitId":"jianoway"},"content":"     * This method cleans the user input for the delete command and flags errors if found.","lastModifiedDate":"2021-08-26"},{"lineNumber":220,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":221,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand User input","lastModifiedDate":"2021-08-26"},{"lineNumber":222,"author":{"gitId":"jianoway"},"content":"     * @param currentCapacity The current size of the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":223,"author":{"gitId":"jianoway"},"content":"     * @return The cleaned delete command","lastModifiedDate":"2021-08-26"},{"lineNumber":224,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":225,"author":{"gitId":"jianoway"},"content":"    public static String deleteCleaner(String fullCommand, int currentCapacity) {","lastModifiedDate":"2021-08-26"},{"lineNumber":226,"author":{"gitId":"jianoway"},"content":"        if (fullCommand.strip().split(\" \").length \u003c 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":227,"author":{"gitId":"jianoway"},"content":"            return \"error 7\";","lastModifiedDate":"2021-08-26"},{"lineNumber":228,"author":{"gitId":"jianoway"},"content":"        } else if (fullCommand.strip().split(\" \").length \u003e 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":229,"author":{"gitId":"jianoway"},"content":"            return \"error 8\";","lastModifiedDate":"2021-08-26"},{"lineNumber":230,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":231,"author":{"gitId":"jianoway"},"content":"            String digit \u003d fullCommand.split(\" \")[1];","lastModifiedDate":"2021-08-26"},{"lineNumber":232,"author":{"gitId":"jianoway"},"content":"            char[] chars \u003d digit.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":233,"author":{"gitId":"jianoway"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-26"},{"lineNumber":234,"author":{"gitId":"jianoway"},"content":"            for (char c : chars) {","lastModifiedDate":"2021-08-26"},{"lineNumber":235,"author":{"gitId":"jianoway"},"content":"                if (Character.isDigit(c)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":236,"author":{"gitId":"jianoway"},"content":"                    sb.append(c);","lastModifiedDate":"2021-08-26"},{"lineNumber":237,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":238,"author":{"gitId":"jianoway"},"content":"                    return \"error 9\";","lastModifiedDate":"2021-08-26"},{"lineNumber":239,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":240,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":241,"author":{"gitId":"jianoway"},"content":"            Integer intToCheck \u003d Integer.parseInt(sb.toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":242,"author":{"gitId":"jianoway"},"content":"            if (intToCheck \u003e currentCapacity","lastModifiedDate":"2021-08-26"},{"lineNumber":243,"author":{"gitId":"jianoway"},"content":"                    || intToCheck \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":244,"author":{"gitId":"jianoway"},"content":"                return \"error 9\";","lastModifiedDate":"2021-08-26"},{"lineNumber":245,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":246,"author":{"gitId":"jianoway"},"content":"                intToCheck -\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":247,"author":{"gitId":"jianoway"},"content":"                return \"delete \" + intToCheck;","lastModifiedDate":"2021-08-26"},{"lineNumber":248,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":249,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":250,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":251,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":251}},{"path":"src/main/java/duke/parser/CustomDateFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"//The code below was referenced from https://stackoverflow.com/questions/23488721/how-to-check-if-string-matches-date-pattern-using-time-api","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * This class helps to format some common possible String inputs for dates","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" * to parse them as LocalDate objects.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"public class CustomDateFormatter {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    /** The array of common patterns with time. */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    private final String[] PATTERNS_WITH_TIME \u003d new String[] {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"            \"dd-mm-yyyy HH:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"            \"dd-mm-yyyy hh:mm:ss.s\",","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"            \"yyyy-mm-dd hh:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"            \"yyyy-mm-dd hh:mm:ss.s\",","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"            \"MMM dd yyyy HH:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"            \"dd MMM yyyy HH:mm\",","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    };","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    /** The array of common patterns without time. */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    private final String[] PATTERNS_WITHOUT_TIME \u003d new String[] {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"            \"dd MMM yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"            \"dd-mm-yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"            \"dd-mm-yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"            \"dd-MM-yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"            \"dd mm yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"            \"dd mm yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"            \"dd MM yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"            \"dd/mm/yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"            \"dd/mm/yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"            \"dd/MM/yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"            \"dd.mm.yy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"            \"dd.mm.yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"            \"dd.MM.yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            \"dd/M/yyyy\",","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"            \"yyyy-mm-dd\",","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    };","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"     * This method helps to get the LocalDate object from a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"     * @param str The string to be formatted","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"    public static LocalDate getLocalDateFromString(String str) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"        CustomDateFormatter formatter \u003d new CustomDateFormatter();","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"        return formatter.formatWithoutTime(str);","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     * This method helps to get the LocalDateTime object from a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"     * @param text The string to be formatted","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"    public LocalDateTime formatWithTime(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"        for (String pattern: PATTERNS_WITH_TIME) {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"                return LocalDateTime.parse(text, DateTimeFormatter.ofPattern(pattern));","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"                System.out.println(\"Invalid date time exception caught!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"     * This method helps to get the LocalDate object from a String.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     * @param text The string to be formatted","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     * @return","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"    public LocalDate formatWithoutTime(String text) {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"        for (String pattern: PATTERNS_WITHOUT_TIME) {","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"                return LocalDate.parse(text, DateTimeFormatter.ofPattern(pattern));","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"                // Don\u0027t want to print anything here as it would disrupt the UI","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"        return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"        CustomDateFormatter temp \u003d new CustomDateFormatter();","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"        LocalDateTime dateTime \u003d temp.formatWithTime(\"10 Oct 2014 01:00\");","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"        LocalDate date \u003d temp.formatWithoutTime(\"12-12-2019\");","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":97}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.commands.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":" * This class helps to parse the cleaned user input after the input validation process to produce the","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":" * appropriate Command object for execution.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"     * This command parses the clean user input to produce the appropriate","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"     * Command object.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"     * @param fullCommand The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"     * @param taskList The current TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    public static Command parse(String fullCommand, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        Cleaner cl \u003d new Cleaner();","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        String cleanCommand \u003d cl.clean(fullCommand, taskList.getCapacity());","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        String firstWord \u003d cleanCommand.split(\" \")[0];","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        switch (firstWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        case \"list\":","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"            return todoParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"            return deadlineParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"        case \"event\":","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"            return eventParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        case \"done\":","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"            return markDoneParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        case \"undo\":","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            return markUndoParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"            return deleteParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"        case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"            return findParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"            return errorParser(cleanCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the find Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"    public static Command findParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"        String searchString \u003d input.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"        return new SearchCommand(searchString);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the todo Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    public static Command todoParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"        String description \u003d input.substring(5).strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"        return new AddCommand(new ToDo(description));","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the event Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    public static Command eventParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        String withoutEvent \u003d input.substring(6).strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        String[] eventArray \u003d withoutEvent.split(\"/at\");","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"        String description \u003d eventArray[0].strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"        LocalDate date \u003d CustomDateFormatter.getLocalDateFromString(eventArray[1].strip());","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        return new AddCommand(new Event(description, date));","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the deadline Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"    public static Command deadlineParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"        String withoutDeadline \u003d input.substring(9).strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"        String[] deadlineArray \u003d withoutDeadline.split(\"/by\");","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"        String description \u003d deadlineArray[0].strip();","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"        LocalDate date \u003d CustomDateFormatter.getLocalDateFromString(deadlineArray[1].strip());","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"        return new AddCommand(new Deadline(description, date));","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the done Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"    public static Command markDoneParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"        int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"        return new EditCommand(CommandType.DONE, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the undo Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"    public static Command markUndoParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"        int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"        return new EditCommand(CommandType.UNDO, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the delete Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"    public static Command deleteParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"        int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"        return new EditCommand(CommandType.DELETE, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"     * This method parses the command for the error Command.","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"jianoway"},"content":"     * @param input The cleaned user input","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"jianoway"},"content":"     * @return The appropriate Command object","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"jianoway"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"jianoway"},"content":"    public static Command errorParser(String input) {","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"jianoway"},"content":"        int code \u003d Integer.parseInt(input.substring((6)));","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"jianoway"},"content":"        return new ErrorCommand(code);","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":146}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.parser.CustomDateFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    private File storageFile;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        this.storageFile \u003d new File(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public void editStorage(int lineNumber, CommandType commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        int actualLineNumber \u003d lineNumber + 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"            Scanner myScanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"            String newFileString \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"            int currentLine \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"            while (myScanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"                String nextLine \u003d myScanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"                if (currentLine \u003d\u003d actualLineNumber) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"                    switch (commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"                        case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"                            char[] doneArray \u003d nextLine.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"                            doneArray[4] \u003d \u00271\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"                            newFileString +\u003d String.valueOf(doneArray) + \"\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"                            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"                        case UNDO:","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"                            char[] undoArray \u003d nextLine.toCharArray();","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"                            undoArray[4] \u003d \u00270\u0027;","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"                            newFileString +\u003d String.valueOf(undoArray) + \"\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"                            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"                        case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"                            newFileString +\u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"                            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"                        default: newFileString +\u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"                    }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"                    newFileString +\u003d nextLine + \"\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"                currentLine +\u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"            myScanner.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"            if (newFileString.endsWith(\"\\n\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"                newFileString \u003d newFileString.substring(0, newFileString.length() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"            FileWriter myWriter \u003d new FileWriter(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"            myWriter.write(newFileString);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"            myWriter.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"File not found!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"IOException caught~\");","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e newArrayList \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"            Scanner myScanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"            while (myScanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"                String nextLine \u003d myScanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"                if (nextLine.length() \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"                    newArrayList.add(getTask(nextLine));","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"            throw e;","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jianoway"},"content":"        return newArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"jianoway"},"content":"    public static Task getTask(String task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"jianoway"},"content":"        Character taskType \u003d task.charAt(0);","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"jianoway"},"content":"        switch(taskType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"jianoway"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jianoway"},"content":"                String[] todoArray \u003d task.split(\"_~_\");","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jianoway"},"content":"                ToDo newToDo \u003d new ToDo(todoArray[2]);","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jianoway"},"content":"                if (todoArray[1].equals(\"1\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jianoway"},"content":"                    newToDo.markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jianoway"},"content":"                return newToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jianoway"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"jianoway"},"content":"                String[] deadlineArray \u003d task.split(\"_~_\");","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"jianoway"},"content":"                Deadline newDeadline \u003d new Deadline(deadlineArray[2], CustomDateFormatter.getLocalDateFromString(deadlineArray[3]));","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"jianoway"},"content":"                if (deadlineArray[1].equals(\"1\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jianoway"},"content":"                    newDeadline.markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"jianoway"},"content":"                return newDeadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jianoway"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jianoway"},"content":"                String[] eventArray \u003d task.split(\"_~_\");","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"jianoway"},"content":"                Event newEvent \u003d new Event(eventArray[2], CustomDateFormatter.getLocalDateFromString(eventArray[3]));","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"jianoway"},"content":"                if (eventArray[1].equals(\"1\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"jianoway"},"content":"                    newEvent.markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"jianoway"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"jianoway"},"content":"                return newEvent;","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"jianoway"},"content":"            default:","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"jianoway"},"content":"                return new ToDo(\"Please delete this entry. I am a bug!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"jianoway"},"content":"    public void addToStorage(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"jianoway"},"content":"            Scanner myScanner \u003d new Scanner(storageFile);","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"jianoway"},"content":"            if (myScanner.hasNextLine()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"jianoway"},"content":"                FileWriter myWriter \u003d new FileWriter(storageFile, true);","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"jianoway"},"content":"                myWriter.write(\"\\n\" + task.getDataString());","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"jianoway"},"content":"                myWriter.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"jianoway"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"jianoway"},"content":"                FileWriter myWriter \u003d new FileWriter(storageFile, true);","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"jianoway"},"content":"                myWriter.write(task.getDataString());","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"jianoway"},"content":"                myWriter.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"jianoway"},"content":"            myScanner.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"jianoway"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"IOException from FileWriter caught.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":137}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public Deadline(String description, LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.taskType \u003d TaskType.D;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        String str \u003d super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        str +\u003d String.format(\" (by: %s)\", this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        return str;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        return String.format(\"%s_~_%s_~_%s_~_%s\", this.taskType, this.getStatusInt(), this.description, this.date.format(DateTimeFormatter.ofPattern(\"d/MM/yyyy\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        Deadline otherDeadline \u003d (Deadline) object;","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        return this.date.equals(otherDeadline.date) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"                this.getStatusIcon().equals(otherDeadline.getStatusIcon()) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"                this.description.equals(otherDeadline.description) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"                this.taskType.equals(otherDeadline.taskType);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":35}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public Event(String description, LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"        this.taskType \u003d TaskType.E;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        String str \u003d super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        str +\u003d String.format(\" (at: %s)\", this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"        return str;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        return String.format(\"%s_~_%s_~_%s_~_%s\", this.taskType, this.getStatusInt(), this.description, this.date.format(DateTimeFormatter.ofPattern(\"d/MM/yyyy\")));","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"        Event otherEvent \u003d (Event) object;","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        return this.date.equals(otherEvent.date) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"                this.getStatusIcon().equals(otherEvent.getStatusIcon()) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"                this.description.equals(otherEvent.description) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"                this.taskType.equals(otherEvent.taskType);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":37}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"    protected TaskType taskType;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    enum TaskType {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"        D,","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"        E,","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        T","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    protected Task() {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        this.description \u003d \"NONE\";","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        return this.description;","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    public String getStatusInt() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        return (isDone ? \"1\" : \"0\");","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"    public void markUndone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"        return String.format(\"[%s][%s] %s\", this.taskType, this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    public String getDataString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"        return String.format(\"%s_~_%s_~_%s\", this.taskType, this.getStatusInt(), this.description);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"jianoway":52}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"    public TaskList(ArrayList\u003cTask\u003e arrayList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        this.taskList \u003d arrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    public ArrayList\u003cTask\u003e searchTaskList(String searchString, TaskList tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e taskList \u003d tasks.getArrayList();","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"            if (task.getDescription().contains(searchString)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"                arrayList.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        return arrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"    public void addToTaskList(Task task) {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"    public Task editTaskList(int lineNumber, CommandType commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        switch(commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"            taskList.get(lineNumber).markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"            return taskList.get(lineNumber);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"        case UNDO:","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"            taskList.get(lineNumber).markUndone();","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"            return taskList.get(lineNumber);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"            return taskList.remove(lineNumber);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            return null;","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"    public int getCapacity() {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    public ArrayList\u003cTask\u003e getArrayList() {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":51}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"        this.taskType \u003d TaskType.T;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        ToDo otherTodo \u003d (ToDo) object;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        return this.getStatusIcon().equals(otherTodo.getStatusIcon()) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"                this.description.equals(otherTodo.description) \u0026\u0026","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"                this.taskType.equals(otherTodo.taskType);","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":16}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.commands.Command.CommandType;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.errors.DukeError;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    public static String pluralOrNo(int cap) {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"        return cap \u003c\u003d 1 ? \"\" : \"s\";","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"        System.out.println(\"Henlo, Duke here! How can I be of assistance?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"    public void showError(DukeError e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"        System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"    public void showAddTaskMessage(Task task, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        int size \u003d taskList.getCapacity();","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n    %s\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"                \"Now you have %d task%s in the list\\n\", task , size, pluralOrNo(size));","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"    public void showEditTaskMessage(Task task, CommandType commandType, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"        switch(commandType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        case DELETE:","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"            int size \u003d taskList.getCapacity();","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"            System.out.printf(\"Noted. Ive removed this task:\\n    %s\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"                    \"Now you have %d task%s in the list\\n\", task, size, pluralOrNo(size));","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        case DONE:","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"            System.out.printf(\"Nice! I\u0027ve marked this task as done:\\n    %s\\n\", task);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"        case UNDO:","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"            System.out.printf(\"I\u0027ve marked this task as undone:\\n    %s\\n\", task);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jianoway"},"content":"    public void showTaskList(TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e arrayList \u003d taskList.getArrayList();","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"jianoway"},"content":"        int currentCapacity \u003d arrayList.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"jianoway"},"content":"        if (currentCapacity \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jianoway"},"content":"            String toPrint \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jianoway"},"content":"            for (int i \u003d 0; i \u003c currentCapacity; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jianoway"},"content":"                Task task \u003d arrayList.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jianoway"},"content":"                toPrint +\u003d String.format(\"%d. %s\\n\", i + 1, task);","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jianoway"},"content":"            System.out.print(toPrint);","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"You have no tasks!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jianoway"},"content":"    public void showSearchMessage(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"jianoway"},"content":"        int size \u003d tasks.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"jianoway"},"content":"        if (size \u003c 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"Sorry, no tasks match your search query!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jianoway"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jianoway"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jianoway"},"content":"            for (int i \u003d 1; i \u003c\u003d size; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jianoway"},"content":"                System.out.println(\"    \" + i + \". \" + tasks.get(i - 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jianoway"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jianoway"},"content":"    public void showExitMessage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jianoway"},"content":"        System.out.println(\"Good bye!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jianoway"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"jianoway"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"jianoway"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jianoway":84}},{"path":"src/test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"T_~_0_~_1","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok3","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"T_~_0_~_ok4","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"D_~_0_~_ok_~_12/12/2019","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":4}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    public void dummyTest(){","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":11}},{"path":"src/test/java/duke/parser/CleanerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"public class CleanerTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"    public void cleanerClean_invalidListCommand_errorMessage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"        Cleaner cl \u003d new Cleaner();","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"        assertEquals(\"error 1\", cl.clean(\"list 2\", 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"        assertEquals(\"error 1\", cl.clean(\"list 9oe9\", 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"        assertEquals(\"error -1\", cl.clean(\"lists\", 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":14}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"package duke.storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jianoway"},"content":"    public void storageLoad_validFilePath_correctArrayList() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"jianoway"},"content":"        ArrayList\u003cTask\u003e CORRECT_ARRAYLIST_OF_TASKS \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"jianoway"},"content":"        CORRECT_ARRAYLIST_OF_TASKS.add(new ToDo(\"1\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"jianoway"},"content":"        CORRECT_ARRAYLIST_OF_TASKS.add((new ToDo(\"ok3\")));","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"jianoway"},"content":"        CORRECT_ARRAYLIST_OF_TASKS.add((new ToDo(\"ok4\")));","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"jianoway"},"content":"        CORRECT_ARRAYLIST_OF_TASKS.add(new Deadline(\"ok\", LocalDate.of(2019, 12, 12)));","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jianoway"},"content":"        Storage testStorage \u003d new Storage(\"data/duke.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jianoway"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"jianoway"},"content":"            assertEquals(CORRECT_ARRAYLIST_OF_TASKS, testStorage.load());","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"jianoway"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"jianoway"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jianoway"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jianoway"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jianoway"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jianoway"},"content":"    public void storageLoad_invalidFilePath_fileNotFoundExceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jianoway"},"content":"        Storage testStorage \u003d new Storage(\"dduke.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jianoway"},"content":"        String EXPECTED_MESSAGE \u003d \"dduke.txt (No such file or directory)\";","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jianoway"},"content":"        FileNotFoundException exception \u003d assertThrows(FileNotFoundException.class, () -\u003e {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jianoway"},"content":"            testStorage.load();","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"jianoway"},"content":"        });","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"jianoway"},"content":"        assertEquals(EXPECTED_MESSAGE, exception.getMessage());","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"jianoway"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jianoway"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jianoway":45}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jianoway"},"content":"invalid test","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"jianoway"},"content":" invalid test","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"jianoway"},"content":" list","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"jianoway"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"jianoway"},"content":"todo","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"jianoway"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jianoway"},"content":"deadline","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"jianoway"},"content":"todo Water Plants","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"jianoway"},"content":"todo Feed Cows","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"jianoway"},"content":"event Kay\u0027s Birthday /at 32 May","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jianoway"},"content":"deadline Submit proposal /by 33 May","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"jianoway"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jianoway"},"content":"done 2","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jianoway"},"content":"done 4","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jianoway"},"content":"done 5","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jianoway"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jianoway"},"content":"undo 4","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jianoway"},"content":"delete 2","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jianoway":18}}]

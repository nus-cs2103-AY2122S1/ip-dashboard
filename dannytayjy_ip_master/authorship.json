[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"D | 1 | CS2105 Assignment 0 | 2021-08-29 2359","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"D | 1 | PC1201 Test 1 (First Mock Test) | 2021-09-02 1400","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"D | 1 | CS2103 Week 4 Quiz | 2021-08-30 2359","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"D | 0 | CS3240 Week 4 Quiz | 2021-08-31 2000","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"T | 0 | Vacuum room floor","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"T | 0 | Change bedsheet","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"T | 0 | Download files from LumiNUS","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"T | 0 | CS2103 Week 3 Deliverables (JUnit)","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"T | 0 | CS2103 Week 3 Deliverables (Jar)","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"T | 0 | CS2103 Week 3 Deliverables (Javadocs)","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"dannytayjy":10}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":" * The driver class that runs the program","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Duke class.","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * @param pathName Folder name of the storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * @param fileName Name of the storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    public Duke(String pathName, String fileName) {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"            storage \u003d new Storage(pathName, fileName);","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"            taskList \u003d storage.loadTasksFromFile();","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * Starts the execution of the program.","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @param args Command line arguments","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        new Duke(\"data\", \"tasks.txt\").run();","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * Executes the program.","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    public void run() {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        ui.displayWelcome();","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"            try {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"                String commandLine \u003d ui.readCommand();","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"                Command command \u003d parser.parse(commandLine);","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"                command.execute(taskList, ui, storage);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"                ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            } finally {","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"                ui.displayLine();","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"dannytayjy":59,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class to handle any exceptions during the program execution","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Initializes and instance of DukeException class.","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * @param errorMessage The error message.","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":14}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import duke.command.PrintCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" * A class that contaisn methods to parse command line strings","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"public class Parser {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * Parses a command line string input on screen to get the details","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * of the Command object","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param commandLine The command line string to parse","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @return The Command object","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the command line string is not valid","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public Command parse(String commandLine) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        String[] commandLineParts \u003d commandLine.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        String commandType;","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        String commandInfo;","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"        if (commandLineParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"            commandType \u003d commandLineParts[0];","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"            commandInfo \u003d commandLineParts[1];","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"            // If user inputs extra text after \"bye\" or \"list\" commands","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"            if ((commandType.equals(\"bye\") || commandType.equals(\"list\")) \u0026\u0026 !commandInfo.equals(\"\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(\"INVALID COMMAND. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        } else { // for \"bye\" and \"list\" commands","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"            commandType \u003d commandLineParts[0];","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"            commandInfo \u003d \"\";","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"        Command command;","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        int taskNum;","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"        String taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        String taskInfo;","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        String date;","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        switch (commandType) {","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new ExitCommand(commandType);","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"        case \"list\":","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new ListCommand(commandType);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        case \"done\":","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            taskNum \u003d getTaskNumFromCommand(commandInfo);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new DoneCommand(commandType, taskNum);","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"            taskNum \u003d getTaskNumFromCommand(commandInfo);","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new DeleteCommand(commandType, taskNum);","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"            taskDescription \u003d getTaskDescriptionFromToDoCommand(commandInfo);","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new AddToDoCommand(commandType, taskDescription);","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"            taskInfo \u003d getTaskInfoFromDeadlineCommand(commandInfo);","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new AddDeadlineCommand(commandType, taskInfo);","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"        case \"event\":","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"            taskInfo \u003d getTaskInfoFromEventCommand(commandInfo);","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new AddEventCommand(commandType, taskInfo);","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"        case \"print\":","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"            date \u003d getDateFromPrintCommand(commandInfo);","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"            command \u003d new PrintCommand(commandType, date);","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"            break;","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"        default:","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"INVALID COMMAND. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"        return command;","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"     * Gets task number from the command information.","lastModifiedDate":"2021-09-09"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo The command information","lastModifiedDate":"2021-09-09"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"     * @return The task number","lastModifiedDate":"2021-09-09"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the information is not valid","lastModifiedDate":"2021-09-09"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"    private int getTaskNumFromCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"        if (commandInfo.trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"            try {","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"                return Integer.parseInt(commandInfo);","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(\"Please enter a valid task number to be marked as done!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"Please enter a task number to be marked as done!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"     * Gets task description from ToDo command information.","lastModifiedDate":"2021-09-09"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo The ToDo command information","lastModifiedDate":"2021-09-09"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"     * @return The task description","lastModifiedDate":"2021-09-09"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the information is not valid","lastModifiedDate":"2021-09-09"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"    private String getTaskDescriptionFromToDoCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"        if (commandInfo.trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"            return commandInfo;","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"The description of a todo cannot be empty!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo","lastModifiedDate":"2021-09-09"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"     * @return","lastModifiedDate":"2021-09-09"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException","lastModifiedDate":"2021-09-09"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"    private String getTaskInfoFromDeadlineCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"        if (commandInfo.trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"            String[] deadlineTaskDetails \u003d commandInfo.split(\"/\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"            if (deadlineTaskDetails.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"                if (deadlineTaskDetails[0].trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"                    if (deadlineTaskDetails[1].trim().startsWith(\"by\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"                        String beforeDateTime \u003d deadlineTaskDetails[1].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"                        String[] beforeDateTimeParts \u003d beforeDateTime.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"                        if (beforeDateTimeParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"                            return commandInfo;","lastModifiedDate":"2021-08-30"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"                        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"                            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The date/time of a deadline cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"                                    + \"[Note: Enter /by before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"                        }","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"                    } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"                        throw new DukeException(\"WRONG COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"                                + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"                                + \"Enter /by before specifying the date!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"                    }","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"                } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"                    if (deadlineTaskDetails[1].trim().startsWith(\"by\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"                        String beforeDateTime \u003d deadlineTaskDetails[1].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"                        String[] beforeDateTimeParts \u003d beforeDateTime.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"                        if (beforeDateTimeParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"                            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The description of a deadline cannot be empty!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"                        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"                            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The description of a deadline cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The date/time of a deadline cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"                                    + \"[Note: Enter /by before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"                        }","lastModifiedDate":"2021-08-30"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"                    } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"                        throw new DukeException(\"INCOMPLETE \u0026 WRONG COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"                                + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"                                + \"The description of a deadline cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"                                + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"                                + \"Enter /by before specifying the date/time!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"                    }","lastModifiedDate":"2021-08-30"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2021-08-30"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"                        + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"                        + \"The date/time of a deadline cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"                        + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"                        + \"[Note: Enter /by before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"                    + \"The description and date/time of a deadline cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":186,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":187,"author":{"gitId":"dannytayjy"},"content":"                    + \"[Note: Enter /by before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":188,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":189,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":190,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":191,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":192,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":193,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo","lastModifiedDate":"2021-09-09"},{"lineNumber":194,"author":{"gitId":"dannytayjy"},"content":"     * @return","lastModifiedDate":"2021-09-09"},{"lineNumber":195,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException","lastModifiedDate":"2021-09-09"},{"lineNumber":196,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":197,"author":{"gitId":"dannytayjy"},"content":"    private String getTaskInfoFromEventCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":198,"author":{"gitId":"dannytayjy"},"content":"        if (commandInfo.trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":199,"author":{"gitId":"dannytayjy"},"content":"            String[] eventTaskDetails \u003d commandInfo.split(\"/\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":200,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":201,"author":{"gitId":"dannytayjy"},"content":"            if (eventTaskDetails.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":202,"author":{"gitId":"dannytayjy"},"content":"                if (eventTaskDetails[0].trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":203,"author":{"gitId":"dannytayjy"},"content":"                    if (eventTaskDetails[1].trim().startsWith(\"at\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":204,"author":{"gitId":"dannytayjy"},"content":"                        String startEndDateTime \u003d eventTaskDetails[1].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":205,"author":{"gitId":"dannytayjy"},"content":"                        String[] startEndDateTimeParts \u003d startEndDateTime.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":206,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":207,"author":{"gitId":"dannytayjy"},"content":"                        if (startEndDateTimeParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":208,"author":{"gitId":"dannytayjy"},"content":"                            return commandInfo;","lastModifiedDate":"2021-08-30"},{"lineNumber":209,"author":{"gitId":"dannytayjy"},"content":"                        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":210,"author":{"gitId":"dannytayjy"},"content":"                            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":211,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":212,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The date/time of an event cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":213,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":214,"author":{"gitId":"dannytayjy"},"content":"                                    + \"[Note: Enter /at before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":215,"author":{"gitId":"dannytayjy"},"content":"                        }","lastModifiedDate":"2021-08-30"},{"lineNumber":216,"author":{"gitId":"dannytayjy"},"content":"                    } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":217,"author":{"gitId":"dannytayjy"},"content":"                        throw new DukeException(\"WRONG COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":218,"author":{"gitId":"dannytayjy"},"content":"                                + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":219,"author":{"gitId":"dannytayjy"},"content":"                                + \"Enter /at before specifying the date!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":220,"author":{"gitId":"dannytayjy"},"content":"                    }","lastModifiedDate":"2021-08-30"},{"lineNumber":221,"author":{"gitId":"dannytayjy"},"content":"                } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":222,"author":{"gitId":"dannytayjy"},"content":"                    if (eventTaskDetails[1].trim().startsWith(\"at\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":223,"author":{"gitId":"dannytayjy"},"content":"                        String startEndDateTime \u003d eventTaskDetails[1].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":224,"author":{"gitId":"dannytayjy"},"content":"                        String[] startEndDateTimeParts \u003d startEndDateTime.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":225,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":226,"author":{"gitId":"dannytayjy"},"content":"                        if (startEndDateTimeParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":227,"author":{"gitId":"dannytayjy"},"content":"                            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":228,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":229,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The description of an event cannot be empty!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":230,"author":{"gitId":"dannytayjy"},"content":"                        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":231,"author":{"gitId":"dannytayjy"},"content":"                            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":232,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":233,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The description of an event cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":234,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":235,"author":{"gitId":"dannytayjy"},"content":"                                    + \"The date/time of an event cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":236,"author":{"gitId":"dannytayjy"},"content":"                                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":237,"author":{"gitId":"dannytayjy"},"content":"                                    + \"[Note: Enter /at before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":238,"author":{"gitId":"dannytayjy"},"content":"                        }","lastModifiedDate":"2021-08-30"},{"lineNumber":239,"author":{"gitId":"dannytayjy"},"content":"                    } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":240,"author":{"gitId":"dannytayjy"},"content":"                        throw new DukeException(\"INCOMPLETE \u0026 WRONG COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":241,"author":{"gitId":"dannytayjy"},"content":"                                + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":242,"author":{"gitId":"dannytayjy"},"content":"                                + \"The description of an event cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":243,"author":{"gitId":"dannytayjy"},"content":"                                + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":244,"author":{"gitId":"dannytayjy"},"content":"                                + \"Enter /at before specifying the date/time!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":245,"author":{"gitId":"dannytayjy"},"content":"                    }","lastModifiedDate":"2021-08-30"},{"lineNumber":246,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2021-08-30"},{"lineNumber":247,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":248,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":249,"author":{"gitId":"dannytayjy"},"content":"                        + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":250,"author":{"gitId":"dannytayjy"},"content":"                        + \"The date/time of an event cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":251,"author":{"gitId":"dannytayjy"},"content":"                        + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":252,"author":{"gitId":"dannytayjy"},"content":"                        + \"[Note: Enter /at before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":253,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":254,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":255,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":256,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":257,"author":{"gitId":"dannytayjy"},"content":"                    + \"The description and date/time of an event cannot be empty!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":258,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":259,"author":{"gitId":"dannytayjy"},"content":"                    + \"[Note: Enter /at before specifying the date/time]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":260,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":261,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":262,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":263,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":264,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":265,"author":{"gitId":"dannytayjy"},"content":"     * @param commandInfo","lastModifiedDate":"2021-09-09"},{"lineNumber":266,"author":{"gitId":"dannytayjy"},"content":"     * @return","lastModifiedDate":"2021-09-09"},{"lineNumber":267,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException","lastModifiedDate":"2021-09-09"},{"lineNumber":268,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":269,"author":{"gitId":"dannytayjy"},"content":"    private String getDateFromPrintCommand(String commandInfo) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":270,"author":{"gitId":"dannytayjy"},"content":"        if (commandInfo.trim().length() \u003e 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":271,"author":{"gitId":"dannytayjy"},"content":"            if (commandInfo.trim().startsWith(\"/on\")) {","lastModifiedDate":"2021-08-30"},{"lineNumber":272,"author":{"gitId":"dannytayjy"},"content":"                String[] specificDateParts \u003d commandInfo.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-30"},{"lineNumber":273,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":274,"author":{"gitId":"dannytayjy"},"content":"                if (specificDateParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":275,"author":{"gitId":"dannytayjy"},"content":"                    return specificDateParts[1];","lastModifiedDate":"2021-08-30"},{"lineNumber":276,"author":{"gitId":"dannytayjy"},"content":"                } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":277,"author":{"gitId":"dannytayjy"},"content":"                    throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":278,"author":{"gitId":"dannytayjy"},"content":"                            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":279,"author":{"gitId":"dannytayjy"},"content":"                            + \"The date is not specified!\"","lastModifiedDate":"2021-08-30"},{"lineNumber":280,"author":{"gitId":"dannytayjy"},"content":"                            + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":281,"author":{"gitId":"dannytayjy"},"content":"                            + \"[Note: Enter /on before specifying the date]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":282,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2021-08-30"},{"lineNumber":283,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":284,"author":{"gitId":"dannytayjy"},"content":"                throw new DukeException(\"WRONG COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":285,"author":{"gitId":"dannytayjy"},"content":"                        + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":286,"author":{"gitId":"dannytayjy"},"content":"                        + \"Enter /on before specifying the date!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":287,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":288,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":289,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"INCOMPLETE COMMAND\"","lastModifiedDate":"2021-08-30"},{"lineNumber":290,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + \"\\t\"","lastModifiedDate":"2021-08-30"},{"lineNumber":291,"author":{"gitId":"dannytayjy"},"content":"                    + \"Enter /on before specifying the date!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":292,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":293,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":294,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"dannytayjy":294}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskWithDateTime;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"import java.io.File;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"import java.util.Queue;","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":" * A class that contains methods to read from and write to the storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"public class Storage {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    private String pathName;","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    private String fileName;","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    private File dataDirectory;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    private File dataFile;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Storage class.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param pathName Path of the file","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param fileName Name of the file","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeExceptio If initializing the directory fails","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If initializing the file fails","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public Storage(String pathName, String fileName) throws DukeException, IOException {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        this.pathName \u003d pathName;","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        dataDirectory \u003d initialiseDirectory();","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        dataFile \u003d initialiseFile(dataDirectory);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * Creates the directory for the storage file if the directory does not exist.","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @return The File object","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the directory cannot be created","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    private File initialiseDirectory() throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        File directory \u003d new File(pathName);","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"        boolean hasDirectory \u003d directory.exists();","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        if (!hasDirectory) {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"            hasDirectory \u003d directory.mkdir();","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        if (hasDirectory) {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            return directory;","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"\\t\" + \"Unable to initialise directory\");","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     * Creates the storage file if it does not exist.","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"     * @param directory The directory of the storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"     * @return The File object","lastModifiedDate":"2021-09-09"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the file cannot be created","lastModifiedDate":"2021-09-09"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"    private File initialiseFile(File directory) throws IOException {","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"        File file \u003d new File(directory + \"/\" + fileName);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"        boolean hasFile \u003d file.exists();","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"        if (!hasFile) {","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"            hasFile \u003d file.createNewFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"        if (hasFile) {","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"            return file;","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"            throw new IOException(\"\\t\" + \"Unable to initialise file\");","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"     * Loads tasks from the storage file.","lastModifiedDate":"2021-09-09"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"     * @return The list of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be loaded","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"    public TaskList loadTasksFromFile() throws IOException {","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"        FileReader fileReader \u003d new FileReader(dataFile);","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"        String line;","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"        while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"            String[] taskDetails \u003d line.trim().split(\"\\\\|\");","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"            String type \u003d taskDetails[0].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"            boolean isDone \u003d (Integer.parseInt(taskDetails[1].trim()) \u003d\u003d 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"            String description \u003d taskDetails[2].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"            String dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"            switch (type) {","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"            case \"T\":","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"                Task todoTask \u003d new ToDo(TaskType.TODO, description, isDone);","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"                taskList.add(todoTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"                break;","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"            case \"D\":","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"                dateTime \u003d taskDetails[3].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"                Task deadlineTask \u003d new Deadline(TaskType.DEADLINE, description, dateTime, isDone);","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"                taskList.add(deadlineTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"                break;","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"            case \"E\":","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"                dateTime \u003d taskDetails[3].trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"                Task eventTask \u003d new Event(TaskType.EVENT, description, dateTime, isDone);","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"                taskList.add(eventTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"                break;","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"        bufferedReader.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"        return taskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"     * Saves the tasks to the storage file.","lastModifiedDate":"2021-09-09"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The list of tasks to be saved","lastModifiedDate":"2021-09-09"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"     * @throws IOException If the tasks cannot be saved","lastModifiedDate":"2021-09-09"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"    public void saveTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"        FileWriter fileWriter \u003d new FileWriter(dataFile,false);","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"            TaskType type \u003d task.getType();","lastModifiedDate":"2021-08-29"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"            boolean isDone \u003d task.isDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"            String description \u003d task.getDescription();","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"            String dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"            if (type \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2021-08-29"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"                dateTime \u003d \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"                dateTime \u003d ((TaskWithDateTime) task).getDateTimeInput();","lastModifiedDate":"2021-08-29"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"            String taskToSave \u003d taskSaveFormat(type, isDone, description, dateTime);","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"            bufferedWriter.write(taskToSave + System.lineSeparator());","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"        bufferedWriter.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"`","lastModifiedDate":"2021-09-09"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"     * Creates and returns the formatted task details to be saved.","lastModifiedDate":"2021-09-09"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the task has been completed","lastModifiedDate":"2021-09-09"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"     * @param description The task description","lastModifiedDate":"2021-09-09"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTime The date/time of the task","lastModifiedDate":"2021-09-09"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"     * @return The formatted task details","lastModifiedDate":"2021-09-09"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"    private String taskSaveFormat(TaskType type, boolean isDone, String description, String dateTime) {","lastModifiedDate":"2021-08-30"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"        if (dateTime.equals(\"\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"            return type.getAbbr() + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2021-08-29"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"            return type.getAbbr() + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + dateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"dannytayjy":169}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import java.util.List;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" * A class representing the task collection","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"public class TaskList {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of TaskList class.","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * Creates an ArrayList of tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * Returns the number of tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @return The number of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    public int size() {","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * Returns the Task object at a given index of the list of tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @param index The list index at which the Task has to be accessed","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @return The Task object","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * Adds a new Task","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     * @param task The Task to be added","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     * Removes a Task from the list at a given index.","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * @param index The index at which the Task is to be removed","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     * @return The removed Task object","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"    public Task remove(int index) {","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        tasks.remove(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        return task;","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"     * Removes a Task from the list.","lastModifiedDate":"2021-09-09"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"     * @param task The Task object to be removed","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * @return The removed Task object","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"    public Task remove(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"        tasks.remove(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        return task;","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"dannytayjy":67}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" * A class that contains methods to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"public class Ui {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     * Reads command line string from the user.","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"ENTER COMMAND:\");","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        System.out.print(\"\\t\");","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        return sc.nextLine().trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * Displays goodbye message on exiting.","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    public void exit() {","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        String message \u003d \"\\t\" + \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        displayResponse(message);","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Greets the user with a welcome message.","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public void displayWelcome() {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        displayWelcomeMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        displayMenuOptions();","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * Displays a message with proper formatting.","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * @param message Message to be displayed","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    public void displayResponse(String message) {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * Dis[lays an error message with proper formatting","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     * @param message Error message to be displayed","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"    public void displayError(String message) {","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        displayLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"ERROR MESSAGE:\");","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(\"\\t\" + \"☹ \" + message);","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     * Displays a line to seoarate different parts of a message","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"    public void displayLine() {","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"        String horizontalLine \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"     * Displays welcome message with proper formatting.","lastModifiedDate":"2021-09-09"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"    private void displayWelcomeMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"        String message \u003d \"\\t\" + \"Hello! I\u0027m Duke, your Personal Assistant ChatBot.\"","lastModifiedDate":"2021-09-09"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"What can I do for you?\"","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator();","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"     * Displays the menu of options.","lastModifiedDate":"2021-09-09"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"    private void displayMenuOptions() {","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"        String format \u003d \"%-25s%s%n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"        String menuOption1 \u003d \"\\t\" + \"list:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"        String menuOption1Info \u003d \"List the tasks in your list\";","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"        String menuOption2 \u003d \"\\t\" + \"todo ABC:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        String menuOption2Info \u003d \"Add a todo [T] task, ABC, into your list\";","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"        String menuOption3 \u003d \"\\t\" + \"deadline ABC /by XYZ:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"        String menuOption3Info \u003d \"Add a deadline [D] task, ABC, into your list \"","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"                + \"and specify the date/time, XYZ, it needs to be completed by\";","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"        String menuOption4 \u003d \"\\t\" + \"event ABC /at XYZ:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"        String menuOption4Info \u003d \"Add an event [E] task, ABC, into your list \"","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"                + \"and specify the start and end date/time, XYZ\";","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"        String menuOption5 \u003d \"\\t\" + \"done N:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"        String menuOption5Info \u003d \"Mark a task number, N, as done\";","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"        String menuOption6 \u003d \"\\t\" + \"delete N:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"        String menuOption6Info \u003d \"Delete a task number, N, from your list\";","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"        String menuOption7 \u003d \"\\t\" + \"print /on yyyy-mm-dd:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"        String menuOption7Info \u003d \"Print deadlines/events on a specific date\";","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"        String menuOption8 \u003d \"\\t\" + \"bye:\";","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"        String menuOption8Info \u003d \"Exit the ChatBot\";","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption1, menuOption1Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption2, menuOption2Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption3, menuOption3Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption4, menuOption4Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption5, menuOption5Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption6, menuOption6Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption7, menuOption7Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"        System.out.printf(format, menuOption8, menuOption8Info);","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"     * Displays a message when a new task is added.","lastModifiedDate":"2021-09-09"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"     * @param task The task added","lastModifiedDate":"2021-09-09"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"     * @return","lastModifiedDate":"2021-09-09"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"    public String taskAddedMessage(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Got it. I\u0027ve added this task:\"","lastModifiedDate":"2021-08-29"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"     * Displays a message when a task is removed","lastModifiedDate":"2021-09-09"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"     * @param task The task removed","lastModifiedDate":"2021-09-09"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"     * @return","lastModifiedDate":"2021-09-09"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"    public String taskDeletedMessage(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Noted. I\u0027ve removed this task:\"","lastModifiedDate":"2021-08-29"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"     * Displays a message when a task has been executed.","lastModifiedDate":"2021-09-09"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"     * @param task The task executed","lastModifiedDate":"2021-09-09"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"     * @return","lastModifiedDate":"2021-09-09"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"    public String taskDoneMessage(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Nice! I\u0027ve marked this task as done:\"","lastModifiedDate":"2021-08-29"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + \"\\t\\t\" + task;","lastModifiedDate":"2021-08-29"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"     * Gets a message containing the number of tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"     * @return a string containing size of the list of tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"    public String getNumOfTasksInList(TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"        return \"\\t\" + \"Now you have \" + taskList.size()","lastModifiedDate":"2021-08-30"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"                + (taskList.size() \u003e 1 ? \" tasks\" : \" task\")","lastModifiedDate":"2021-08-30"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"                + \" in the list.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"     * Gets a message containing the list of tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"     * @return a string containing the list of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"    public String getTasksInList(TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"        StringBuilder response \u003d new StringBuilder(\"\\t\" + \"Here are the tasks in your list:\"","lastModifiedDate":"2021-08-29"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2021-08-29"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"                + \"\\t\" + \"[Legend: T \u003d todo, D \u003d deadline, E \u003d event]\"","lastModifiedDate":"2021-08-29"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator()","lastModifiedDate":"2021-08-29"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator());","lastModifiedDate":"2021-08-29"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"            if (i !\u003d 0) {","lastModifiedDate":"2021-08-29"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"                response.append(System.lineSeparator());","lastModifiedDate":"2021-08-29"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"            response.append(\"\\t\\t\").append(i + 1).append(\".\")","lastModifiedDate":"2021-08-29"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"                    .append(\"\\t\").append(taskList.get(i).toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"        return response.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":186,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":187,"author":{"gitId":"dannytayjy"},"content":"     * Gets a message containing the list of tasks on a specified date.","lastModifiedDate":"2021-09-09"},{"lineNumber":188,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr The date corresponding which the tasks have to be found.","lastModifiedDate":"2021-09-09"},{"lineNumber":189,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of all tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":190,"author":{"gitId":"dannytayjy"},"content":"     * @return a string containing the list of tasks on the given date","lastModifiedDate":"2021-09-09"},{"lineNumber":191,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":192,"author":{"gitId":"dannytayjy"},"content":"    public String getTasksOnDate(String dateStr, TaskList taskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":193,"author":{"gitId":"dannytayjy"},"content":"        TaskList taskOnDateList \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":194,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":195,"author":{"gitId":"dannytayjy"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":196,"author":{"gitId":"dannytayjy"},"content":"            if (taskList.get(i).isOnDate(dateStr)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":197,"author":{"gitId":"dannytayjy"},"content":"                taskOnDateList.add(taskList.get(i));","lastModifiedDate":"2021-08-30"},{"lineNumber":198,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":199,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":200,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":201,"author":{"gitId":"dannytayjy"},"content":"        StringBuilder response;","lastModifiedDate":"2021-08-29"},{"lineNumber":202,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":203,"author":{"gitId":"dannytayjy"},"content":"        if (taskOnDateList.size() !\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":204,"author":{"gitId":"dannytayjy"},"content":"            response \u003d new StringBuilder(\"\\t\" + \"Here are the tasks on this date (\"","lastModifiedDate":"2021-08-29"},{"lineNumber":205,"author":{"gitId":"dannytayjy"},"content":"                    + processDateStr(dateStr) + \"):\"","lastModifiedDate":"2021-08-29"},{"lineNumber":206,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2021-08-29"},{"lineNumber":207,"author":{"gitId":"dannytayjy"},"content":"                    + \"\\t\" + \"[Legend: T \u003d todo, D \u003d deadline, E \u003d event]\"","lastModifiedDate":"2021-08-29"},{"lineNumber":208,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator()","lastModifiedDate":"2021-08-29"},{"lineNumber":209,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2021-08-29"},{"lineNumber":210,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":211,"author":{"gitId":"dannytayjy"},"content":"            for (int i \u003d 0; i \u003c taskOnDateList.size(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":212,"author":{"gitId":"dannytayjy"},"content":"                if (i !\u003d 0) {","lastModifiedDate":"2021-08-29"},{"lineNumber":213,"author":{"gitId":"dannytayjy"},"content":"                    response.append(System.lineSeparator());","lastModifiedDate":"2021-08-29"},{"lineNumber":214,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":215,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":216,"author":{"gitId":"dannytayjy"},"content":"                response.append(\"\\t\\t\").append(i + 1).append(\".\")","lastModifiedDate":"2021-08-29"},{"lineNumber":217,"author":{"gitId":"dannytayjy"},"content":"                        .append(\"\\t\").append(taskOnDateList.get(i).toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":218,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":219,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":220,"author":{"gitId":"dannytayjy"},"content":"            response \u003d new StringBuilder(\"\\t\" + \"There are no tasks on this date.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":221,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":222,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":223,"author":{"gitId":"dannytayjy"},"content":"        return response.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":224,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":225,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":226,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":227,"author":{"gitId":"dannytayjy"},"content":"     * Converts a given date from local format to \"mmm d yyyy\" format.","lastModifiedDate":"2021-09-09"},{"lineNumber":228,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr A string containing date in local format","lastModifiedDate":"2021-09-09"},{"lineNumber":229,"author":{"gitId":"dannytayjy"},"content":"     * @return A string containing date in \"mmm d yyyy\" format","lastModifiedDate":"2021-09-09"},{"lineNumber":230,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":231,"author":{"gitId":"dannytayjy"},"content":"    private String processDateStr(String dateStr) {","lastModifiedDate":"2021-08-29"},{"lineNumber":232,"author":{"gitId":"dannytayjy"},"content":"        LocalDate date;","lastModifiedDate":"2021-08-29"},{"lineNumber":233,"author":{"gitId":"dannytayjy"},"content":"        String processedDateStr;","lastModifiedDate":"2021-08-29"},{"lineNumber":234,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":235,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":236,"author":{"gitId":"dannytayjy"},"content":"            date \u003d LocalDate.parse(dateStr);","lastModifiedDate":"2021-08-29"},{"lineNumber":237,"author":{"gitId":"dannytayjy"},"content":"            processedDateStr \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":238,"author":{"gitId":"dannytayjy"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":239,"author":{"gitId":"dannytayjy"},"content":"            processedDateStr \u003d dateStr;","lastModifiedDate":"2021-08-29"},{"lineNumber":240,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":241,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":242,"author":{"gitId":"dannytayjy"},"content":"        return processedDateStr;","lastModifiedDate":"2021-08-29"},{"lineNumber":243,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":244,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"dannytayjy":244}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":" * An abstract class to represent add command operation","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    private String taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     * Initializes the instance of AddCommand with task type and description.","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription: Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    public AddCommand(String type, String taskDescription) {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"        super(type);","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * Returns task description.","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * @return Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        return taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * An abstract method to execute an AddCommand task.","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * The method will be implemented in the derived classes.","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An instance of a class to handle i/o operations","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An instance of a class to read from and write to file","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":40}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" * A class that contains methods to add a Deadline command","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    private String taskDateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of AddDeadlineCommand class.","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param taskInfo Further information about the task","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public AddDeadlineCommand(String type, String taskInfo) {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        super(type, taskInfo.split(\"/\", 2)[0].trim());","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        String taskByDateTime \u003d taskInfo.split(\"/\", 2)[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        taskDateTime \u003d taskByDateTime.split(\"\\\\s+\", 2)[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Executes the task","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to file","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"            addDeadlineTask(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     *","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException Any exception found","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"    public void addDeadlineTask(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        Task newDeadlineTask \u003d new Deadline(TaskType.DEADLINE, super.getTaskDescription(), taskDateTime);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        taskList.add(newDeadlineTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskAddedMessage(newDeadlineTask)","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + ui.getNumOfTasksInList(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":61}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" * A class that contains methods to add Event tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    private String taskDateTime;","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of AddEventCommand class","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param taskInfo Further information about the task","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public AddEventCommand(String type, String taskInfo) {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        super(type, taskInfo.split(\"/\", 2)[0].trim());","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        String taskAtDateTime \u003d taskInfo.split(\"/\", 2)[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        taskDateTime \u003d taskAtDateTime.split(\"\\\\s+\", 2)[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Executes an Event task","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to file","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"            addEventTask(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     * Adds an Event task","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList List of tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException Any exception","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"    public void addEventTask(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        Task newEventTask \u003d new Event(TaskType.EVENT, super.getTaskDescription(), taskDateTime);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        taskList.add(newEventTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskAddedMessage(newEventTask)","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + ui.getNumOfTasksInList(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":61}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":" * A class that contains methods to add ToDo tasks to task list and a storage file.","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"public class AddToDoCommand extends AddCommand {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of AddToDoComman task.","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param taskDescription Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public AddToDoCommand(String type, String taskDescription) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        super(type, taskDescription);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     * Executes the operation of adding a new ToDo task to the list and","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * saving it to the file.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to storage file.","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"            addToDoTask(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * Creates a new ToDo task and adds it to the task list.","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If a new ToDo task cannot be created","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void addToDoTask(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        Task newToDoTask \u003d new ToDo(TaskType.TODO, super.getTaskDescription());","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        taskList.add(newToDoTask);","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"        String response \u003d ui.taskAddedMessage(newToDoTask)","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"                + System.lineSeparator() + ui.getNumOfTasksInList(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":57}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":" * An abstract class representing the command.","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    private String type; // Type of command","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private boolean isExit; // If the user wants to exit","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public Command(String type) {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    public String getType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        return type;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        return isExit;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    public void setExit() {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"dannytayjy":32}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" * A class that contaisn methods to delete a task","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    private int taskNum;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of DeleteCommand class with task type and task number.","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * @param type Task type","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Task number","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public DeleteCommand(String type, int taskNum) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        super(type);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * Executes deleting the task from the task list, and updating the storage file.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"            deleteTask(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task number is not valid","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void deleteTask(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.size()) {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"            Task taskDeleted \u003d taskList.remove(taskNum - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"            String response \u003d ui.taskDeletedMessage(taskDeleted)","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"                    + System.lineSeparator() + ui.getNumOfTasksInList(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"Task not found. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":60}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":" * A class that contains methods to handle Done command","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    private int taskNum;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instanceof Done class with task type and task number.","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param taskNum Task number","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    public DoneCommand(String type, int taskNum) {","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"        super(type);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        this.taskNum \u003d taskNum;","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of marking a task done, and updates the storage file.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"            markDone(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"            storage.saveTasksToFile(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * Marks the task as done.","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task number is not valid","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"    public void markDone(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d taskList.size()) {","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"            Task taskDone \u003d taskList.get(taskNum - 1);","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"            taskDone.setDone();","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"            String response \u003d ui.taskDoneMessage(taskDone);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"Task not found. Please try again!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":60}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":" * A class to handle clean up operations on exiting the program","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of ExitCommand class.","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of command (Exit)","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    public ExitCommand(String type) {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"        super(type);","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * Executes clean up operations on exiting the program.","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        setExit();","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        ui.exit();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":30}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" * A class to handle the command of listing the tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of ListCommand class.","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task (List)","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    public ListCommand(String type) {","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"        super(type);","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of listing the tasks.","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to the storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"            displayTasksList(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * Displays the tasks in proper format.","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If the task list is empty","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"    public void displayTasksList(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.size() !\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"            String response \u003d ui.getTasksInList(taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"            ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"There are no tasks in your list!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":49}},{"path":"src/main/java/duke/command/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.command;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" * A class to handle print command to print tasks corresponding to a given date.","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"public class PrintCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private String date;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of PrintCommand class.","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of command","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * @param date The specified date","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    public PrintCommand(String type, String date) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        super(type);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * Returns the specified date correspondign to which the tasks are to be printed","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * @return The specified date","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    public String getDate() {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"        return date;","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * Executes the command of printing tasks corresponding to the given date.","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @param storage An object to read from and write to the storage file","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"            printTasksOnDate(taskList, ui);","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"     * Prints tasks corresponding to the given date.","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"     * @param taskList The task list","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"     * @param ui An object to handle i/o operations through screen","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * @throws DukeException If no task on the given date is found","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"    public void printTasksOnDate(TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"        if (taskList.size() !\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            String response \u003d ui.getTasksOnDate(date, taskList);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            ui.displayResponse(response);","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"            throw new DukeException(\"There are no tasks on this date!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"dannytayjy":61}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class to handle Deadline tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class Deadline extends TaskWithDateTime {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Deadline class with task type, task description,","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * and the date/time by which the task has to be completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time by whuch the tas has to be completed","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public Deadline(TaskType type, String description, String dateTimeInput) {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, dateTimeInput);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Deadline class with task type, task description,","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * date/time by which the task has to be completed and whether the task has been done.","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time by whuch the tas has to be completed","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone A flag to indicate if the task has been done","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    public Deadline(TaskType type, String description, String dateTimeInput, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, dateTimeInput, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * Gets the date/time information by which the task is to be completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @return Date/time information","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    public String dateTimeInfo() {","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"        return \"(by: \" + super.getDateTimeOutput() + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"     * Gets a string representation of the task.","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     * @return A string representation of the task","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"        return \"[\" + TaskType.DEADLINE.getAbbr() + \"] \" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":47}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class to handle Event tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class Event extends TaskWithDateTime {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Event class with task type, description,","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * and the date/time at which the task is to be performed.","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time at which the task is to be performed","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    public Event(TaskType type, String description, String dateTimeInput) {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, dateTimeInput);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Event class with task type, description,","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * date/time at which the task is to be performed and whether the task","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * has been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput Date/time at which the task is to be performed","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone A flag to indicate if the task has been completed","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    public Event(TaskType type, String description, String dateTimeInput, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, dateTimeInput, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * Gets date/time info of the task in output format.","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @return date/time info","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    public String dateTimeInfo() {","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        return \"(at: \" + super.getDateTimeOutput() +\")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"     * Gets a string representation of a task with date/time.","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"     * @return A string representation of the task","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"        return \"[\" + TaskType.EVENT.getAbbr() + \"] \" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":48}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * An abstract class that represents tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    private TaskType type;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"    private String description;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Task class with task type and description.","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    public Task(TaskType type, String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"        // By default, assume that the task has not been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"        this(type, description, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of Task class with task type, description and","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     * a flag to indicate if the task has been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone Flag to indicate if the task has been completed","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    public Task(TaskType type, String description, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     * Gets the type of task.","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"     * @return Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    public TaskType getType() {","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        return type;","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * Gets the task description.","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * @return String containign the task description","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        return description;","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"     * Gets a flag to indicate if the task has been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"     * @return The boolean flag","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"        return isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"     * Gets status icon for the task.","lastModifiedDate":"2021-09-09"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"     * @return The string representation of the status icon","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"        return (isDone ? \"[✔]\" : \"[ ]\"); // mark done task with ✔","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"     * Sets the isDone flag to true to indicate tat the task has been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"    public void setDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"     * Finds if the task is on a specified date.","lastModifiedDate":"2021-09-09"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"     * The function will be overridden in derived classes.","lastModifiedDate":"2021-09-09"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr The date by which the task is to be completed","lastModifiedDate":"2021-09-09"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"     * @return False because, by default, a task is not on a specified date","lastModifiedDate":"2021-09-09"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"    public boolean isOnDate(String dateStr) {","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"     * Gets a description of the task.","lastModifiedDate":"2021-09-09"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"     * @return A string containign description of the task","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":91}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * An enumeration for different commands","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public enum TaskType {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    TODO(\"todo\", \"T\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"    DEADLINE(\"deadline\", \"D\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"    EVENT(\"event\", \"E\");","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    private final String label;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private final String abbr;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of TaskType enumeration.","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"     * @param label Label of the enumeration (task type)","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * @param abbr Abbreviation of the enumeration (task type)","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"    TaskType(String label, String abbr) {","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"        this.label \u003d label;","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"        this.abbr \u003d abbr;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"     * Gets the label of the task type.","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"     * @return Label","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    public String getLabel() {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"        return label;","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * Gets the abbreviation of the task type.","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @return Abbreviation","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    public String getAbbr() {","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        return abbr;","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":39}},{"path":"src/main/java/duke/task/TaskWithDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":" * A class that represents tasks on a date/time","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public abstract class TaskWithDateTime extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    private String dateTimeInput;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    private String dateInput;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"    private String timeInput;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    private LocalTime time;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    private String dateTimeOutput; // DateTime (of the task) to be printed","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of TaskWithDateTime class with task type, description, and date/time.","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput The input date/time by which the task has to be completed","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"    public TaskWithDateTime(TaskType type, String description, String dateTimeInput) {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"        this(type, description, dateTimeInput, false);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of TaskWithDateTime class with task type, description,","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     * date/time, and whether the task has been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"     * @param dateTimeInput The input date/time by which the task has to be completed","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone A flag to indicate if the task has been completed","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"dannytayjy"},"content":"    public TaskWithDateTime(TaskType type, String description, String dateTimeInput, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"dannytayjy"},"content":"        this.dateTimeInput \u003d dateTimeInput;","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"dannytayjy"},"content":"        processDateTimeInput();","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"dannytayjy"},"content":"     * Processes the input date/time string to find the specific details of the","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"dannytayjy"},"content":"     * date and time of the task.","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"dannytayjy"},"content":"    private void processDateTimeInput() {","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"dannytayjy"},"content":"        boolean isTimeInputProper \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"dannytayjy"},"content":"        String[] dateTimeInputParts \u003d dateTimeInput.split(\"\\\\s+\", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"dannytayjy"},"content":"        if (dateTimeInputParts.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"dannytayjy"},"content":"            dateInput \u003d dateTimeInputParts[0].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"dannytayjy"},"content":"            timeInput \u003d dateTimeInputParts[1].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"dannytayjy"},"content":"            // Omit any additional whitespaces in between date and time inputs","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"dannytayjy"},"content":"            dateTimeInput \u003d dateInput + \" \" + timeInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"dannytayjy"},"content":"            dateInput \u003d dateTimeInputParts[0].trim();","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"dannytayjy"},"content":"            timeInput \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"dannytayjy"},"content":"            // Omit any additional whitespaces that comes with date input","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"dannytayjy"},"content":"            dateTimeInput \u003d dateInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"dannytayjy"},"content":"        // Process dateInput","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"dannytayjy"},"content":"            date \u003d LocalDate.parse(dateInput);","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"dannytayjy"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"dannytayjy"},"content":"            date \u003d null;","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"dannytayjy"},"content":"        // Process timeInput","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"dannytayjy"},"content":"        if (!timeInput.equals(\"\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"dannytayjy"},"content":"            try {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"dannytayjy"},"content":"                int timeInputInInt \u003d Integer.parseInt(timeInput);","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"dannytayjy"},"content":"                if ((timeInputInInt \u003c 0 || timeInputInInt \u003e 2359)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"dannytayjy"},"content":"                    isTimeInputProper \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"dannytayjy"},"content":"                    time \u003d null;","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"dannytayjy"},"content":"                } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"dannytayjy"},"content":"                    if (timeInput.length() !\u003d 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"dannytayjy"},"content":"                        isTimeInputProper \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"dannytayjy"},"content":"                        time \u003d null;","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"dannytayjy"},"content":"                    } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"dannytayjy"},"content":"                        int hour \u003d timeInputInInt / 100;","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"dannytayjy"},"content":"                        int min \u003d timeInputInInt - (hour * 100);","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"dannytayjy"},"content":"                        String timeInputInTimeFormat \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"dannytayjy"},"content":"                        if (hour \u003c 10) {","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"dannytayjy"},"content":"                            timeInputInTimeFormat +\u003d \"0\" + hour;","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"dannytayjy"},"content":"                        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"dannytayjy"},"content":"                            timeInputInTimeFormat +\u003d hour;","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"dannytayjy"},"content":"                        }","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"dannytayjy"},"content":"                        if (min \u003c 10) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"dannytayjy"},"content":"                            timeInputInTimeFormat +\u003d \":\" + \"0\" + min;","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"dannytayjy"},"content":"                        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"dannytayjy"},"content":"                            timeInputInTimeFormat +\u003d \":\" + min;","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"dannytayjy"},"content":"                        }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"dannytayjy"},"content":"                        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ISO_LOCAL_TIME;","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"dannytayjy"},"content":"                        time \u003d LocalTime.parse(timeInputInTimeFormat, timeFormatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"dannytayjy"},"content":"                    }","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"dannytayjy"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"dannytayjy"},"content":"                time \u003d null;","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"dannytayjy"},"content":"            time \u003d null;","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"dannytayjy"},"content":"        // Generate dateTimeOutput","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"dannytayjy"},"content":"        dateTimeOutput \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"dannytayjy"},"content":"        if (date \u003d\u003d null \u0026\u0026 time \u003d\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"dannytayjy"},"content":"            dateTimeOutput \u003d dateTimeInput;","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"dannytayjy"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"dannytayjy"},"content":"            if (date !\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"dannytayjy"},"content":"                dateTimeOutput +\u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"dannytayjy"},"content":"                dateTimeOutput +\u003d dateInput;","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"dannytayjy"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"dannytayjy"},"content":"                dateTimeOutput +\u003d \", \" + time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"dannytayjy"},"content":"                if (!timeInput.equals(\"\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"dannytayjy"},"content":"                    if (isTimeInputProper) {","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"dannytayjy"},"content":"                        dateTimeOutput +\u003d \", \" + timeInput;","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"dannytayjy"},"content":"                    } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"dannytayjy"},"content":"                        dateTimeOutput +\u003d \", \" + timeInput + \" [Note: Invalid time format]\";","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"dannytayjy"},"content":"                    }","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"dannytayjy"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":140,"author":{"gitId":"dannytayjy"},"content":"     * Gets input date/time string.","lastModifiedDate":"2021-09-09"},{"lineNumber":141,"author":{"gitId":"dannytayjy"},"content":"     * @return Inout date/time string","lastModifiedDate":"2021-09-09"},{"lineNumber":142,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":143,"author":{"gitId":"dannytayjy"},"content":"    public String getDateTimeInput() {","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"dannytayjy"},"content":"        return dateTimeInput;","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":148,"author":{"gitId":"dannytayjy"},"content":"     * Gets the date/time information in output format.","lastModifiedDate":"2021-09-09"},{"lineNumber":149,"author":{"gitId":"dannytayjy"},"content":"     * @return Output date/time string","lastModifiedDate":"2021-09-09"},{"lineNumber":150,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":151,"author":{"gitId":"dannytayjy"},"content":"    public String getDateTimeOutput() {","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"dannytayjy"},"content":"        return dateTimeOutput;","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":155,"author":{"gitId":"dannytayjy"},"content":"    public abstract String dateTimeInfo();","lastModifiedDate":"2021-08-30"},{"lineNumber":156,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":157,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":158,"author":{"gitId":"dannytayjy"},"content":"     * Finds if the date/time of a task is equal to a specified date/time.","lastModifiedDate":"2021-09-09"},{"lineNumber":159,"author":{"gitId":"dannytayjy"},"content":"     * @param dateStr The specified date/time","lastModifiedDate":"2021-09-09"},{"lineNumber":160,"author":{"gitId":"dannytayjy"},"content":"     * @return A flag to indicate if the date/time of the task is same as the given value","lastModifiedDate":"2021-09-09"},{"lineNumber":161,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":162,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"dannytayjy"},"content":"    public boolean isOnDate(String dateStr) {","lastModifiedDate":"2021-08-30"},{"lineNumber":164,"author":{"gitId":"dannytayjy"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"dannytayjy"},"content":"            LocalDate dateToSearch \u003d LocalDate.parse(dateStr);","lastModifiedDate":"2021-08-30"},{"lineNumber":166,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"dannytayjy"},"content":"            if (date !\u003d null) {","lastModifiedDate":"2021-08-30"},{"lineNumber":168,"author":{"gitId":"dannytayjy"},"content":"                return date.equals(dateToSearch);","lastModifiedDate":"2021-08-30"},{"lineNumber":169,"author":{"gitId":"dannytayjy"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"dannytayjy"},"content":"                return dateInput.equals(dateStr);","lastModifiedDate":"2021-08-30"},{"lineNumber":171,"author":{"gitId":"dannytayjy"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":172,"author":{"gitId":"dannytayjy"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"dannytayjy"},"content":"            return dateInput.equals(dateStr);","lastModifiedDate":"2021-08-30"},{"lineNumber":174,"author":{"gitId":"dannytayjy"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":175,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":178,"author":{"gitId":"dannytayjy"},"content":"     * Gets a string representation of the date/time info.","lastModifiedDate":"2021-09-09"},{"lineNumber":179,"author":{"gitId":"dannytayjy"},"content":"     * @return A string representation of the date/time info","lastModifiedDate":"2021-09-09"},{"lineNumber":180,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":181,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":182,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":183,"author":{"gitId":"dannytayjy"},"content":"        return super.toString() + \" \" + dateTimeInfo();","lastModifiedDate":"2021-08-30"},{"lineNumber":184,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":185}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke.task;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"/**","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":" * A class that represents to do tasks","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":" */","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of ToDo class with task type and description.","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    public ToDo(TaskType type, String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"        super(type, description);","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"     * Initializes an instance of ToDo class with task type, description and","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"     * whether the task has been completed.","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"     * @param type Type of task","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"dannytayjy"},"content":"     * @param description Task description","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"dannytayjy"},"content":"     * @param isDone A flag to indicate if the task has been completed","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"dannytayjy"},"content":"    public ToDo(TaskType type, String description, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"dannytayjy"},"content":"        super(type, description, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"dannytayjy"},"content":"    /**","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"dannytayjy"},"content":"     * Gets a string representation of the ToDo task.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"dannytayjy"},"content":"     * @return A string representation of the ToDo task.","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"dannytayjy"},"content":"     */","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"dannytayjy"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"dannytayjy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"dannytayjy"},"content":"        return \"[\" + TaskType.TODO.getAbbr() + \"] \" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":35}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package duke;","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"public class DukeTest {","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"dannytayjy":4}},{"path":"src/test/java/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package task;","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-09-16"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2021-09-16"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"        Task deadlineOne \u003d new Deadline(TaskType.DEADLINE,\"CS2100 Lab 4\", \"2021-09-14\");","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[D] [ ] CS2100 Lab 4 (by: Sep 14 2021)\", deadlineOne.toString());","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"        Task deadlineTwo \u003d new Deadline(TaskType.DEADLINE,\"CS2100 Assignment 1\", \"2021-09-15 1300\");","lastModifiedDate":"2021-09-16"},{"lineNumber":17,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[D] [ ] CS2100 Assignment 1 (by: Sep 15 2021, 01:00 PM)\", deadlineTwo.toString());","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"dannytayjy":19}},{"path":"src/test/java/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package task;","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-09-16"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public class EventTest {","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2021-09-16"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"        Task event \u003d new Event(TaskType.EVENT, \"CS2103 tP Meeting\", \"2021-09-14 2100\");","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[E] [ ] CS2103 tP Meeting (at: Sep 14 2021, 09:00 PM)\", event.toString());","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"dannytayjy":16}},{"path":"src/test/java/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"package task;","lastModifiedDate":"2021-09-16"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-16"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"import duke.task.TaskType;","lastModifiedDate":"2021-09-16"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-16"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-16"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"public class ToDoTest {","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"    @Test","lastModifiedDate":"2021-09-16"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-09-16"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"        Task toDo \u003d new ToDo(TaskType.TODO,\"Vacuum room floor\");","lastModifiedDate":"2021-09-16"},{"lineNumber":14,"author":{"gitId":"dannytayjy"},"content":"        assertEquals(\"[T] [ ] Vacuum room floor\", toDo.toString());","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"dannytayjy"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":16,"author":{"gitId":"dannytayjy"},"content":"}","lastModifiedDate":"2021-09-16"}],"authorContributionMap":{"dannytayjy":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dannytayjy"},"content":"todo read book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"dannytayjy"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"dannytayjy"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"dannytayjy"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"dannytayjy"},"content":"todo join sports club","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"dannytayjy"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"dannytayjy"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"dannytayjy"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"dannytayjy"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"dannytayjy"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"dannytayjy"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"dannytayjy":13}}]

[{"path":"data/alexa.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"1.[E][ ] Mala  (at:21/02/2021)","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"DonnyS57":1}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":" * Represents the Deadline type of Task.","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Deadlines refer to a type of task that has a string as a description and a deadline to be met.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"    private String deadline;","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"     * The constructor of the Deadline.","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"     * @param description description of Deadline.","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"     * @param deadline deadline of Deadline.","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"     * Returns the deadline in string form.","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"     * @return Deadline in string form.","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"DonnyS57":30}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Represents the Duke chatbot. The chatbot currently acts as a to-do list that can take down 3 different types of tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" * You can mark the tasks as done and delete them when you\u0027re done with the tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    private duke.Storage storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"    private static Parser parser \u003d new Parser();","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the Duke class.","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"     * @param filePath file path of the previously saved Tasks (If Duke had been run previously).","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"        storage \u003d new duke.Storage(filePath);","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"            Ui.print(\"Hello! My name is Alexa \\nHow can I help you today?\");","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"            tasks \u003d new TaskList(duke.Storage.load());","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"        new Duke(\"data/alexa.txt\").run();","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"     * Runs the Duke chatbot.","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"     * It is actively waiting for inputs from the User in order to perform its functions.","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"    public static void run() {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"        Scanner newInput \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"        while(newInput.hasNextLine()) {","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"            String input \u003d newInput.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"DonnyS57"},"content":"            duke.Task currentTask \u003d new duke.Task(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"DonnyS57"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"DonnyS57"},"content":"                if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"DonnyS57"},"content":"                    Ui.print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"DonnyS57"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"DonnyS57"},"content":"                } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"DonnyS57"},"content":"                    Ui.list();","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"DonnyS57"},"content":"                } else if (parser.parseDone(input)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"DonnyS57"},"content":"                    Ui.done(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"DonnyS57"},"content":"                } else if (parser.parseFind(input)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"DonnyS57"},"content":"                    Ui.find(input);","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"DonnyS57"},"content":"                } else if (parser.parseToDo(input)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"DonnyS57"},"content":"                    TaskList.todo(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"DonnyS57"},"content":"                } else if (parser.parseDeadline(input)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"DonnyS57"},"content":"                    TaskList.deadline(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"DonnyS57"},"content":"                } else if (parser.parseEvent(input)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"DonnyS57"},"content":"                    TaskList.event(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"DonnyS57"},"content":"                } else if (parser.parseDelete(input)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"DonnyS57"},"content":"                    TaskList.delete(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"DonnyS57"},"content":"                } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"DonnyS57"},"content":"                    assert false : \"Input is wrong!\";","lastModifiedDate":"2021-09-21"},{"lineNumber":63,"author":{"gitId":"DonnyS57"},"content":"                    Ui.invalidInput();","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"DonnyS57"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"DonnyS57"},"content":"                duke.Storage.writeTasks();","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"DonnyS57"},"content":"            } catch (DukeException err){","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"DonnyS57"},"content":"                Ui.print(err.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"DonnyS57"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"DonnyS57":69,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":" * Class that represents all exceptions unique to Duke.","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * It inherits from the Java Exception class.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"     * The constructor of DukeException.","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"     *","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"     * @param message message to be displayed alongside the error.","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"DonnyS57":17}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Represents the Event type of Task.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" * Events refer to a type of task that has a string as a description and a date of when the event is happening.","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    private String date;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    private DateTimeFormatter test;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the Event class.","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"     * @param description description for the Event.","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"     * @param date date for the Event.","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"    public Event(String description, String date) {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"     * Returns a string form of the Event task.","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"     * @return returns the Event task in string form.","lastModifiedDate":"2021-09-10"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"        return \"[E]\" + super.toString() + \" (at:\" + date + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"DonnyS57":31}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Represents the class that helps to parse user inputs.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"public class Parser {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    private final static int doneConstant \u003d 5;","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    private final static int todoConstant \u003d 5;","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"    private final static int deadlineConstant \u003d 9;","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"    private final static int eventConstant \u003d 6;","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"    private final static int deleteConstant \u003d 7;","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    private final static int storageConstant \u003d 9;","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"    public Parser() {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"     * Returns boolean of whether the Done command had been inputted correctly by the user.","lastModifiedDate":"2021-09-10"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"     * @param input input of User.","lastModifiedDate":"2021-09-10"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"     * @return boolean of whether Done input was correct.","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"    public boolean parseDone(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"        return input.length() \u003e\u003d doneConstant \u0026\u0026 input.substring(0, 5).equals(\"done \");","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"     * Returns boolean of whether the Todo command had been inputted correctly by the user.","lastModifiedDate":"2021-09-10"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"     * @param input input of User.","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"     * @return boolean of whether Todo input was correct.","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"    public boolean parseToDo(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"        return input.length() \u003e\u003d todoConstant \u0026\u0026 input.substring(0, 5).equals(\"todo \");","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"DonnyS57"},"content":"     * Returns boolean of whether the Deadline command had been inputted correctly by the user.","lastModifiedDate":"2021-09-10"},{"lineNumber":43,"author":{"gitId":"DonnyS57"},"content":"     * @param input input of User.","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"DonnyS57"},"content":"     * @return boolean of whether Deadline input was correct.","lastModifiedDate":"2021-09-10"},{"lineNumber":45,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"DonnyS57"},"content":"    public boolean parseDeadline(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"DonnyS57"},"content":"        return input.length() \u003e\u003d deadlineConstant \u0026\u0026 input.substring(0, 9).equals(\"deadline \");","lastModifiedDate":"2021-09-21"},{"lineNumber":48,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"DonnyS57"},"content":"     * Returns boolean of whether the Event command had been inputted correctly by the user.","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"DonnyS57"},"content":"     * @param input input of User.","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"DonnyS57"},"content":"     * @return boolean of whether Event input was correct.","lastModifiedDate":"2021-09-10"},{"lineNumber":54,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"DonnyS57"},"content":"    public boolean parseEvent(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"DonnyS57"},"content":"        return input.length() \u003e\u003d eventConstant \u0026\u0026 input.substring(0, 6).equals(\"event \");","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"DonnyS57"},"content":"     * Returns boolean of whether the Delete command had been inputted correctly by the user.","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"DonnyS57"},"content":"     * @param input input of User.","lastModifiedDate":"2021-09-10"},{"lineNumber":62,"author":{"gitId":"DonnyS57"},"content":"     * @return boolean of whether Delete input was correct.","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":64,"author":{"gitId":"DonnyS57"},"content":"    public boolean parseDelete(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"DonnyS57"},"content":"        return input.length() \u003e\u003d deleteConstant \u0026\u0026 input.substring(0, 7).equals(\"delete \");","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":68,"author":{"gitId":"DonnyS57"},"content":"    public String[] storageDeadline(String input) {","lastModifiedDate":"2021-09-10"},{"lineNumber":69,"author":{"gitId":"DonnyS57"},"content":"        int indexOfOpenBracketD \u003d input.indexOf(\"(\");","lastModifiedDate":"2021-09-10"},{"lineNumber":70,"author":{"gitId":"DonnyS57"},"content":"        int indexOfCloseBracketD \u003d input.indexOf(\")\");","lastModifiedDate":"2021-09-10"},{"lineNumber":71,"author":{"gitId":"DonnyS57"},"content":"        String deadlineDate \u003d input.substring(indexOfOpenBracketD + 4, indexOfCloseBracketD);","lastModifiedDate":"2021-09-10"},{"lineNumber":72,"author":{"gitId":"DonnyS57"},"content":"        String deadlineTitle \u003d input.substring(storageConstant, indexOfOpenBracketD);","lastModifiedDate":"2021-09-21"},{"lineNumber":73,"author":{"gitId":"DonnyS57"},"content":"        String[] deadlineWords \u003d {deadlineDate, deadlineTitle};","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"DonnyS57"},"content":"        return deadlineWords;","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"DonnyS57"},"content":"    public String[] storageEvent(String input) {","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"DonnyS57"},"content":"        int indexOfOpenBracketE \u003d input.indexOf(\"(\");","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"DonnyS57"},"content":"        int indexOfCloseBracketE \u003d input.indexOf(\")\");","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"DonnyS57"},"content":"        String eventDate \u003d input.substring(indexOfOpenBracketE + 4, indexOfCloseBracketE);","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"DonnyS57"},"content":"        String eventTitle \u003d input.substring(storageConstant, indexOfOpenBracketE);","lastModifiedDate":"2021-09-21"},{"lineNumber":82,"author":{"gitId":"DonnyS57"},"content":"        String[] eventWords \u003d {eventDate, eventTitle};","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"DonnyS57"},"content":"        return eventWords;","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":86,"author":{"gitId":"DonnyS57"},"content":"    public boolean parseFind(String input) {","lastModifiedDate":"2021-09-11"},{"lineNumber":87,"author":{"gitId":"DonnyS57"},"content":"        return input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0, 5).equals(\"find \");","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"DonnyS57":89}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"import java.io.File;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":" * Represents the class that helps to manage the storage of Task files.","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"public class Storage {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    private String filePath;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"    static private File dir;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"    static private File tmp;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"    static private Parser parser \u003d new Parser();","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the Storage.","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"     * @param filePath the file path of the storage file.","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"     * Loads existing task lists (If there is one) or creates a new empty task list if a previous one does not exist.","lastModifiedDate":"2021-09-14"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"     * @return an ArrayList that acts as a storage for the Tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if you have no pending tasks (list was empty when Duke is started).","lastModifiedDate":"2021-09-10"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"    public static ArrayList\u003cduke.Task\u003e load() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"        dir \u003d new File(\"data\");","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"        dir.mkdirs();","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"        tmp \u003d new File(dir, \"alexa.txt\");","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"        ArrayList\u003cduke.Task\u003e newStorage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"            boolean successfulCreate \u003d tmp.createNewFile();","lastModifiedDate":"2021-09-10"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"            Scanner myReader \u003d new Scanner(tmp);","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"            boolean hasNoTask \u003d true;","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"DonnyS57"},"content":"            while (myReader.hasNextLine()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"DonnyS57"},"content":"                if (hasNoTask) {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"DonnyS57"},"content":"                    System.out.println(\"Welcome back! Here are your last saved tasks!\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"DonnyS57"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"DonnyS57"},"content":"                hasNoTask \u003d false;","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"DonnyS57"},"content":"                String data \u003d myReader.nextLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"DonnyS57"},"content":"                String taskType \u003d data.substring(3, 4);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"DonnyS57"},"content":"                switch (taskType) {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"DonnyS57"},"content":"                case \"T\":","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"DonnyS57"},"content":"                    Todo newToDo \u003d new Todo(data.substring(9));","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"DonnyS57"},"content":"                    newStorage.add(newToDo);","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"DonnyS57"},"content":"                    break;","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"DonnyS57"},"content":"                case \"D\":","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"DonnyS57"},"content":"                    String[] deadlineData \u003d parser.storageDeadline(data);","lastModifiedDate":"2021-09-10"},{"lineNumber":56,"author":{"gitId":"DonnyS57"},"content":"                    Deadline newDeadline \u003d new Deadline(deadlineData[0], deadlineData[1]);","lastModifiedDate":"2021-09-10"},{"lineNumber":57,"author":{"gitId":"DonnyS57"},"content":"                    newStorage.add(newDeadline);","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"DonnyS57"},"content":"                    break;","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"DonnyS57"},"content":"                case \"E\":","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"DonnyS57"},"content":"                    String[] eventData \u003d parser.storageEvent(data);","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"DonnyS57"},"content":"                    Event newEvent \u003d new Event(eventData[0], eventData[1]);","lastModifiedDate":"2021-09-10"},{"lineNumber":62,"author":{"gitId":"DonnyS57"},"content":"                    newStorage.add(newEvent);","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"DonnyS57"},"content":"                    break;","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"DonnyS57"},"content":"                default:","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"DonnyS57"},"content":"                    assert false : \"Task type is wrong!\";","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"DonnyS57"},"content":"                    break;","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"DonnyS57"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"DonnyS57"},"content":"                System.out.println(\"    \" + data);","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"DonnyS57"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"DonnyS57"},"content":"            if (hasNoTask) {","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"DonnyS57"},"content":"                throw new DukeException(\"    Nice! You have no pending tasks!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"DonnyS57"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"DonnyS57"},"content":"            myReader.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"DonnyS57"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"DonnyS57"},"content":"            System.out.println(\"An error occurred.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"DonnyS57"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"DonnyS57"},"content":"        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"DonnyS57"},"content":"        return newStorage;","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"DonnyS57"},"content":"     * Writes new tasks into the text file to be saved.","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"DonnyS57"},"content":"     * The text file will then be loaded when Duke is started again.","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":86,"author":{"gitId":"DonnyS57"},"content":"    public static void writeTasks() {","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"DonnyS57"},"content":"        String sentence \u003d \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"DonnyS57"},"content":"        for (int i \u003d 1; i \u003c TaskList.noOfTasks() + 1; i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"DonnyS57"},"content":"            duke.Task currentTask \u003d TaskList.getCurrentTask(i - 1);","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"DonnyS57"},"content":"            sentence \u003d sentence + i + \".\" + currentTask.toString() + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"DonnyS57"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"DonnyS57"},"content":"            PrintWriter writer \u003d new PrintWriter(tmp.getAbsolutePath());","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"DonnyS57"},"content":"            writer.print(\"\");","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"DonnyS57"},"content":"            writer.print(sentence);","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"DonnyS57"},"content":"            writer.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"DonnyS57"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"DonnyS57"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"DonnyS57":101}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":" * Parent class that represents all tasks.","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"    private String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the task class.","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"     * It is assumed that a created task is not done yet.","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"     * @param description the description for the Task.","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"     * @return the status icon of the task based on whether the task has been done or not.","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"     * Returns the description of the task.","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"     * @return the description of the task.","lastModifiedDate":"2021-09-10"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"        return description;","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"     * Marks the selected task as done.","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"DonnyS57"},"content":"     * Returns the Task in the string form.","lastModifiedDate":"2021-09-10"},{"lineNumber":45,"author":{"gitId":"DonnyS57"},"content":"     * @return the Task in string form.","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":47,"author":{"gitId":"DonnyS57"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"DonnyS57"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"DonnyS57"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"DonnyS57":53}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Class to represent the list of tasks that the User has.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"public class TaskList {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"    static private ArrayList\u003cTask\u003e storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the TaskList if there already is an existing Storage.","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"     * @param filledStorage existing ArrayList.","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    public TaskList (ArrayList\u003cTask\u003e filledStorage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"        storage \u003d filledStorage;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the TaskList if there is no storage yet.","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"    public TaskList () {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"        storage \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"     * Calculates the number of tasks present in the task list.","lastModifiedDate":"2021-09-10"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"     * @return the number of tasks in the task list.","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"    public static int noOfTasks() {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"        return storage.size();","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"     * Creates a new Todo task which is added to the task list.","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"     * @param todoEntry description for the Todo task.","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if the User leaves the description blank.","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"    public static void todo(String todoEntry) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"        if (todoEntry.length() \u003d\u003d 5) {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter a description!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"DonnyS57"},"content":"        String todoTitle \u003d todoEntry.substring(5);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"DonnyS57"},"content":"        Todo newToDo \u003d new Todo(todoTitle);","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"DonnyS57"},"content":"        storage.add(newToDo);","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"DonnyS57"},"content":"        duke.Ui.print(\"Alright. I\u0027m adding this task:\\n  \" + newToDo.toString() + \"\\nNow there are \" + storage.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"DonnyS57"},"content":"                + \" tasks in the list\" );","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"DonnyS57"},"content":"     * Creates a new Deadline task which is added to the task list.","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"DonnyS57"},"content":"     * @param deadlineEntry description for the Deadline task.","lastModifiedDate":"2021-09-10"},{"lineNumber":53,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if the user does not enter a description or does not enter a deadline or provided the","lastModifiedDate":"2021-09-10"},{"lineNumber":54,"author":{"gitId":"DonnyS57"},"content":"     *      deadline in the wrong format.","lastModifiedDate":"2021-09-10"},{"lineNumber":55,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":56,"author":{"gitId":"DonnyS57"},"content":"    public static void deadline(String deadlineEntry) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"DonnyS57"},"content":"        if (deadlineEntry.length() \u003d\u003d 9) {","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter a description!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"DonnyS57"},"content":"        int indexOfSlash \u003d deadlineEntry.indexOf(\"/\");","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"DonnyS57"},"content":"        if (indexOfSlash \u003d\u003d -1) {","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter a deadline!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"DonnyS57"},"content":"        String deadlineDate \u003d deadlineEntry.substring(indexOfSlash + 4);","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"DonnyS57"},"content":"        if (Time.validateJavaDate(deadlineDate)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"DonnyS57"},"content":"            String deadlineTitle \u003d deadlineEntry.substring(9, indexOfSlash);","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"DonnyS57"},"content":"            deadlineDate \u003d Time.changeDateFormat(deadlineDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"DonnyS57"},"content":"            Deadline newDeadline \u003d new Deadline(deadlineTitle, deadlineDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"DonnyS57"},"content":"            storage.add(newDeadline);","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"DonnyS57"},"content":"            duke.Ui.print(\"Alright. I\u0027m adding this task:\\n  \" + newDeadline.toString() + \"\\nNow there are \" + storage.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"DonnyS57"},"content":"                    + \" tasks in the list\" );","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"DonnyS57"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter the deadline in the correct format! (DD/MM/YYYY)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"DonnyS57"},"content":"     * Creates a new Event task which is added to the task list.","lastModifiedDate":"2021-09-10"},{"lineNumber":81,"author":{"gitId":"DonnyS57"},"content":"     * @param eventEntry description for the Event task.","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if the user does not enter a description or does not enter an event date or provided the","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"DonnyS57"},"content":"     *      event date in the wrong format.","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"DonnyS57"},"content":"    public static void event(String eventEntry) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"DonnyS57"},"content":"        if (eventEntry.length() \u003d\u003d 6) {","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter a description!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"DonnyS57"},"content":"        int indexOfSlash \u003d eventEntry.indexOf(\"/\");","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"DonnyS57"},"content":"        if (indexOfSlash \u003d\u003d -1) {","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter an event time!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"DonnyS57"},"content":"        String eventDate \u003d eventEntry.substring(indexOfSlash + 4);","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"DonnyS57"},"content":"        if (Time.validateJavaDate(eventDate)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"DonnyS57"},"content":"            String eventTitle \u003d eventEntry.substring(6, indexOfSlash);","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"DonnyS57"},"content":"            Event newEvent \u003d new Event(eventTitle, eventDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"DonnyS57"},"content":"            storage.add(newEvent);","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"DonnyS57"},"content":"            duke.Ui.print(\"Alright. I\u0027m adding this task:\\n  \" + newEvent.toString() + \"\\nNow there are \" + storage.size()","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"DonnyS57"},"content":"                    + \" tasks in the list\" );","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"DonnyS57"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter the event in the correct format! (DD/MM/YYYY)\");","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":108,"author":{"gitId":"DonnyS57"},"content":"     * Deletes the task according to the User\u0027s input.","lastModifiedDate":"2021-09-10"},{"lineNumber":109,"author":{"gitId":"DonnyS57"},"content":"     * @param deleteInput contains the task number that the User wants to delete.","lastModifiedDate":"2021-09-10"},{"lineNumber":110,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if the task number is invalid.","lastModifiedDate":"2021-09-10"},{"lineNumber":111,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":112,"author":{"gitId":"DonnyS57"},"content":"    public static void delete(String deleteInput) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"DonnyS57"},"content":"        int taskNumber \u003d Integer.parseInt(deleteInput.substring(7,8));","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"DonnyS57"},"content":"        if (taskNumber \u003e storage.size()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter a valid task to delete!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"DonnyS57"},"content":"        duke.Task deletedTask \u003d storage.remove(taskNumber - 1);","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"DonnyS57"},"content":"        duke.Ui.print(\"Okay! I have deleted the task for you.\\n  \" + deletedTask.toString()","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"DonnyS57"},"content":"                + \"\\nNow there are \" + storage.size() + \" tasks in the list\");","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":123,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":124,"author":{"gitId":"DonnyS57"},"content":"     * Returns the task that has the task number inputted.","lastModifiedDate":"2021-09-10"},{"lineNumber":125,"author":{"gitId":"DonnyS57"},"content":"     * @param taskNumber task number that the User wants to get.","lastModifiedDate":"2021-09-10"},{"lineNumber":126,"author":{"gitId":"DonnyS57"},"content":"     * @return the Task that has the Task number that the User inputted.","lastModifiedDate":"2021-09-10"},{"lineNumber":127,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":128,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":129,"author":{"gitId":"DonnyS57"},"content":"    public static Task getCurrentTask(int taskNumber) {","lastModifiedDate":"2021-09-11"},{"lineNumber":130,"author":{"gitId":"DonnyS57"},"content":"        return storage.get(taskNumber);","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":133,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":134,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":135,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"DonnyS57":135}},{"path":"src/main/java/duke/Time.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"import java.util.Date;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":" * Manages the time inputs of the User for other classes.","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"public class Time {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"     * Checks whether the User has inputted a date in the correct format.","lastModifiedDate":"2021-09-10"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"     * @param strDate the inputted date by the User.","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"     * @return boolean based on whether the User inputted in the correct format.","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"    public static boolean validateJavaDate(String strDate) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"        SimpleDateFormat sdfrmt \u003d new SimpleDateFormat(\"dd/MM/yyyy\");","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"        sdfrmt.setLenient(false);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"        try {","lastModifiedDate":"2021-09-10"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"            Date javaDate \u003d sdfrmt.parse(strDate);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-09-14"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"            return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"        return true;","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"     * Changes the format of the date inputted by the User.","lastModifiedDate":"2021-09-10"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"     * @param date the date inputted by the User.","lastModifiedDate":"2021-09-10"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"     * @return the formatted date.","lastModifiedDate":"2021-09-10"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"    public static String changeDateFormat(String date) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"        LocalDate inputtedDate \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"        return inputtedDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"DonnyS57":41}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import duke.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Represents the Todo type of Task.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" * Todo refer to a type of task that has a string as a description.","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"     * Constructor for the Todo class.","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"     * @param description description for the Todo task.","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"     * Returns a string form of the Todo task.","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"     * @return returns the Todo task in string form.","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"DonnyS57":26}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"/**","lastModifiedDate":"2021-09-10"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":" * Class to contain all the UI elements of Duke.","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":" */","lastModifiedDate":"2021-09-10"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"public class Ui {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    private static final String separator \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"    public Ui() {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"     * Prints out the inputted text in the specified format.","lastModifiedDate":"2021-09-10"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"     * @param text the text to be printed.","lastModifiedDate":"2021-09-10"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"    public static void print(String text) {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"DonnyS57"},"content":"        System.out.println(separator);","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"DonnyS57"},"content":"        text.lines().map(x -\u003e \"    \" + x).forEach(x -\u003e System.out.println(x));","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"DonnyS57"},"content":"        System.out.println(separator);","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":27,"author":{"gitId":"DonnyS57"},"content":"     * Marks a task as done.","lastModifiedDate":"2021-09-10"},{"lineNumber":28,"author":{"gitId":"DonnyS57"},"content":"     * @param doneEntry input for the task to be marked as done.","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if the task number inputted is invalid.","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":31,"author":{"gitId":"DonnyS57"},"content":"    public static void done(String doneEntry) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"DonnyS57"},"content":"        int taskNumber \u003d Integer.parseInt(doneEntry.substring(5,6));","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"DonnyS57"},"content":"        if (taskNumber \u003e TaskList.noOfTasks()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"DonnyS57"},"content":"            throw new DukeException(\"Sorry ☹, please enter a valid task to complete!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"DonnyS57"},"content":"        duke.Task doneTask \u003d TaskList.getCurrentTask(taskNumber - 1);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"DonnyS57"},"content":"        doneTask.markAsDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"DonnyS57"},"content":"        print(\"Congratulations on finishing this task!\\n [X] \" + doneTask.getDescription());","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"DonnyS57"},"content":"     * Throws an exception when the User enters an invalid input.","lastModifiedDate":"2021-09-10"},{"lineNumber":43,"author":{"gitId":"DonnyS57"},"content":"     * @throws DukeException if the input entered by the user is invalid.","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":45,"author":{"gitId":"DonnyS57"},"content":"    public static void invalidInput() throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"DonnyS57"},"content":"        throw new DukeException(\"Sorry ☹, please enter a valid command!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"DonnyS57"},"content":"    /**","lastModifiedDate":"2021-09-10"},{"lineNumber":50,"author":{"gitId":"DonnyS57"},"content":"     * Prints out the list of tasks that the User currently has.","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"DonnyS57"},"content":"     */","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"DonnyS57"},"content":"    public static void list() {","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"DonnyS57"},"content":"        int len \u003d TaskList.noOfTasks();","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"DonnyS57"},"content":"        String sentence \u003d \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"DonnyS57"},"content":"        for (int i \u003d 1; i \u003c len + 1; i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"DonnyS57"},"content":"            Task currentTask \u003d TaskList.getCurrentTask(i - 1);","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"DonnyS57"},"content":"            sentence \u003d sentence + i + \".\" + currentTask.toString() + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"DonnyS57"},"content":"        if (len \u003d\u003d 0) {","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"DonnyS57"},"content":"            print(\"You currently have no pending tasks!\");","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"DonnyS57"},"content":"        } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"DonnyS57"},"content":"            sentence \u003d \"Here are your current tasks!\" + \"\\n\" + sentence;","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"DonnyS57"},"content":"            print(sentence);","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"DonnyS57"},"content":"    public static void find(String findWord) {","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"DonnyS57"},"content":"        String word \u003d findWord.substring(5);","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"DonnyS57"},"content":"        int len \u003d TaskList.noOfTasks();","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"DonnyS57"},"content":"        String sentence \u003d \"\";","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"DonnyS57"},"content":"        for (int i \u003d 1; i \u003c len + 1; i++) {","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"DonnyS57"},"content":"            Task currentTask \u003d TaskList.getCurrentTask(i - 1);","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"DonnyS57"},"content":"            String currentDescription \u003d currentTask.getDescription();","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"DonnyS57"},"content":"            if (currentDescription.contains(word)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"DonnyS57"},"content":"                sentence \u003d sentence + i + \".\" + currentTask.toString() + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"DonnyS57"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"DonnyS57"},"content":"        if (sentence.equals(\"\")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"DonnyS57"},"content":"            print(\"Sorry! I can\u0027t find any task that matches your keyword ☹\");","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"DonnyS57"},"content":"        } else {","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"DonnyS57"},"content":"            sentence \u003d \"Here are the matching tasks I found:\" + \"\\n\" + sentence;","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"DonnyS57"},"content":"            print(sentence);","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"DonnyS57"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"DonnyS57":85}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"import duke.Deadline;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"    private Deadline testDeadline;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"    public DeadlineTest() {","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"        this.testDeadline \u003d new Deadline(\"Assignment\", \"23/09/2021\");","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"    @Test","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    @DisplayName(\"Adding a new Deadline should work\")","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"    public void testTodoToString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"        assertEquals(\"[D][ ] Assignment (by: 23/09/2021)\", testDeadline.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"DonnyS57":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"public class DukeTest {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"    Duke dukeTest \u003d new Duke(\"data/alexa.txt\");","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    @Test","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"    public void dummyTest() {","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"DonnyS57":15}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"import duke.Todo;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"public class TodoTest {","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"    private Todo testTodo;","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"    public TodoTest() {","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"        this.testTodo \u003d new Todo(\"Work out\");","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"    @Test","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"    @DisplayName(\"Adding a new Todo should work\")","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"    public void testTodoToString() {","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"DonnyS57"},"content":"        assertEquals(\"[T][ ] Work out\", testTodo.toString());","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"DonnyS57"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"DonnyS57"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"DonnyS57":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DonnyS57"},"content":"deadline reading /by 530","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"DonnyS57"},"content":"event marathon /at Saturday 2-5","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"DonnyS57"},"content":"todo send email to mom","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"DonnyS57"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"DonnyS57"},"content":"done 1 ","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"DonnyS57"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"DonnyS57"},"content":"done 2 ","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"DonnyS57"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"DonnyS57"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"DonnyS57"},"content":"deadline /by 530","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"DonnyS57"},"content":"event /at 6","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"DonnyS57"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"DonnyS57"},"content":"deadline cs2103 ip /by","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"DonnyS57"},"content":"event tutorial /at","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"DonnyS57"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"DonnyS57"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"DonnyS57"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"DonnyS57":17}}]

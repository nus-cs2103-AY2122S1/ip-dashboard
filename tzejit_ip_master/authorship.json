[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"tzejit":2}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.data.Storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import duke.io.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"public class Command {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /** Enumeration of valid commands */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"    public enum Commands {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"        BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, BY, AT, ALL, HELP, FIND","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"    /** Types of commands */","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"    public enum Types {","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"        SINGLE_INPUT, INT_INPUT, STR_INPUT, STR_ARR_INPUT, DATETIME_INPUT","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"    private Commands command;","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"    private Types type;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"    private int index;","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"    private String[] subInputs;","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"    private String description;","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"     * Returns a new Command.","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"     * Used to initializing SINGLE_INPUT commands","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"    public Command(Commands command) {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"        this.type \u003d Types.SINGLE_INPUT;","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"     * Returns a new Command.","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"     * Used to initializing INT_INPUT commands","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"    public Command(Commands command, int index) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"        this.type \u003d Types.INT_INPUT;","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"     * Returns a new Command.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"     * Used to initializing STR_INPUT commands","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"    public Command(Commands command, String description) {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"        this.type \u003d Types.STR_INPUT;","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"tzejit"},"content":"     * Returns a new Command.","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"tzejit"},"content":"     * Used to initializing STR_ARR_INPUT commands","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"tzejit"},"content":"    public Command(Commands command, String[] subitems) {","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"tzejit"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"tzejit"},"content":"        this.type \u003d Types.STR_ARR_INPUT;","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"tzejit"},"content":"        this.subInputs \u003d subitems;","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"tzejit"},"content":"     * Returns a new Command.","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"tzejit"},"content":"     * Used to initializing DATETIME_INPUT commands","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"tzejit"},"content":"    public Command(Commands command, LocalDateTime dateTime) {","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"tzejit"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"tzejit"},"content":"        this.type \u003d Types.DATETIME_INPUT;","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"tzejit"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"tzejit"},"content":"     * Returns whether the exit command has been executed","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"tzejit"},"content":"     * @return true if the exit command is executed else returns false.","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"tzejit"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"tzejit"},"content":"        return this.isExit;","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"tzejit"},"content":"     * Executes a command.","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"tzejit"},"content":"     * @param tasks Lists of tasks to be executed on.","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"tzejit"},"content":"     * @param ui Ui object used to print to screen.","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"tzejit"},"content":"     * @param storage Storage object used to save any modifications","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If there is missing information or the declaration of the task is of the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"tzejit"},"content":"     * @throws IOException  If data file cannot be saved to.","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"tzejit"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"tzejit"},"content":"        switch (this.type) {","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"tzejit"},"content":"        case SINGLE_INPUT:","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"tzejit"},"content":"            ui.displayCommand(this.command, tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"tzejit"},"content":"            if (this.command.equals(Commands.BYE)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"tzejit"},"content":"                this.isExit \u003d true;","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"tzejit"},"content":"        case INT_INPUT:","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"tzejit"},"content":"            Task t;","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"tzejit"},"content":"            if (this.command.equals(Commands.DONE)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"tzejit"},"content":"                t \u003d tasks.markDone(this.index, storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"tzejit"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"tzejit"},"content":"                t \u003d tasks.removeTask(this.index, storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"tzejit"},"content":"            ui.displayCommand(this.command, this.index, t, tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"tzejit"},"content":"            storage.save();","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"tzejit"},"content":"        case STR_INPUT:","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"tzejit"},"content":"            if (this.command.equals(Commands.TODO)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"tzejit"},"content":"                tasks.addItem(new Todo(this.description), storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"tzejit"},"content":"                ui.displayCommand(this.command, tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"tzejit"},"content":"                storage.save();","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"tzejit"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"tzejit"},"content":"                ui.displayCommand(this.command, this.description, tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"tzejit"},"content":"        case STR_ARR_INPUT:","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"tzejit"},"content":"            Task task;","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"tzejit"},"content":"            if (this.command.equals(Commands.DEADLINE)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"tzejit"},"content":"                task \u003d new Deadline(subInputs);","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"tzejit"},"content":"            } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"tzejit"},"content":"                task \u003d new Event(subInputs);","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"tzejit"},"content":"            tasks.addItem(task, storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"tzejit"},"content":"            ui.displayCommand(this.command, tasks);","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"tzejit"},"content":"            storage.save();","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"tzejit"},"content":"        case DATETIME_INPUT:","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"tzejit"},"content":"            ui.displayCommand(this.command, tasks, this.dateTime);","lastModifiedDate":"2021-08-21"},{"lineNumber":141,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":143,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":144}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.data.Storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import duke.io.Parser;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import duke.io.Ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"class Duke {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"     * Returns a new Duke object.","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     * @param filePath Path to the file storing saved data and to save new data to.","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"        try {","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"            ui.showDukeException(e);","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"     * Runs the bot Duke.","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"    public void run() {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"            try {","lastModifiedDate":"2021-08-20"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"                Command c \u003d Parser.parse(ui.readCommand());","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"            } catch (NumberFormatException numExcep) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"                ui.showIntError();","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"            } catch (DukeException dukeExcep) {","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"                ui.showDukeException(dukeExcep);","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"            } catch (DateTimeParseException dtExcep) {","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"                ui.showDateTimeException();","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"            } catch (IOException ioExcep) {","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"                ui.showSavingError();","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"        new Duke(\"duke.txt\").run();","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"tzejit":60}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-08-13"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"    /** String with details on the exception */","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"    private String errorMessage;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"    /** Types of exceptions */","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"    public enum Type {","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"        DESCRIPTION, INDEX, COMMAND, DEADLINE, EVENT","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"     * Returns a new DukeException object.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"     * @param s Type of exception it is initialized to.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"    public DukeException(Type s) {","lastModifiedDate":"2021-08-20"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"        switch (s) {","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"        case DESCRIPTION:","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"            this.errorMessage \u003d \"☹ OOPS!!! The description of a task cannot be empty.\";","lastModifiedDate":"2021-08-13"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"        case INDEX:","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"            this.errorMessage \u003d \"☹ OOPS!!! The index of the task is out of range.\";","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        case COMMAND:","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"            this.errorMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"                    + \"     Type help to get a list of available commands!\";","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"            this.errorMessage \u003d  \"☹ OOPS!!! Usage of deadline does not match \u0027description\u0027 /by \u0027deadline\u0027\";","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"        case EVENT:","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"            this.errorMessage \u003d \"☹ OOPS!!! Usage of event does not match \u0027description\u0027 /at \u0027timeframe\u0027\";","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"     * Returns a the error message.","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"     * @return Error message in the exception.","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"        return errorMessage;","lastModifiedDate":"2021-08-13"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"tzejit":47}},{"path":"src/main/java/duke/data/Calendar.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.data;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.task.DateTimeTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import java.util.TreeMap;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"class Calendar {","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"    /** Tree of all timed tasks */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"    private TreeMap\u003cLocalDateTime, ArrayList\u003cDateTimeTask\u003e\u003e calendar;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    /** Tree of all Events */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"    private TreeMap\u003cLocalDateTime, ArrayList\u003cDateTimeTask\u003e\u003e calendarEvents;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /** Tree of all Deadlines */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"    private TreeMap\u003cLocalDateTime, ArrayList\u003cDateTimeTask\u003e\u003e calendarDeadlines;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"     * Returns a new Calendar object with its different trees initialized.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"    public Calendar() {","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"        calendar \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        calendarEvents \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        calendarDeadlines \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"     * Adds a timed task to the main tree and its respective tree.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"     * If task is an Event, add it to the Event tree.","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"     * If task is a Deadline, add it to the Deadline tree.","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"     * @param dtTask Timed task to be added to Calendar.","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"    public void add(DateTimeTask dtTask) {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"        if (!calendar.containsKey(dtTask.getDateTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"            calendar.put(dtTask.getDateTime(), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"        calendar.get(dtTask.getDateTime()).add(dtTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"        if (dtTask instanceof Event) {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"            if (!calendarEvents.containsKey(dtTask.getDateTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"                calendarEvents.put(dtTask.getDateTime(), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"            calendarEvents.get(dtTask.getDateTime()).add(dtTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"            if (!calendarDeadlines.containsKey(dtTask.getDateTime())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"                calendarDeadlines.put(dtTask.getDateTime(), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"            calendarDeadlines.get(dtTask.getDateTime()).add(dtTask);","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"     * Returns an ArrayList of all Events occurring before or at the given date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"     * @param dt Maximum date and time of Events.","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"     * @return ArrayList of Events.","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"    public ArrayList\u003cDateTimeTask\u003e getEventsAt(LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cDateTimeTask\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"tzejit"},"content":"        calendarEvents.headMap(dt, true).values().forEach(arrayList::addAll);","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"tzejit"},"content":"        return arrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"tzejit"},"content":"     * Returns an ArrayList of all Deadlines due before or at the given date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"tzejit"},"content":"     * @param dt Maximum date and time of Deadlines.","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"tzejit"},"content":"     * @return ArrayList of Deadlines.","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"tzejit"},"content":"    public ArrayList\u003cDateTimeTask\u003e getDeadlinesBy(LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cDateTimeTask\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"tzejit"},"content":"        calendarDeadlines.headMap(dt, true).values().forEach(arrayList::addAll);","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"tzejit"},"content":"        return arrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"tzejit"},"content":"     * Returns an ArrayList of all Events and Deadlines occurring before or at the given date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"tzejit"},"content":"     * @param dt Maximum date and time of Events and Deadlines.","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"tzejit"},"content":"     * @return ArrayList of Events and Deadlines.","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"tzejit"},"content":"    public ArrayList\u003cDateTimeTask\u003e getAllBy(LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cDateTimeTask\u003e arrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"tzejit"},"content":"        calendar.headMap(dt, true).values().forEach(arrayList::addAll);","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"tzejit"},"content":"        return arrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":88}},{"path":"src/main/java/duke/data/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.data;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import java.io.File;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"public class Storage {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    /** File to read and write saved data */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"    private  File f;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /** Scanner to read saved data from file */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"    private Scanner s;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"    /** Intermediate data structure to modify saved data */","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    private ArrayList\u003cString\u003e taskListString;","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     * Returns a new Storage object initialized with data from the file in filePath.","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"     * @param filePath Path to the file containing storage data.","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"    public Storage (String filePath) {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"        this.f \u003d new File(filePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"        this.taskListString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"     * Returns an ArrayList of String arrays, where each array specifies a single stored Task.","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"     * @return ArrayList of String arrays representing Tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"     * @throws FileNotFoundException  If file specified in filePath does not exists.","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"    public ArrayList\u003cString[]\u003e load() throws FileNotFoundException{","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cString[]\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"        s \u003d new Scanner(f);","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"            String line \u003d s.nextLine();","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"            taskListString.add(line);","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"            taskList.add(line.split(\"[|]\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"        return taskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"     * Saves current tasks from the intermediate data structure to file specified in filePath.","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"     * @throws IOException  If file specified in filePath cannot be written to.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"    public void save() throws IOException {","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"        FileWriter fw \u003d new FileWriter(f);","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"        for (int i \u003d 0; i \u003c this.taskListString.size() - 1; i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"            fw.write(this.taskListString.get(i) + \"\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"        fw.write(this.taskListString.get(taskListString.size() - 1));","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"        fw.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"tzejit"},"content":"     * Saves non-timed task to the intermediate data structure.","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"tzejit"},"content":"     * @param type Type of task to be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"tzejit"},"content":"     * @param status Status of task to be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"tzejit"},"content":"     * @param description Description of task to be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"tzejit"},"content":"    public void saveTask(String type, String status, String description) {","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"tzejit"},"content":"        taskListString.add(type + \"|\" + status + \"|\" + description);","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"tzejit"},"content":"     * Saves timed task to the intermediate data structure.","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"tzejit"},"content":"     * @param type Type of task to be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"tzejit"},"content":"     * @param status Status of task to be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"tzejit"},"content":"     * @param description Description of task to be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"tzejit"},"content":"     * @param timeframe Time limit of task to be saved","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"tzejit"},"content":"    public void saveTask(String type, String status, String description, LocalDateTime timeframe) {","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"tzejit"},"content":"        taskListString.add(type + \"|\" + status + \"|\" + description + \"|\"","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"tzejit"},"content":"                + timeframe.format(DateTimeFormatter.ISO_DATE_TIME));","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"tzejit"},"content":"     * Modifies the status of task in intermediate data structure to done.","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"tzejit"},"content":"     * @param index Index of task to be modified.","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"tzejit"},"content":"    public void saveTaskDone(int index) {","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"tzejit"},"content":"        String data \u003d taskListString.get(index - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"tzejit"},"content":"        taskListString.set(index - 1, data.substring(0, 2) + \u0027X\u0027 + data.substring(3));","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"tzejit"},"content":"     * Removes task from intermediate data structure.","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"tzejit"},"content":"     * @param index Index of task to be removed.","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"tzejit"},"content":"    public void removeTask(int index) {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"tzejit"},"content":"        taskListString.remove(index);","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":104}},{"path":"src/main/java/duke/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.data;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"public class TaskList {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    /** ArrayList to store all tasks */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"    private ArrayList\u003cTask\u003e items;","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /** Calendar object to store dates and times of timed tasks */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"    private Calendar calendar;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"     * Returns a new TaskList object when there is no previously saved data.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     * Item list and calendar initialized to be empty.","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        this.items \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        this.calendar \u003d new Calendar();","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"     * Returns a new TaskList object when there is previously saved data.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"     * Converts saved data to Task objects and initializes item list and calendar with saved data.","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"     * @param taskArrayList ArrayList of String arrays, each representing a task.","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If data is corrupt or missing information.","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"     * @throws FileNotFoundException If data file cannot be found.","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"    public TaskList(ArrayList\u003cString[]\u003e taskArrayList) throws DukeException, FileNotFoundException {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"        this.items \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"        this.calendar \u003d new Calendar();","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"        for (String[] taskElements : taskArrayList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"            Task t \u003d null;","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"            switch (taskElements[0]) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"            case \"T\":","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"                t \u003d new Todo(taskElements[2]);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"                break;","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"            case \"E\":","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"                t \u003d new Event(Arrays.copyOfRange(taskElements, 2, taskElements.length));","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"                calendar.add((DateTimeTask) t);","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"                break;","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"            case \"D\":","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"                t \u003d new Deadline(Arrays.copyOfRange(taskElements, 2, taskElements.length));","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"                calendar.add((DateTimeTask) t);","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"                break;","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"            if (t !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"                if (taskElements[1].equals(\"X\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"                    t.markDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"                this.items.add(t);","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"tzejit"},"content":"     * Adds a task to item list and storage.","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"tzejit"},"content":"     * If the task is a timed task, adds it to calendar as well.","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"tzejit"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"tzejit"},"content":"     * @param storage Storage object to store task data.","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"tzejit"},"content":"    public void addItem(Task task, Storage storage) {","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"tzejit"},"content":"        this.items.add(task);","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"tzejit"},"content":"        if (task instanceof DateTimeTask) {","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"tzejit"},"content":"            DateTimeTask dt \u003d (DateTimeTask) task;","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"tzejit"},"content":"            calendar.add(dt);","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"tzejit"},"content":"            storage.saveTask(task.getCode(), task.getStatus(), task.getDescription(), dt.getDateTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"tzejit"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"tzejit"},"content":"            storage.saveTask(task.getCode(), task.getStatus(), task.getDescription());","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"tzejit"},"content":"     * Returns the String representation of all tasks in an array.","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"tzejit"},"content":"     * @return String array containing a header as the first element and enumerated tasks for subsequent elements.","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"tzejit"},"content":"    public String[] returnItems() {","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"tzejit"},"content":"        String[] itemList \u003d new String[this.items.size() + 1];","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"tzejit"},"content":"        itemList[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"tzejit"},"content":"        for (int i \u003d 0; i \u003c this.items.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"tzejit"},"content":"            itemList[i + 1] \u003d (i + 1) + \".\" + this.items.get(i);","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"tzejit"},"content":"        return itemList;","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"tzejit"},"content":"     * Returns a formatted String representation of the number of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"tzejit"},"content":"     * @param offset Number to decrement current number of tasks by.","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"tzejit"},"content":"     * @return String array containing a header as the first element and enumerated tasks for subsequent elements.","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"tzejit"},"content":"    public String returnItemCount(int offset) {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"tzejit"},"content":"        return \"Now you have \" + (this.items.size() - offset) + \" tasks in the list.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"tzejit"},"content":"     * Changes the status of a task to done.","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"tzejit"},"content":"     * @param index Index of task to be modified.","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"tzejit"},"content":"     * @param storage Storage object to save modification of task status.","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"tzejit"},"content":"     * @return Task that was modified.","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If index is invalid.","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"tzejit"},"content":"    public Task markDone(int index, Storage storage) throws DukeException{","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"tzejit"},"content":"        if (index \u003e this.items.size() || index \u003c 1) {","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"tzejit"},"content":"            throw new DukeException(DukeException.Type.INDEX);","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"tzejit"},"content":"        Task t \u003d this.items.get(index - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"tzejit"},"content":"        t.markDone();","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"tzejit"},"content":"        storage.saveTaskDone(index);","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"tzejit"},"content":"        return t;","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"tzejit"},"content":"     * Returns String representation of a task.","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"tzejit"},"content":"     * @param index Index of task to be returned.","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"tzejit"},"content":"     * @return String representation of a task at index.","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"tzejit"},"content":"    public String returnTask(int index) {","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"tzejit"},"content":"        return this.items.get(index - 1).toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"tzejit"},"content":"     * Returns String representation of the last task added.","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"tzejit"},"content":"     * @return String representation of the last task added.","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"tzejit"},"content":"    public String returnLastTask() {","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"tzejit"},"content":"        return this.returnTask(items.size());","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":141,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":143,"author":{"gitId":"tzejit"},"content":"     * Removes a task completely.","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":145,"author":{"gitId":"tzejit"},"content":"     * @param index Index of task to be removed.","lastModifiedDate":"2021-08-21"},{"lineNumber":146,"author":{"gitId":"tzejit"},"content":"     * @param storage Storage object to save removal of task.","lastModifiedDate":"2021-08-21"},{"lineNumber":147,"author":{"gitId":"tzejit"},"content":"     * @return Task that was removed.","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If index is invalid.","lastModifiedDate":"2021-08-21"},{"lineNumber":149,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"tzejit"},"content":"    public Task removeTask(int index, Storage storage) throws DukeException{","lastModifiedDate":"2021-08-21"},{"lineNumber":151,"author":{"gitId":"tzejit"},"content":"        if (index \u003e this.items.size() || index \u003c 1) {","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"tzejit"},"content":"            throw new DukeException(DukeException.Type.INDEX);","lastModifiedDate":"2021-08-21"},{"lineNumber":153,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":154,"author":{"gitId":"tzejit"},"content":"        storage.removeTask(index - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":155,"author":{"gitId":"tzejit"},"content":"        return items.remove(index - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":156,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":157,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":158,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":159,"author":{"gitId":"tzejit"},"content":"     * Returns String array of formatted String representations of all events occurring before a given date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":160,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":161,"author":{"gitId":"tzejit"},"content":"     * @param dt Date and time limit of events returned.","lastModifiedDate":"2021-08-21"},{"lineNumber":162,"author":{"gitId":"tzejit"},"content":"     * @return String array of String, with each String representing an event.","lastModifiedDate":"2021-08-21"},{"lineNumber":163,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":164,"author":{"gitId":"tzejit"},"content":"    public String[] getEventsAt(LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":165,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cDateTimeTask\u003e tasks \u003d calendar.getEventsAt(dt);","lastModifiedDate":"2021-08-21"},{"lineNumber":166,"author":{"gitId":"tzejit"},"content":"        String[] strArr \u003d new String[tasks.size() + 1];","lastModifiedDate":"2021-08-21"},{"lineNumber":167,"author":{"gitId":"tzejit"},"content":"        strArr[0] \u003d \"Here are the Events happening before \"","lastModifiedDate":"2021-08-21"},{"lineNumber":168,"author":{"gitId":"tzejit"},"content":"                + dt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")) + \":\";","lastModifiedDate":"2021-08-21"},{"lineNumber":169,"author":{"gitId":"tzejit"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":170,"author":{"gitId":"tzejit"},"content":"        for (DateTimeTask dtTask : tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":171,"author":{"gitId":"tzejit"},"content":"            strArr[count++] \u003d dtTask.toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":172,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":173,"author":{"gitId":"tzejit"},"content":"        return strArr;","lastModifiedDate":"2021-08-21"},{"lineNumber":174,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":175,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":176,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":177,"author":{"gitId":"tzejit"},"content":"     * Returns String array of formatted String representations of all deadlines due by given date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":178,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":179,"author":{"gitId":"tzejit"},"content":"     * @param dt Date and time limit of deadlines returned.","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"tzejit"},"content":"     * @return String array of String, with each String representing deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":181,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":182,"author":{"gitId":"tzejit"},"content":"    public String[] getDeadlinesBy(LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":183,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cDateTimeTask\u003e tasks \u003d calendar.getDeadlinesBy(dt);","lastModifiedDate":"2021-08-21"},{"lineNumber":184,"author":{"gitId":"tzejit"},"content":"        String[] strArr \u003d new String[tasks.size() + 1];","lastModifiedDate":"2021-08-21"},{"lineNumber":185,"author":{"gitId":"tzejit"},"content":"        strArr[0] \u003d \"Here are the Deadlines to be completed by \"","lastModifiedDate":"2021-08-21"},{"lineNumber":186,"author":{"gitId":"tzejit"},"content":"                + dt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")) + \":\";","lastModifiedDate":"2021-08-21"},{"lineNumber":187,"author":{"gitId":"tzejit"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":188,"author":{"gitId":"tzejit"},"content":"        for (DateTimeTask dtTask : tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":189,"author":{"gitId":"tzejit"},"content":"            strArr[count++] \u003d dtTask.toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":190,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":191,"author":{"gitId":"tzejit"},"content":"        return strArr;","lastModifiedDate":"2021-08-21"},{"lineNumber":192,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":193,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":194,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":195,"author":{"gitId":"tzejit"},"content":"     * Returns String array of all events and deadlines formatted as Strings occurring before a given date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":196,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":197,"author":{"gitId":"tzejit"},"content":"     * @param dt Date and time limit of events and deadlines returned.","lastModifiedDate":"2021-08-21"},{"lineNumber":198,"author":{"gitId":"tzejit"},"content":"     * @return String array of String, with each String representing an event or deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":199,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":200,"author":{"gitId":"tzejit"},"content":"    public String[] getAllBy(LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":201,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cDateTimeTask\u003e tasks \u003d calendar.getAllBy(dt);","lastModifiedDate":"2021-08-21"},{"lineNumber":202,"author":{"gitId":"tzejit"},"content":"        String[] strArr \u003d new String[tasks.size() + 1];","lastModifiedDate":"2021-08-21"},{"lineNumber":203,"author":{"gitId":"tzejit"},"content":"        strArr[0] \u003d \"Here are the timed tasks occurring before \"","lastModifiedDate":"2021-08-21"},{"lineNumber":204,"author":{"gitId":"tzejit"},"content":"                + dt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")) + \":\";","lastModifiedDate":"2021-08-21"},{"lineNumber":205,"author":{"gitId":"tzejit"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":206,"author":{"gitId":"tzejit"},"content":"        for (DateTimeTask dtTask : tasks) {","lastModifiedDate":"2021-08-21"},{"lineNumber":207,"author":{"gitId":"tzejit"},"content":"            strArr[count++] \u003d dtTask.toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":208,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":209,"author":{"gitId":"tzejit"},"content":"        return strArr;","lastModifiedDate":"2021-08-21"},{"lineNumber":210,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":211,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":212,"author":{"gitId":"tzejit"},"content":"    public String[] returnFoundItem(String toFind) {","lastModifiedDate":"2021-08-21"},{"lineNumber":213,"author":{"gitId":"tzejit"},"content":"        ArrayList\u003cString \u003e strArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":214,"author":{"gitId":"tzejit"},"content":"        strArr.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-21"},{"lineNumber":215,"author":{"gitId":"tzejit"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":216,"author":{"gitId":"tzejit"},"content":"        for (Task t : items) {","lastModifiedDate":"2021-08-21"},{"lineNumber":217,"author":{"gitId":"tzejit"},"content":"            if (t.getDescription().contains(toFind)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":218,"author":{"gitId":"tzejit"},"content":"                strArr.add(count++ + \".\" + t);","lastModifiedDate":"2021-08-21"},{"lineNumber":219,"author":{"gitId":"tzejit"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":220,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":221,"author":{"gitId":"tzejit"},"content":"        return strArr.toArray(new String[strArr.size()]);","lastModifiedDate":"2021-08-21"},{"lineNumber":222,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":223,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":223}},{"path":"src/main/java/duke/io/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.io;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.Command;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"public class Parser {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"     * Returns a Command object based on user input.","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"     * @param entry String inputted by the user.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"     * @return Command object.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"     * @throws NumberFormatException If an int is expected to be inputted but the user fails to do so.","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"     * @throws DateTimeParseException If the user enters the date and time in a wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If the user enters the command in a wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"    public static Command parse(String entry) throws NumberFormatException, DateTimeParseException, DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"        String main;","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"        String aux \u003d \"\";","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"        if (entry.indexOf(\u0027 \u0027) \u003e 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"            main \u003d entry.substring(0, entry.indexOf(\u0027 \u0027));","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"            aux \u003d entry.substring(entry.indexOf(\u0027 \u0027) + 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"            main \u003d entry;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"        switch (main) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"        case \"find\":","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.FIND, aux);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.BYE);","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"        case \"list\":","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.LIST);","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"        case \"help\":","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.HELP);","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"        case \"done\":","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.DONE, Integer.parseInt(aux));","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.DELETE, Integer.parseInt(aux));","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.TODO, aux);","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.DEADLINE, aux.split(\" /by \"));","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"        case \"event\":","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.EVENT, aux.split(\" /at \"));","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"        case \"by\":","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.BY, LocalDateTime.parse(aux));","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"        case \"at\":","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.AT, LocalDateTime.parse(aux));","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"        case \"all\":","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"            return new Command(Command.Commands.ALL, LocalDateTime.parse(aux));","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"        default:","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"            throw new DukeException(DukeException.Type.COMMAND);","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":58}},{"path":"src/main/java/duke/io/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.io;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.Command;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import duke.data.TaskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"public class Ui {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    private Scanner sc;","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"     * Returns a new Ui object.","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    public Ui() {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"    private static String format(String... inputs) {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        String line \u003d \"    ____________________________________________________________\\n\";","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"        String space \u003d \"     \";","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"        str.append(line);","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"        for (String s : inputs) {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"            str.append(space).append(s).append(\"\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"        str.append(line);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"        return str.toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"     * Prints an error statement to screen if a user fails to input an int when required.","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"    public void showIntError() {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"        System.err.println(format(\"☹ OOPS!!! The index of a task must be specified.\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"     * Prints a statement to screen if the saved file cannot be loaded.","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"        System.out.println(format(\"Task description cannot be found in database\", \"A new file will be created\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"     * Prints an error statement to screen if the data file cannot be saved.","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"    public void showSavingError() {","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"        System.err.println(format(\"File cannot be saved\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"     * Prints the content of a DukeException as an error message.","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"    public void showDukeException(DukeException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"        System.err.println(format(e.toString()));","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"tzejit"},"content":"     * Prints a welcome statement when Duke is launched.","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"tzejit"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"tzejit"},"content":"        System.out.println(format(\"Hello! I\u0027m Duke\", \"What can I do for you?\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"tzejit"},"content":"     * Prints an error statement to screen if the user inputs the date and time in a wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"tzejit"},"content":"    public void showDateTimeException() {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"tzejit"},"content":"        System.err.println(format(\"Date\u0027T\u0027time inputted is not of valid format: YYYY-MM-DDThh:mm\" ));","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"tzejit"},"content":"     * Returns a line of user input.","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"tzejit"},"content":"     * @return String User input formatted as a String.","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"tzejit"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"tzejit"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"tzejit"},"content":"     * Prints a statement showing the outcome of a the command the user inputted.","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"tzejit"},"content":"     * Used for commands involving a single word or for addition of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"tzejit"},"content":"     * @param c Type of command the user has inputted.","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"tzejit"},"content":"     * @param list Current TaskList used.","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"tzejit"},"content":"    public void displayCommand(Command.Commands c, TaskList list) {","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"tzejit"},"content":"        switch (c) {","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"tzejit"},"content":"        case BYE:","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(\"Bye. Hope to see you again soon!\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"tzejit"},"content":"        case HELP:","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(\"  bye : Closes Duke\", \"  list : Returns all tasks added\",","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"tzejit"},"content":"                    \"  todo \u003cdescription\u003e : Adds a todo task\",","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"tzejit"},"content":"                    \"  find \u003cdescription\u003e : Returns all tasks with \u003cdescription\u003e in their description\",","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"tzejit"},"content":"                    \"  event \u003cdescription\u003e /at \u003ctime: YYYY-MM-DDThh:mm\u003e : Adds an event at time \u003ctime\u003e\",","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"tzejit"},"content":"                    \"  deadline \u003cdescription\u003e /by \u003ctime: YYYY-MM-DDThh:mm\u003e : Adds a task with deadline at time \u003ctime\u003e\",","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"tzejit"},"content":"                    \"  done \u003cindex\u003e : Marks the task at \u003cindex\u003e as done\",","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"tzejit"},"content":"                    \"  delete \u003cindex\u003e : deletes the task at \u003cindex\u003e\",","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"tzejit"},"content":"                    \"  at \u003ctime: YYYY-MM-DDThh:mm\u003e : Returns all events up till \u003ctime\u003e\",","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"tzejit"},"content":"                    \"  by \u003ctime: YYYY-MM-DDThh:mm\u003e : Returns all tasks with deadline due before or at \u003ctime\u003e\",","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"tzejit"},"content":"                    \"  all \u003ctime: YYYY-MM-DDThh:mm\u003e : Returns all timed tasks with times up till \u003ctime\u003e\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"tzejit"},"content":"        case LIST:","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(list.returnItems()));","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"tzejit"},"content":"        case TODO:","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"tzejit"},"content":"            //Fallthrough","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"tzejit"},"content":"        case EVENT:","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"tzejit"},"content":"            //Fallthrough","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"tzejit"},"content":"        case DEADLINE:","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(\"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"tzejit"},"content":"                    \"  \" + list.returnLastTask(), list.returnItemCount(0)));","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"tzejit"},"content":"     * Prints a statement showing the outcome of a the command the user inputted.","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"tzejit"},"content":"     * Used for commands involving involving retrieval of tasks based on date and time.","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"tzejit"},"content":"     * @param c Type of command the user has inputted.","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"tzejit"},"content":"     * @param list Current TaskList used.","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"tzejit"},"content":"     * @param dt Date and Time used by the command.","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"tzejit"},"content":"    public void displayCommand(Command.Commands c, TaskList list, LocalDateTime dt) {","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"tzejit"},"content":"        switch (c) {","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"tzejit"},"content":"        case AT:","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(list.getEventsAt(dt)));","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"tzejit"},"content":"        case BY:","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(list.getDeadlinesBy(dt)));","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"tzejit"},"content":"        case ALL:","lastModifiedDate":"2021-08-21"},{"lineNumber":141,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(list.getAllBy(dt)));","lastModifiedDate":"2021-08-21"},{"lineNumber":142,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":143,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":144,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":145,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":146,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":147,"author":{"gitId":"tzejit"},"content":"     * Prints a statement showing the outcome of a the command the user inputted.","lastModifiedDate":"2021-08-21"},{"lineNumber":148,"author":{"gitId":"tzejit"},"content":"     * Used for commands involving modification of tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":149,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":150,"author":{"gitId":"tzejit"},"content":"     * @param c Type of command the user has inputted","lastModifiedDate":"2021-08-21"},{"lineNumber":151,"author":{"gitId":"tzejit"},"content":"     * @param index Index of task modified by the command.","lastModifiedDate":"2021-08-21"},{"lineNumber":152,"author":{"gitId":"tzejit"},"content":"     * @param t Task modified by the command.","lastModifiedDate":"2021-08-21"},{"lineNumber":153,"author":{"gitId":"tzejit"},"content":"     * @param list Current TaskList used.","lastModifiedDate":"2021-08-21"},{"lineNumber":154,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":155,"author":{"gitId":"tzejit"},"content":"    public void displayCommand(Command.Commands c, int index, Task t, TaskList list) {","lastModifiedDate":"2021-08-21"},{"lineNumber":156,"author":{"gitId":"tzejit"},"content":"        switch (c) {","lastModifiedDate":"2021-08-21"},{"lineNumber":157,"author":{"gitId":"tzejit"},"content":"        case DONE:","lastModifiedDate":"2021-08-21"},{"lineNumber":158,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(\"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2021-08-21"},{"lineNumber":159,"author":{"gitId":"tzejit"},"content":"                    \"  \" + t));","lastModifiedDate":"2021-08-21"},{"lineNumber":160,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":161,"author":{"gitId":"tzejit"},"content":"        case DELETE:","lastModifiedDate":"2021-08-21"},{"lineNumber":162,"author":{"gitId":"tzejit"},"content":"            System.out.println(format(\"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2021-08-21"},{"lineNumber":163,"author":{"gitId":"tzejit"},"content":"                    \"  \" + t, list.returnItemCount(1)));","lastModifiedDate":"2021-08-21"},{"lineNumber":164,"author":{"gitId":"tzejit"},"content":"            break;","lastModifiedDate":"2021-08-21"},{"lineNumber":165,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":166,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":167,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":168,"author":{"gitId":"tzejit"},"content":"    public void displayCommand(Command.Commands c, String toFind, TaskList list) {","lastModifiedDate":"2021-08-21"},{"lineNumber":169,"author":{"gitId":"tzejit"},"content":"        System.out.print(format(list.returnFoundItem(toFind)));","lastModifiedDate":"2021-08-21"},{"lineNumber":170,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":171,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":171}},{"path":"src/main/java/duke/task/DateTimeTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"public abstract class DateTimeTask extends Task{","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"     * Constructor for a timed task","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"     * @param description Description of task.","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If description of task is empty.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"    public DateTimeTask(String description) throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"        super(description);","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"     * Returns the date and time of a timed task.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     * @return Date and time of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"    public abstract LocalDateTime getDateTime();","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":25}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"public class Deadline extends DateTimeTask {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"    /** Code representing a deadline task */","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"    public final String code \u003d \"D\";","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"    /** Date and time of the deadline */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"     * Returns a new deadline task.","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"     * @param input String array containing the description and date and time information of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If there is missing information or the declaration of the task is of the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     * @throws DateTimeParseException If the date and time are entered with the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"    public Deadline(String[] input) throws DukeException, DateTimeParseException {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        super(input[0]);","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        if (input.length !\u003d 2) {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"            throw new DukeException(DukeException.Type.DEADLINE);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"        this.by \u003d LocalDateTime.parse(input[1]);","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"     * Returns a formatted String representation of the deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"     * @return String representation of the deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"        return \"[\" + code + \"]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")) + \")\";","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"     * Returns the date and time of the deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"     * @return Date and time of the deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"        return this.by;","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"     * Returns the code of the deadline task.","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"     * @return The code representing a deadline.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"    public String getCode() {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"        return this.code;","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"tzejit":60}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"public class Event extends DateTimeTask {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"    /** Code representing a event */","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"    public final String code \u003d \"E\";","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"    /** Date and time of the event */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"    private final LocalDateTime at;","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"     * Returns a new event.","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"     * @param input String array containing the description and date and time information of the event.","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If there is missing information or the declaration of the task is of the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     * @throws DateTimeParseException If the date and time are entered with the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"    public Event(String[] input) throws DukeException, DateTimeParseException {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        super(input[0]);","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"        if (input.length !\u003d 2) {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"            throw new DukeException(DukeException.Type.EVENT);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"        this.at \u003d LocalDateTime.parse(input[1]);","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"     * Returns a formatted String representation of the event.","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"     * @return String representation of the event.","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"        return \"[\" + code + \"]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")) + \")\";","lastModifiedDate":"2021-08-20"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"     * Returns the date and time of the event.","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"     * @return Date and time of the event.","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"        return this.at;","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"     * Returns the code of the event.","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"     * @return The code representing a event.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"    public String getCode() {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"        return this.code;","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"tzejit":60}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"    /** Description of the task */","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"    private final String description;","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"    /** Status of the task */","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-13"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"     * Returns a new task.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If there is missing information or the declaration of the task is of the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"    public Task(String description) throws DukeException {","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2021-08-13"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"            throw new DukeException(DukeException.Type.DESCRIPTION);","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-13"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-13"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-13"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"     * Returns the status of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"     * @return \"X\" if the task is done, \" \" otherwise.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-20"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-13"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"     * Returns a formatted String representation of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"     * @return String representation of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":41,"author":{"gitId":"tzejit"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":42,"author":{"gitId":"tzejit"},"content":"        return \"[\" + this.getStatus() + \"] \" + this.description;","lastModifiedDate":"2021-08-13"},{"lineNumber":43,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":44,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":45,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"tzejit"},"content":"     * Marks a task a completed.","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"tzejit"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-13"},{"lineNumber":49,"author":{"gitId":"tzejit"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-13"},{"lineNumber":50,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":51,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"tzejit"},"content":"     * Returns the description of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"tzejit"},"content":"     * @return Description of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"tzejit"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"tzejit"},"content":"        return this.description;","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"tzejit"},"content":"     * Returns the code of the task.","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"tzejit"},"content":"     * @return The code representing a specified type of task.","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"tzejit"},"content":"    public abstract String getCode();","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"tzejit":67}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-13"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"    /** Code representing a todo task */","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"    public final String code \u003d \"T\";","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"     * Returns a new todo task.","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"     * @throws DukeException If there is missing information or the declaration of the task is of the wrong format.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"    public Todo(String description) throws DukeException {","lastModifiedDate":"2021-08-13"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"        super(description);","lastModifiedDate":"2021-08-13"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"     * Returns a formatted String representation of the todo task.","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"     * @return String representation of the todo task.","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-13"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"    public String toString() {","lastModifiedDate":"2021-08-13"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"        return \"[\" + code + \"]\" + super.toString();","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"     * Returns the code of the todo task.","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"     * @return The code representing a todo task.","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"tzejit"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"tzejit"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"tzejit"},"content":"    public String getCode() {","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"tzejit"},"content":"        return this.code;","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":39,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"tzejit":39}},{"path":"src/test/java/duke/data/CalendarTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.data;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"import java.time.Month;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"public class CalendarTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"    class EventStub extends Event {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"        public EventStub() throws DukeException {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"            super(new String[]{\"test\", \"2015-02-20T06:30\"});","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"    public void getEventsAt_getEvents_eventCorrectlyRetrieved() {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"            LocalDateTime t \u003d LocalDateTime.of(2015, Month.FEBRUARY, 20, 06, 30);","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"            Calendar c \u003d new Calendar();","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"            c.add(new EventStub());","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"            assertEquals(t, c.getEventsAt(t).get(0).getDateTime());","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"tzejit"},"content":"            fail();","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":33}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"public class EventTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"    public void Event_missingDateTime_dukeExceptionThrown(){","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"            assertEquals(0, new Event(new String[]{\"test\"}));","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"            assertEquals(\"☹ OOPS!!! Usage of event does not match \u0027description\u0027 /at \u0027timeframe\u0027\", e.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":19}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"package duke.task;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"public class TodoTest {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"    public void Todo_emptyDescription_dukeExceptionThrown(){","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"tzejit"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"tzejit"},"content":"            assertEquals(0, new Todo(\"\"));","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"tzejit"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"tzejit"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"tzejit"},"content":"            assertEquals(\"☹ OOPS!!! The description of a task cannot be empty.\", e.toString());","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"tzejit"},"content":"    @Test","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"tzejit"},"content":"    public void toString_properDescription_correctStringFormat(){","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"tzejit"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"tzejit"},"content":"            assertEquals(\"[T][ ] eat\", (new Todo(\"eat\").toString()));","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"tzejit"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"tzejit"},"content":"            fail();","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"tzejit"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"tzejit"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"tzejit"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"tzejit"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"tzejit":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tzejit"},"content":"todo borrow book","lastModifiedDate":"2021-08-13"},{"lineNumber":2,"author":{"gitId":"tzejit"},"content":"deadline return book /by 2021-05-12T19:22","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"tzejit"},"content":"event project meeting /at 2001-12-01T03:41","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"tzejit"},"content":"event party /at 2009-03-13T00:11","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"tzejit"},"content":"list","lastModifiedDate":"2021-08-13"},{"lineNumber":6,"author":{"gitId":"tzejit"},"content":"done 2","lastModifiedDate":"2021-08-13"},{"lineNumber":7,"author":{"gitId":"tzejit"},"content":"list","lastModifiedDate":"2021-08-13"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"by 2021-05-12T19:22","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"tzejit"},"content":"all 2011-05-12T19:22","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"tzejit"},"content":"at 2008-03-13T00:11","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"bye","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"tzejit":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"tzejit"},"content":"if exist Duke.txt del Duke.txt","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"tzejit"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\data\\*.java ..\\src\\main\\java\\duke\\io\\*.java ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"tzejit"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"tzejit":3}}]

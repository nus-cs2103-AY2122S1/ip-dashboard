[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haozeee":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    // JavaFx dependencies","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haozeee":18,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"# Duke User Guide","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"Duke is a text-based, lightweight and easy-to-learn chatbot that frees your mind from having to remember all your important tasks in a day. Duke is able to save all your tasks on your local computer so that you can easily access and update it even when you are offline.","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"![Duke](sample.png)","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"### Add Different types of tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"Duke allows you to add three different types of tasks to a task list that saves all your tasks.","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"The three tasks supported by duke are:","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"* `Todos`: Tasks without any date or time attached to it *e.g., Visit a new theme park*","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"* `Deadlines`: Tasks that needs to be done before a specific date/time *e.g., Submit an assignment by Monday*","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"* `Events`: Tasks that start at a specific date/time *e.g., Dinner tomorrow night at 7pm*","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"### Keep track of tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"Duke allows you to easily keep track of tasks.","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"You can:","lastModifiedDate":"2021-09-12"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"* Easily view all your tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"* Mark any completed tasks as done","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"* Delete any old tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"* Search for tasks by name","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"* Undo any previous changes","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"### ","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"**All command works given in duke are case-insensetive.** e.g The command `LIST` and `list` are equivalent.","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"### `Deadline` - Add deadline tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"Add a new deadline task to the task list. A task name and a deadline date has to be specified with the command. For the date, dude accepts two types of dates, formatted dates and unformatted dates. A formatted date allows Duke to recognise the specific date/time.","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"Unformatted dates are simply generic Strings such as \"tomorrow at 6 pm\" or \"next week\".","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"Formatted dates are specific dates/times which are entered in the format `DD/MM/YYYY HHMM`. The time portion is optional. Only a date is required. e.g. 24/06/2022 1800 (date and time), 01/08/2021 (date only)","lastModifiedDate":"2021-09-12"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"#### Format:","lastModifiedDate":"2021-09-12"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"To enter a deadline with an unformatted date:","lastModifiedDate":"2021-09-12"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"`deadline {task name} -by {deadline date}`","lastModifiedDate":"2021-09-12"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"To enter a deadline with a formatted date","lastModifiedDate":"2021-09-12"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"`deadline {task name} /by {formatted date}`","lastModifiedDate":"2021-09-12"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"#### Examples of usages:","lastModifiedDate":"2021-09-12"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"Adding a deadline task with an unformatted date:","lastModifiedDate":"2021-09-12"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"`deadline CS2103T quiz -by end of this week`","lastModifiedDate":"2021-09-12"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"Adding a deadline task with a formatted date:","lastModifiedDate":"2021-09-12"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"`deadline CS2103T quiz /by 18/09/2021`","lastModifiedDate":"2021-09-12"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"Adding a deadline task with a formatted date and time:","lastModifiedDate":"2021-09-12"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"`deadline CS2103T quiz /by 18/09/2021 2300`","lastModifiedDate":"2021-09-12"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"### `Event` - Add event tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"Add a new event task to the task list. A task name and an event date has to be specified with the command. For the date, dude accepts two types of dates, formatted dates and unformatted dates. A formatted date allows Duke to recognise the specific date/time.","lastModifiedDate":"2021-09-12"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"The command to enter a deadline with an unformatted date:","lastModifiedDate":"2021-09-12"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"`event {task name} -at {deadline date}`","lastModifiedDate":"2021-09-12"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"The command to enter a deadline with a formatted date","lastModifiedDate":"2021-09-12"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"`event {task name} /at {formatted date}`","lastModifiedDate":"2021-09-12"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"#### Examples of usages:","lastModifiedDate":"2021-09-12"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"Adding a deadline task with an unformatted date:","lastModifiedDate":"2021-09-12"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"`event Dinner with family -at end of this week`","lastModifiedDate":"2021-09-12"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"Adding a deadline task with a formatted date:","lastModifiedDate":"2021-09-12"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"`event Dinner with family /at 18/09/2021`","lastModifiedDate":"2021-09-12"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"Adding a deadline task with a formatted date and time:","lastModifiedDate":"2021-09-12"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"`event Dinner with family /at 18/09/2021 1930`","lastModifiedDate":"2021-09-12"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"### `Todo` - Add todo tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"Add a new todo task to the task list. Only the name of the task has to be specified with the command.","lastModifiedDate":"2021-09-12"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"#### Format:","lastModifiedDate":"2021-09-12"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"`todo {todo task name}`","lastModifiedDate":"2021-09-12"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"#### Examples of usages:","lastModifiedDate":"2021-09-12"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"`todo buy milk`","lastModifiedDate":"2021-09-12"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"### `List` - View all tasks:","lastModifiedDate":"2021-09-12"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"Displays all your added task in the task list along with the appropriate details such as the task date and completed status.","lastModifiedDate":"2021-09-12"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"#### Format:","lastModifiedDate":"2021-09-12"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"`list`","lastModifiedDate":"2021-09-12"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"### `Done` - Mark tasks as done","lastModifiedDate":"2021-09-12"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"Mark a task in the task list as completed using its index. The index can be obtained by using the `list` command above. Duke supports marking multiple tasks as done in one go. Hence, you can enter more than 1 index in a single command.","lastModifiedDate":"2021-09-12"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"#### Format:","lastModifiedDate":"2021-09-12"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"`done {task index/indexes}`","lastModifiedDate":"2021-09-12"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"#### Examples of usages","lastModifiedDate":"2021-09-12"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"Mark task 1 as completed: `done 1`","lastModifiedDate":"2021-09-12"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"Mark task 1, 4 and 6 as completed: `done 1 4 6`","lastModifiedDate":"2021-09-12"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"### `Delete` - Delete tasks","lastModifiedDate":"2021-09-12"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"Delete a task in the task list using its index. The index can be obtained by using the `list` command above. Duke supports the deletion of multiple tasks in one command. Hence, you can enter more than 1 index in a single command.","lastModifiedDate":"2021-09-12"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"#### Format:","lastModifiedDate":"2021-09-12"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"`delete {task index/indexes}`","lastModifiedDate":"2021-09-12"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"#### Examples of usages","lastModifiedDate":"2021-09-12"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"Delete task 1: `delete 1`","lastModifiedDate":"2021-09-12"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"Delete task 1, 4 and 6: `delete 1 4 6`","lastModifiedDate":"2021-09-12"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"### `Find` - Seach for a task","lastModifiedDate":"2021-09-12"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"Find a task in the task list whose name matches the proivided keywords. The search is case insensetive but the order of the word matters.","lastModifiedDate":"2021-09-12"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"#### Format:","lastModifiedDate":"2021-09-12"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"`Find [keywords]`","lastModifiedDate":"2021-09-12"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"### Examples of usages:","lastModifiedDate":"2021-09-12"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"`Find CS2100` will find tasks that has the keyword \"CS2100\" in its name.","lastModifiedDate":"2021-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"### `Undo` - Undo a previous change","lastModifiedDate":"2021-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"Undo any previous changes made to the task list.","lastModifiedDate":"2021-09-12"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"#### Format: ","lastModifiedDate":"2021-09-12"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"`Undo`","lastModifiedDate":"2021-09-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"### `Bye` - Exits the programm","lastModifiedDate":"2021-09-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"Close the chat bot.","lastModifiedDate":"2021-09-12"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"#### Format: ","lastModifiedDate":"2021-09-12"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"`Bye`","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"Haozeee":127,"-":18}},{"path":"src/main/java/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" * An abstract class that represents commands given by the","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * user that involves adding a task to the taskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"public abstract class AddCommand extends UndoableCommand {","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /** The type of task that should be added */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private final Task.Type type;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    /** The user input */","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private final String userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /** The taskList */","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     * Create a command to add a type of task to the taskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     * @param userInput The user input that triggers the command.","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * @param typeToAdd The type of task that should be added.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList to add the task to.","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    protected AddCommand(String userInput, Task.Type typeToAdd, TaskList taskList) {","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        this.type \u003d typeToAdd;","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    protected void setUndo() {","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        int indexToRemove \u003d this.taskList.getTotalNumOfTasks();","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        this.setUndoFunction(() -\u003e this.taskList.removeTask(indexToRemove, new ArrayList\u003c\u003e()));","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * Checks that the user input to add a task is valid.","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * @param input The user input to add a task.","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * @return True if the user input is valid.","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    public abstract boolean verifyAddCommand(String input);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        return Ui.getErrorMessage(type);","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     * Removes the first word from a String. This method is used to remove the","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     * command word from a user input so as to extract the required information","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * and parameters for the command.","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"     * @return The details of an add task command.","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    protected String removeFirstWordFromInput() {","lastModifiedDate":"2021-09-12"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"            return this.userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":74}},{"path":"src/main/java/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * A command to add a Deadline task to the taskList.","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * Creates an AddDeadline Command.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * @param input The input by the user that triggers this command.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList for Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public AddDeadlineCommand(String input, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        super(input, Task.Type.DEADLINE, taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        String details \u003d this.removeFirstWordFromInput();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        if (details !\u003d null \u0026\u0026 this.verifyAddCommand(details.trim())) {","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            Task task;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"                task \u003d Deadline.newDeadlineTask(details);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            } catch (DukeInvalidDateException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"                this.setExecutionMessage(e.getMessage() + \"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"                return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.taskList.addTask(task));","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            this.setUndo();","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * Verifies that the deadline task details are correct. It checks that the user has used the","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * command \"-by\" or \"/by\" and that a non-empty date and time is specified. If it is not correct, it","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * prints an error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     * @param input The deadline details.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @return True if the deadline details inputted by the user is correct. Otherwise, false.","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    public boolean verifyAddCommand(String input) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        if (!input.contains(\"-by\") \u0026\u0026 !input.contains(\"/by\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        String[] inputParts \u003d input.split(\" -by | /by \");","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        if (inputParts.length !\u003d 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":67}},{"path":"src/main/java/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.Event;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * A command to add an Event task to the taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * Creates an AddEventCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * @param input The input by the user that triggers this command.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList for Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public AddEventCommand(String input, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        super(input, Task.Type.EVENT, taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        String details \u003d this.removeFirstWordFromInput();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        if (details !\u003d null \u0026\u0026 this.verifyAddCommand(details.trim())) {","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            Task task;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"                task \u003d Event.newEventTask(details);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            } catch (DukeInvalidDateException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"                this.setExecutionMessage(e.getMessage() + \"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"                return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.taskList.addTask(task));","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            this.setUndo();","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * Verifies the event task details are correct. It checks that the user has used the command","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * \"-at\" or \"/at\" and that a non-empty date and time is specified. If is not correct, it prints","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * an error message.","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     * @param input The event details.","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @return True if the event details inputted by the user is correct. Otherwise, false.","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    public boolean verifyAddCommand(String input) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        if (!input.contains(\"-at\") \u0026\u0026 !input.contains(\"/at\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        String[] inputParts \u003d input.split(\" -at | /at \");","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        if (inputParts.length !\u003d 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":67}},{"path":"src/main/java/commands/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.Todo;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * A command to add a Todo task to Duke\u0027s taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"public class AddTodoCommand extends AddCommand {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * Creates an AddTodoCommand.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * @param input The input by the user that triggers this command.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList for Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    public AddTodoCommand(String input, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"        super(input, Task.Type.TODO, taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * Adds a tasks.Todo event based on the user\u0027s input after verifying that the","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * user\u0027s input is valid.","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        String details \u003d this.removeFirstWordFromInput();","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        if (details !\u003d null \u0026\u0026 this.verifyAddCommand(details.trim())) {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            Task task \u003d Todo.newTodoTask(details);","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.taskList.addTask(task));","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            this.setUndo();","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    public boolean verifyAddCommand(String input) {","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        return input.length() \u003e 0;","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":46}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * An abstract class representing commands user has supplied to Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    /** The text to display to the user after the execution of a command */","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    private String executionMessage;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     * Execute the respective command.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     * @return True if the command is executed successfully, else false.","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    public abstract boolean execute();","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * Returns true if the command is supposed to exit the chat.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * @return True if the command should exit the chat.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * Returns a message to the user when the user supplied an invalid argument","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * to a command. Not all commands require this since some commands has no arguments","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     * required and thus cannot have an invalid argument.","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * @return The invalid message that should be shown to the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    protected abstract String getInvalidArgumentsMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    protected void setExecutionMessage(String executionMessage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        this.executionMessage \u003d executionMessage;","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    public String getExecutionMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        return this.executionMessage;","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":41}},{"path":"src/main/java/commands/CommandStack.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.util.Stack;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * A stack that stores commands that extends UndoableCommand. This allows us","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * to maintain a history of commands so that we can undo them.","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class CommandStack {","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    /** The stack storing the commands */","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    private final Stack\u003cUndoableCommand\u003e pastCommands \u003d new Stack\u003c\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * Add a new command on the top of the command stack.","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * @param command The UndoableCommand that is to be added.","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    public void addCommand(UndoableCommand command) {","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        this.pastCommands.push(command);","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     * Returns the last command by popping it from the stack.","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * @return the last command or null if the stack is empty.","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    public UndoableCommand getLastCommand() {","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        if (this.pastCommands.empty()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        return this.pastCommands.pop();","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Haozeee":34}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" * A command to delete a task from Duke\u0027s taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"public class DeleteCommand extends TaskListIndexCommand {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    private int[] undoIndexes;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private final ArrayList\u003cTask\u003e undoTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * Creates a DeleteCommand to delete a task from the taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * @param input The input by the user that triggers this command.","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList to remove the task from.","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public DeleteCommand(String input, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        super(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    protected String executeOnTaskList(int... listOfIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        this.undoIndexes \u003d Arrays.copyOf(listOfIndex, listOfIndex.length);","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        for (int i : listOfIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            message.append(this.taskList.removeTask(i, this.undoTasks)).append(\"\\n\");","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            this.offsetIndex(listOfIndex, i);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        this.setUndo();","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        return message.append(this.taskList.getTaskListStatus()).toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    protected void setUndo() {","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        this.setUndoFunction(() -\u003e {","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"            for (int i \u003d 0; i \u003c this.undoIndexes.length; i++) {","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"                if (this.undoTasks.get(i) \u003d\u003d null) {","lastModifiedDate":"2021-09-06"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"                    continue;","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"                }","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"                this.taskList.insertTaskAt(this.undoTasks.get(i), this.undoIndexes[i]);","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        });","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"     * Offsets the input index after an item is deleted. After an item is deleted,","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     * the tasks in the list would no longer align with the index that was initially","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"     * given by the user. Since Duke allows multiple deletes in one command, after","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"     * a task is deleted, this function will scan through the list of indexes and","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"     * decrement those that are after the item deleted.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     * @param indexes The list of indexes provided by the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * @param deletedIndex The previously deleted index.","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    private void offsetIndex(int[] indexes, int deletedIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c indexes.length; i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            if (deletedIndex \u003c indexes[i]) {","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"                indexes[i]--;","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        return \"Invalid argument to the \\\"delete\\\" function.\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":82}},{"path":"src/main/java/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * A command to marks a task in Duke\u0027s taskList as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"public class DoneCommand extends TaskListIndexCommand {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final ArrayList\u003cInteger\u003e doneIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * Creates a DoneCommand to mark a task in the taskList as completed.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * @param input The input by the user that triggers this command.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList that contains the task to be mark as done.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public DoneCommand(String input, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        super(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    protected String executeOnTaskList(int... listOfIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        for (int ofIndex : listOfIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            message.append(this.taskList.markTaskAsDone(ofIndex, this.doneIndexes)).append(\"\\n\");","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        setUndo();","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        return message.append(this.taskList.getTaskListStatus()).toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    protected void setUndo() {","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        this.setUndoFunction(() -\u003e {","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            for (int i : this.doneIndexes) {","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"                this.taskList.revertTaskToUndone(i);","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        });","lastModifiedDate":"2021-09-06"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        return \"Invalid argument to the \\\"done\\\" function.\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":55}},{"path":"src/main/java/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A command to exit duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"     * Prints a command to say bye to the user and closed the Chat bot.","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        this.setExecutionMessage(\"Bye!! Hope to see you again!!\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        // Not needed since no arguments are needed for the exit command","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        return \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":27}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" * A command for users to search for tasks in the taskList by specifying","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * a keyword. The command will then look for tasks with names that contain","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * the specified keyword.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    private final String input;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * Creates a find command to find a task in Duke\u0027s taskList.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     * @param input The user input that triggers this command.","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList to search through.","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public FindCommand(String input, TaskList taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            // Checks if a keyword is provided","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"            String keyword \u003d input.split(\" \", 2)[1].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            this.displaySearchResults(this.taskList.findTask(keyword));","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        return \"Please provide a keyword to search for a task.\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    private void displaySearchResults(ArrayList\u003cTask\u003e searchResults) {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        StringBuilder message;","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        if (searchResults.isEmpty()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            message \u003d new StringBuilder(\"Sorry I could not find any matching tasks.\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(message.toString());","lastModifiedDate":"2021-09-12"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"            return;","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        message \u003d new StringBuilder(Ui.DASHES);","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        message.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c searchResults.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            message.append(i + 1).append(\". \").append(searchResults.get(i)).append(\"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        message.append(Ui.DASHES);","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        this.setExecutionMessage(message.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"Haozeee":68}},{"path":"src/main/java/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A command that represents an invalid command given by the user. This command","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" * occurs when the user enter an input that Duke does not recognise.","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"     * Displays a message to the user that he has entered an invalid input to Duke.","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        this.setExecutionMessage(\"Invalid input. Please try again.\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        return \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        // Not needed","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":28}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * A command to list the task in Duke\u0027s taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     * Creates a ListCommand to display the task in the taskList.","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList that is to be displayed.","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public ListCommand(TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        if (this.taskList.getTotalNumOfTasks() \u003d\u003d 0) {","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(\"You currently do not have any tasks in your task list.\");","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        String message \u003d this.taskList.getTaskListStatus() + this.taskList.listHistory();","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        this.setExecutionMessage(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    public String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // No arguments are needed for a list command","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        return \"\";","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":42}},{"path":"src/main/java/commands/TaskListIndexCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.util.Set;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * A command that edits the taskList based on an index given. Such a command","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * can accept multiple indexes in one go.","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public abstract class TaskListIndexCommand extends UndoableCommand {","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final String input;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    protected TaskListIndexCommand(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    protected abstract String executeOnTaskList(int... listOfIndex);","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            // Checks if an argument is provided","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"            String arguments \u003d this.input.split(\" \", 2)[1].trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            int[] listOfIndexes \u003d this.convertStringArrayToIntArray(this.getIndex(arguments));","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            listOfIndexes \u003d this.removeDuplicateIndex(listOfIndexes);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.executeOnTaskList(listOfIndexes));","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(this.getInvalidArgumentsMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"     * Returns a list of indexes that the user has specified. The list of index can contain","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"     * either 1 or multiple indexes. The function then separates the list and adds each index","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * to an ArrayList.","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * @param listOfIndex The list of index the user has inputted as a string.","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     * @return The list of index stored in a String ArrayList.","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    protected String[] getIndex(String listOfIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        return listOfIndex.split(\" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * Converts a String array that contains numbers as Strings into an integer array.","lastModifiedDate":"2021-09-12"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * Used to process an array containing a list of indexes provided by the user.","lastModifiedDate":"2021-09-12"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-12"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     * @param listOfIndex The list of indexes to be converted to to an integer array.","lastModifiedDate":"2021-09-12"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     * @return The integer array.","lastModifiedDate":"2021-09-12"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    protected int[] convertStringArrayToIntArray(String[] listOfIndex) {","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        int[] result \u003d new int[listOfIndex.length];","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c listOfIndex.length; i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            result[i] \u003d Integer.parseInt(listOfIndex[i]);","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        return result;","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"     * Removes any duplicates index found in the list of indexes.","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"     * @param indexArr The list of indexes.","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"     * @return The list of indexes with any duplicates removed.","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"    private int[] removeDuplicateIndex(int[] indexArr) {","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        Set\u003cInteger\u003e indexSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        for (int i : indexArr) {","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"            indexSet.add(i);","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        int[] result \u003d new int[indexSet.size()];","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        for (int j : indexSet) {","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"            result[i++] \u003d j;","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        return result;","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Haozeee":87}},{"path":"src/main/java/commands/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A command that undoes a command that extends UndoableCommand.","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    /** The stack storing the past commands*/","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    private final CommandStack commandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     * Creates an UndoCommand.","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     * @param commandStack The command stack storing the past commands.","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    public UndoCommand(CommandStack commandStack) {","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        this.commandStack \u003d commandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public boolean execute() {","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        UndoableCommand command \u003d this.commandStack.getLastCommand();","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        if (command \u003d\u003d null) {","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            this.setExecutionMessage(\"Unable to undo\");","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        command.undo();","lastModifiedDate":"2021-09-06"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        this.setExecutionMessage(\"Undo successful\");","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-09-06"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        return false;","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    protected String getInvalidArgumentsMessage() {","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        // Not needed as undo has no required arguments","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        return null;","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Haozeee":42}},{"path":"src/main/java/commands/UndoableCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-09-06"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A type of command that makes changes on the taskList and that can be undone.","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public abstract class UndoableCommand extends Command {","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    private Runnable undoFunction;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"     * Undo the command and restore the taskList to the previous version;","lastModifiedDate":"2021-09-06"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public void undo() {","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        assert this.undoFunction !\u003d null : \"Error while undoing\";","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"        this.undoFunction.run();","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    protected void setUndoFunction(Runnable undoFunction) {","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        this.undoFunction \u003d undoFunction;","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    protected abstract void setUndo();","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-06"}],"authorContributionMap":{"Haozeee":23}},{"path":"src/main/java/duke/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * A class that contains functions used to parse formatted strings to dates.","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"class DateParser {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * The date formatters used by duke to format a date to a string to display to the user or to store","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * in the local file taskList.txt.","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * */","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    protected static final DateTimeFormatter PRINT_DATE_FORMATTER \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    protected static final DateTimeFormatter PRINT_DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy HHmm\");","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    /** The date formatters used by duke.Duke to format date strings provided by the user. */","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d/M/[uuuu][uu]\");","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private static final DateTimeFormatter DATE_FORMATTER_WITH_TIME \u003d","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d/M/[uuuu][uu] HHmm\");","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * Returns a LocalDate based on a formatted String containing a date. The string should have","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     * the format dd/MM/yyyy. A two digit year or a 1 digit date and month would be accepted as well.","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * @param dateString The formatted String.","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     * @return The LocalDate object converted from the string.","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the dateString cannot be parsed.","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    protected static LocalDate parseDate(String dateString) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            return LocalDate.parse(dateString, DATE_FORMATTER);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidDateException();","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * Returns a LocalDateTime based on a formatted String containing a date. The string should have","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * the format dd/MM/yyyy HHmm. A two digit year or a 1 digit date and month would be accepted as well.","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @param dateTimeString The formatted String.","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * @return The LocalDateTime object converted from the string.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the dateTimeString cannot be parsed.","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    protected static LocalDateTime parseDateTime(String dateTimeString) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            return LocalDateTime.parse(dateTimeString, DATE_FORMATTER_WITH_TIME);","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidDateException();","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import javafx.MainWindow;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" * A chat bot that is capable of recording tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":" * It records 3 types of tasks:","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":" * Todos: Tasks without any date attached.","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":" * Deadlines: Tasks that need to be done before a specific date.","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":" * Events: Tasks that start at a specific time and ends at a specific time.","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"public class Duke extends Application {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"            primaryStage.setScene(scene);","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"            Ui dukeUi \u003d new Ui();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            dukeUi.startDuke();","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setMainWindow(dukeUi);","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            primaryStage.show();","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            primaryStage.setTitle(\"Duke\");","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            primaryStage.setResizable(false);","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Error message: \" + e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Haozeee":38,"-":2}},{"path":"src/main/java/duke/DukeDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidStorageTaskException;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * To abstract a date inputted by the user for the event or deadline tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" * Users will be able input different types of date format when creating tasks such as event and deadline tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":" * They can be a general string such as \"tomorrow\" or \"sunday\", or a formatted date without a time","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":" * or a formatted date with a specific time. A duke date will abstract the possible inputs for a date","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":" * by the user into a single class.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"public class DukeDate {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /** Constants indicating the type of date a DukeDate is storing */","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    public static final int HAS_STRING \u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public static final int HAS_DATE \u003d 2;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public static final int HAS_DATE_TIME \u003d 3;","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    /** Possible kinds of date users will enter */","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    private String dateString;","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    /** Stores what type of date is stored in the duke date. Based on the static constants above */","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    private final int dateType;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    private DukeDate(String string) {","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        dateString \u003d string;","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        this.dateType \u003d DukeDate.HAS_STRING;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private DukeDate(LocalDate date) {","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        this.dateType \u003d DukeDate.HAS_DATE;","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    private DukeDate(LocalDateTime dateTime) {","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        this.dateType \u003d DukeDate.HAS_DATE_TIME;","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * Returns a duke.DukeDate based on the user\u0027s date input. If the user enters a formatted date, the method","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     * will check if the user has included a time or just the date.","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * @param input The user\u0027s String input for a date.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     * @param isDate Indicates if the input string should be treated as a formatted date or not based on the","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     *               command keyword used.","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     * @return The DukeDate based on the user\u0027s input.","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the user enters an invalid date.","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    public static DukeDate of(String input, boolean isDate) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        if (!isDate) {","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(input);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        assert input !\u003d null : \"Date input for task is null\";","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        String[] strComponents \u003d input.strip().split(\" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        if (strComponents.length \u003e 2) {","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        } else if (strComponents.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"            LocalDateTime dateTime \u003d DateParser.parseDateTime(input.strip());","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(dateTime);","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        } else if (strComponents.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            LocalDate date \u003d DateParser.parseDate(input.strip());","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(date);","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidDateException();","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"     * Returns a duke.DukeDate that has been previously saved.","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"     * Duke saves newly created or edited tasks into local storage. A DukeDate is converted to a string","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"     * and then stored in the text file. The String describes the date itself along with its type.","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"     * When reloading the tasks from the text file, this method takes the date String and reconverts","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"     * it back to a DukeDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"     * @param dateString The String that the DukeDate was saved as.","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"     * @param type The type of the saved DukeDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"     * @return The reconverted DukeDates.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"     * @throws exceptions.DukeInvalidStorageTaskException When unable to read the date from storage.","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    public static DukeDate getDukeDateFromStorage(String dateString, int type)","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"            throws DukeInvalidStorageTaskException {","lastModifiedDate":"2021-09-04"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        if (type \u003d\u003d DukeDate.HAS_STRING) {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(dateString);","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        } else if (type \u003d\u003d DukeDate.HAS_DATE) {","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(LocalDate.parse(dateString, DateParser.PRINT_DATE_FORMATTER));","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        } else if (type \u003d\u003d DukeDate.HAS_DATE_TIME) {","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(LocalDateTime.parse(dateString, DateParser.PRINT_DATE_TIME_FORMATTER));","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidStorageTaskException();","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"     * Returns the type of date the DukeDate is storing as a String.","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"     * @return The required String.","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    public String getDateType() {","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        return Integer.toString(this.dateType);","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        if (this.dateTime !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"            return this.dateTime.format(DateParser.PRINT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        } else if (this.date !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"            return this.date.format(DateParser.PRINT_DATE_FORMATTER);","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"            assert dateString !\u003d null : \"Encountered an error while reading a task date\";","lastModifiedDate":"2021-09-04"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"            return dateString;","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        DukeDate dukeDate \u003d (DukeDate) o;","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        return dateType \u003d\u003d dukeDate.dateType \u0026\u0026 Objects.equals(dateString, dukeDate.dateString)","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"                \u0026\u0026 Objects.equals(date, dukeDate.date) \u0026\u0026 Objects.equals(dateTime, dukeDate.dateTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"    public int hashCode() {","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"        return Objects.hash(dateString, date, dateTime, dateType);","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":141}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * Class responsible for launching the Duke GUI application.","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"public class Launcher {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"     * Launches Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     * @param args Not applicable.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Haozeee":18}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import commands.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import commands.CommandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import commands.AddDeadlineCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import commands.AddEventCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import commands.AddTodoCommand;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import commands.DoneCommand;","lastModifiedDate":"2021-09-06"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import commands.ExitCommand;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import commands.FindCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import commands.InvalidCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import commands.ListCommand;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import commands.UndoCommand;","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":" * A class responsible for reading and evaluating user inputs.","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"class Parser {","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    /** User input keywords */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_DONE \u003d \"done\";","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_LIST \u003d \"list\";","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_BYE \u003d \"bye\";","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_TODO \u003d \"todo\";","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_EVENT \u003d \"event\";","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_DELETE \u003d \"delete\";","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_FIND \u003d \"find\";","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    private static final String KEYWORD_UNDO \u003d \"undo\";","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    /** A list of the tasks entered by the user */","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    private final CommandStack commandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    protected Parser(CommandStack commandStack) {","lastModifiedDate":"2021-09-06"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        this.commandStack \u003d commandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * Parses the user\u0027s input to find the relevant command.","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * @return The correct command for the user\u0027s input.","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    protected Command parseUserInput(String input) {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        assert input !\u003d null : \"Unable to parse user input as user input is null\";","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        if (input.equalsIgnoreCase(KEYWORD_BYE)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"            // Ends the chat","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        } else if (input.equalsIgnoreCase(KEYWORD_LIST)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            // Shows the task history","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            return new ListCommand(this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_DONE)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"            // Sets a task as done","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            return new DoneCommand(input, this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_TODO)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            // Creates a todo task","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"            return new AddTodoCommand(input, this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_DEADLINE)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"            //Creates a deadline task","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            return new AddDeadlineCommand(input, this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_EVENT)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"            // Creates an event task","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"            return new AddEventCommand(input, this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_DELETE)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"            // Sets a task as done","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            return new DeleteCommand(input, this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_FIND)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"            // Search for a task in the taskList","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"            return new FindCommand(input, this.taskList);","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_UNDO)) {","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"            return new UndoCommand(this.commandStack);","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        // Unrecognised input","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        return new InvalidCommand();","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"    protected TaskList getTaskList() {","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        return taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":85}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidStorageTaskException;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import java.io.File;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":" * A class that deals with loading and saving tasks files from the Computer\u0027s memory.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"public class Storage {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /** Name of the file to save the task history in local storage. The file is saved in","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * the project\u0027s root directory.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * */","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    protected static String fileName \u003d \"taskList.txt\";","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     * Loads previously saved task from memory. If no saved tasks is found, create a new file called","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * taskList.txt to store newly added tasks. The file is stored in the project\u0027s root directory.","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList to store previously saved tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    protected static void initialise(TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        if (!createFile()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            // Found previously saved task","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            readTaskFile(new File(fileName), taskList);","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"     * Creates a file called taskList.txt in storage. The file is only created if it does not exist in the","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"     * project root directory.","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * @return True if a file is created. False if the file already exists.","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    private static boolean createFile() {","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        File file \u003d new File(fileName);","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"            return file.createNewFile();","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"An error occurred during initialisation.\");","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"            System.exit(1);","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     * Saves an arrayList of tasks to local storage.","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"     * @param taskListArr The arrayList containing the tasks to save.","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"     * @return True if the save operation is successful. False if it produces an unexpected error.","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    public static boolean saveTaskList(ArrayList\u003c? extends Task\u003e taskListArr) {","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        FileWriter fileWriter \u003d Storage.createFileWriter(fileName);","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        assert fileWriter !\u003d null : \"Unable to open storage file.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c taskListArr.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            Task task \u003d taskListArr.get(i);","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            String saveText \u003d task.taskSaveString();","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"            try {","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                Storage.writeLineToFile(fileWriter, saveText);","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"                System.out.println(\"Unable to save task \" + i);","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        Storage.closeFileWriter(fileWriter);","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"     * Writes a line to a specified file using the provided fileWriter. A line separator is added after","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"     * writing a line.","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"     * @param fileWriter The fileWriter to write to the file.","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"     * @param lineToAdd The text to add to the file.","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"     * @throws IOException If an error occurred while trying to write to the file.","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    private static void writeLineToFile(FileWriter fileWriter, String lineToAdd) throws IOException {","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"            fileWriter.write(lineToAdd + System.lineSeparator());","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"            throw e;","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    private static void readTaskFile(File file, TaskList taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"            Storage.readTaskFromScanner(scanner, taskList);","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"            // Should not happen since the file is created if it does not exist before this method is called.","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"File not found.\");","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"            System.exit(1);","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"    private static void readTaskFromScanner(Scanner scanner, TaskList taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"            try {","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                Task task \u003d Task.storageStringToTask(scanner.nextLine());","lastModifiedDate":"2021-09-04"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"                taskList.addSavedTaskFromStorage(task);","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"                count++;","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"            } catch (DukeInvalidStorageTaskException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"                System.out.println(\"Unable to read a task from storage.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        if (count !\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"            System.out.println(count + \" saved tasks were loaded from memory.\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"    private static FileWriter createFileWriter(String filePath) {","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"            return new FileWriter(filePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"    private static void closeFileWriter(FileWriter fileWriter) {","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-21"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":139}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import commands.Command;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import commands.CommandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import commands.UndoableCommand;","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import tasks.Task;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" * Class responsible for interacting with users by collecting user\u0027s input and displaying","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * messages to users.","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"public class Ui {","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    public static final String DASHES \u003d \"-----------------------------------------------------------\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    /** System messages */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public static final String DEADLINE_FORMAT \u003d \"deadline {Deadline name} -by {Date to be completed by}.\\n\"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"            + \"Use \\\"/by\\\" to specify that the input date is a formatted date.\";","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    public static final String EVENT_FORMAT \u003d \"event {Event name} -at {Date of event}.\\n\"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            + \"Use \\\"/at\\\" to specify that the input date is a formatted date.\";","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public static final String TODO_FORMAT \u003d \"todo {Todo name}\";","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy or dd/MM/yyyy HHmm\";","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    private boolean isExit;","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private CommandStack commandStack;","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     * Starts up the chat bot. It prints a welcome message for the user and then waits","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * for a user input. It will then evaluate and execute inputs given by the user until the","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * user ends the chat. It is the main driver for the chat.","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    protected void startDuke() {","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        System.out.println(getStartMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        this.commandStack \u003d new CommandStack();","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        this.parser \u003d new Parser(this.commandStack);","lastModifiedDate":"2021-09-06"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        Storage.initialise(this.parser.getTaskList());","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * Takes a user input and feeds it to the parser in order to retrieve the appropriate command.","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * Then execute the command and return the execution text that is to be displayed to the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * @param input The user input that is to be passed to the parser.","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * @return The execution message that is to be displayed by the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    public String readUserInput(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d this.parser.parseUserInput(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        boolean commandExecutedSuccessfully \u003d command.execute();","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        if (commandExecutedSuccessfully \u0026\u0026 command instanceof UndoableCommand) {","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"            commandStack.addCommand((UndoableCommand) command);","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        } else if (command.isExit()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"            this.isExit \u003d true;","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        return command.getExecutionMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"     * Returns the start message that is displayed to the user when the user first","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     * opens Duke.","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * @return The start message as a String.","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    public static String getStartMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        return \"Hello, I\u0027m Duke\\n\" + \"What can I help you with?\";","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"     * Prints an error message when the user wishes to add a task but provides an invalid input. The message","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"     * tells the user that an error has occurred and how to correctly the input in order to add","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"     * the respective task.","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     * @param type The type of task inputted by the user.","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     * @return A message indicating the correct format to enter a task that is of type \u003ccode\u003etype\u003c/code\u003e.","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"    public static String getErrorMessage(Task.Type type) {","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        assert type !\u003d null : \"Task type is null\";","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        if (type \u003d\u003d Task.Type.TODO) {","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"            return \"Invalid format. Please enter the todo format as below:\\n\" + Ui.TODO_FORMAT + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        } else if (type \u003d\u003d Task.Type.DEADLINE) {","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"            return \"Invalid format. Please enter the deadline format as below:\\n\" + Ui.DEADLINE_FORMAT + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"            return \"Invalid format. Please enter the event format as below:\\n\" + Ui.EVENT_FORMAT + \"\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        return isExit;","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":90}},{"path":"src/main/java/exceptions/DukeInvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package exceptions;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * Duke has the ability for users to attach a specific date object to an event rather than","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * just using a string. This requires the user to provide the required date as a properly","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * formatted String. In the cases when the user does not, this checked exception will be thrown","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * to indicate to the user that he has entered an invalid date to Duke.","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class DukeInvalidDateException extends Exception {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     * Creates a DukeInvalidDateException with an error message telling the user that he has","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * entered an invalid date and what the correct format should be.","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public DukeInvalidDateException() {","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        super(\"Invalid date format entered. Date should be formatted as:\\n\" + Ui.DATE_FORMAT);","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":20}},{"path":"src/main/java/exceptions/DukeInvalidStorageTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package exceptions;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * Duke stores previously added tasks into the local storage by saving it into a text file.","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" * This exception occurs when duke tries to load the task from the text file but is unable","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * to read and load a particular task.","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"public class DukeInvalidStorageTaskException extends Exception {","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"     * Creates a DukeInvalidStorageTaskException telling the user that there was an error while","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     * trying to load a saved task from local memory.","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    public DukeInvalidStorageTaskException() {","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"        super(\"Unable to load some saved tasks from local storage. The file may have been edited previously.\"","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"                + \"Please check the taskList.txt file. Delete it if necessary.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"Haozeee":19}},{"path":"src/main/java/javafx/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package javafx;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    /** RGB values for dialog box background color */","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private static final Color USER_COLOR \u003d Color.rgb(57, 255, 90, 0.7);","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private static final Color DUKE_COLOR \u003d Color.rgb(236, 229, 221, 0.7);","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    private DialogBox(String text, boolean isUser) {","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        assert userImage !\u003d null \u0026\u0026 dukeImage !\u003d null : \"An error occurred while loading the images\";","lastModifiedDate":"2021-09-12"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        if (isUser) {","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"            this.setStyle(USER_COLOR);","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"            this.displayPicture.setImage(userImage);","lastModifiedDate":"2021-09-12"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            this.setStyle(DUKE_COLOR);","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"            this.displayPicture.setImage(dukeImage);","lastModifiedDate":"2021-09-12"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    private void flip() {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     * Displays the user input on the GUI.","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     * @param text The user input.","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"     * @return The DialogBox containing the user input.","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"    public static DialogBox getUserDialog(String text) {","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        return new DialogBox(text + \" \", true);","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"     * Displays Duke\u0027s response onto the GUI.","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"     * @param text Duke\u0027s response to an input by the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"     * @return The DialogBox containing the user input.","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"    public static DialogBox getDukeDialog(String text) {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        // Remove blank lines at the end of the list.","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        text \u003d text.replaceAll(\"([\\\\n\\\\r]+\\\\s*)*$\", \"\");","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        var db \u003d new DialogBox(text + \" \", false);","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        db.flip();","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        return db;","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"     * Displays the welcome message to the user on the GUI.","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"     * @return The dialog box containing the startup message.","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"    public static DialogBox getStartDialog() {","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        String startMessage \u003d Ui.getStartMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        var db \u003d new DialogBox(startMessage + \" \", false);","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        db.flip();","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        return db;","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"    private void setStyle(Color color) {","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        this.setBackground(new Background(new BackgroundFill(","lastModifiedDate":"2021-08-30"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                color,","lastModifiedDate":"2021-08-30"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"                new CornerRadii(25),","lastModifiedDate":"2021-08-30"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"                new Insets(5, 5, 5, 5)","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        )));","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Haozeee":114}},{"path":"src/main/java/javafx/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package javafx;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"import java.util.concurrent.Executors;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"import java.util.concurrent.ScheduledExecutorService;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    private Ui dukeUi;","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     * Initialises the application.","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * Configures the main window when launching.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * @param dukeUi the dukeUi that power the chat bot.","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    public void setMainWindow(Ui dukeUi) {","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        assert dukeUi !\u003d null : \"Unable to start Duke\";","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        this.dukeUi \u003d dukeUi;","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        this.displayStartMessage();","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * Displays a start message to the user.","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    public void displayStartMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        this.dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"                DialogBox.getStartDialog()","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        );","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     * Takes a user input and evaluates it accordingly. It is triggered","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     * when the user press the send button on the GUI or presses enter","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * on his keyboard.","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    @FXML","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"    public void handleUserInput() {","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        if (!input.trim().equals(\"\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"            this.dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"                    DialogBox.getUserDialog(input),","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"                    DialogBox.getDukeDialog(getResponse(input))","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            );","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"            userInput.clear();","lastModifiedDate":"2021-08-29"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        // Checks to see if the user input given is to close the chat bot.","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        if (this.dukeUi.isExit()) {","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"            this.closeDuke();","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"    private void closeDuke() {","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        ScheduledExecutorService executorService \u003d Executors.newSingleThreadScheduledExecutor();","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        executorService.schedule(() -\u003e System.exit(0),","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"                1, TimeUnit.SECONDS);","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        String response \u003d this.dukeUi.readUserInput(input.strip());","lastModifiedDate":"2021-09-12"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        assert response !\u003d null : \"An error occurred while getting a response from Duke\";","lastModifiedDate":"2021-09-12"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        return response;","lastModifiedDate":"2021-09-12"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Haozeee":92}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.DukeDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * A class to represent a deadline set by the user which is a type of task with a date","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * to be completed by.","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    /** The deadline that this task should be completed by. */","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final DukeDate deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    protected Deadline(String taskName, DukeDate deadline) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        super(taskName, Type.DEADLINE);","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * Creates a new deadline task based on the input by a user.","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     * @param input An input in the form of a task name followed by the keyword \"-by\"","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     *              then followed by the task deadline. The keyword \"/by\" is used when","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     *              entering a formatted date. This allows Duke to interpret the deadline","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     *              as a date.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * @return The newly created task deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     * @throws exceptions.DukeInvalidDateException Throws an exception when the user tries to create a deadline","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     * task with a specified date but formats the date wrongly.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    public static Deadline newDeadlineTask(String input) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        String[] inputArr \u003d input.split(\"-by|/by\");","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        String taskName \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        String completedBy \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        if (input.contains(\"-by\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            return new Deadline(taskName, DukeDate.of(completedBy, false));","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            assert input.contains(\"/by\") : \"An unexpected error occurred while adding the task\";","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            return new Deadline(taskName, DukeDate.of(completedBy, true));","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    public String taskDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        return this.getTaskName() + \" (by: \" + this.deadline + \")\";","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public String taskSaveString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        String isDone \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        return \"D | \" + isDone + \" | \" + this.deadline.getDateType()","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"                + \" | \" + this.getTaskName() + \" | \" + this.deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":55}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.DukeDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * A class that represent an event which is a type of task that starts","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * and ends at a specific dead or time.","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    /** The time of the event */","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final DukeDate eventTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    protected Event(String taskName, DukeDate eventTime) {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        super(taskName, Type.EVENT);","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * Creates a new event task based on the input by a user.","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     * @param input An input in the form of a event name followed by the keyword \"-at\"","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     *              then followed by the timing of the event. The keyword \"/at\" is used","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     *              when entering a formatted date. This allows Duke to interpret the event","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     *              time as a date object.","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * @return The newly created event task.","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     * @throws exceptions.DukeInvalidDateException Throws an exception when the user tries to create an tasks.Event","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     * task with a specified date but formats the date wrongly.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    public static Event newEventTask(String input) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        String[] inputArr \u003d input.split(\"-at|/at\");","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        String name \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        String time \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        if (input.contains(\"-at\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            return new Event(name, DukeDate.of(time, false));","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"            assert input.contains(\"/at\") : \"An unexpected error occurred while adding the task\";","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            return new Event(name, DukeDate.of(time, true));","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    public String taskDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        return this.getTaskName() + \" (at: \" + this.eventTime + \")\";","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public String taskSaveString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        String isDone \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        return \"E | \" + isDone + \" | \" + this.eventTime.getDateType()","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"                + \" | \" + this.getTaskName() + \" | \" + this.eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":55}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.DukeDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidStorageTaskException;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * A class that abstracts a task.","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     * A representation of the 3 types of tasks currently supported by Duke.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    public enum Type {","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"        TODO,","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        DEADLINE,","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        EVENT","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /** Whether the task had been completed or not */","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    /** The name of a task as given by the user */","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    private final String taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    /** The type of the task */","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    private final Type type;","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    protected Task(String taskName, Type type) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * Returns a description of the task filled with its details.","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     * @return The description of the task.","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    public abstract String taskDescription();","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * Converts a task into a specified String format for saving into local storage.","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * The format to save the strings is {type of task} | {is done} | {type of date} |","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     * {task name} | {time (if applicable)}.","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * The type of date is based on the static variables in the duke.DukeDate class. It is only applicable","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * for deadline and event tasks. For other tasks with no date, a \"0\" is used to represent the type","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * of date.","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * @return The String format to save the task as.","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    public abstract String taskSaveString();","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     * Marks a task as completed.","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     * Returns the string representation of the type of task.","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * @return The required string representation.","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    public String taskTypeToString() {","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        assert this.type !\u003d null : \"Error while reading a task\";","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        if (this.type.equals(Type.TODO)) {","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"            return \"[T]\";","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        } else if (this.type.equals(Type.EVENT)) {","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"            return \"[E]\";","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        } else if (this.type.equals(Type.DEADLINE)) {","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"            // Deadline event","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"            return \"[D]\";","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"            // Should not occur since we have checked that the task type is not null and there are only 3","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"            // possible types of task which we handled above. Hence, a runtime exception is thrown here.","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"            throw new RuntimeException(\"A task has no type.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"     * Returns a task from the String used to saved the task in local storage. When a task is saved to local","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"     * storage it is saved as a formatted string that stores the information of the task. This methods takes","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"     * that String and converts it back to the correct task.","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"     * @param saveString The String that represents the saved task.","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"     * @return The task converted from saveString.","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"     * @throws exceptions.DukeInvalidStorageTaskException when unable to read the type of task.","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"    public static Task storageStringToTask(String saveString) throws DukeInvalidStorageTaskException {","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"        assert saveString !\u003d null : \"Error while reading saved tasks\";","lastModifiedDate":"2021-09-04"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        String[] strComponents \u003d saveString.split(\"\\\\|\");","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"        String typeOfTask \u003d strComponents[0].strip();","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"        boolean isDone \u003d strComponents[1].strip().equals(\"1\");","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        int dukeDateType \u003d Integer.parseInt(strComponents[2].strip());","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        String taskName \u003d strComponents[3].strip();","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        Task loadedTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        switch (typeOfTask) {","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        case \"T\":","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"            loadedTask \u003d Todo.newTodoTask(taskName);","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        case \"D\":","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"            loadedTask \u003d new Deadline(taskName,","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"                    DukeDate.getDukeDateFromStorage(strComponents[4].strip(), dukeDateType));","lastModifiedDate":"2021-09-04"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        case \"E\":","lastModifiedDate":"2021-09-04"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"            loadedTask \u003d new Event(taskName,","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                    DukeDate.getDukeDateFromStorage(strComponents[4].strip(), dukeDateType));","lastModifiedDate":"2021-09-04"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"            break;","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        default:","lastModifiedDate":"2021-09-04"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidStorageTaskException();","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        loadedTask.isDone \u003d isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        return loadedTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"     * Returns a string representation of the task with its task name and its completion status.","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"        return this.taskTypeToString() + this.getCompletedIcon() + this.taskDescription();","lastModifiedDate":"2021-09-12"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"    private String getCompletedIcon() {","lastModifiedDate":"2021-09-12"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"            return \"[\" + \"\\u2713\" + \"] \";","lastModifiedDate":"2021-09-12"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-09-12"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"            return \"[\" + \"\\u2718\" + \"] \";","lastModifiedDate":"2021-09-12"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-16"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"        return taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"        return isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"    public void revertToUndone() {","lastModifiedDate":"2021-09-06"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-06"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":148}},{"path":"src/main/java/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * A class that abstracts a list of tasks set by the user. It also contains methods","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" * that pertain to updating the list of tasks.","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"public class TaskList {","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    /** An arraylist that contains the tasks set by the user. */","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    /** The number of uncompleted tasks in the task list */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private int numOfUncompletedTasks \u003d 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /** The total number of tasks in the task list. */","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private int totalNumOfTasks \u003d 0;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     * Adds a task to the task list and return a message to tell the user that the task has been added.","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * @param task The task to be added to the task list.","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * @return The message telling the user that the task has been added.","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        assert task !\u003d null : \"Attempting to add a null task\";","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        this.numOfUncompletedTasks++;","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        totalNumOfTasks++;","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        String message \u003d \"Got it! This task has been added:\\n\" + task + \"\\n\" + this.getTaskListStatus();","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        this.saveTaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        return message;","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * Adds a previously saved task to the task list. This method should only be used when loading a task from","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * memory. No message is shown to the user when a task is added. Do not use this method to add a newly","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * inputted task from the user to the taskList.","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * @param task The previously saved task to add to the taskList.","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    public void addSavedTaskFromStorage(Task task) {","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        assert task !\u003d null : \"Error while loading tasks from storage\";","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        this.tasks.add(task);","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"            this.numOfUncompletedTasks++;","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        this.totalNumOfTasks++;","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     * Removes a task in the task list based on the index given.","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"     * @param index The index of the task list. Note that the index provided starts from 1. So the","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"     *              index 1 represents the first task in the taskList ArrayList.","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"     * @param removedTasks An arrayList containing the removed tasks. Needed so that the","lastModifiedDate":"2021-09-06"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"     *                     undo functionality can work well.","lastModifiedDate":"2021-09-06"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"     * @return The message that should be shown to the user after removing a task.","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"    public String removeTask(int index, ArrayList\u003cTask\u003e removedTasks) {","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        if (index \u003e this.tasks.size() || index \u003c\u003d 0) {","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            removedTasks.add(null);","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"            return \"A task could not be removed because it does not exist.\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"        Task task \u003d this.tasks.get(index - 1);","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"        assert task !\u003d null : \"Attempting to remove a null task\";","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"        this.tasks.remove(index - 1);","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"        removedTasks.add(task);","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"            numOfUncompletedTasks--;","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        totalNumOfTasks--;","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        String message \u003d \"Understood. I\u0027ve removed this task:\\n\" + task + \"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        this.saveTaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        return message;","lastModifiedDate":"2021-08-29"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"     * Marks a task in the task list as completed based on the index given.","lastModifiedDate":"2021-08-16"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"     * @param index The index of the task list. Note that the index provided starts from 1.","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"     *              So the index 1 represents the first task in the taskList ArrayList.","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"     * @param doneTasks A arrayList to store thr index of the task that was mark as done. Needed","lastModifiedDate":"2021-09-06"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"     *                  for command undo functionality.","lastModifiedDate":"2021-09-06"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"     * @return The message that should be shown to the user after a task has been marked as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    public String markTaskAsDone(int index, ArrayList\u003cInteger\u003e doneTasks) {","lastModifiedDate":"2021-09-06"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        if (index \u003e this.tasks.size() || index \u003c\u003d 0) {","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"            return \"Index \" + index + \" does not exist.\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        if (this.tasks.get(index - 1).isDone()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"            return \"This task at index \" + index + \" has already been completed.\\n\";","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        Task task \u003d this.tasks.get(index - 1);","lastModifiedDate":"2021-09-04"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        assert task !\u003d null : \"Attempting to edit a null task.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"        task.markAsDone();","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        doneTasks.add(index);","lastModifiedDate":"2021-09-06"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        this.numOfUncompletedTasks--;","lastModifiedDate":"2021-09-04"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        String message \u003d \"congratulations! This task has been completed:\\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"                + task + \"\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"        this.saveTaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        return message;","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"     * Gets the task list for the user to view. If there are no tasks in the taskList,","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"     * return a message indicating that the taskList is empty.","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"     * @return The contents of the taskList or a message indicating that it is empty.","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    public String listHistory() {","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        StringBuilder message \u003d new StringBuilder(Ui.DASHES);","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        if (this.tasks.isEmpty()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"            message.append(\"There are no tasks in your task list.\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"            message.append(Ui.DASHES);","lastModifiedDate":"2021-08-29"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"            return message.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"        message.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2021-09-04"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"            message.append(i + 1).append(\". \").append(this.tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        message.append(Ui.DASHES);","lastModifiedDate":"2021-08-29"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        return message.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"     * Returns the tasks in the taskList that has a name that matches the","lastModifiedDate":"2021-08-30"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"     * search keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"     * @param searchKeyword A search keyword that is provided by the user.","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"     * @return An arrayList containing the tasks that contains the search keyword.","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"    public ArrayList\u003cTask\u003e findTask(String searchKeyword) {","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"        ArrayList\u003cTask\u003e searchList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"        assert searchKeyword !\u003d null : \"Search term is null\";","lastModifiedDate":"2021-09-04"},{"lineNumber":149,"author":{"gitId":"Haozeee"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2021-09-04"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":"            if (task.getTaskName().toLowerCase().contains(searchKeyword.toLowerCase())) {","lastModifiedDate":"2021-08-23"},{"lineNumber":151,"author":{"gitId":"Haozeee"},"content":"                searchList.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":152,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":153,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":154,"author":{"gitId":"Haozeee"},"content":"        return searchList;","lastModifiedDate":"2021-08-23"},{"lineNumber":155,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":158,"author":{"gitId":"Haozeee"},"content":"     * Adds a task to the tasks array list at the specified index.","lastModifiedDate":"2021-09-06"},{"lineNumber":159,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":160,"author":{"gitId":"Haozeee"},"content":"     * @param task The task to be added.","lastModifiedDate":"2021-09-06"},{"lineNumber":161,"author":{"gitId":"Haozeee"},"content":"     * @param index The index to add the task in the arrayList. The index is 1-based.","lastModifiedDate":"2021-09-06"},{"lineNumber":162,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":163,"author":{"gitId":"Haozeee"},"content":"    public void insertTaskAt(Task task, int index) {","lastModifiedDate":"2021-09-06"},{"lineNumber":164,"author":{"gitId":"Haozeee"},"content":"        this.tasks.add(index - 1, task);","lastModifiedDate":"2021-09-06"},{"lineNumber":165,"author":{"gitId":"Haozeee"},"content":"        if (task.isDone()) {","lastModifiedDate":"2021-09-06"},{"lineNumber":166,"author":{"gitId":"Haozeee"},"content":"            this.numOfUncompletedTasks++;","lastModifiedDate":"2021-09-06"},{"lineNumber":167,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-09-06"},{"lineNumber":168,"author":{"gitId":"Haozeee"},"content":"        this.totalNumOfTasks++;","lastModifiedDate":"2021-09-06"},{"lineNumber":169,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":170,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":171,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":172,"author":{"gitId":"Haozeee"},"content":"     * Saves the current task list to local storage in a file called taskList.txt.","lastModifiedDate":"2021-08-21"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"    private void saveTaskList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":175,"author":{"gitId":"Haozeee"},"content":"        if (!Storage.saveTaskList(this.tasks)) {","lastModifiedDate":"2021-09-04"},{"lineNumber":176,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Oops!! An error occurred while trying to save your new task.\");","lastModifiedDate":"2021-08-21"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":178,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":179,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":180,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":181,"author":{"gitId":"Haozeee"},"content":"     * Reverts the task at the given index to undone. This is used in conjunction with the undo","lastModifiedDate":"2021-09-06"},{"lineNumber":182,"author":{"gitId":"Haozeee"},"content":"     * command.","lastModifiedDate":"2021-09-06"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"     * @param index The index of the task to be marked as undone in the taskList. The index is","lastModifiedDate":"2021-09-06"},{"lineNumber":185,"author":{"gitId":"Haozeee"},"content":"     *              1-based.","lastModifiedDate":"2021-09-06"},{"lineNumber":186,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"    public void revertTaskToUndone(int index) {","lastModifiedDate":"2021-09-06"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"        this.tasks.get(index - 1).revertToUndone();","lastModifiedDate":"2021-09-06"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"        this.numOfUncompletedTasks--;","lastModifiedDate":"2021-09-06"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":191,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":192,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":193,"author":{"gitId":"Haozeee"},"content":"     * Returns a String describing the total number of tasks and uncompleted tasks in the","lastModifiedDate":"2021-08-29"},{"lineNumber":194,"author":{"gitId":"Haozeee"},"content":"     * taskList.","lastModifiedDate":"2021-08-29"},{"lineNumber":195,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-29"},{"lineNumber":196,"author":{"gitId":"Haozeee"},"content":"     * @return The String describing the taskList status.","lastModifiedDate":"2021-08-29"},{"lineNumber":197,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":198,"author":{"gitId":"Haozeee"},"content":"    public String getTaskListStatus() {","lastModifiedDate":"2021-08-29"},{"lineNumber":199,"author":{"gitId":"Haozeee"},"content":"        return \"You currently have \" + this.totalNumOfTasks + \" tasks in your list with \"","lastModifiedDate":"2021-09-04"},{"lineNumber":200,"author":{"gitId":"Haozeee"},"content":"                + this.numOfUncompletedTasks + \" uncompleted tasks remaining.\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":201,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":202,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":203,"author":{"gitId":"Haozeee"},"content":"    public int getTotalNumOfTasks() {","lastModifiedDate":"2021-09-06"},{"lineNumber":204,"author":{"gitId":"Haozeee"},"content":"        return this.totalNumOfTasks;","lastModifiedDate":"2021-09-06"},{"lineNumber":205,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":206,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":206}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A type of task that does not have a specified date or time.","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    private Todo(String taskName) {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"        super(taskName, Type.TODO);","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     * Creates a new task that is to be done.","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * @return The todo task.","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public static Todo newTodoTask(String taskName) {","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        return new Todo(taskName.trim());","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    public String taskDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        return this.getTaskName();","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    public String taskSaveString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        String isDone \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        return \"T | \" + isDone + \" | 0 | \" + this.getTaskName();","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":32}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"295\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" maxWidth\u003d\"390\"\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"            \u003cFont name\u003d\"Apple Braille\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        \u003cStackPane maxHeight\u003d\"100.0\" maxWidth\u003d\"100.0\"\u003e \u003c!-- use the preferred size for max size constraints --\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"                \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"                \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80\" fitWidth\u003d\"80\" /\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Haozeee":28}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"622.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"main\" stylesheets\u003d\"@MainWindow.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"javafx.MainWindow\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"10.0\" layoutY\u003d\"568.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"298.0\" styleClass\u003d\"text-field\" AnchorPane.bottomAnchor\u003d\"8.0\" /\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"316.0\" layoutY\u003d\"572.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\" textFill\u003d\"#280d0d\"\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"            \u003cFont name\u003d\"Apple Braille\" size\u003d\"17.0\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"main\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"555.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"main\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"Haozeee":23}},{"path":"src/test/java/commands/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-06"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"public class AddDeadlineCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    public void wrongCommandWord() {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline blah -bb blah\";","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddDeadlineCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public void noNameProvided() {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline -by blah\";","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddDeadlineCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public void noDescriptionProvided() {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline blah -by\";","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddDeadlineCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    public void invalidDateProvided() {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline blah /by blah 32/5/2000\";","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddDeadlineCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":38}},{"path":"src/test/java/commands/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package commands;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-09-06"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    public void wrongCommandWord() {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline blah -aa blah\";","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddEventCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public void noNameProvided() {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline -at blah\";","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddEventCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public void noDescriptionProvided() {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline blah -at\";","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddEventCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    public void invalidDateProvided() {","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        String input \u003d \"deadline blah /at blah 32/5/2000\";","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        Command command \u003d new AddEventCommand(input, new TaskList());","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        assertFalse(command.execute());","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":37}},{"path":"src/test/java/duke/DateParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class DateParserTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private static final LocalDate testDate \u003d LocalDate.of(2021, 8, 5);","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    public void nonExistentDate() {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        assertThrows(DukeInvalidDateException.class, () -\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"            DateParser.parseDate(\"30/15/2021\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void wronglyFormattedDate() {","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        assertThrows(DukeInvalidDateException.class, () -\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            DateParser.parseDate(\"30-02-2021\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    public void dateWithSingleDigitMonthAndDay() throws DukeInvalidDateException {","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        assertEquals(testDate, DateParser.parseDate(\"5/8/21\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    public void wronglyFormattedTime() {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        assertThrows(DukeInvalidDateException.class, () -\u003e","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            DateParser.parseDateTime(\"05/08/2021 705\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":38}},{"path":"src/test/java/duke/DukeDateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package duke;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidStorageTaskException;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class DukeDateTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    private static final String testDateInput \u003d \"24/12/2021\";","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    private static final String testDateTimeInput \u003d \"24/06/1999 0400\";","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    public void recoverDateFromStorage() throws DukeInvalidDateException, DukeInvalidStorageTaskException {","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"        DukeDate date \u003d DukeDate.getDukeDateFromStorage(\"24 Dec 2021\", DukeDate.HAS_DATE);","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        DukeDate testDate \u003d DukeDate.of(testDateInput, true);","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"        assertEquals(date, testDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void recoverDateTimeFromStorage() throws DukeInvalidDateException, DukeInvalidStorageTaskException {","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        DukeDate date \u003d DukeDate.getDukeDateFromStorage(\"24 Jun 1999 0400\", DukeDate.HAS_DATE_TIME);","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        DukeDate testDate \u003d DukeDate.of(testDateTimeInput, true);","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        assertEquals(date, testDate);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":27}},{"path":"src/test/java/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"package tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import exceptions.DukeInvalidDateException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"public class TaskTest {","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    @Test","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    public void testTaskDescription() throws DukeInvalidDateException {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        Task task \u003d Deadline.newDeadlineTask(\"blah -by blah\");","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        String expected \u003d \"blah (by: blah)\";","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        assertEquals(expected, task.taskDescription());","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"Haozeee":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"todo Borrow book","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"deadline Return book -by Sunday","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"event Birthday -at Monday 1400","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"done 1","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"done 3","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"event birthday -at 365 days later","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"done   1","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"done 0","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"done 7","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"done 2.0","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"done t","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"done2","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"donez","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"blah","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"deadline blah","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"event blah","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"deadline blah -b blah","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"event blah - at daaa","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"deadline blah -at blah","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"event blah -by blah","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"deadline -by da","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"event -at da","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"deadline ta -by","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"event add -at","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"deadline dad -by","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"event dada -at","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"deadline     -by da","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"event     -at  dat","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"deadline    -by","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"event    -at","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"deadline   Hw    -by    mon","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"event   lunch   -at  tmrw","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"deadlinedasd -by da","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"eventdad -at dada","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"deadline da -bybkad","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"event adad -atdads","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"deadline returnmoney-bymonday","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"event run-atmonday","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"deadlinedaddasd-bydasdsad","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"eventdadsa-atdads","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"deadline","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"event","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"todo","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"todo   Test","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"delete 2.2","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"delete a","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"delete 80","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"delete 3","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"DElete 4","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"delete   4","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"delete 4","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"delete 0","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"event dinner /at 19/8/22 1800","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"event lunch /at 5/8/22","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"deadline Exercise /by 19/8/22 1800","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"deadline Diet /by 5/8/22","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"event sdad /at 20/15/25","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"deadline dsgfs /by 51443","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"event asd /at dssda","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"find Book","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"find None","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"Haozeee":70}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"# delete saved tasks from previous run","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"if [ -e \"./taskList.txt\" ]","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"then","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    rm taskList.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"fi","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"find ../src/main/java/*/*.java  \u003e sources.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin @sources.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"#cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haozeee":13,"-":33}}]

[{"path":"src/main/java/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * A class that contains functions used to parse formatted strings to dates.","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"public class DateParser {","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    /** The date formatters used by Duke to format date strings provided by the user. */","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d/M/[uuuu][uu]\");","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    private static final DateTimeFormatter DATE_FORMATTER_WITH_TIME \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d/M/[uuuu][uu] HHmm\");","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    /** The date formatters used by duke to format a date to a string to display to the user or to store","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * in the local file taskList.txt.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * */","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    public static final DateTimeFormatter PRINT_DATE_FORMATTER \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public static final DateTimeFormatter PRINT_DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy HHmm\");","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"     * Returns a LocalDate based on a formatted String containing a date. The string should have","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"     * the format dd/MM/yyyy. A two digit year or a 1 digit date and month would be accepted as well.","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     * @param dateString The formatted String.","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * @return The LocalDate object converted from the string.","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the dateString cannot be parsed.","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    public static LocalDate parseDate(String dateString) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"            return LocalDate.parse(dateString, DATE_FORMATTER);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidDateException();","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * Returns a LocalDateTime based on a formatted String containing a date. The string should have","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     * the format dd/MM/yyyy HHmm. A two digit year or a 1 digit date and month would be accepted as well.","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * @param dateTimeString The formatted String.","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * @return The LocalDateTime object converted from the string.","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the dateTimeString cannot be parsed.","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    public static LocalDateTime parseDateTime(String dateTimeString) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"            return LocalDateTime.parse(dateTimeString, DATE_FORMATTER_WITH_TIME);","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"            throw new DukeInvalidDateException();","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":56}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":" * A class to abstract a deadline which is a type of task with a date","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * to be completed by.","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    /** The deadline that this task should be completed by. */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    private final DukeDate deadline;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    public Deadline(String taskName, DukeDate deadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        super(taskName, Type.DEADLINE);","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * Creates a new deadline task based on the input by a user.","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     * @param input An input in the form of a task name followed by the keyword \"-by\"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     *              then followed by the task deadline.","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * @return The newly created task deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the user tries to create a deadline","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     * task with a specified date but formats the date wrongly.","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public static Deadline newDeadlineTask(String input) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        String[] inputArr \u003d input.split(\"-by|/by\");","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        String taskName \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        String completedBy \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        if (input.contains(\"-by\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"            return new Deadline(taskName, DukeDate.of(completedBy, false));","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            return new Deadline(taskName, DukeDate.of(completedBy, true));","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"    public String taskDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"        return this.getTaskName() + \" (by: \" + this.deadline + \")\";","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"    public String taskSaveString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        String isDone \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        return \"D | \" + isDone + \" | \" + this.deadline.getDateType()","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"                + \" | \" + this.getTaskName() + \" | \" + this.deadline;","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":47}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A chat bot that is capable of recording tasks.","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" * It records 3 types of tasks:","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" * Todos: Tasks without any date attached.","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * Deadlines: Tasks that need to be done before a specific date.","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * Events: Tasks that start at a specific time and ends at a specific time.","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    /** System messages */","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public static final String DEADLINE_FORMAT \u003d \"deadline {Deadline name} -by {Date to be completed by}.\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"            + \"Use \\\"/by\\\" to specify that the input date is a formatted date.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    public static final String EVENT_FORMAT \u003d \"event {Event name} -at {Date of event}.\\n\"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"            + \"Use \\\"/at\\\" to specify that the input date is a formatted date.\";","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public static final String TODO_FORMAT \u003d \"todo {todo name}\";","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy or dd/MM/yyyy HHmm\";","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * When run, opens a chat bot that greets the user and echos any user\u0027s input. If the input","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     * is bye the chat bot is closed.","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"     * @param args Not used.","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        startUp();","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        UserInputReader userInputReader \u003d new UserInputReader(scanner);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        Storage.initialise(userInputReader.getTaskList());","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"        while (true) {","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"            String input \u003d userInputReader.getUserInput();","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"            if (!userInputReader.evaluateUserInput(input)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"                endChat();","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    private static void startUp() {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"        System.out.println(logo + \"\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"Hello, I\u0027m Duke\");","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"What can I help you with?\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"    private static void endChat() {","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"Bye!! Hope to see you again!!\");","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Haozeee":45,"-":9}},{"path":"src/main/java/DukeDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":" * To abstract a date inputted by the user for the event or deadline tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":" * Users will be able input different types of date format when creating tasks such as event and deadline tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * They can be a general string such as \"tomorrow\" or \"sunday\", or a formatted date without a time","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" * or a formatted date with a specific time. A duke date will abstract the possible inputs for a date","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":" * by the user into a single class.","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"public class DukeDate {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /** Constants indicating the type of date a DukeDate is stoing */","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    public static final int HAS_STRING \u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    public static final int HAS_DATE \u003d 2;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    public static final int HAS_DATE_TIME \u003d 3;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    /** Possible kinds of date users will enter */","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    private String dateString;","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    private LocalDate date;","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    /** Stores what type of date is stored in the duke date. Based on the constants above */","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    private int dateType;","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"    private DukeDate(String string) {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        dateString \u003d string;","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        this.dateType \u003d  DukeDate.HAS_STRING;","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    private DukeDate(LocalDate date) {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"        this.dateType \u003d DukeDate.HAS_DATE;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    private DukeDate(LocalDateTime dateTime) {","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        this.dateType \u003d DukeDate.HAS_DATE_TIME;","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"     * Returns a DukeDate based on the user\u0027s date input. If the user enters a formatted date, the method","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"     * will check if the user has included a time or just the date.","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     * @param input The user\u0027s String input for a date.","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * @param isDate Indicates if the input string should be treated as a formatted date or not based on the","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     *               command keyword used.","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @return The DukeDate based on the user\u0027s input.","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the user enters an invalid date.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    public static DukeDate of(String input, boolean isDate) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        if (!isDate) {","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(input);","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        String[] strComponents \u003d input.strip().split(\" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        if (strComponents.length \u003e 2) {","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        } else if (strComponents.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            LocalDateTime dateTime \u003d DateParser.parseDateTime(input.strip());","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(dateTime);","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"            LocalDate date \u003d DateParser.parseDate(input.strip());","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(date);","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"     * Returns a DukeDate that has been previously saved.","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"     * Duke saves newly created or edited tasks into local storage. A DukeDate is converted to a string","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     * and then stored in the text file. The String describes the date itself along with its type.","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     * When reloading the tasks from the text file, this method takes the date String and reconverts","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     * it back to a DukeDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"     * @param dateString The String that the DukeDate was saved as.","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"     * @param type The type of the saved DukeDate.","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"     * @return The reconverted DukeDates.","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"    public static DukeDate GetDukeDateFromType(String dateString, int type) {","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        if (type \u003d\u003d DukeDate.HAS_STRING) {","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(dateString);","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        } else if (type \u003d\u003d DukeDate.HAS_DATE) {","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(LocalDate.parse(dateString, DateParser.PRINT_DATE_FORMATTER));","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"            return new DukeDate(LocalDateTime.parse(dateString, DateParser.PRINT_DATE_TIME_FORMATTER));","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"     * Returns the type of date the DukeDate is storing as a String.","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"     * @return The required String.","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"    public String getDateType() {","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        return Integer.toString(this.dateType);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        if (this.dateTime !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"            return this.dateTime.format(DateParser.PRINT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        } else if (this.date !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"            return this.date.format(DateParser.PRINT_DATE_FORMATTER);","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"            return dateString;","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":109}},{"path":"src/main/java/DukeInvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":" * Duke has the ability for users to attach a specific date object to an event rather than","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":" * just using a string. This requires the user to provide the required date as a properly","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * formatted String. In the cases when the user does not, this checked exception will be thrown","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" * to indicate to the user that he has entered an invalid date to Duke.","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"public class DukeInvalidDateException extends Exception {","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"     * Creates a DukeInvalidDateException with an error message telling the user that he has","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"     * entered an invalid date and what the correct format should be.","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    public DukeInvalidDateException() {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"        super(\"Invalid date format entered. Date should be formatted as:\\n\" + Duke.DATE_FORMAT);","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":16}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":" * A class that represent an event which is a type of task that starts","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":" * and ends at a specific dead or time.","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"    /** The time of the event */","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    private final DukeDate eventTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    public Event(String taskName, DukeDate eventTime) {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"        super(taskName, Type.EVENT);","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * Creates a new event task based on the input by a user.","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * @param input An input in the form of a event name followed by the keyword \"-at\"","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     *              then followed by the timing of the event.","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * @return The newly created event task.","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     * @throws DukeInvalidDateException Throws an exception when the user tries to create an Event","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"     * task with a specified date but formats the date wrongly.","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    public static Event newEventTask(String input) throws DukeInvalidDateException {","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        String[] inputArr \u003d input.split(\"-at|/at\");","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        String name \u003d inputArr[0].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        String time \u003d inputArr[1].trim();","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        if (input.contains(\"-at\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"            return new Event(name, DukeDate.of(time, false));","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"            return new Event(name, DukeDate.of(time, true));","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    public String taskDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        return this.getTaskName() + \" (at: \" + this.eventTime + \")\";","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    public String taskSaveString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"        String isDone \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        return \"E | \" + isDone + \" | \" + this.eventTime.getDateType()","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"                + \" | \" + this.getTaskName() + \" | \" + this.eventTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":46}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"import java.io.File;","lastModifiedDate":"2021-08-21"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":" * A class that deals with loading and saving tasks files from the Computer\u0027s memory.","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"public class Storage {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    /** Name of the file to save the task history in local storage */","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    public static String fileName \u003d \"taskList.txt\";","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * Loads previously saved task from memory. If no saved tasks is found, create a new file called","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * TaskList.txt to store newly added tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * @param taskList The taskList to store previously saved tasks.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public static void initialise(TaskList taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        if (!createFile()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"            // Found previously saved task","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"            readTaskFile(new File(fileName), taskList);","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * Creates a file called taskList.txt in storage. The file is only created if it does not exist in the","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     * project root directory.","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     * @return True if a file is created. False if the file already exists.","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    private static boolean createFile() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"        File file \u003d new File(fileName);","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"            return file.createNewFile();","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"An error occurred during initialisation.\");","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"            System.exit(1);","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * Saves an arrayList of tasks to local storage.","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     * @param taskListArr The arrayList containing the tasks to save.","lastModifiedDate":"2021-08-21"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     * @return True if the save operation is successful. False if it produces an unexpected error.","lastModifiedDate":"2021-08-21"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"    public static boolean saveTaskList(ArrayList\u003c? extends Task\u003e taskListArr) {","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"        FileWriter fileWriter \u003d  Storage.createFileWriter(fileName);","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"        if (fileWriter \u003d\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-21"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c taskListArr.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            Task task \u003d taskListArr.get(i);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"            String saveText \u003d task.taskSaveString();","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            try {","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"                Storage.writeLineToFile(fileWriter, saveText);","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"                System.out.println(\"Unable to save task \" + i);","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"        Storage.closeFileWriter(fileWriter);","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     * Writes a line to a specified file using the provided fileWriter. A line separator is added after","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     * writing a line.","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"     * @param fileWriter The fileWriter to write to the file.","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"     * @param lineToAdd The text to add to the file.","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"     * @throws IOException If an error occurred while trying to write to the file.","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"    private static void writeLineToFile(FileWriter fileWriter, String lineToAdd) throws IOException {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"            fileWriter.write(lineToAdd + System.lineSeparator());","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"            throw e;","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"    private static void readTaskFile(File file, TaskList taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"            Storage.readTaskFromScanner(scanner, taskList);","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"            // Should not happen since the file is created if it does not exist before this method is called.","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"File not found.\");","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"            System.exit(1);","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"    private static void readTaskFromScanner(Scanner scanner, TaskList taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"            Task task \u003d Task.stringToTask(scanner.nextLine());","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"            taskList.addSavedTask(task);","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"            count++;","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"        if (count !\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"            System.out.println(count + \" saved tasks were loaded from memory.\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"    private static FileWriter createFileWriter(String filePath) {","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"            return new FileWriter(filePath);","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"    private static void closeFileWriter(FileWriter fileWriter) {","lastModifiedDate":"2021-08-21"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-21"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"Haozeee":128}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":" * A class that abstracts a task.","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"     * Returns a description of the task filled with its details.","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"     * @return The description of the task.","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    public abstract String taskDescription();","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     * Converts a task into a specified String format for saving into local storage.","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     * The format to save the strings is {type of task} | {is done} | {type of date}|","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"     * {task name} | {time (if applicable)}.","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"     * The type of date is based on the static variables in the DukeDate class. It is only applicable","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * for deadline and event tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * @return The String format to save the task as.","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public abstract String taskSaveString();","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"    // The type of task","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    public enum Type {","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        TODO,","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        DEADLINE,","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        EVENT","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"    /** Whether the task had been completed or not */","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"    /** The name of a task as given by the user */","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    private final String taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"    /** The type of the task */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    private final Type type;","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"    public Task(String taskName, Type type) {","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"     * Marks a task as completed.","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"    public void setAsFinished() {","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"     * Returns the string representation of the type of task.","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"     * @return The required string representation.","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"    public String eventTypeToString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        if (this.type.equals(Type.TODO)) {","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            return \"[T]\";","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        } else if (this.type.equals(Type.EVENT)) {","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"            return \"[E]\";","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            return \"[D]\";","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"     * Returns a task from the String used to saved the task in local storage. When a task is saved to local","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"     * storage it is saved as a formatted string that stores the information of the task. This methods takes","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"     * that String and converts it back to the correct task.","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     * @param saveString The String that represents the saved task.","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     * @return The task converted from saveString.","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"    public static Task stringToTask(String saveString) {","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"        String[] strComponents \u003d saveString.split(\"\\\\|\");","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"        String typeOfTask \u003d strComponents[0].strip();","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        boolean isDone \u003d strComponents[1].strip().equals(\"1\");","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        int dukeDateType \u003d Integer.parseInt(strComponents[2].strip());","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"        String taskName \u003d strComponents[3].strip();","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"        Task loadedTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        if (typeOfTask.equals(\"T\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"            loadedTask \u003d Todo.newTodoTask(taskName);","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        } else if (typeOfTask.equals(\"D\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"            loadedTask \u003d new Deadline(taskName, DukeDate.GetDukeDateFromType(strComponents[4].strip(), dukeDateType));","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"            loadedTask \u003d new Event(taskName, DukeDate.GetDukeDateFromType(strComponents[4].strip(), dukeDateType));","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"        loadedTask.isDone \u003d isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"        return loadedTask;","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"     * Returns a string representation of the task with its task name and its completion status.","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"            return eventTypeToString() +  \"[X] \" + this.taskDescription();","lastModifiedDate":"2021-08-17"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"        return eventTypeToString() + \"[] \" + this.taskDescription();","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-08-16"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        return taskName;","lastModifiedDate":"2021-08-16"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        return isDone;","lastModifiedDate":"2021-08-16"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":113}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A class that abstracts a list of tasks set by the user.","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public class TaskList {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    /** An arraylist that contains the tasks set by the user. */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    /** The number of uncompleted tasks in the task list */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    private int uncompletedTasks \u003d 0;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    /** The total number of tasks in the task list. */","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private int totalTasks \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    public TaskList() {}","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"     * Adds a task to the task list. Prints a message to tell the user that the task has been added.","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"     * @param task The task to be added to the task list.","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        this.taskArrayList.add(task);","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        this.uncompletedTasks++;","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"        totalTasks++;","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"Got it! This task has been added:\");","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        System.out.println(task);","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        this.printTaskListStatus();","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"        this.saveTaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"     * Adds a previously saved task to the task list. This method should only be used when loading a task from","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"     * memory. No message is shown to the user when a task is added. Do not use this method to add a newly","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"     * inputted task from the user to the taskList.","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"     * @param task The previously saved task to add to the taskList.","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"    public void addSavedTask(Task task) {","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"        this.taskArrayList.add(task);","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"            this.uncompletedTasks++;","lastModifiedDate":"2021-08-21"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"        this.totalTasks++;","lastModifiedDate":"2021-08-21"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"     * Removes a task in the task list based on the index given.","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"     * @param index he index of the task list. Note that the index provided starts from 1. So the index 1 represents","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"     *              the first task in the taskList ArrayList.","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"    public void removeTask(int index) {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"        if (index \u003e this.taskArrayList.size() || index \u003c\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"This entry does not exist.\\n\");","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            return;","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"Understood. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"        Task task \u003d this.taskArrayList.get(index - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"        this.taskArrayList.remove(index - 1);","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"        System.out.println(task);","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"            uncompletedTasks--;","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        totalTasks--;","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"        this.printTaskListStatus();","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"        this.saveTaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"     * Marks a task in the task list as completed based on the index given.","lastModifiedDate":"2021-08-16"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"     * @param index The index of the task list. Note that the index provided starts from 1. So the index 1 represents","lastModifiedDate":"2021-08-16"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"     *              the first task in the taskList ArrayList.","lastModifiedDate":"2021-08-16"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"    public void markTaskAsCompleted(int index) {","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"        if (index \u003e this.taskArrayList.size() || index \u003c\u003d 0) {","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"This entry does not exist.\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"            return;","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"        if (this.taskArrayList.get(index - 1).isDone()) {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"This task has already been completed.\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"            return;","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"congratulations! This task has been completed:\");","lastModifiedDate":"2021-08-17"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"        this.taskArrayList.get(index - 1).setAsFinished();","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"        this.uncompletedTasks--;","lastModifiedDate":"2021-08-17"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"        System.out.println(this.taskArrayList.get(index - 1));","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"        this.printTaskListStatus();","lastModifiedDate":"2021-08-18"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"        this.saveTaskList();","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"     * Prints the task list for the user to view.","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"    public void listHistory() {","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"-----------------------------------------------------------\");","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        for (int i \u003d 0; i \u003c this.taskArrayList.size(); i++) {","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"            System.out.println((i + 1) + \". \" + this.taskArrayList.get(i));","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"-----------------------------------------------------------\");","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"     * Saves the current task list to local storage in a file called taskList.txt.","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"    private void saveTaskList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"        if (!Storage.saveTaskList(this.taskArrayList)) {","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Oops!! An error occurred while trying to save your new task.\");","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"     * Prints a message that tells the user the number of tasks in his list along with","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"     * the number of uncompleted tasks.","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"    private void printTaskListStatus() {","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"You currently have \" + this.totalTasks + \" tasks in your list with \"","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"                + this.uncompletedTasks + \" uncompleted tasks remaining.\\n\");","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":121}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":" * A type of task that does not have a specified date or time.","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"    private Todo(String taskName) {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"        super(taskName, Type.TODO);","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"     * Creates a new task that is to be done.","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"     * @return The todo task.","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"    public static Todo newTodoTask(String taskName) {","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"        return new Todo(taskName.trim());","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"    public String taskDescription() {","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"        return this.getTaskName();","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"    public String taskSaveString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"        String isDone \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"        return \"T | \" + isDone + \" | 0 | \" + this.getTaskName();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":30}},{"path":"src/main/java/UserInputReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":" * A class responsible for reading and evaluating user inputs.","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"public class UserInputReader {","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"    /** User input keywords */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_DONE \u003d \"done\";","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_LIST \u003d \"list\";","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_BYE \u003d \"bye\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_TODO \u003d \"todo\";","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_EVENT \u003d \"event\";","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"    private final static String KEYWORD_DELETE \u003d \"delete\";","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"    /** A list of the tasks entered by the user */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"    /** A scanner to scan for user inputs */","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"    private final Scanner scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"    public UserInputReader(Scanner scanner) {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"        this.scanner \u003d scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"     * Takes the user input to the chat bot and evaluates it.","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"     * @return The user input as a String.","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"    public String getUserInput() {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"        return this.scanner.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"     * Evaluates a user\u0027s input to the chat bot and carries out the appropriate functions. It also checks if the","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"     * user\u0027s input is a keyword to close the chat bot.","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"     * @return False if the user\u0027s input is supposed to close the chat bot. Else, the chat bot continues","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"     * and wait for the user to input another word.","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"    public boolean evaluateUserInput(String input) {","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"        if (input.equalsIgnoreCase(KEYWORD_BYE)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"            // Ends the chat","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"        } else if (input.equalsIgnoreCase(KEYWORD_LIST)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"            // Shows the task history","lastModifiedDate":"2021-08-16"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"            this.taskList.listHistory();","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_DONE)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"            // Sets a task as done","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"            this.markTaskAsDone(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_TODO)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"            // Creates a todo task","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"            String details \u003d UserInputReader.removeFirstWordFromString(input, Task.Type.TODO);","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"            if (details !\u003d null \u0026\u0026 details.trim().length() \u003e 0) {","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"Haozeee"},"content":"                Task task \u003d Todo.newTodoTask(details);","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"Haozeee"},"content":"                this.taskList.addTask(task);","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_DEADLINE)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"Haozeee"},"content":"            //Creates a deadline task","lastModifiedDate":"2021-08-16"},{"lineNumber":66,"author":{"gitId":"Haozeee"},"content":"            String details \u003d UserInputReader.removeFirstWordFromString(input, Task.Type.DEADLINE);","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"Haozeee"},"content":"            if (details !\u003d null \u0026\u0026 this.verifyDeadlineInput(details.trim())) {","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"Haozeee"},"content":"                Task task;","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"Haozeee"},"content":"                try {","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"Haozeee"},"content":"                    task \u003d Deadline.newDeadlineTask(details);","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"Haozeee"},"content":"                } catch (DukeInvalidDateException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"Haozeee"},"content":"                    System.out.println(e.getMessage() + \"\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"Haozeee"},"content":"                    return true;","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"Haozeee"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"Haozeee"},"content":"                this.taskList.addTask(task);","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_EVENT)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"Haozeee"},"content":"            // Creates an event task","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"Haozeee"},"content":"            String details \u003d UserInputReader.removeFirstWordFromString(input, Task.Type.EVENT);","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"Haozeee"},"content":"            if (details !\u003d null \u0026\u0026 this.verifyEventInput(details.trim())) {","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"Haozeee"},"content":"                Task task;","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"Haozeee"},"content":"                try {","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"Haozeee"},"content":"                    task \u003d Event.newEventTask(details);","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"Haozeee"},"content":"                } catch (DukeInvalidDateException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"Haozeee"},"content":"                    System.out.println(e.getMessage() + \"\\n\");","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"Haozeee"},"content":"                    return true;","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"Haozeee"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"Haozeee"},"content":"                this.taskList.addTask(task);","lastModifiedDate":"2021-08-17"},{"lineNumber":90,"author":{"gitId":"Haozeee"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":91,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-16"},{"lineNumber":92,"author":{"gitId":"Haozeee"},"content":"        } else if (input.toLowerCase().startsWith(KEYWORD_DELETE)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"Haozeee"},"content":"            // Sets a task as done","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"Haozeee"},"content":"            this.deleteATask(input);","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"Haozeee"},"content":"            return true;","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":97,"author":{"gitId":"Haozeee"},"content":"        // Unrecognised input","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"Haozeee"},"content":"        System.out.println(\"Invalid input. Please try again.\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":99,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":102,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":103,"author":{"gitId":"Haozeee"},"content":"     * Verifies that the deadline task details are correct. It checks that the user has used the","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"Haozeee"},"content":"     * command \"-by\" and that a non-empty date and time is specified. If it is not correct, it","lastModifiedDate":"2021-08-17"},{"lineNumber":105,"author":{"gitId":"Haozeee"},"content":"     * prints an error message.","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":107,"author":{"gitId":"Haozeee"},"content":"     * @param input The deadline details.","lastModifiedDate":"2021-08-17"},{"lineNumber":108,"author":{"gitId":"Haozeee"},"content":"     * @return True if the deadline details inputted by the user is correct. Otherwise, false.","lastModifiedDate":"2021-08-17"},{"lineNumber":109,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":110,"author":{"gitId":"Haozeee"},"content":"    private boolean verifyDeadlineInput(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"Haozeee"},"content":"        if (!input.contains(\"-by\") \u0026\u0026 !input.contains(\"/by\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"Haozeee"},"content":"            UserInputReader.printErrorMessage(Task.Type.DEADLINE);","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":114,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":115,"author":{"gitId":"Haozeee"},"content":"        String[] inputParts \u003d input.split(\" -by | /by \");","lastModifiedDate":"2021-08-21"},{"lineNumber":116,"author":{"gitId":"Haozeee"},"content":"        if (inputParts.length !\u003d 2) {","lastModifiedDate":"2021-08-17"},{"lineNumber":117,"author":{"gitId":"Haozeee"},"content":"            UserInputReader.printErrorMessage(Task.Type.DEADLINE);","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":119,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":120,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":121,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":122,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":123,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":124,"author":{"gitId":"Haozeee"},"content":"     * Verifies the event task details is correct. It checks that the user has used the command","lastModifiedDate":"2021-08-17"},{"lineNumber":125,"author":{"gitId":"Haozeee"},"content":"     * \"-at\" and that a non-empty date and time is specified. If is not correct, it prints","lastModifiedDate":"2021-08-17"},{"lineNumber":126,"author":{"gitId":"Haozeee"},"content":"     * an error message.","lastModifiedDate":"2021-08-17"},{"lineNumber":127,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":128,"author":{"gitId":"Haozeee"},"content":"     * @param input The event details.","lastModifiedDate":"2021-08-17"},{"lineNumber":129,"author":{"gitId":"Haozeee"},"content":"     * @return True if the event details inputted by the user is correct. Otherwise, false.","lastModifiedDate":"2021-08-17"},{"lineNumber":130,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":131,"author":{"gitId":"Haozeee"},"content":"    private boolean verifyEventInput(String input) {","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"Haozeee"},"content":"        if (!input.contains(\"-at\") \u0026\u0026 !input.contains(\"/at\")) {","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"Haozeee"},"content":"            UserInputReader.printErrorMessage(Task.Type.EVENT);","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":135,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":136,"author":{"gitId":"Haozeee"},"content":"        String[] inputParts \u003d input.split(\" -at | /at \");","lastModifiedDate":"2021-08-21"},{"lineNumber":137,"author":{"gitId":"Haozeee"},"content":"        if (inputParts.length !\u003d 2 || inputParts[0].trim().length() \u003d\u003d 0 || inputParts[1].trim().length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-17"},{"lineNumber":138,"author":{"gitId":"Haozeee"},"content":"            UserInputReader.printErrorMessage(Task.Type.EVENT);","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"Haozeee"},"content":"            return false;","lastModifiedDate":"2021-08-17"},{"lineNumber":140,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":141,"author":{"gitId":"Haozeee"},"content":"        return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":142,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":143,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":144,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"Haozeee"},"content":"     * Marks a task as done based on the user\u0027s input after verifying that the user input is valid.","lastModifiedDate":"2021-08-18"},{"lineNumber":146,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":147,"author":{"gitId":"Haozeee"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":149,"author":{"gitId":"Haozeee"},"content":"    public void markTaskAsDone(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"Haozeee"},"content":"            int index \u003d Integer.parseInt(input.split(\" \", 2)[1].trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"Haozeee"},"content":"            this.taskList.markTaskAsCompleted(index);","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"Haozeee"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Invalid argument to the \\\"done\\\" function.\\n\");","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"Haozeee"},"content":"     * Removes a task based on the user\u0027s input after verifying that the user input is valid.","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":161,"author":{"gitId":"Haozeee"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2021-08-18"},{"lineNumber":162,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":163,"author":{"gitId":"Haozeee"},"content":"    public void deleteATask(String input) {","lastModifiedDate":"2021-08-18"},{"lineNumber":164,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"Haozeee"},"content":"            int index \u003d Integer.parseInt(input.split(\" \", 2)[1].trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"Haozeee"},"content":"            this.taskList.removeTask(index);","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"Haozeee"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Invalid argument to the \\\"delete\\\" function.\\n\");","lastModifiedDate":"2021-08-18"},{"lineNumber":169,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":171,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":172,"author":{"gitId":"Haozeee"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":173,"author":{"gitId":"Haozeee"},"content":"     * Prints an error message when the user inputs the task but in the wrong message. The message","lastModifiedDate":"2021-08-17"},{"lineNumber":174,"author":{"gitId":"Haozeee"},"content":"     * tells the user that an error has occurred and how to correctly the input the respective task.","lastModifiedDate":"2021-08-17"},{"lineNumber":175,"author":{"gitId":"Haozeee"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":176,"author":{"gitId":"Haozeee"},"content":"     * @param type The type of task inputted by the user.","lastModifiedDate":"2021-08-17"},{"lineNumber":177,"author":{"gitId":"Haozeee"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":178,"author":{"gitId":"Haozeee"},"content":"    public static void printErrorMessage(Task.Type type) {","lastModifiedDate":"2021-08-17"},{"lineNumber":179,"author":{"gitId":"Haozeee"},"content":"        if (type \u003d\u003d Task.Type.TODO) {","lastModifiedDate":"2021-08-17"},{"lineNumber":180,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Invalid format. Please enter the todo format as below:\");","lastModifiedDate":"2021-08-17"},{"lineNumber":181,"author":{"gitId":"Haozeee"},"content":"            System.out.println(Duke.TODO_FORMAT + \"\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":182,"author":{"gitId":"Haozeee"},"content":"        } else if (type \u003d\u003d Task.Type.DEADLINE) {","lastModifiedDate":"2021-08-17"},{"lineNumber":183,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Invalid format. Please enter the deadline format as below:\");","lastModifiedDate":"2021-08-17"},{"lineNumber":184,"author":{"gitId":"Haozeee"},"content":"            System.out.println(Duke.DEADLINE_FORMAT + \"\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":185,"author":{"gitId":"Haozeee"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":186,"author":{"gitId":"Haozeee"},"content":"            System.out.println(\"Invalid format. Please enter the event format as below:\");","lastModifiedDate":"2021-08-17"},{"lineNumber":187,"author":{"gitId":"Haozeee"},"content":"            System.out.println(Duke.EVENT_FORMAT + \"\\n\");","lastModifiedDate":"2021-08-17"},{"lineNumber":188,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":189,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":190,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":191,"author":{"gitId":"Haozeee"},"content":"    private static String removeFirstWordFromString(String string, Task.Type type) {","lastModifiedDate":"2021-08-17"},{"lineNumber":192,"author":{"gitId":"Haozeee"},"content":"        try {","lastModifiedDate":"2021-08-17"},{"lineNumber":193,"author":{"gitId":"Haozeee"},"content":"            return string.split(\" \", 2)[1];","lastModifiedDate":"2021-08-16"},{"lineNumber":194,"author":{"gitId":"Haozeee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":195,"author":{"gitId":"Haozeee"},"content":"            UserInputReader.printErrorMessage(type);","lastModifiedDate":"2021-08-18"},{"lineNumber":196,"author":{"gitId":"Haozeee"},"content":"            return null;","lastModifiedDate":"2021-08-17"},{"lineNumber":197,"author":{"gitId":"Haozeee"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":198,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":199,"author":{"gitId":"Haozeee"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":200,"author":{"gitId":"Haozeee"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2021-08-21"},{"lineNumber":201,"author":{"gitId":"Haozeee"},"content":"        return taskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":202,"author":{"gitId":"Haozeee"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":203,"author":{"gitId":"Haozeee"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"Haozeee":203}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Haozeee"},"content":"todo Borrow book","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"Haozeee"},"content":"deadline Return book -by Sunday","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"Haozeee"},"content":"event Birthday -at Monday 1400","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"Haozeee"},"content":"done 1","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"Haozeee"},"content":"done 3","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"Haozeee"},"content":"event birthday -at 365 days later","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"Haozeee"},"content":"done   1","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"Haozeee"},"content":"done 0","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"Haozeee"},"content":"done 7","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"Haozeee"},"content":"done 2.0","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"Haozeee"},"content":"done t","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"Haozeee"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"Haozeee"},"content":"done2","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"Haozeee"},"content":"donez","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"Haozeee"},"content":"blah","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"Haozeee"},"content":"deadline blah","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"Haozeee"},"content":"event blah","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"Haozeee"},"content":"deadline blah -b blah","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"Haozeee"},"content":"event blah - at daaa","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"Haozeee"},"content":"deadline blah -at blah","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"Haozeee"},"content":"event blah -by blah","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"Haozeee"},"content":"deadline -by da","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"Haozeee"},"content":"event -at da","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"Haozeee"},"content":"deadline ta -by","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"event add -at","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"deadline dad -by","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"Haozeee"},"content":"event dada -at","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"Haozeee"},"content":"deadline     -by da","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"event     -at  dat","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"Haozeee"},"content":"deadline    -by","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"Haozeee"},"content":"event    -at","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"Haozeee"},"content":"deadline   Hw    -by    mon","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"Haozeee"},"content":"event   lunch   -at  tmrw","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"Haozeee"},"content":"deadlinedasd -by da","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"Haozeee"},"content":"eventdad -at dada","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"Haozeee"},"content":"deadline da -bybkad","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"Haozeee"},"content":"event adad -atdads","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"Haozeee"},"content":"deadline returnmoney-bymonday","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"Haozeee"},"content":"event run-atmonday","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"Haozeee"},"content":"deadlinedaddasd-bydasdsad","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"Haozeee"},"content":"eventdadsa-atdads","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"Haozeee"},"content":"deadline","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"Haozeee"},"content":"event","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"Haozeee"},"content":"todo","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"Haozeee"},"content":"todo   Test","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"Haozeee"},"content":"delete 2.2","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"Haozeee"},"content":"delete a","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"Haozeee"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"Haozeee"},"content":"delete 80","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"Haozeee"},"content":"delete 3","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"Haozeee"},"content":"DElete 4","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"Haozeee"},"content":"delete   4","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"Haozeee"},"content":"delete 4","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"Haozeee"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"Haozeee"},"content":"delete 0","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"Haozeee"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"Haozeee":59}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"Haozeee"},"content":"#cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"Haozeee"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"Haozeee"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haozeee":3,"-":35}}]

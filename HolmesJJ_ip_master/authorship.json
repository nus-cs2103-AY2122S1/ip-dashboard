[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"T | 0 | read book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"D | 0 | return book | 2021-06-06 18:00","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"T | 0 | join sports club","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"T | 1 | borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"D | 1 | return book | 2021-08-08 10:00","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"E | 1 | project meeting | 2021-08-20 14:00-16:00","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":6}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import duke.listener.Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Operation;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":" * The project aims to build a product named Duke,","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":" * a Personal Assistant Chatbot that helps a person","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":" * to keep track of various things.","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":" * This is the Main class that will contain the main method","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":" * to be executed at run-time.","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"public class Duke implements Message {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    public Duke() {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"        storage \u003d new Storage(this);","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     * Runs Duke program.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"    public void run() {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"        storage.loadTasks();","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"        ui.logo();","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"        ui.greet();","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"        String command \u003d ui.readCommand();","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        Operation operation \u003d storage.getOperation(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"        while (true) {","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"            if (operation \u003d\u003d Operation.BYE) {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"                ui.bye();","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation \u003d\u003d Operation.LIST) {","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"                storage.listTasks();","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation \u003d\u003d Operation.DONE) {","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"                storage.completeTask(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation \u003d\u003d Operation.DELETE) {","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"                storage.deleteTask(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation \u003d\u003d Operation.CLEAR) {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"                storage.clearTasks();","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation \u003d\u003d Operation.FIND) {","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"                storage.findTasks(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation \u003d\u003d Operation.TODO ||","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"                operation \u003d\u003d Operation.DEADLINE ||","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"                operation \u003d\u003d Operation.EVENT) {","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"                storage.addTask(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"            storage.saveTasksToFile();","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"            command \u003d ui.readCommand();","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"            operation \u003d storage.getOperation(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"     * Runs entry point for the Duke program.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"     * @param args an array of command-line arguments for the application","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"     * Displays messages.","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"    public void show(String... messages) {","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"        ui.show(messages);","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"HolmesJJ":78}},{"path":"src/main/java/duke/exception/DukeExtractCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the DukeExtractCommandException class that extends from Exception","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" * to catch the extract command exception.","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"public class DukeExtractCommandException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a DukeExtractCommandException object.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     * @param message Exception message.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    public DukeExtractCommandException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":17}},{"path":"src/main/java/duke/exception/DukeIOException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the DukeIOException class that extends from Exception","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" * to catch the IO exception.","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"public class DukeIOException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a DukeIOException object.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     * @param message Exception message.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    public DukeIOException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":17}},{"path":"src/main/java/duke/exception/DukeTaskNumberOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the DukeTaskNumberOutOfBoundsException class that extends from Exception","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" * to catch the task number out of bounds exception.","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"public class DukeTaskNumberOutOfBoundsException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a DukeTaskNumberOutOfBoundsException object.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     * @param message Exception message.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    public DukeTaskNumberOutOfBoundsException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":17}},{"path":"src/main/java/duke/exception/DukeUnknownException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the DukeUnknownException class that extends from Exception","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" * to catch the unknown exception.","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"public class DukeUnknownException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a DukeUnknownException object.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     * @param message Exception message.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    public DukeUnknownException(String message) {","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"        super(message);","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":17}},{"path":"src/main/java/duke/listener/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.listener;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the Message interface.","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"public interface Message {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"     * Shows messages.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"     * @param messages Multiple message strings or messages array.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    public void show(String... messages);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":14}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeExtractCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeIOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeTaskNumberOutOfBoundsException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeUnknownException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"import duke.listener.Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.EventDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Operation;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":" * The is the Storage class for task operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"public class Storage {","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"    private final Message onMessage;","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Storage object.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     * @param onMessage Message interface.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"    public Storage(Message onMessage) {","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"        this.onMessage \u003d onMessage;","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"     * Loads tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"    public void loadTasks() {","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"            taskList.loadTasksFromFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeIOException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"     * Returns operation from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"     * @param command Command from user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"    public Operation getOperation(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"            return Parser.extractOperation(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeExtractCommandException | DukeUnknownException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"        return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"    private int getTaskNumber(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"        int number \u003d 0;","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"            number \u003d Parser.extractTaskNumber(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeExtractCommandException | NumberFormatException |","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"            DukeTaskNumberOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"        return number;","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"    private String getKeyword(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"        String keyword \u003d \"\";","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"            keyword \u003d Parser.extractKeyword(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeExtractCommandException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"        return keyword;","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"HolmesJJ"},"content":"    private String getTaskDescription(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"HolmesJJ"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"HolmesJJ"},"content":"            description \u003d Parser.extractTaskDescription(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeExtractCommandException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"HolmesJJ"},"content":"        return description;","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":95,"author":{"gitId":"HolmesJJ"},"content":"     * Adds task.","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"HolmesJJ"},"content":"     * @param command Command from user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"HolmesJJ"},"content":"    public void addTask(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"HolmesJJ"},"content":"        Operation operation \u003d getOperation(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"HolmesJJ"},"content":"        if (operation \u003d\u003d null) {","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"HolmesJJ"},"content":"        String description \u003d getTaskDescription(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"HolmesJJ"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"HolmesJJ"},"content":"        switch (operation) {","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"HolmesJJ"},"content":"            case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"HolmesJJ"},"content":"                Todo todo \u003d new Todo(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"HolmesJJ"},"content":"                taskList.addTask(todo);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"HolmesJJ"},"content":"                onMessage.show(","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"HolmesJJ"},"content":"                    \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-08-19"},{"lineNumber":114,"author":{"gitId":"HolmesJJ"},"content":"                    \"  \" + todo.toString(),","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"HolmesJJ"},"content":"                    \"Now you have \" + taskList.size() + \" \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"HolmesJJ"},"content":"                        (taskList.size() \u003c\u003d 1 ? \"task\" : \"tasks\") + \" in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"HolmesJJ"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"HolmesJJ"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"HolmesJJ"},"content":"                try {","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"HolmesJJ"},"content":"                    String[] taskDetails \u003d Parser.extractTaskDetails(description, \" /by \");","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"HolmesJJ"},"content":"                    String taskName \u003d taskDetails[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"HolmesJJ"},"content":"                    LocalDateTime byDateTime \u003d Parser.extractDeadlineDateTime(taskDetails[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"HolmesJJ"},"content":"                    Deadline deadline \u003d new Deadline(taskName, byDateTime);","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"HolmesJJ"},"content":"                    taskList.addTask(deadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"HolmesJJ"},"content":"                    onMessage.show(","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"HolmesJJ"},"content":"                        \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"HolmesJJ"},"content":"                        \"  \" + deadline.toString(),","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"HolmesJJ"},"content":"                        \"Now you have \" + taskList.size() + \" \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"HolmesJJ"},"content":"                            (taskList.size() \u003c\u003d 1 ? \"task\" : \"tasks\") + \" in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"HolmesJJ"},"content":"                } catch (DukeExtractCommandException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"HolmesJJ"},"content":"                    onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"HolmesJJ"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"HolmesJJ"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"HolmesJJ"},"content":"            case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"HolmesJJ"},"content":"                try {","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"HolmesJJ"},"content":"                    String[] taskDetails \u003d Parser.extractTaskDetails(description, \" /at \");","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"HolmesJJ"},"content":"                    String taskName \u003d taskDetails[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"HolmesJJ"},"content":"                    EventDateTime","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"HolmesJJ"},"content":"                        eventDateTime \u003d Parser.extractEventDatetime(taskDetails[1], \" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"HolmesJJ"},"content":"                    Event event \u003d new Event(taskName, eventDateTime);","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"HolmesJJ"},"content":"                    taskList.addTask(event);","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"HolmesJJ"},"content":"                    onMessage.show(\"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"HolmesJJ"},"content":"                        \"  \" + event.toString(),","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"HolmesJJ"},"content":"                        \"Now you have \" + taskList.size() + \" \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"HolmesJJ"},"content":"                            (taskList.size() \u003c\u003d 1 ? \"task\" : \"tasks\") + \" in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"HolmesJJ"},"content":"                } catch (DukeExtractCommandException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":147,"author":{"gitId":"HolmesJJ"},"content":"                    onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":148,"author":{"gitId":"HolmesJJ"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"HolmesJJ"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"HolmesJJ"},"content":"            default:","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"HolmesJJ"},"content":"                break;","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":153,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":155,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":156,"author":{"gitId":"HolmesJJ"},"content":"     * Completes task by number extracted from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"HolmesJJ"},"content":"     * @param command Command from user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"HolmesJJ"},"content":"    public void completeTask(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"HolmesJJ"},"content":"        Operation operation \u003d getOperation(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"HolmesJJ"},"content":"        if (operation \u003d\u003d null) {","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":165,"author":{"gitId":"HolmesJJ"},"content":"        int number \u003d getTaskNumber(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":166,"author":{"gitId":"HolmesJJ"},"content":"        if (number \u003c\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":167,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":168,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":169,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":170,"author":{"gitId":"HolmesJJ"},"content":"            taskList.completeTask(number);","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"HolmesJJ"},"content":"                \"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"HolmesJJ"},"content":"                \"  \" + taskList.findTaskByNumber(number).toString()","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"HolmesJJ"},"content":"            );","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeTaskNumberOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":178,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"HolmesJJ"},"content":"     * Deletes task by number extracted from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"HolmesJJ"},"content":"     * @param command Command from user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"HolmesJJ"},"content":"    public void deleteTask(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":186,"author":{"gitId":"HolmesJJ"},"content":"        Operation operation \u003d getOperation(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":187,"author":{"gitId":"HolmesJJ"},"content":"        if (operation \u003d\u003d null) {","lastModifiedDate":"2021-08-19"},{"lineNumber":188,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":189,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":190,"author":{"gitId":"HolmesJJ"},"content":"        int number \u003d getTaskNumber(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":191,"author":{"gitId":"HolmesJJ"},"content":"        if (number \u003c\u003d 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":192,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":194,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":195,"author":{"gitId":"HolmesJJ"},"content":"            Task task \u003d taskList.deleteTask(number);","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(","lastModifiedDate":"2021-08-19"},{"lineNumber":197,"author":{"gitId":"HolmesJJ"},"content":"                \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2021-08-19"},{"lineNumber":198,"author":{"gitId":"HolmesJJ"},"content":"                \"  \" + task.toString(),","lastModifiedDate":"2021-08-19"},{"lineNumber":199,"author":{"gitId":"HolmesJJ"},"content":"                \"Now you have \" + taskList.size() + \" \" +","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"HolmesJJ"},"content":"                    (taskList.size() \u003c\u003d 1 ? \"task\" : \"tasks\") + \" in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeTaskNumberOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":202,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":203,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":204,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":205,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":206,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":207,"author":{"gitId":"HolmesJJ"},"content":"     * Clears all tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":208,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":209,"author":{"gitId":"HolmesJJ"},"content":"    public void clearTasks() {","lastModifiedDate":"2021-08-19"},{"lineNumber":210,"author":{"gitId":"HolmesJJ"},"content":"        taskList.clearTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"HolmesJJ"},"content":"        onMessage.show(\"All tasks are cleared.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":212,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":213,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":214,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":215,"author":{"gitId":"HolmesJJ"},"content":"     * Prints tasks from TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":216,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":217,"author":{"gitId":"HolmesJJ"},"content":"    public void listTasks() {","lastModifiedDate":"2021-08-19"},{"lineNumber":218,"author":{"gitId":"HolmesJJ"},"content":"        onMessage.show(Stream.concat(","lastModifiedDate":"2021-08-19"},{"lineNumber":219,"author":{"gitId":"HolmesJJ"},"content":"            Arrays.stream(new String[] {\"Here are the tasks in your list:\"}),","lastModifiedDate":"2021-08-19"},{"lineNumber":220,"author":{"gitId":"HolmesJJ"},"content":"            Arrays.stream(taskList.printTasks())","lastModifiedDate":"2021-08-25"},{"lineNumber":221,"author":{"gitId":"HolmesJJ"},"content":"        ).toArray(String[]::new));","lastModifiedDate":"2021-08-19"},{"lineNumber":222,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":223,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":224,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":225,"author":{"gitId":"HolmesJJ"},"content":"     * Saves tasks to file.","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":227,"author":{"gitId":"HolmesJJ"},"content":"    public void saveTasksToFile() {","lastModifiedDate":"2021-08-19"},{"lineNumber":228,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":229,"author":{"gitId":"HolmesJJ"},"content":"            taskList.saveTasksToFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeIOException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":231,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":232,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":233,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":234,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":235,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":236,"author":{"gitId":"HolmesJJ"},"content":"     * Finds tasks by keyword extracted from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":237,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"HolmesJJ"},"content":"     * @param command Command from user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":240,"author":{"gitId":"HolmesJJ"},"content":"    public void findTasks(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":241,"author":{"gitId":"HolmesJJ"},"content":"        Operation operation \u003d getOperation(command);","lastModifiedDate":"2021-08-19"},{"lineNumber":242,"author":{"gitId":"HolmesJJ"},"content":"        if (operation \u003d\u003d null) {","lastModifiedDate":"2021-08-19"},{"lineNumber":243,"author":{"gitId":"HolmesJJ"},"content":"            return;","lastModifiedDate":"2021-08-19"},{"lineNumber":244,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":245,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":246,"author":{"gitId":"HolmesJJ"},"content":"            String keyword \u003d Parser.extractKeyword(command);","lastModifiedDate":"2021-08-25"},{"lineNumber":247,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(Stream.concat(","lastModifiedDate":"2021-08-19"},{"lineNumber":248,"author":{"gitId":"HolmesJJ"},"content":"                Arrays.stream(new String[]{\"Here are the matching tasks in your list:\"}),","lastModifiedDate":"2021-08-19"},{"lineNumber":249,"author":{"gitId":"HolmesJJ"},"content":"                Arrays.stream(taskList.findTasks(keyword))","lastModifiedDate":"2021-08-25"},{"lineNumber":250,"author":{"gitId":"HolmesJJ"},"content":"            ).toArray(String[]::new));","lastModifiedDate":"2021-08-19"},{"lineNumber":251,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DukeExtractCommandException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":252,"author":{"gitId":"HolmesJJ"},"content":"            onMessage.show(e.getMessage());","lastModifiedDate":"2021-08-19"},{"lineNumber":253,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":254,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":255,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":255}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":" * The is the Deadline class that extends from Task.","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":" * Deadline task needs to be done before a specific time.","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    public static final String ID \u003d \"D\";","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"    private static final String PRINT_DATE_PATTERN \u003d \"MMM dd yyyy\";","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    private static final String PRINT_TIME_PATTERN \u003d \"hh:mm a\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    private static final String SAVE_DATE_PATTERN \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    private static final String SAVE_TIME_PATTERN \u003d \"HH:mm\";","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    private final LocalDateTime byDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Deadline object.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     * @param byDateTime A specific date and time of task that needs to be done before it.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"    public Deadline(String name, LocalDateTime byDateTime) {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"        super(name);","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        this.byDateTime \u003d byDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     * This is constructor method of Deadline.","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"     * @param byDateTime A specific date and time of task that needs to be done before it.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"     * @param isDone Task status: done or not done.","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"    public Deadline(String name, LocalDateTime byDateTime, boolean isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        this.byDateTime \u003d byDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"     * Returns the specific date and time of task that needs to be done before it.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"     * @return The specific date and time of task that needs to be done before it.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"    public LocalDateTime getByDateTime() {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"        return byDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"    private String formatPrintDateTime() {","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"        return byDateTime.format(DateTimeFormatter.ofPattern(PRINT_DATE_PATTERN)) + \" \" +","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"                byDateTime.format(DateTimeFormatter.ofPattern(PRINT_TIME_PATTERN));","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"    private String formatSaveDateTime() {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"        return byDateTime.format(DateTimeFormatter.ofPattern(SAVE_DATE_PATTERN)) + \" \" +","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"            byDateTime.format(DateTimeFormatter.ofPattern(SAVE_TIME_PATTERN));","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"     * Formats Task to String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [D, 0, Task1, DateTime]; else, [D, 1, Task1, DateTime].","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task in String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"    public String[] formatTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"        String done;","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"        if (isDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"            done \u003d \"0\";","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"            done \u003d \"1\";","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"        return new String[] {ID, done, super.getName(), formatSaveDateTime()};","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"HolmesJJ"},"content":"    public Deadline markAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"HolmesJJ"},"content":"        return new Deadline(super.getName(), getByDateTime(), true);","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":87,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":88,"author":{"gitId":"HolmesJJ"},"content":"     * Prints task.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [D][X] Task1; else, [D][ ] Task1.","lastModifiedDate":"2021-08-16"},{"lineNumber":90,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":91,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":92,"author":{"gitId":"HolmesJJ"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":93,"author":{"gitId":"HolmesJJ"},"content":"        return \"[\" + ID + \"]\" + super.toString() + \" (by: \" + formatPrintDateTime() + \")\";","lastModifiedDate":"2021-08-19"},{"lineNumber":94,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"HolmesJJ":95}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" * The is the Event class that extends from Task.","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":" * Event task starts at a specific time and ends at a specific time.","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"    public static final String ID \u003d \"E\";","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    private static final String PRINT_DATE_PATTERN \u003d \"MMM dd yyyy\";","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"    private static final String PRINT_TIME_PATTERN \u003d \"hh:mm a\";","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    private static final String SAVE_DATE_PATTERN \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    private static final String SAVE_TIME_PATTERN \u003d \"HH:mm\";","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    private final EventDateTime atDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Event object.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     * @param atDateTime A specific date, start time and end time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"    public Event(String name, EventDateTime atDateTime) {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"        super(name);","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"        this.atDateTime \u003d atDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Event object.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     * @param atDateTime A specific date, start time and end time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"     * @param isDone Task status: done or not done.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"    public Event(String name, EventDateTime atDateTime, boolean isDone) {","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"        this.atDateTime \u003d atDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"     * Returns the specific date, start time and end time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"     * @return The specific date, start time and end time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"    public EventDateTime getAtDateTime() {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"        return atDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"    private String formatPrintDateTime() {","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"        return atDateTime.getAtDate().format(DateTimeFormatter.ofPattern(PRINT_DATE_PATTERN)) +","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"            \" \" +","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"            atDateTime.getStartTime().format(DateTimeFormatter.ofPattern(PRINT_TIME_PATTERN)) +","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"            \"-\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"            atDateTime.getEndTime().format(DateTimeFormatter.ofPattern(PRINT_TIME_PATTERN));","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"    private String formatSaveDateTime() {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"        return atDateTime.getAtDate().format(DateTimeFormatter.ofPattern(SAVE_DATE_PATTERN)) +","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"            \" \" +","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"            atDateTime.getStartTime().format(DateTimeFormatter.ofPattern(SAVE_TIME_PATTERN)) +","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"            \"-\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"            atDateTime.getEndTime().format(DateTimeFormatter.ofPattern(SAVE_TIME_PATTERN));","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"     * Formats Task to String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [E, 0, Task1, DateTime]; else, [E, 1, Task1, DateTime].","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task in String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"    public String[] formatTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"        String done;","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"        if (isDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"            done \u003d \"0\";","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"            done \u003d \"1\";","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"        return new String[] {ID, done, super.getName(), formatSaveDateTime()};","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":87,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":88,"author":{"gitId":"HolmesJJ"},"content":"    public Event markAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":89,"author":{"gitId":"HolmesJJ"},"content":"        return new Event(super.getName(), atDateTime, true);","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":91,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":92,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":93,"author":{"gitId":"HolmesJJ"},"content":"     * Prints task.","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [E][X] Task1; else, [E][ ] Task1.","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":96,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":97,"author":{"gitId":"HolmesJJ"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"HolmesJJ"},"content":"        return \"[\" + ID + \"]\" + super.toString() + \" (at: \" + formatPrintDateTime() + \")\";","lastModifiedDate":"2021-08-19"},{"lineNumber":99,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"HolmesJJ":100}},{"path":"src/main/java/duke/task/EventDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":" * The is the EventDateTime class that contains the specific date,","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":" * start time and end time of event.","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"public class EventDateTime {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    private final LocalDate atDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"    private final LocalTime startTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    private final LocalTime endTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a EventDateTime object.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"     * @param atDate A specific date of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"     * @param startTime A specific start time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     * @param endTime A specific end time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"    public EventDateTime(LocalDate atDate, LocalTime startTime, LocalTime endTime) {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"        this.atDate \u003d atDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"     * Returns the specific date of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     * @return The specific date of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"    public LocalDate getAtDate() {","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"        return atDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"     * Returns the specific time of task start.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"     * @return The specific start time of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"    public LocalTime getStartTime() {","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"        return startTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"     * Returns the specific time of task end.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"     * @return The specific end time of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"    public LocalTime getEndTime() {","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"        return endTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":54}},{"path":"src/main/java/duke/task/Operation.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the Operation class that contains task operations.","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"public enum Operation {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"    LIST(\"list\"),","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    DONE(\"done\"),","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    CLEAR(\"clear\"),","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    FIND(\"find\"),","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    BYE(\"bye\");","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"    private final String value;","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    Operation(String value) {","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"        this.value \u003d value;","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     * Returns value of operation.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"     * @return Operation value.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"    public String getValue() {","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"        return value;","lastModifiedDate":"2021-08-16"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"HolmesJJ":31}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the Task class that contains the properties","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" * of a task.","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"    private final String name;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"    private final boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Task object.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    public Task(String name) {","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Task object.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"     * @param isDone Task status: done or not done.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"    public Task(String name, boolean isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"     * Returns status of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task status.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        return isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"    public abstract Task markAsDone();","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"     * Returns name of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"    public String getName() {","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"        return name;","lastModifiedDate":"2021-08-15"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"     * Formats Task to String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task in String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"    public abstract String[] formatTask();","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"     * Prints task.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [X] Task1; else, [ ] Task1.","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"        return \"[\" + getStatusIcon() + \"] \" + name;","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"HolmesJJ":76}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeIOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeTaskNumberOutOfBoundsException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import duke.util.DateTimeUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import duke.util.FileUtils;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"import java.util.List;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":" * The is the TaskList class that that","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":" * contains a list of task.","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"    private static final String DIR_NAME \u003d \"data\";","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    private static final String FILE_NAME \u003d \"duke.txt\";","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a TaskList object.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     * Adds task to TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     * @param task Task.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"     * Returns size of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"     * @return Tasks size.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"    public int size() {","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task by number.","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"     * @param number Number of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task by number if exists, else empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"    public Task findTaskByNumber(int number) {","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"        int index \u003d number - 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"            return null;","lastModifiedDate":"2021-08-15"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"        return tasks.get(index);","lastModifiedDate":"2021-08-15"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"     * Completes task by number, start from 1.","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"     * @param number Number of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeTaskNumberOutOfBoundsException If task number is out of bounds.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"    public void completeTask(int number) throws DukeTaskNumberOutOfBoundsException {","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"        int index \u003d number - 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeTaskNumberOutOfBoundsException(\"☹ OOPS!!! Task number is out of bounds.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"        tasks.set(index, tasks.get(index).markAsDone());","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"     * Deletes task by number, start from 1.","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"     * @param number Number of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeTaskNumberOutOfBoundsException If task number is out of bounds.","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"    public Task deleteTask(int number) throws DukeTaskNumberOutOfBoundsException {","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"HolmesJJ"},"content":"        int index \u003d number - 1;","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"HolmesJJ"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeTaskNumberOutOfBoundsException(\"☹ OOPS!!! Task number is out of bounds.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"HolmesJJ"},"content":"        return tasks.remove(index);","lastModifiedDate":"2021-08-16"},{"lineNumber":87,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":88,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":89,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":90,"author":{"gitId":"HolmesJJ"},"content":"     * Clears all tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"HolmesJJ"},"content":"    public void clearTasks() {","lastModifiedDate":"2021-08-18"},{"lineNumber":93,"author":{"gitId":"HolmesJJ"},"content":"        tasks.clear();","lastModifiedDate":"2021-08-18"},{"lineNumber":94,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":95,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":97,"author":{"gitId":"HolmesJJ"},"content":"     * Prints tasks from TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":99,"author":{"gitId":"HolmesJJ"},"content":"    public String[] printTasks() {","lastModifiedDate":"2021-08-19"},{"lineNumber":100,"author":{"gitId":"HolmesJJ"},"content":"        return IntStream.range(0, tasks.size())","lastModifiedDate":"2021-08-19"},{"lineNumber":101,"author":{"gitId":"HolmesJJ"},"content":"            .mapToObj(i -\u003e (i + 1) + \". \" + tasks.get(i).toString())","lastModifiedDate":"2021-08-19"},{"lineNumber":102,"author":{"gitId":"HolmesJJ"},"content":"            .collect(Collectors.toList()).toArray(String[]::new);","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":105,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":106,"author":{"gitId":"HolmesJJ"},"content":"     * Loads tasks from file with path: src/data/duke.txt.","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":108,"author":{"gitId":"HolmesJJ"},"content":"    public void loadTasksFromFile() throws DukeIOException {","lastModifiedDate":"2021-08-18"},{"lineNumber":109,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e formattedTasks \u003d FileUtils.loadFile(DIR_NAME, FILE_NAME);","lastModifiedDate":"2021-08-18"},{"lineNumber":110,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":111,"author":{"gitId":"HolmesJJ"},"content":"            formattedTasks.forEach(formattedTask -\u003e {","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"HolmesJJ"},"content":"                String[] contents \u003d formattedTask.split(\" \\\\| \", 4);","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"HolmesJJ"},"content":"                String taskID \u003d contents[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":114,"author":{"gitId":"HolmesJJ"},"content":"                String isDone \u003d contents[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"HolmesJJ"},"content":"                String name \u003d contents[2];","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"HolmesJJ"},"content":"                switch (taskID) {","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"HolmesJJ"},"content":"                    case Todo.ID:","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"HolmesJJ"},"content":"                        Todo todo \u003d new Todo(name, isDone.equals(\"0\"));","lastModifiedDate":"2021-08-18"},{"lineNumber":119,"author":{"gitId":"HolmesJJ"},"content":"                        addTask(todo);","lastModifiedDate":"2021-08-18"},{"lineNumber":120,"author":{"gitId":"HolmesJJ"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":121,"author":{"gitId":"HolmesJJ"},"content":"                    case Deadline.ID:","lastModifiedDate":"2021-08-18"},{"lineNumber":122,"author":{"gitId":"HolmesJJ"},"content":"                        String byTime \u003d contents[3];","lastModifiedDate":"2021-08-18"},{"lineNumber":123,"author":{"gitId":"HolmesJJ"},"content":"                        Deadline deadline \u003d new Deadline(","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"HolmesJJ"},"content":"                            name,","lastModifiedDate":"2021-08-19"},{"lineNumber":125,"author":{"gitId":"HolmesJJ"},"content":"                            DateTimeUtils.parseDateTime(byTime),","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"HolmesJJ"},"content":"                            isDone.equals(\"0\")","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"HolmesJJ"},"content":"                        );","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"HolmesJJ"},"content":"                        addTask(deadline);","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"HolmesJJ"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":130,"author":{"gitId":"HolmesJJ"},"content":"                    case Event.ID:","lastModifiedDate":"2021-08-18"},{"lineNumber":131,"author":{"gitId":"HolmesJJ"},"content":"                        String atTime \u003d contents[3];","lastModifiedDate":"2021-08-18"},{"lineNumber":132,"author":{"gitId":"HolmesJJ"},"content":"                        String[] dateTimes \u003d atTime.split(\" \", 2);","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"HolmesJJ"},"content":"                        String[] times \u003d dateTimes[1].split(\"-\", 2);","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"HolmesJJ"},"content":"                        String atDate \u003d dateTimes[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"HolmesJJ"},"content":"                        String startTime \u003d times[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"HolmesJJ"},"content":"                        String endTime \u003d times[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"HolmesJJ"},"content":"                        EventDateTime eventDateTime \u003d new EventDateTime(","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"HolmesJJ"},"content":"                            DateTimeUtils.parseDate(atDate),","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"HolmesJJ"},"content":"                            DateTimeUtils.parseTime(startTime),","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"HolmesJJ"},"content":"                            DateTimeUtils.parseTime(endTime)","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"HolmesJJ"},"content":"                        );","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"HolmesJJ"},"content":"                        Event event \u003d new Event(name, eventDateTime, isDone.equals(\"0\"));","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"HolmesJJ"},"content":"                        addTask(event);","lastModifiedDate":"2021-08-18"},{"lineNumber":144,"author":{"gitId":"HolmesJJ"},"content":"                        break;","lastModifiedDate":"2021-08-18"},{"lineNumber":145,"author":{"gitId":"HolmesJJ"},"content":"                    default:","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"HolmesJJ"},"content":"                        break;","lastModifiedDate":"2021-08-19"},{"lineNumber":147,"author":{"gitId":"HolmesJJ"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"HolmesJJ"},"content":"            });","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"HolmesJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":150,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeIOException(\"☹ OOPS!!! Load tasks from file error.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":153,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":154,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"HolmesJJ"},"content":"     * Saves tasks to file with path: src/data/duke.txt.","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"HolmesJJ"},"content":"    public void saveTasksToFile() throws DukeIOException {","lastModifiedDate":"2021-08-19"},{"lineNumber":158,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e formattedTasks \u003d tasks.stream()","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"HolmesJJ"},"content":"                .map(task -\u003e String.join(\" | \", task.formatTask()))","lastModifiedDate":"2021-08-18"},{"lineNumber":160,"author":{"gitId":"HolmesJJ"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-08-18"},{"lineNumber":161,"author":{"gitId":"HolmesJJ"},"content":"        boolean isSaved \u003d FileUtils.isFileSaved(DIR_NAME, FILE_NAME, formattedTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"HolmesJJ"},"content":"        if (!isSaved) {","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeIOException(\"☹ OOPS!!! Save tasks to file error.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":167,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":168,"author":{"gitId":"HolmesJJ"},"content":"     * Prints tasks which contains keyword from TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"HolmesJJ"},"content":"     * @param keyword Keyword of task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"HolmesJJ"},"content":"    public String[] findTasks(String keyword) {","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cTask\u003e filteredTasks \u003d tasks.stream()","lastModifiedDate":"2021-08-19"},{"lineNumber":174,"author":{"gitId":"HolmesJJ"},"content":"            .filter(task -\u003e task.getName().contains(keyword))","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"HolmesJJ"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"HolmesJJ"},"content":"        return IntStream.range(0, filteredTasks.size())","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"HolmesJJ"},"content":"            .mapToObj(i -\u003e (i + 1) + \". \" + filteredTasks.get(i).toString())","lastModifiedDate":"2021-08-19"},{"lineNumber":178,"author":{"gitId":"HolmesJJ"},"content":"            .collect(Collectors.toList()).toArray(String[]::new);","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"HolmesJJ":180}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":" * The is the Todo class that extends from Task.","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":" * Todo task does not have any date/time attached to it.","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"    public static final String ID \u003d \"T\";","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Todo object.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    public Todo(String name) {","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"        super(name);","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Todo object.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     * @param name Task name.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     * @param isDone Task status: done or not done.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    public Todo(String name, boolean isDone) {","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     * Formats Task to String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [T, 0, Task1]; else, [T, 1, Task1].","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task in String array.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"    public String[] formatTask() {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"        String done;","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        if (isDone()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"            done \u003d \"0\";","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"        } else {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"            done \u003d \"1\";","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"        return new String[] {ID, done, super.getName()};","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task with done status.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"    public Todo markAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"        return new Todo(super.getName(), true);","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"     * Prints task.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"     * If task is done, [T][X] Task1; else, [T][ ] Task1.","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"        return \"[\" + ID + \"]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"HolmesJJ":64}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":" * The is the Ui class for UI display.","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"public class Ui {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"    private static final String HORIZONTAL_LINE \u003d","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"        \"    ____________________________________________________________\";","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"    private static final String INDENTATION \u003d \"     \";","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    private final Scanner scanner;","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"     * Constructs a Ui object.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"    public Ui() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     * Displays logo.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    public void logo() {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"     * Displays greet.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"    public void greet() {","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(INDENTATION + \"Hello! I\u0027m Duke\");","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(INDENTATION + \"What can I do for you?\");","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"     * Displays command.","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"    public void echo(String command) {","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(INDENTATION + command);","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"     * Displays messages.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"    public void show(String... messages) {","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"        Arrays.stream(messages).forEach(","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"            message -\u003e System.out.println(INDENTATION + message)","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"        );","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"     * Displays bye.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"    public void bye() {","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(INDENTATION + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"     * Returns one line of command.","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"     * @return One line of commands.","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":81}},{"path":"src/main/java/duke/util/DateTimeUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":" * The is the DateTimeUtils class that parse date and time.","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"public class DateTimeUtils {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    private static final String DATE_PATTERN \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    private static final String TIME_PATTERN \u003d \"HH:mm\";","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    private static final String DATE_TIME_PATTERN \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"     * Returns String of date to date format.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     * @param date Date in String format.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     * @return Date format.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DateTimeParseException If the date cannot be parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"    public static LocalDate parseDate(String date) throws DateTimeParseException {","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        return LocalDate.parse(date, formatter);","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"     * Returns String of time to time format.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"     * @param time Time in String format.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"     * @return Time format.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DateTimeParseException If the time cannot be parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"    public static LocalTime parseTime(String time) throws DateTimeParseException {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(TIME_PATTERN);","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        return LocalTime.parse(time, formatter);","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"     * Returns String of dateTime to dateTime format.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"     * @param dateTime DateTime in String format.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"     * @return DateTime format.","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DateTimeParseException If the dateTime cannot be parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws DateTimeParseException {","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"        return LocalDateTime.parse(dateTime, formatter);","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":52}},{"path":"src/main/java/duke/util/FileUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import java.io.File;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"import java.util.List;","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":" * The is the FileUtils class to do file operations.","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"public class FileUtils {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     * Returns list of contents from file.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     * @param dirName Directory name.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     * @param fileName File name.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     * @return List of contents.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"    public static List\u003cString\u003e loadFile(String dirName, String fileName) {","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e contents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"        Path rootPath \u003d Paths.get(\"\");","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"        Path dirPath \u003d Paths.get(rootPath.toAbsolutePath().toString(), dirName);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"            return contents;","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"        Path filePath \u003d Paths.get(dirPath.toAbsolutePath().toString(), fileName);","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"        File file \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"        if (!file.exists() || file.isDirectory()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"            return contents;","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"                String row \u003d sc.nextLine();","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"                contents.add(row);","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"            sc.close();","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"        return contents;","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"     * Returns true if list of contents are saved to file successfully, else return false.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"     * @param dirName Directory name.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"     * @param fileName File name.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"     * @param contents List of contents.","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"     * @return Whether the contents are saved to file successfully.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"    public static boolean isFileSaved(String dirName, String fileName, List\u003cString\u003e contents) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"        Path rootPath \u003d Paths.get(\"\");","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"        Path dirPath \u003d Paths.get(rootPath.toAbsolutePath().toString(), dirName);","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"            File dirFile \u003d new File(String.valueOf(dirPath));","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"            dirFile.mkdir();","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"        Path filePath \u003d Paths.get(dirPath.toAbsolutePath().toString(), fileName);","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"        File file \u003d new File(String.valueOf(filePath));","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"            file.createNewFile();","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"            System.out.println(\"Create file error: \" + e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"            return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"            FileWriter writer \u003d new FileWriter(filePath.toAbsolutePath().toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"            for (String content : contents) {","lastModifiedDate":"2021-08-18"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"                writer.write(content + System.lineSeparator());","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"            }","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"            writer.close();","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"            System.out.println(\"Write file error: \" + e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":82,"author":{"gitId":"HolmesJJ"},"content":"            return false;","lastModifiedDate":"2021-08-18"},{"lineNumber":83,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":84,"author":{"gitId":"HolmesJJ"},"content":"        return true;","lastModifiedDate":"2021-08-18"},{"lineNumber":85,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"HolmesJJ":86}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeExtractCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeTaskNumberOutOfBoundsException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import duke.exception.DukeUnknownException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.EventDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"import duke.task.Operation;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":" * The is the Parser class that extracts contents from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"     * Returns operation from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"     * @return Operation from command if exists, else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If operation is empty or cannot be extracted properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeUnknownException If operation is unknown.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    public static Operation extractOperation(String command)","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"        throws DukeExtractCommandException, DukeUnknownException {","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"        String[] contents \u003d command.split(\" \");","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"        if (contents.length \u003d\u003d 0) {","lastModifiedDate":"2021-08-16"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The operation cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"        String operation \u003d contents[0];","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"        if (operation.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The operation cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"HolmesJJ"},"content":"        } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"HolmesJJ"},"content":"            if (operation.equals(Operation.TODO.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.TODO;","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.DEADLINE.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.DEADLINE;","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.EVENT.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.EVENT;","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.LIST.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.LIST;","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.DONE.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.DONE;","lastModifiedDate":"2021-08-16"},{"lineNumber":47,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.DELETE.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":48,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.DELETE;","lastModifiedDate":"2021-08-16"},{"lineNumber":49,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.CLEAR.getValue())) {","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.CLEAR;","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.FIND.getValue())) {","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.FIND;","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"HolmesJJ"},"content":"            } else if (operation.equals(Operation.BYE.getValue())) {","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"HolmesJJ"},"content":"                return Operation.BYE;","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"HolmesJJ"},"content":"            } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"HolmesJJ"},"content":"                throw new DukeUnknownException(","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"HolmesJJ"},"content":"                    \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"HolmesJJ"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":60,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":63,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task number from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":65,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task number from command if it exists and is a positive integer,","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HolmesJJ"},"content":"     *         else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If task number is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"HolmesJJ"},"content":"     * @throws NumberFormatException If task number is not a integer.","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeTaskNumberOutOfBoundsException If task number is not a positive integer.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":71,"author":{"gitId":"HolmesJJ"},"content":"    public static int extractTaskNumber(String command)","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"HolmesJJ"},"content":"        throws DukeExtractCommandException, NumberFormatException,","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"HolmesJJ"},"content":"        DukeTaskNumberOutOfBoundsException {","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"HolmesJJ"},"content":"        String[] contents \u003d command.split(\" \", 2);","lastModifiedDate":"2021-08-16"},{"lineNumber":75,"author":{"gitId":"HolmesJJ"},"content":"        if (contents.length !\u003d 2) {","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The task number cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"HolmesJJ"},"content":"        int number \u003d 0;","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"HolmesJJ"},"content":"            number \u003d Integer.parseInt(contents[1]);","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"HolmesJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"HolmesJJ"},"content":"            throw new NumberFormatException(\"☹ OOPS!!! The task number is not an integer.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"HolmesJJ"},"content":"        if (number \u003c 1) {","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeTaskNumberOutOfBoundsException(","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The task number is not a positive integer.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":89,"author":{"gitId":"HolmesJJ"},"content":"        return number;","lastModifiedDate":"2021-08-16"},{"lineNumber":90,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":91,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":92,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":93,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task description from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task description from command if it exists and can be extracted properly,","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HolmesJJ"},"content":"     *         else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If task description is empty","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"HolmesJJ"},"content":"     *                                     or cannot be extracted properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"HolmesJJ"},"content":"    public static String extractTaskDescription(String command) throws DukeExtractCommandException {","lastModifiedDate":"2021-08-18"},{"lineNumber":101,"author":{"gitId":"HolmesJJ"},"content":"        String[] contents \u003d command.split(\" \", 2);","lastModifiedDate":"2021-08-16"},{"lineNumber":102,"author":{"gitId":"HolmesJJ"},"content":"        String operation \u003d contents[0];","lastModifiedDate":"2021-08-16"},{"lineNumber":103,"author":{"gitId":"HolmesJJ"},"content":"        if (contents.length !\u003d 2) {","lastModifiedDate":"2021-08-18"},{"lineNumber":104,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The description of a \" + operation + \" cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":107,"author":{"gitId":"HolmesJJ"},"content":"        String description \u003d contents[1];","lastModifiedDate":"2021-08-16"},{"lineNumber":108,"author":{"gitId":"HolmesJJ"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2021-08-16"},{"lineNumber":109,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The description of a \" + operation + \" cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":112,"author":{"gitId":"HolmesJJ"},"content":"        return description;","lastModifiedDate":"2021-08-16"},{"lineNumber":113,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":114,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":115,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":116,"author":{"gitId":"HolmesJJ"},"content":"     * Returns task details that contains task name and task (at/by) time from task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":118,"author":{"gitId":"HolmesJJ"},"content":"     * @param description Extracted from task command.","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"HolmesJJ"},"content":"     * @param regex \" /at \" or \" /by \".","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"HolmesJJ"},"content":"     * @return Task details from description if they exist and can be extracted properly,","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"HolmesJJ"},"content":"     *         else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If task details are empty or cannot be extracted properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":124,"author":{"gitId":"HolmesJJ"},"content":"    public static String[] extractTaskDetails(String description, String regex)","lastModifiedDate":"2021-08-19"},{"lineNumber":125,"author":{"gitId":"HolmesJJ"},"content":"        throws DukeExtractCommandException {","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"HolmesJJ"},"content":"        String[] details \u003d description.split(regex, 2);","lastModifiedDate":"2021-08-16"},{"lineNumber":127,"author":{"gitId":"HolmesJJ"},"content":"        if (details.length !\u003d 2) {","lastModifiedDate":"2021-08-16"},{"lineNumber":128,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The task details cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":131,"author":{"gitId":"HolmesJJ"},"content":"        if (Arrays.stream(details).filter(detail -\u003e detail.equals(\"\"))","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"HolmesJJ"},"content":"            .toArray(String[]::new).length \u003e 0) {","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The task details cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":136,"author":{"gitId":"HolmesJJ"},"content":"        return details;","lastModifiedDate":"2021-08-16"},{"lineNumber":137,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":138,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"HolmesJJ"},"content":"     * Returns event date, start time and end time.","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":142,"author":{"gitId":"HolmesJJ"},"content":"     * @param dateTime Extracted from description.","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"HolmesJJ"},"content":"     * @param regex \" \".","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"HolmesJJ"},"content":"     * @return Date, start time and end time from datetime if they exist","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"HolmesJJ"},"content":"     *         and can be extracted properly, else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If dateTime are empty or cannot be extracted properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":148,"author":{"gitId":"HolmesJJ"},"content":"    public static EventDateTime extractEventDatetime(String dateTime, String regex)","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"HolmesJJ"},"content":"        throws DukeExtractCommandException {","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"HolmesJJ"},"content":"        String[] dateAndTimes \u003d dateTime.split(regex, 3);","lastModifiedDate":"2021-08-18"},{"lineNumber":151,"author":{"gitId":"HolmesJJ"},"content":"        if (dateAndTimes.length !\u003d 3) {","lastModifiedDate":"2021-08-18"},{"lineNumber":152,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":153,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The event date and time cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":155,"author":{"gitId":"HolmesJJ"},"content":"        String atDate \u003d dateAndTimes[0];","lastModifiedDate":"2021-08-18"},{"lineNumber":156,"author":{"gitId":"HolmesJJ"},"content":"        String startTime \u003d dateAndTimes[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":157,"author":{"gitId":"HolmesJJ"},"content":"        String endTime \u003d dateAndTimes[2];","lastModifiedDate":"2021-08-18"},{"lineNumber":158,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":159,"author":{"gitId":"HolmesJJ"},"content":"            return new EventDateTime(DateTimeUtils.parseDate(atDate),","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"HolmesJJ"},"content":"                DateTimeUtils.parseTime(startTime), DateTimeUtils.parseTime(endTime));","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":162,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The event date and time cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":165,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":166,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":167,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":168,"author":{"gitId":"HolmesJJ"},"content":"     * Returns deadline ate and time.","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-18"},{"lineNumber":170,"author":{"gitId":"HolmesJJ"},"content":"     * @param dateTime Extracted from description.","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"HolmesJJ"},"content":"     * @return DateTime format if it can be extracted properly, else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If dateTime cannot be extracted properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":174,"author":{"gitId":"HolmesJJ"},"content":"    public static LocalDateTime extractDeadlineDateTime(String dateTime)","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"HolmesJJ"},"content":"        throws DukeExtractCommandException {","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"HolmesJJ"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":177,"author":{"gitId":"HolmesJJ"},"content":"            return DateTimeUtils.parseDateTime(dateTime);","lastModifiedDate":"2021-08-18"},{"lineNumber":178,"author":{"gitId":"HolmesJJ"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":179,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The deadline date and time cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":182,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":183,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"HolmesJJ"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"HolmesJJ"},"content":"     * Returns keyword from command.","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"HolmesJJ"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":187,"author":{"gitId":"HolmesJJ"},"content":"     * @return Keyword from command if it can be extracted properly,","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"HolmesJJ"},"content":"     *         else throw exception.","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"HolmesJJ"},"content":"     * @throws DukeExtractCommandException If keyword cannot be extracted properly.","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"HolmesJJ"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":191,"author":{"gitId":"HolmesJJ"},"content":"    public static String extractKeyword(String command) throws DukeExtractCommandException {","lastModifiedDate":"2021-08-19"},{"lineNumber":192,"author":{"gitId":"HolmesJJ"},"content":"        String[] contents \u003d command.split(\" \", 2);","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"HolmesJJ"},"content":"        if (contents.length !\u003d 2) {","lastModifiedDate":"2021-08-19"},{"lineNumber":194,"author":{"gitId":"HolmesJJ"},"content":"            throw new DukeExtractCommandException(","lastModifiedDate":"2021-08-19"},{"lineNumber":195,"author":{"gitId":"HolmesJJ"},"content":"                \"☹ OOPS!!! The keyword cannot be extracted properly.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":196,"author":{"gitId":"HolmesJJ"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":197,"author":{"gitId":"HolmesJJ"},"content":"        return contents[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":198,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":199,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"HolmesJJ":199}},{"path":"src/test/data/test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"T | 0 | read book","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"D | 0 | return book | 2021-06-06 18:00","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"T | 0 | join sports club","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"T | 1 | borrow book","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"D | 1 | return book | 2021-08-08 10:00","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"E | 1 | project meeting | 2021-08-20 14:00-16:00","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HolmesJJ":6}},{"path":"src/test/java/duke/task/OperationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"class OperationTest {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    void getValue_getTodoOperationValue_gotCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"        assertEquals(\"todo\", Operation.TODO.getValue());","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    void values_getAllOperations_gotCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"        Operation[] operations \u003d new Operation[]{","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"            Operation.TODO,","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"            Operation.DEADLINE,","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"            Operation.EVENT,","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"            Operation.LIST,","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"            Operation.DONE,","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"            Operation.DELETE,","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"            Operation.CLEAR,","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"            Operation.FIND,","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"            Operation.BYE","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"        };","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"        assertArrayEquals(operations, Operation.values());","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"    void valueOf_getTodoOperation_gotCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HolmesJJ"},"content":"        assertEquals(Operation.valueOf(\"TODO\"), Operation.TODO);","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":35}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"class TodoTest {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"    void formatTask_formattedCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"        Todo todo \u003d new Todo(\"Read book\");","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"        String[] expected \u003d new String[] {\"T\", \"1\", \"Read book\"};","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"        assertArrayEquals(expected, todo.formatTask());","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"    void markAsDone_markedCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"        Todo todo \u003d new Todo(\"Read book\");","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"        Todo doneTodo \u003d todo.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"        assertTrue(doneTodo.isDone());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"    void toString_convertedCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"        Todo todo \u003d new Todo(\"Read book\");","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"        String expected \u003d \"[T][ ] Read book\";","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"        assertEquals(expected, todo.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":31}},{"path":"src/test/java/duke/util/FileUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"import java.util.List;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"class FileUtilsTest {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"    void loadFile_loadedCorrectly() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e formattedTasks \u003d FileUtils.loadFile(\"data\", \"test.txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"        expected.add(\"T | 0 | read book\");","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"        expected.add(\"D | 0 | return book | 2021-06-06 18:00\");","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"        expected.add(\"T | 0 | join sports club\");","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"        expected.add(\"T | 1 | borrow book\");","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"        expected.add(\"D | 1 | return book | 2021-08-08 10:00\");","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"        expected.add(\"E | 1 | project meeting | 2021-08-20 14:00-16:00\");","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"        assertArrayEquals(expected.toArray(String[]::new), formattedTasks.toArray(String[]::new));","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HolmesJJ"},"content":"    void loadFile_wrongFilePath_returnedEmptyList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e formattedTasks \u003d FileUtils.loadFile(\"data\", \"wrong_file_path.txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HolmesJJ"},"content":"        List\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HolmesJJ"},"content":"        assertEquals(0, formattedTasks.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HolmesJJ"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HolmesJJ"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":32}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"T | 0 | read book","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"D | 0 | return book | 2021-06-06 18:00","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"T | 0 | join sports club","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"T | 1 | borrow book","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"D | 1 | return book | 2021-08-08 10:00","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"E | 1 | project meeting | 2021-08-20 14:00-16:00","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"HolmesJJ":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HolmesJJ"},"content":"clear","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"HolmesJJ"},"content":"todo read book","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"HolmesJJ"},"content":"deadline return book /by 2021-06-06 18:00","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"HolmesJJ"},"content":"event project meeting /at 2021-08-06 14:00 16:00","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"HolmesJJ"},"content":"todo join sports club","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"HolmesJJ"},"content":"todo borrow book","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"HolmesJJ"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"HolmesJJ"},"content":"done 4","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"HolmesJJ"},"content":"deadline return book /by 2021-08-08 10:00","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"HolmesJJ"},"content":"event project meeting /at 2021-08-20 14:00 16:00","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"HolmesJJ"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"blah","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"HolmesJJ"},"content":"done 2","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"HolmesJJ"},"content":"delete 3","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"delete 8","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"HolmesJJ"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"HolmesJJ"},"content":"find book","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"HolmesJJ"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"HolmesJJ":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"HolmesJJ"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"HolmesJJ"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"HolmesJJ":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"HolmesJJ"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"HolmesJJ"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"HolmesJJ":2}}]

[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the task which has deadline.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"    /** Stores the deadline. */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"    protected String by;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"qinguorui2001"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"qinguorui2001"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"qinguorui2001"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"qinguorui2001":19}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" * Represents the robot which has corresponding reaction to the user inputs.","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"    /** The data structure used to store the tasks. */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"    private static final ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"qinguorui2001"},"content":"    /** Number of tasks stored. */","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"qinguorui2001"},"content":"    private static int count;","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"qinguorui2001"},"content":"    /** User inputs. */","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"qinguorui2001"},"content":"    private static String response;","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"qinguorui2001"},"content":"    /** The length of user input. */","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"qinguorui2001"},"content":"    private static int len;","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"qinguorui2001"},"content":"        //Start Prompt.","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"qinguorui2001"},"content":"        System.out.println(getPattern(\"Hello! I\u0027m Duke\\n   What can I do for you?\"));","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"qinguorui2001"},"content":"        //User input.","lastModifiedDate":"2021-08-14"},{"lineNumber":34,"author":{"gitId":"qinguorui2001"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-14"},{"lineNumber":35,"author":{"gitId":"qinguorui2001"},"content":"        boolean flag \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":37,"author":{"gitId":"qinguorui2001"},"content":"        //Continue the loop until user says bye.","lastModifiedDate":"2021-08-14"},{"lineNumber":38,"author":{"gitId":"qinguorui2001"},"content":"        while (flag) {","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"qinguorui2001"},"content":"            response \u003d sc.nextLine();","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"qinguorui2001"},"content":"            len \u003d response.length();","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"qinguorui2001"},"content":"            flag \u003d echo2();","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"qinguorui2001"},"content":"     * Returns formatted string output.","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"qinguorui2001"},"content":"     * @param r The input string.","lastModifiedDate":"2021-08-14"},{"lineNumber":49,"author":{"gitId":"qinguorui2001"},"content":"     * @return Formatted string.","lastModifiedDate":"2021-08-14"},{"lineNumber":50,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":51,"author":{"gitId":"qinguorui2001"},"content":"    public static String getPattern(String r) {","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"qinguorui2001"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"qinguorui2001"},"content":"        StringBuilder curr \u003d new StringBuilder();","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"qinguorui2001"},"content":"        String empty \u003d \"   \";","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"qinguorui2001"},"content":"        curr.append(\"*\".repeat(80));","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"qinguorui2001"},"content":"        String out \u003d empty + curr + \"\\n\" + empty + r + \"\\n\" + empty + curr + \"\\n\";","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"qinguorui2001"},"content":"        result.append(out);","lastModifiedDate":"2021-08-14"},{"lineNumber":58,"author":{"gitId":"qinguorui2001"},"content":"        return result.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":60,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":61,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":62,"author":{"gitId":"qinguorui2001"},"content":"     * Returns all strings stored with indexing.","lastModifiedDate":"2021-08-14"},{"lineNumber":63,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":64,"author":{"gitId":"qinguorui2001"},"content":"     * @return All user\u0027s stored strings.","lastModifiedDate":"2021-08-14"},{"lineNumber":65,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":66,"author":{"gitId":"qinguorui2001"},"content":"    public static String toListStrings() {","lastModifiedDate":"2021-08-14"},{"lineNumber":67,"author":{"gitId":"qinguorui2001"},"content":"        StringBuilder curr \u003d new StringBuilder();","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"qinguorui2001"},"content":"        String end \u003d \"\\n   \";","lastModifiedDate":"2021-08-14"},{"lineNumber":69,"author":{"gitId":"qinguorui2001"},"content":"        String begin \u003d \"Here are the tasks in your list:\\n   \";","lastModifiedDate":"2021-08-14"},{"lineNumber":70,"author":{"gitId":"qinguorui2001"},"content":"        curr.append(begin);","lastModifiedDate":"2021-08-14"},{"lineNumber":71,"author":{"gitId":"qinguorui2001"},"content":"        for (int i \u003d 0; i \u003c count; i++) {","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"qinguorui2001"},"content":"            if (i \u003d\u003d count - 1) {","lastModifiedDate":"2021-08-14"},{"lineNumber":73,"author":{"gitId":"qinguorui2001"},"content":"                end \u003d \"\";","lastModifiedDate":"2021-08-14"},{"lineNumber":74,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":75,"author":{"gitId":"qinguorui2001"},"content":"            String out \u003d ((Integer) (i + 1)).toString() + \".\" + list.get(i).toString() + end;","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"qinguorui2001"},"content":"            curr.append(out);","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":78,"author":{"gitId":"qinguorui2001"},"content":"        return curr.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":80,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":82,"author":{"gitId":"qinguorui2001"},"content":"     * Returns boolean value which checks whether","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"qinguorui2001"},"content":"     * input string is digit or not.","lastModifiedDate":"2021-08-14"},{"lineNumber":84,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"qinguorui2001"},"content":"     * @param input String input.","lastModifiedDate":"2021-08-14"},{"lineNumber":86,"author":{"gitId":"qinguorui2001"},"content":"     * @return Content of input is digit or not.","lastModifiedDate":"2021-08-14"},{"lineNumber":87,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":88,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean chekDigit(String input) {","lastModifiedDate":"2021-08-14"},{"lineNumber":89,"author":{"gitId":"qinguorui2001"},"content":"        boolean flag \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":90,"author":{"gitId":"qinguorui2001"},"content":"        int i \u003d 0;","lastModifiedDate":"2021-08-16"},{"lineNumber":91,"author":{"gitId":"qinguorui2001"},"content":"        if (input.charAt(0) \u003d\u003d \u0027-\u0027) {","lastModifiedDate":"2021-08-16"},{"lineNumber":92,"author":{"gitId":"qinguorui2001"},"content":"            i \u003d 1;","lastModifiedDate":"2021-08-16"},{"lineNumber":93,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":94,"author":{"gitId":"qinguorui2001"},"content":"        for (; i \u003c input.length(); i++) {","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"qinguorui2001"},"content":"            char curr \u003d input.charAt(i);","lastModifiedDate":"2021-08-14"},{"lineNumber":96,"author":{"gitId":"qinguorui2001"},"content":"            if (!(curr \u003e\u003d \u00270\u0027 \u0026\u0026 curr \u003c\u003d \u00279\u0027)) {","lastModifiedDate":"2021-08-14"},{"lineNumber":97,"author":{"gitId":"qinguorui2001"},"content":"                flag \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":98,"author":{"gitId":"qinguorui2001"},"content":"                break;","lastModifiedDate":"2021-08-14"},{"lineNumber":99,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":100,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":101,"author":{"gitId":"qinguorui2001"},"content":"        return flag;","lastModifiedDate":"2021-08-14"},{"lineNumber":102,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":103,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":104,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":105,"author":{"gitId":"qinguorui2001"},"content":"     * Returns the formatted string output.","lastModifiedDate":"2021-08-15"},{"lineNumber":106,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":107,"author":{"gitId":"qinguorui2001"},"content":"     * @param task The possible task string representations.","lastModifiedDate":"2021-08-15"},{"lineNumber":108,"author":{"gitId":"qinguorui2001"},"content":"     * @return The desirable output string related to task.","lastModifiedDate":"2021-08-15"},{"lineNumber":109,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":110,"author":{"gitId":"qinguorui2001"},"content":"    public static String getOutputFrame(String task) {","lastModifiedDate":"2021-08-15"},{"lineNumber":111,"author":{"gitId":"qinguorui2001"},"content":"        String title \u003d \"Got it. I\u0027ve added this task:\\n   \";","lastModifiedDate":"2021-08-15"},{"lineNumber":112,"author":{"gitId":"qinguorui2001"},"content":"        String middle \u003d \"  \" + task + \"\\n   \";","lastModifiedDate":"2021-08-15"},{"lineNumber":113,"author":{"gitId":"qinguorui2001"},"content":"        String end \u003d \"Now you have \" + count + \" tasks in the list.\";","lastModifiedDate":"2021-08-15"},{"lineNumber":114,"author":{"gitId":"qinguorui2001"},"content":"        return title + middle + end;","lastModifiedDate":"2021-08-15"},{"lineNumber":115,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":116,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"qinguorui2001"},"content":"     * Returns a boolean checking whether the user input is","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"qinguorui2001"},"content":"     * related to to-do operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"qinguorui2001"},"content":"     * @return Whether the input is related to to-do or not.","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":122,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean checkTodo() {","lastModifiedDate":"2021-08-19"},{"lineNumber":123,"author":{"gitId":"qinguorui2001"},"content":"        //check with the special response \"to-do X\", where X is what to do.","lastModifiedDate":"2021-08-19"},{"lineNumber":124,"author":{"gitId":"qinguorui2001"},"content":"            Todo todo \u003d new Todo(response.substring(5, len));","lastModifiedDate":"2021-08-19"},{"lineNumber":125,"author":{"gitId":"qinguorui2001"},"content":"            list.add(todo);","lastModifiedDate":"2021-08-19"},{"lineNumber":126,"author":{"gitId":"qinguorui2001"},"content":"            count++;","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(getOutputFrame(todo.toString())));","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"qinguorui2001"},"content":"     * Returns a boolean checking whether the user input is","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"qinguorui2001"},"content":"     * related to deadline operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":134,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":135,"author":{"gitId":"qinguorui2001"},"content":"     * @return Whether the input is related to deadline or not.","lastModifiedDate":"2021-08-19"},{"lineNumber":136,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean checkDeadline(){","lastModifiedDate":"2021-08-19"},{"lineNumber":138,"author":{"gitId":"qinguorui2001"},"content":"        //check with the special response \"deadline X\", where X is what to do and by what time.","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"qinguorui2001"},"content":"            String[] parts \u003d response.substring(9, len).split(\" /by \");","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"qinguorui2001"},"content":"            String content \u003d parts[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"qinguorui2001"},"content":"            String time \u003d parts[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"qinguorui2001"},"content":"            Deadline deadline \u003d new Deadline(content, time);","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"qinguorui2001"},"content":"            list.add(deadline);","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"qinguorui2001"},"content":"            count++;","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(getOutputFrame(deadline.toString())));","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":147,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":148,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":149,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"qinguorui2001"},"content":"     * Returns a boolean checking whether the user input is","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"qinguorui2001"},"content":"     * related to event operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":153,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"qinguorui2001"},"content":"     * @return Whether the input is related to event or not.","lastModifiedDate":"2021-08-19"},{"lineNumber":155,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":156,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean checkEvent(){","lastModifiedDate":"2021-08-19"},{"lineNumber":157,"author":{"gitId":"qinguorui2001"},"content":"        //check with the special response \"event X\", where X includes what to do and time to do.","lastModifiedDate":"2021-08-19"},{"lineNumber":158,"author":{"gitId":"qinguorui2001"},"content":"            String[] parts \u003d response.substring(6, len).split(\" /at \");","lastModifiedDate":"2021-08-19"},{"lineNumber":159,"author":{"gitId":"qinguorui2001"},"content":"            String content \u003d parts[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"qinguorui2001"},"content":"            String time \u003d parts[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"qinguorui2001"},"content":"            Event event \u003d new Event(content, time);","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"qinguorui2001"},"content":"            list.add(event);","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"qinguorui2001"},"content":"            count++;","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(getOutputFrame(event.toString())));","lastModifiedDate":"2021-08-19"},{"lineNumber":165,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":166,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":167,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":168,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":169,"author":{"gitId":"qinguorui2001"},"content":"     * Returns a boolean checking whether the user input is","lastModifiedDate":"2021-08-19"},{"lineNumber":170,"author":{"gitId":"qinguorui2001"},"content":"     * related to delete operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":171,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"qinguorui2001"},"content":"     * @return Whether the input is related to delete or not.","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":174,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean checkDelete(){","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"qinguorui2001"},"content":"        //check with the special response \"delete X\", where X is index of deleted item.","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"qinguorui2001"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"qinguorui2001"},"content":"            int curr \u003d Integer.parseInt(response.substring(7, len));","lastModifiedDate":"2021-08-19"},{"lineNumber":178,"author":{"gitId":"qinguorui2001"},"content":"            Task shouldDelete;","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"qinguorui2001"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"qinguorui2001"},"content":"                shouldDelete \u003d list.get(curr - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"qinguorui2001"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":182,"author":{"gitId":"qinguorui2001"},"content":"                throw new OutOfRangeException();","lastModifiedDate":"2021-08-19"},{"lineNumber":183,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":184,"author":{"gitId":"qinguorui2001"},"content":"            list.remove(curr - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":185,"author":{"gitId":"qinguorui2001"},"content":"            count--;","lastModifiedDate":"2021-08-19"},{"lineNumber":186,"author":{"gitId":"qinguorui2001"},"content":"            String title \u003d \"Noted. I\u0027ve removed this task: \\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":187,"author":{"gitId":"qinguorui2001"},"content":"            String out \u003d \"     \" + shouldDelete.toString() + \"\\n   \";","lastModifiedDate":"2021-08-19"},{"lineNumber":188,"author":{"gitId":"qinguorui2001"},"content":"            String end \u003d \"Now you have \" + count + \" tasks in the list.\";","lastModifiedDate":"2021-08-19"},{"lineNumber":189,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(title + out + end));","lastModifiedDate":"2021-08-19"},{"lineNumber":190,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":191,"author":{"gitId":"qinguorui2001"},"content":"        } catch (OutOfRangeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":192,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(e.getMessage()));","lastModifiedDate":"2021-08-19"},{"lineNumber":193,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":194,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":195,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":196,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":197,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":198,"author":{"gitId":"qinguorui2001"},"content":"     * Returns a boolean checking whether user input is","lastModifiedDate":"2021-08-19"},{"lineNumber":199,"author":{"gitId":"qinguorui2001"},"content":"     * related to mark done of tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":200,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-19"},{"lineNumber":201,"author":{"gitId":"qinguorui2001"},"content":"     * @return Is done operation or not.","lastModifiedDate":"2021-08-19"},{"lineNumber":202,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":203,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean checkDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":204,"author":{"gitId":"qinguorui2001"},"content":"        //check with the special response \"done X\", where X is a number.","lastModifiedDate":"2021-08-19"},{"lineNumber":205,"author":{"gitId":"qinguorui2001"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":206,"author":{"gitId":"qinguorui2001"},"content":"            int curr \u003d Integer.parseInt(response.substring(5, len));","lastModifiedDate":"2021-08-19"},{"lineNumber":207,"author":{"gitId":"qinguorui2001"},"content":"            Task shouldMark;","lastModifiedDate":"2021-08-19"},{"lineNumber":208,"author":{"gitId":"qinguorui2001"},"content":"            try {","lastModifiedDate":"2021-08-19"},{"lineNumber":209,"author":{"gitId":"qinguorui2001"},"content":"                shouldMark \u003d list.get(curr - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":210,"author":{"gitId":"qinguorui2001"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":211,"author":{"gitId":"qinguorui2001"},"content":"                throw new OutOfRangeException();","lastModifiedDate":"2021-08-19"},{"lineNumber":212,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":213,"author":{"gitId":"qinguorui2001"},"content":"            shouldMark.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":214,"author":{"gitId":"qinguorui2001"},"content":"            String title \u003d \"Nice! I\u0027ve marked this task as done: \\n\";","lastModifiedDate":"2021-08-19"},{"lineNumber":215,"author":{"gitId":"qinguorui2001"},"content":"            String out \u003d \"     \" + shouldMark.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":216,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(title + out));","lastModifiedDate":"2021-08-19"},{"lineNumber":217,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":218,"author":{"gitId":"qinguorui2001"},"content":"        } catch (OutOfRangeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":219,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(e.getMessage()));","lastModifiedDate":"2021-08-19"},{"lineNumber":220,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":221,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":222,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":223,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":224,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":225,"author":{"gitId":"qinguorui2001"},"content":"     * Returns the correct enum operation according to response,","lastModifiedDate":"2021-08-19"},{"lineNumber":226,"author":{"gitId":"qinguorui2001"},"content":"     * or it returns null to show exception occurred.","lastModifiedDate":"2021-08-19"},{"lineNumber":227,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-15"},{"lineNumber":228,"author":{"gitId":"qinguorui2001"},"content":"     * @return Type of operation for the next judgement.","lastModifiedDate":"2021-08-19"},{"lineNumber":229,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":230,"author":{"gitId":"qinguorui2001"},"content":"    public static Operation checkResponse() {","lastModifiedDate":"2021-08-19"},{"lineNumber":231,"author":{"gitId":"qinguorui2001"},"content":"        Operation op;","lastModifiedDate":"2021-08-19"},{"lineNumber":232,"author":{"gitId":"qinguorui2001"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":233,"author":{"gitId":"qinguorui2001"},"content":"            if (response.startsWith(\"done \")","lastModifiedDate":"2021-08-19"},{"lineNumber":234,"author":{"gitId":"qinguorui2001"},"content":"                    \u0026\u0026 chekDigit(response.substring(5, len))) {","lastModifiedDate":"2021-08-19"},{"lineNumber":235,"author":{"gitId":"qinguorui2001"},"content":"                op \u003d Operation.DONE;","lastModifiedDate":"2021-08-19"},{"lineNumber":236,"author":{"gitId":"qinguorui2001"},"content":"            } else if (response.startsWith(\"todo \")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":237,"author":{"gitId":"qinguorui2001"},"content":"                op \u003d Operation.TODO;","lastModifiedDate":"2021-08-19"},{"lineNumber":238,"author":{"gitId":"qinguorui2001"},"content":"            } else if (response.startsWith(\"deadline \")","lastModifiedDate":"2021-08-19"},{"lineNumber":239,"author":{"gitId":"qinguorui2001"},"content":"                    \u0026\u0026 response.substring(9, len).contains(\" /by \")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":240,"author":{"gitId":"qinguorui2001"},"content":"                op \u003d Operation.DEADLINE;","lastModifiedDate":"2021-08-19"},{"lineNumber":241,"author":{"gitId":"qinguorui2001"},"content":"            } else if (response.startsWith(\"event \")","lastModifiedDate":"2021-08-19"},{"lineNumber":242,"author":{"gitId":"qinguorui2001"},"content":"                    \u0026\u0026 response.substring(6, len).contains(\" /at \")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":243,"author":{"gitId":"qinguorui2001"},"content":"                op \u003d Operation.EVENT;","lastModifiedDate":"2021-08-19"},{"lineNumber":244,"author":{"gitId":"qinguorui2001"},"content":"            } else if (response.startsWith(\"delete \")","lastModifiedDate":"2021-08-19"},{"lineNumber":245,"author":{"gitId":"qinguorui2001"},"content":"                    \u0026\u0026 chekDigit(response.substring(7, len))) {","lastModifiedDate":"2021-08-19"},{"lineNumber":246,"author":{"gitId":"qinguorui2001"},"content":"                op \u003d Operation.DELETE;","lastModifiedDate":"2021-08-19"},{"lineNumber":247,"author":{"gitId":"qinguorui2001"},"content":"            } else if (response.equals(\"delete\") || response.equals(\"todo\") || response.equals(\"deadline\")","lastModifiedDate":"2021-08-19"},{"lineNumber":248,"author":{"gitId":"qinguorui2001"},"content":"                    || response.equals(\"event\") || response.equals(\"done\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":249,"author":{"gitId":"qinguorui2001"},"content":"                String curr \u003d response;","lastModifiedDate":"2021-08-19"},{"lineNumber":250,"author":{"gitId":"qinguorui2001"},"content":"                throw new EmptyInputException(curr);","lastModifiedDate":"2021-08-19"},{"lineNumber":251,"author":{"gitId":"qinguorui2001"},"content":"            } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":252,"author":{"gitId":"qinguorui2001"},"content":"                //This means there\u0027s no match of operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":253,"author":{"gitId":"qinguorui2001"},"content":"                throw new NotRecognizeException();","lastModifiedDate":"2021-08-19"},{"lineNumber":254,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":255,"author":{"gitId":"qinguorui2001"},"content":"        }catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":256,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(e.getMessage()));","lastModifiedDate":"2021-08-19"},{"lineNumber":257,"author":{"gitId":"qinguorui2001"},"content":"            return null;","lastModifiedDate":"2021-08-19"},{"lineNumber":258,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":259,"author":{"gitId":"qinguorui2001"},"content":"        return op;","lastModifiedDate":"2021-08-19"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":261,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":262,"author":{"gitId":"qinguorui2001"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":263,"author":{"gitId":"qinguorui2001"},"content":"     * Returns a boolean to react to a response, while","lastModifiedDate":"2021-08-19"},{"lineNumber":264,"author":{"gitId":"qinguorui2001"},"content":"     * printing the required information.","lastModifiedDate":"2021-08-19"},{"lineNumber":265,"author":{"gitId":"qinguorui2001"},"content":"     *","lastModifiedDate":"2021-08-16"},{"lineNumber":266,"author":{"gitId":"qinguorui2001"},"content":"     * @return Whether the user continues to input or not.","lastModifiedDate":"2021-08-19"},{"lineNumber":267,"author":{"gitId":"qinguorui2001"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":268,"author":{"gitId":"qinguorui2001"},"content":"    public static boolean echo2() {","lastModifiedDate":"2021-08-19"},{"lineNumber":269,"author":{"gitId":"qinguorui2001"},"content":"        switch (response) {","lastModifiedDate":"2021-08-19"},{"lineNumber":270,"author":{"gitId":"qinguorui2001"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-19"},{"lineNumber":271,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(\"Bye, see you soon. ^-^\"));","lastModifiedDate":"2021-08-19"},{"lineNumber":272,"author":{"gitId":"qinguorui2001"},"content":"            return false;","lastModifiedDate":"2021-08-16"},{"lineNumber":273,"author":{"gitId":"qinguorui2001"},"content":"        case \"list\":","lastModifiedDate":"2021-08-19"},{"lineNumber":274,"author":{"gitId":"qinguorui2001"},"content":"            System.out.println(getPattern(toListStrings()));","lastModifiedDate":"2021-08-19"},{"lineNumber":275,"author":{"gitId":"qinguorui2001"},"content":"            return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":276,"author":{"gitId":"qinguorui2001"},"content":"        default:","lastModifiedDate":"2021-08-19"},{"lineNumber":277,"author":{"gitId":"qinguorui2001"},"content":"            Operation op \u003d checkResponse();","lastModifiedDate":"2021-08-19"},{"lineNumber":278,"author":{"gitId":"qinguorui2001"},"content":"            if (op \u003d\u003d null) {","lastModifiedDate":"2021-08-19"},{"lineNumber":279,"author":{"gitId":"qinguorui2001"},"content":"                return true;","lastModifiedDate":"2021-08-19"},{"lineNumber":280,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":281,"author":{"gitId":"qinguorui2001"},"content":"            switch (op) {","lastModifiedDate":"2021-08-19"},{"lineNumber":282,"author":{"gitId":"qinguorui2001"},"content":"            case DEADLINE:","lastModifiedDate":"2021-08-19"},{"lineNumber":283,"author":{"gitId":"qinguorui2001"},"content":"                return checkDeadline();","lastModifiedDate":"2021-08-19"},{"lineNumber":284,"author":{"gitId":"qinguorui2001"},"content":"            case TODO:","lastModifiedDate":"2021-08-19"},{"lineNumber":285,"author":{"gitId":"qinguorui2001"},"content":"                return checkTodo();","lastModifiedDate":"2021-08-19"},{"lineNumber":286,"author":{"gitId":"qinguorui2001"},"content":"            case EVENT:","lastModifiedDate":"2021-08-19"},{"lineNumber":287,"author":{"gitId":"qinguorui2001"},"content":"                return checkEvent();","lastModifiedDate":"2021-08-19"},{"lineNumber":288,"author":{"gitId":"qinguorui2001"},"content":"            case DONE:","lastModifiedDate":"2021-08-19"},{"lineNumber":289,"author":{"gitId":"qinguorui2001"},"content":"                return checkDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":290,"author":{"gitId":"qinguorui2001"},"content":"            case DELETE:","lastModifiedDate":"2021-08-19"},{"lineNumber":291,"author":{"gitId":"qinguorui2001"},"content":"                return checkDelete();","lastModifiedDate":"2021-08-19"},{"lineNumber":292,"author":{"gitId":"qinguorui2001"},"content":"            default:","lastModifiedDate":"2021-08-19"},{"lineNumber":293,"author":{"gitId":"qinguorui2001"},"content":"                return true;","lastModifiedDate":"2021-08-17"},{"lineNumber":294,"author":{"gitId":"qinguorui2001"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":295,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"qinguorui2001":285,"-":12}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the exceptions which can occur during the operation of Duke robot.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qinguorui2001":10}},{"path":"src/main/java/EmptyInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the specific duke exception that is related to empty user input.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class EmptyInputException extends DukeException{","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"    public EmptyInputException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"        super(\"OOPS!!! The description of a \" + message + \" cannot be empty.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qinguorui2001":10}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the event that has time. .","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"        /** The time to do the event. */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"        protected String at;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"        public Event(String description, String at) {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"            super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"            this.at \u003d at;","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"qinguorui2001"},"content":"        @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"qinguorui2001"},"content":"        public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"qinguorui2001"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"qinguorui2001":19}},{"path":"src/main/java/NotRecognizeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the specific exception that is related to the non-recognition.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class NotRecognizeException extends DukeException{","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"    public NotRecognizeException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qinguorui2001":10}},{"path":"src/main/java/Operation.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents specific operations.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public enum Operation {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"    TODO,","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"    DONE ,","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"    DEADLINE,","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"    EVENT,","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"    DELETE;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"qinguorui2001":12}},{"path":"src/main/java/OutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the specific exception that has the index out of range.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class OutOfRangeException extends DukeException{","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"    public OutOfRangeException() {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"        super(\"The index for done is out of range,please choose another one.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qinguorui2001":10}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the task user want to configure.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"        /** The content of the task. */","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"        protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"        /** Whether the task is finished or not. */","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"        protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"qinguorui2001"},"content":"        public Task(String description) {","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"qinguorui2001"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"qinguorui2001"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"qinguorui2001"},"content":"        public String getStatusIcon() {","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"qinguorui2001"},"content":"            return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"qinguorui2001"},"content":"        public void markAsDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"qinguorui2001"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"qinguorui2001"},"content":"        public String getDescription() {","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"qinguorui2001"},"content":"            return description;","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"qinguorui2001"},"content":"        @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"qinguorui2001"},"content":"        public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"qinguorui2001"},"content":"            return \"[\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"qinguorui2001":34}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"/**","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":" * Represents the To-do tasks.","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":" *","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":" * @author QIN GUORUI","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":" */","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"        public Todo(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"            super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"        @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"        public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"qinguorui2001"},"content":"            return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"qinguorui2001"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"qinguorui2001"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"qinguorui2001":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"qinguorui2001"},"content":"read book","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"qinguorui2001"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"qinguorui2001"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"qinguorui2001"},"content":"todo return book","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"qinguorui2001"},"content":"deadline borrow book /by not sure","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"qinguorui2001"},"content":"event project meeting /at afternoon","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qinguorui2001"},"content":"done 3","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qinguorui2001"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qinguorui2001"},"content":"todofadf","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qinguorui2001"},"content":"deadline fdf/by today","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"qinguorui2001"},"content":"event event","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"qinguorui2001"},"content":"event event /aterror","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"qinguorui2001"},"content":" todo dsfa","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"qinguorui2001"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qinguorui2001":14}}]

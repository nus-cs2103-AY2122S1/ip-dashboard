[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"# Duke.Duke project template","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"3. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ryanongra":2,"-":22}},{"path":"docs/save.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"T\u003e0\u003ecs2103 homework","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"T\u003e0\u003ecs2100","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"E\u003e0\u003ecs2103 lecture\u003e2021-08-27T16:00","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"D\u003e0\u003ecs2103 lab\u003e2021-08-30T15:00","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":4}},{"path":"src/main/java/Duke/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to add a Deadline type task.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the TaskManager, Ui, and Storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class AddDeadlineCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    private final String input;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * Constructor for the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     * @param input The user\u0027s input which triggered the creation of this command.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public AddDeadlineCommand(String input) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"     * Adds the deadline task by interacting with the relevant instances as mentioned above.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"            Task addedDeadline \u003d tm.addDeadline(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"            if (addedDeadline !\u003d null) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"                ui.printTaskAddition(addedDeadline, tm.getTasks().size());","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"                storage.updateSave(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"                throw new DukeException.NoTimeSpecifiedException(\"\");","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"        } catch (DukeException.NoNameException |","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"                DukeException.NoTimeSpecifiedException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"            ui.printErrorMessage(e);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":39}},{"path":"src/main/java/Duke/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to add an event type task.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the TaskManager, Ui, and Storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class AddEventCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    private final String input;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * Constructor for the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     * @param input The user\u0027s input which triggered the creation of this command.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public AddEventCommand(String input) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"     * Adds the event task by interacting with the relevant instances as mentioned above.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"            Task addedEvent \u003d tm.addEvent(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"            if (addedEvent !\u003d null) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"                ui.printTaskAddition(addedEvent, tm.getTasks().size());","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"                storage.updateSave(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"                throw new DukeException.NoTimeSpecifiedException(\"\");","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"        } catch (DukeException.NoNameException |","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"                DukeException.NoTimeSpecifiedException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"            ui.printErrorMessage(e);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":39}},{"path":"src/main/java/Duke/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to add a To-Do type task.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the TaskManager, Ui, and Storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class AddToDoCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    private final String INPUT;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * Constructor for the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     * @param input The user\u0027s input which triggered the creation of this command.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public AddToDoCommand(String input) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        this.INPUT \u003d input;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"     * Adds the to-do task by interacting with the relevant instances as mentioned above.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"            Task addedTask \u003d tm.addToDo(INPUT);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"            ui.printTaskAddition(addedTask, tm.getTasks().size());","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"            storage.updateSave(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"        } catch (DukeException.NoNameException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"            ui.printErrorMessage(e);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":34}},{"path":"src/main/java/Duke/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to cease the conversation with Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the Ui.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class ByeCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"     * Called the Ui object to display the \u0027bye\u0027 message then ends the program.","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        ui.printByeMessage();","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":20}},{"path":"src/main/java/Duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to delete a task.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the TaskManager, Ui, and Storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class DeleteCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    String taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * Constructor for the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     * @param taskIndex The index of the task which the user wants deleted.","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"    public DeleteCommand(String taskIndex) {","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     * Deletes the desired task by interacting with the relevant instances as mentioned above.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"            Task deletedTask \u003d tm.deleteTask(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"            if (deletedTask \u003d\u003d null) {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"                ui.printInvalidIndexMessage();","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"                ui.printTaskDeletion(deletedTask, tm.getTasks().size());","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"                storage.updateSave(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"        } catch (DukeException.InvalidInputException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"            ui.printErrorMessage(e);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":40}},{"path":"src/main/java/Duke/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to complete a task.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the TaskManager, Ui, and Storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class DoneCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    String taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * Constructor for the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     * @param taskIndex The index of the task which the user wants to mark completed.","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"    public DoneCommand(String taskIndex) {","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     * Marks the desired task completed by interacting with the relevant instances as mentioned above.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"            Task completedTask \u003d tm.completeTask(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"            if (completedTask \u003d\u003d null) {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"                ui.printInvalidIndexMessage();","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"            } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"                ui.printTaskCompletion(completedTask, tm.getTasks().size());","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"                storage.updateSave(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"        } catch (DukeException.InvalidInputException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"            ui.printErrorMessage(e);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":41}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * The main class for Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    private boolean isRunning \u003d true;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"    private Parser parser \u003d new Parser();","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"     * Constructor for Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"     * @param saveFileLocation The path to where the save file is to be stored.","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"    public Duke(String saveFileLocation) {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"        storage \u003d new Storage(saveFileLocation);","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"        taskManager \u003d new TaskManager(storage.loadSave());","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        new Duke(\"docs\\\\save.txt\").run();","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"     * Runs the program until the bye command is used to end it.","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"    private void run() {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"        ui.introduceYourself();","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"        while(isRunning) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"            ICommand c \u003d parser.getInput();","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"            c.execute(taskManager, ui, storage);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ryanongra":39,"-":3}},{"path":"src/main/java/Duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates exceptions which the Duke program could throw/","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"     * This exception occurs when an input is invalid","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"     * (e.g. passes a String instead of an int).","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"    public static class InvalidInputException extends Exception {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"        public InvalidInputException(String message) {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"            super(message);","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"     * This exception occurs when the user attempts to create a","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"     * deadline/event without specifying the time.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"    public static class NoTimeSpecifiedException extends Exception {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"        public NoTimeSpecifiedException(String message) {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"            super(message);","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"     * This exception occurs when the user attempts to","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"     * add in a task with no name.","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"    public static class NoNameException extends Exception {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"        public NoNameException(String message) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"            super(message);","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":38}},{"path":"src/main/java/Duke/FindTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"public class FindTasksCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"    private String keyword;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"    public FindTasksCommand(String input) {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"        keyword \u003d input.substring(5);","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        ArrayList\u003cTask\u003e originalTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"        originalTasks.addAll(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d (ArrayList\u003cTask\u003e) originalTasks.stream().filter(task -\u003e task.getName().contains(keyword)).collect(Collectors.toList());","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"        ui.printTasks(filteredTasks);","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":23}},{"path":"src/main/java/Duke/ICommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This interface is used by all commands and ensures that commands implement the execute() method.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"public interface ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"    void execute(TaskManager tm, Ui ui, Storage storage);","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":10}},{"path":"src/main/java/Duke/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the command to display the current tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" * It is triggered by the parser and uses the TaskManager and Ui.","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"public class ListTasksCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"     * Calls the Ui object to display the current list of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"     * @param tm The TaskManager object controlling the tasks in Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"     * @param ui The Ui object managing Duke\u0027s user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     * @param storage The Storage object managing the local storing of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        ui.printTasks(tm.getTasks());","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":19}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the understanding of commands.","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":" * It calls the relevant command depending on the user\u0027s input.","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"public class Parser {","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"    private Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     * Gets the user\u0027s input and return the relevant command to execute.","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"     * @return A command which determines how the program should react.","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    public ICommand getInput() {","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"        // Exit","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"            return new ByeCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"        // List out tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"            return new ListTasksCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"        } else if (input.split(\" \")[0].equals(\"done\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"            return new DoneCommand(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"        // Delete tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"        } else if (input.split(\" \")[0].equals(\"delete\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"        // Add to-do task","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"        } else if (input.split(\" \")[0].equals(\"todo\")){","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"            return new AddToDoCommand(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"        // Add deadline task","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"        } else if (input.split(\" \")[0].equals(\"deadline\")){","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"            return new AddDeadlineCommand(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"ryanongra"},"content":"        // Add event task","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"ryanongra"},"content":"        } else if (input.split(\" \")[0].equals(\"event\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"ryanongra"},"content":"            return new AddEventCommand(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"ryanongra"},"content":"        } else if (input.split(\" \")[0].equals(\"find\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"ryanongra"},"content":"            return new FindTasksCommand(input);","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"ryanongra"},"content":"        // Unknown command","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"ryanongra"},"content":"        } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"ryanongra"},"content":"            return new UnknownCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":55}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import java.io.File;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"import java.util.List;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":" * This class encapsulated the management of local storage for Duke.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"public class Storage {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    private final String SAVE_FILE_LOCATION;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"     * Constructor for Storage object, requires the path to","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     * where the save file should be located.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"     * @param saveFileLocation","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"    public Storage(String saveFileLocation) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        this.SAVE_FILE_LOCATION \u003d saveFileLocation;","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"     * This method updates the local save file with the latest","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"     * list of tasks. It is called whenever a task is added/deleted/completed.","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"     * @param tasks The latest list of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"    public void updateSave(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"        String data \u003d \"\";","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"            data +\u003d tasks.get(i).toStringSave() + \"\\n\";","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"            FileOutputStream fos \u003d new FileOutputStream(SAVE_FILE_LOCATION, false);","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"ryanongra"},"content":"            byte[] b \u003d data.getBytes();","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"ryanongra"},"content":"            fos.write(b);","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"ryanongra"},"content":"            fos.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"ryanongra"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"ryanongra"},"content":"            System.out.println(\"Error: Unable to save latest task. Please try again \\n\" + ex.getMessage());","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"ryanongra"},"content":"     * This method is run once whenever the program is started up.","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"ryanongra"},"content":"     * It loads the previous save or creates a new save file if it is","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"ryanongra"},"content":"     * the first time the program is run.","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"ryanongra"},"content":"     * @return The array list from the previous save.","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"ryanongra"},"content":"    public ArrayList\u003cTask\u003e loadSave() {","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"ryanongra"},"content":"            File saveFile \u003d new File(SAVE_FILE_LOCATION);","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"ryanongra"},"content":"            Scanner sc \u003d new Scanner(saveFile);","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"ryanongra"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"ryanongra"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"ryanongra"},"content":"                Task newTask;","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"ryanongra"},"content":"                String[] taskDetails \u003d sc.nextLine().split(\"\u003e\");","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"ryanongra"},"content":"                String name \u003d taskDetails[2];","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"ryanongra"},"content":"                boolean done \u003d taskDetails[1].equals(\"1\");","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"ryanongra"},"content":"                switch (taskDetails[0]) {","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"ryanongra"},"content":"                    case \"T\":","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"ryanongra"},"content":"                        newTask \u003d new Task.ToDo(name, done);","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"ryanongra"},"content":"                        break;","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"ryanongra"},"content":"                    case \"D\":","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"ryanongra"},"content":"                        newTask \u003d new Task.Deadline(name, LocalDateTime.parse(taskDetails[3]), done);","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"ryanongra"},"content":"                        break;","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"ryanongra"},"content":"                    case \"E\":","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"ryanongra"},"content":"                        newTask \u003d new Task.Event(name, LocalDateTime.parse(taskDetails[3]), done);","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"ryanongra"},"content":"                        break;","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"ryanongra"},"content":"                    default:","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"ryanongra"},"content":"                        throw new DukeException.NoNameException(\"Duke.Task type invalid\");","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"ryanongra"},"content":"                }","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"ryanongra"},"content":"                tasks.add(newTask);","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"ryanongra"},"content":"            return tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"ryanongra"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"ryanongra"},"content":"            System.out.println(\"Error: save file not found \\n\" + e.getMessage());","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"ryanongra"},"content":"        } catch (DukeException.NoNameException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"ryanongra"},"content":"            System.out.println(\"Error: save file invalid\");","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"ryanongra"},"content":"        return new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":90}},{"path":"src/main/java/Duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" * This class encapsulates the tasks: To-do, Deadline, and Event.","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"public class Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"    private final String NAME;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"    private String taskType;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"     * Constructor for newly added tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"     * @param name The name of the task.","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"     * @param taskType The type of the task.","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"     * @throws DukeException.NoNameException Throws then the task name passed in is empty.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"    public Task(String name, String taskType) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"        if (name.replaceAll(\" \", \"\").equals(\"\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.NoNameException(\"Duke.Duke says: Duke.Task cannot have no name\");","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        this.NAME \u003d name;","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"     * Constructor for tasks created from storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"     * @param name The name of the task.","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"     * @param taskType The type of the task.","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"     * @param done Whether the task has been completed or not.","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"     * @throws DukeException.NoNameException Throws then the task name passed in is empty.","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"    public Task(String name, String taskType, boolean done) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"        if (name.replaceAll(\" \", \"\").equals(\"\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.NoNameException(\"Duke.Duke says: Duke.Task cannot have no name\");","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"ryanongra"},"content":"        this.NAME \u003d name;","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"ryanongra"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"ryanongra"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"ryanongra"},"content":"    public String getName() {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"ryanongra"},"content":"        return NAME;","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"ryanongra"},"content":"    public void completeTask() {","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"ryanongra"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"ryanongra"},"content":"    public String toString() {","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"ryanongra"},"content":"        return (taskType + (isDone ? \" (done) \" : \" (not done) \") + NAME);","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"ryanongra"},"content":"    public String toStringSave() {","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"ryanongra"},"content":"        int doneData \u003d isDone ? 1 : 0;","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"ryanongra"},"content":"        char taskTypeData \u003d taskType.equals(\"#ToDo\")","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"ryanongra"},"content":"                ? \u0027T\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"ryanongra"},"content":"                : taskType.equals(\"#Deadline\")","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"ryanongra"},"content":"                ? \u0027D\u0027","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"ryanongra"},"content":"                : \u0027E\u0027;","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"ryanongra"},"content":"        return taskTypeData + \"\u003e\" + doneData + \"\u003e\" + NAME;","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"ryanongra"},"content":"    public static class ToDo extends Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"ryanongra"},"content":"        public ToDo(String name) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"ryanongra"},"content":"            super(name, \"#ToDo\");","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"ryanongra"},"content":"        public ToDo(String name, boolean done) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"ryanongra"},"content":"            super(name, \"#ToDo\", done);","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"ryanongra"},"content":"    public static class Deadline extends Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"ryanongra"},"content":"        private final LocalDateTime deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"ryanongra"},"content":"        public Deadline(String name, LocalDateTime deadline) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"ryanongra"},"content":"            super(name, \"#Deadline\");","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"ryanongra"},"content":"            this.deadline \u003d deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"ryanongra"},"content":"        public Deadline(String name, LocalDateTime deadline, boolean done) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"ryanongra"},"content":"            super(name, \"#Deadline\", done);","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"ryanongra"},"content":"            this.deadline \u003d deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"ryanongra"},"content":"        public String toString() {","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"ryanongra"},"content":"            return super.toString() + \" (\" + deadline.toString().replace(\u0027T\u0027, \u0027 \u0027) + \")\";","lastModifiedDate":"2021-08-27"},{"lineNumber":96,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":98,"author":{"gitId":"ryanongra"},"content":"        public String toStringSave() {","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"ryanongra"},"content":"            return super.toStringSave() + \"\u003e\" + deadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":102,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"ryanongra"},"content":"    public static class Event extends Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"ryanongra"},"content":"        //private final LocalDate date;","lastModifiedDate":"2021-08-27"},{"lineNumber":106,"author":{"gitId":"ryanongra"},"content":"        private final LocalDateTime when;","lastModifiedDate":"2021-08-27"},{"lineNumber":107,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":108,"author":{"gitId":"ryanongra"},"content":"        public Event(String name, LocalDateTime when) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":109,"author":{"gitId":"ryanongra"},"content":"            super(name, \"#Event\");","lastModifiedDate":"2021-08-27"},{"lineNumber":110,"author":{"gitId":"ryanongra"},"content":"            this.when \u003d when;","lastModifiedDate":"2021-08-27"},{"lineNumber":111,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":112,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":113,"author":{"gitId":"ryanongra"},"content":"        public Event(String name, LocalDateTime when, boolean done) throws DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":114,"author":{"gitId":"ryanongra"},"content":"            super(name, \"#Event\", done);","lastModifiedDate":"2021-08-27"},{"lineNumber":115,"author":{"gitId":"ryanongra"},"content":"            this.when \u003d when;","lastModifiedDate":"2021-08-27"},{"lineNumber":116,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":117,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":118,"author":{"gitId":"ryanongra"},"content":"        public String toString() {","lastModifiedDate":"2021-08-27"},{"lineNumber":119,"author":{"gitId":"ryanongra"},"content":"            return super.toString() + \" (\" + when.toString().replace(\u0027T\u0027, \u0027 \u0027) + \")\";","lastModifiedDate":"2021-08-27"},{"lineNumber":120,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":121,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":122,"author":{"gitId":"ryanongra"},"content":"        public String toStringSave() {","lastModifiedDate":"2021-08-27"},{"lineNumber":123,"author":{"gitId":"ryanongra"},"content":"            return super.toStringSave() + \"\u003e\" + when;","lastModifiedDate":"2021-08-27"},{"lineNumber":124,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":125,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":126,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":127,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":128,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":128}},{"path":"src/main/java/Duke/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"    public TaskManager(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"        return tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"    public Task addToDo(String input) throws DukeException.NoNameException, DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"        if (input.length() \u003c 5) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.NoNameException(\"Duke says: You can\u0027t add a task with no name\");","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"        Task.ToDo newToDo \u003d new Task.ToDo(input.substring(5));","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"        tasks.add(newToDo);","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        return newToDo;","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"    public Task addDeadline(String input) throws DukeException.NoTimeSpecifiedException, DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"        Task addedDeadline \u003d null;","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"            Task.Deadline newDeadline \u003d new Task.Deadline(input.substring(9).split(\" /\")[0],","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"                    LocalDateTime.parse(input.substring(9).split(\" /\")[1],","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"                            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"            tasks.add(newDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"            addedDeadline \u003d newDeadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"        } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.NoTimeSpecifiedException(\"Duke.Duke says: Please include a deadline\");","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"            System.out.println(\"Duke says: Please use the format YYYY-MM-DD HH:MM when entering deadline \\n \" +","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"                    \"E.g. 2021-08-28 18:30\");","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"ryanongra"},"content":"        return addedDeadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"ryanongra"},"content":"    public Task addEvent(String input) throws DukeException.NoTimeSpecifiedException, DukeException.NoNameException {","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"ryanongra"},"content":"        Task addedEvent \u003d null;","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"ryanongra"},"content":"            Task.Event newEvent \u003d new Task.Event(input.substring(6).split(\" /\")[0],","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"ryanongra"},"content":"                    LocalDateTime.parse(input.substring(6).split(\" /\")[1],","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"ryanongra"},"content":"                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"ryanongra"},"content":"            tasks.add(newEvent);","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"ryanongra"},"content":"            addedEvent \u003d newEvent;","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"ryanongra"},"content":"        } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.NoTimeSpecifiedException(\"Duke.Duke says: Please include a time\");","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"ryanongra"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"ryanongra"},"content":"            System.out.println(\"Duke says: Please use the format YYYY-MM-DD HH:MM when entering when the event is \\n \" +","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"ryanongra"},"content":"                    \"E.g. 2021-08-28T18:30\");","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"ryanongra"},"content":"        return addedEvent;","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"ryanongra"},"content":"    public Task completeTask(String input) throws DukeException.InvalidInputException {","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"ryanongra"},"content":"        Task completedTask \u003d null;","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"ryanongra"},"content":"            int taskIndex \u003d Integer.parseInt(String.valueOf(input.charAt(5)));","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"ryanongra"},"content":"            if (!(taskIndex \u003e tasks.size())) {","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"ryanongra"},"content":"                completedTask \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"ryanongra"},"content":"                completedTask.completeTask();","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"ryanongra"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.InvalidInputException(\"Duke says: Please enter the index of the completed task\");","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"ryanongra"},"content":"        return completedTask;","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"ryanongra"},"content":"    public Task deleteTask(String input) throws DukeException.InvalidInputException {","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"ryanongra"},"content":"        Task deletedTask \u003d null;","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"ryanongra"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"ryanongra"},"content":"            int taskIndex \u003d Integer.parseInt(String.valueOf(input.charAt(7)));","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"ryanongra"},"content":"            if (!(taskIndex \u003e tasks.size())) {","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"ryanongra"},"content":"                System.out.println(\"Duke says: You have deleted the task \" +","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"ryanongra"},"content":"                        tasks.get(taskIndex - 1).getName());","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"ryanongra"},"content":"                deletedTask \u003d tasks.remove(taskIndex - 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"ryanongra"},"content":"        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"ryanongra"},"content":"            throw new DukeException.InvalidInputException(\"Duke says: Please enter the index of the task you want to delete\");","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"ryanongra"},"content":"        return deletedTask;","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":93}},{"path":"src/main/java/Duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":" * This class encapsulated the management of the user interface.","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"public class Ui {","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"    private final String LINEBREAK \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"     * Introduction method shown when program is first run.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"    public void introduceYourself() {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Hello I\u0027m\\n\" + logo + \"What can I do for you?\");","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"     * Goodbye message when the user enters the \"bye\" command.","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"    public void printByeMessage() {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"     * Prints out the list of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"     * @param tasks The current list of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"    public void printTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: Here is your list of tasks :)\");","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"ryanongra"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"ryanongra"},"content":"            System.out.println(\"Looks like you don\u0027t have any pending tasks! Must be nice (-_-;)\");","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"ryanongra"},"content":"        } else {","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"ryanongra"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"ryanongra"},"content":"                System.out.println(i + 1 + \".\"","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"ryanongra"},"content":"                        + tasks.get(i).toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"ryanongra"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"ryanongra"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"ryanongra"},"content":"     * Prints confirmation that a task was added successfully.","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"ryanongra"},"content":"     * @param task The task that was added.","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"ryanongra"},"content":"     * @param numTasks The new total number of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"ryanongra"},"content":"    public void printTaskAddition(Task task, int numTasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: I\u0027ve added the task: \");","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"     \" + task.toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"You now have \" + numTasks + \" tasks, jiayouz!\");","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":66,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"ryanongra"},"content":"     * Prints confirmation that a task was successfully deleted.","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"ryanongra"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"ryanongra"},"content":"     * @param numTasks The new total number of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"ryanongra"},"content":"    public void printTaskDeletion(Task task, int numTasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: I\u0027ve deleted the task: \");","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"     \" + task.toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"You now have \" + numTasks + \" tasks, jiayouz!\");","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"ryanongra"},"content":"     * Prints confirmation that a task was successfully completed.","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"ryanongra"},"content":"     * @param task The task that was completed.","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"ryanongra"},"content":"     * @param numTasks The current total number of tasks.","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"ryanongra"},"content":"    public void printTaskCompletion(Task task, int numTasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: You\u0027ve completed the task: \");","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"     \" + task.toString() + \"Well done!\");","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"You now have \" + numTasks + \" tasks, jiayouz!\");","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":96,"author":{"gitId":"ryanongra"},"content":"     * Prints an error message to the user.","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"ryanongra"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":98,"author":{"gitId":"ryanongra"},"content":"     * @param msg The error that was thrown.","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"ryanongra"},"content":"    public void printErrorMessage(Exception msg) {","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":102,"author":{"gitId":"ryanongra"},"content":"        System.out.println(msg.getMessage());","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":106,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":107,"author":{"gitId":"ryanongra"},"content":"     * Prints a message to tell the user that Duke does not undertand their input.","lastModifiedDate":"2021-08-27"},{"lineNumber":108,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":109,"author":{"gitId":"ryanongra"},"content":"    public void printUnknownCommandMessage() {","lastModifiedDate":"2021-08-27"},{"lineNumber":110,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":111,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: Sorry I don\u0027t understand what that means\");","lastModifiedDate":"2021-08-27"},{"lineNumber":112,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":113,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":114,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":115,"author":{"gitId":"ryanongra"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":116,"author":{"gitId":"ryanongra"},"content":"     * Prints a message to tell the user that the task number they are trying to complete/delete does not exist.","lastModifiedDate":"2021-08-27"},{"lineNumber":117,"author":{"gitId":"ryanongra"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":118,"author":{"gitId":"ryanongra"},"content":"    public void printInvalidIndexMessage() {","lastModifiedDate":"2021-08-27"},{"lineNumber":119,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":120,"author":{"gitId":"ryanongra"},"content":"        System.out.println(\"Duke says: You don\u0027t have that many tasks!\");","lastModifiedDate":"2021-08-27"},{"lineNumber":121,"author":{"gitId":"ryanongra"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2021-08-27"},{"lineNumber":122,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":123,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":123}},{"path":"src/main/java/Duke/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"package Duke;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":" * This class is used when an input is not understood.","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"public class UnknownCommand implements ICommand {","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"    public void execute(TaskManager tm, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"        ui.printUnknownCommandMessage();","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":11}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"import Duke.AddEventCommand;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"import Duke.AddDeadlineCommand;","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"import Duke.TaskManager;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"import Duke.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"import Duke.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"import Duke.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"import Duke.AddToDoCommand;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"    public void addEventCommandTest() {","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"        TaskManager tm \u003d new TaskManager(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"ryanongra"},"content":"        Storage storage \u003d new Storage(\"docs\\\\testSave.txt\");","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"ryanongra"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"ryanongra"},"content":"        String addEvent \u003d \"event test event /2020-02-02 20:20\";","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"ryanongra"},"content":"        AddEventCommand command \u003d new AddEventCommand(addEvent);","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"ryanongra"},"content":"        command.execute(tm, ui, storage);","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"ryanongra"},"content":"        assertEquals(\"#Event (not done) test event (2020-02-02 20:20)\", tm.getTasks().get(0).toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"ryanongra"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"ryanongra"},"content":"    public void addDeadlineCommandTest() {","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"ryanongra"},"content":"        TaskManager tm \u003d new TaskManager(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"ryanongra"},"content":"        Storage storage \u003d new Storage(\"docs\\\\testSave.txt\");","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"ryanongra"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"ryanongra"},"content":"        String addDeadline \u003d \"deadline test deadline /2020-02-02 20:20\";","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"ryanongra"},"content":"        AddDeadlineCommand command \u003d new AddDeadlineCommand(addDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"ryanongra"},"content":"        command.execute(tm, ui, storage);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"ryanongra"},"content":"        assertEquals(\"#Deadline (not done) test deadline (2020-02-02 20:20)\", tm.getTasks().get(0).toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"ryanongra"},"content":"    @Test","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"ryanongra"},"content":"    public void addToDoCommandTest() {","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"ryanongra"},"content":"        TaskManager tm \u003d new TaskManager(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"ryanongra"},"content":"        Storage storage \u003d new Storage(\"docs\\\\testSave.txt\");","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"ryanongra"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"ryanongra"},"content":"        String addDeadline \u003d \"todo test todo\";","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"ryanongra"},"content":"        AddToDoCommand command \u003d new AddToDoCommand(addDeadline);","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"ryanongra"},"content":"        command.execute(tm, ui, storage);","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"ryanongra"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"ryanongra"},"content":"        assertEquals(\"#ToDo (not done) test todo\", tm.getTasks().get(0).toString());","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"ryanongra"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"ryanongra"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"ryanongra":54}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ryanongra"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"ryanongra"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"ryanongra"},"content":"event","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"ryanongra"},"content":"deadline","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"ryanongra"},"content":"todo get some sleep","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"ryanongra"},"content":"event dinner","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"ryanongra"},"content":"event dinner /thurs","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"ryanongra"},"content":"deadline homework","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"ryanongra"},"content":"deadline homework /monday","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"ryanongra"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"ryanongra"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"ryanongra"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"ryanongra"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"ryanongra"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"ryanongra"},"content":"remove 1","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"ryanongra"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"ryanongra"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"ryanongra"},"content":"list","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"ryanongra":18}}]

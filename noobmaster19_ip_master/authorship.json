[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"# DukePro","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"\u003e This issa quotee.","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"\u003e - Dion","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"DukePro frees your mind of having to remember things you need to do. Its:","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"* text-based","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"* easy to learn","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"* FAST SUPER FAST to use","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"* All you need to do is,","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"All you need to do is:","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"1. download it from [here](https://github.com/noobmaster19/ip/releases/download/v0.01/ip.jar)","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"2. double-click it.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"3. add your tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"4. let it manage your tasks for you ðŸ˜‰","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"And it is **FREE!**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"Features:","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"- [x] Managing tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"- [ ] Managing deadlines (coming soon)","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"- [ ] Reminders (coming soon)","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"---","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"If you Java programmer, you can use it to practice Java too. Here\u0027s the main method:","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"```java","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"public class Main {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"noobmaster19":28,"-":6}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"plugins {","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2021-09-06"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"javafx {","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    version \u003d \"11\"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    modules \u003d [ \u0027javafx.controls\u0027 ,\u0027javafx.fxml\u0027 ]","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"mainClassName \u003d \u0027duke.app.Launcher\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"repositories {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    mavenCentral()","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"dependencies {","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    // Use JUnit Jupiter for testing.","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.7.2\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"    // This dependency is used internally, and not exposed to consumers on their own compile classpath.","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"    implementation \u0027com.google.guava:guava:30.1.1-jre\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"tasks.named(\u0027test\u0027) {","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"    // Use JUnit Platform for unit tests.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":30}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"@rem limitations under the License.","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"@rem","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"@rem Find java.exe","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"echo.","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"echo.","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"goto fail","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":":findJavaFromJavaHome","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"noobmaster19"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"noobmaster19"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"noobmaster19"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"noobmaster19"},"content":"echo.","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"noobmaster19"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"noobmaster19"},"content":"echo.","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"noobmaster19"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"noobmaster19"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"noobmaster19"},"content":"goto fail","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"noobmaster19"},"content":":execute","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"noobmaster19"},"content":"@rem Setup the command line","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"noobmaster19"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"noobmaster19"},"content":"@rem Execute Gradle","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"noobmaster19"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"noobmaster19"},"content":":end","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"noobmaster19"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"noobmaster19"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"noobmaster19"},"content":":fail","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"noobmaster19"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"noobmaster19"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"noobmaster19"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"noobmaster19"},"content":"exit /b 1","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"noobmaster19"},"content":":mainEnd","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"noobmaster19"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"noobmaster19"},"content":":omega","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"noobmaster19":89}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"/*","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":" * This file was generated by the Gradle \u0027init\u0027 task.","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":" *","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":" * The settings file is used to specify which projects to include in your build.","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":" *","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" * in the user manual at https://docs.gradle.org/7.2/userguide/multi_project_builds.html","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"rootProject.name \u003d \u0027ip\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"include(\u0027src\u0027)","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":11}},{"path":"src/main/java/duke/app/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.app;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"    private void flip() {","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"noobmaster19"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"noobmaster19"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"noobmaster19"},"content":"        db.flip();","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"noobmaster19"},"content":"        return db;","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":61}},{"path":"src/main/java/duke/app/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.app;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" * The main program","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"public class Duke {","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"     * Constructor. Initializes the ui, database and tasklists","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"     * @param filePath  takes in filepath to for the database(.txt)","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"            return c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":43}},{"path":"src/main/java/duke/app/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.app;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"public class Launcher {","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":12}},{"path":"src/main/java/duke/app/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.app;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    private Duke duke \u003d new Duke(\"/data\");","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"            stage.show();","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":31}},{"path":"src/main/java/duke/app/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.app;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"        );","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":51}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":" * Represent an addition action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    public enum Type {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"        todo, deadline, event","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    Type type;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    String input;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    public AddCommand(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"        if (input.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"            this.type \u003d Type.todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"            this.type \u003d Type.deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"            this.type \u003d Type.event;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"     * Adds a task of interest from both short-term and long-term memory.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"     * @param tasks    the tasklist","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"     * @param ui    the user-interface","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"     * @param storage Persistent storage for data","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"        String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"        String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"        Task task;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"            if (input.equals(\"todo\") || input.equals(\"deadline\") || input.equals(\"event\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The description of a \" + input + \" cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"            if (this.type \u003d\u003d Type.todo) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"                description \u003d input.split(\"todo \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"                Storage.saveToDisc(\"todo\" + \",\" + \"0\"  + \",\" + description);","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"            } else if (this.type \u003d\u003d Type.deadline) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":"                description \u003d input.split(\"deadline \")[1].split(\" /\")[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"noobmaster19"},"content":"                time \u003d input.split(\"/by \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"noobmaster19"},"content":"                if (!time.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"noobmaster19"},"content":"                    throw new DukeException(\"â˜¹ Yo bro pls give the time in yyyy-mm-dd format thx.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"noobmaster19"},"content":"                task \u003d new Deadline(description, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"noobmaster19"},"content":"                Storage.saveToDisc(\"deadline\" + \",\" + \"0\" + \",\" + description + \",\" + time);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"noobmaster19"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"noobmaster19"},"content":"                description \u003d input.split(\"event \")[1].split(\" /\")[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"noobmaster19"},"content":"                time \u003d input.split(\"/at \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"noobmaster19"},"content":"                if (!time.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"noobmaster19"},"content":"                    throw new DukeException(\"â˜¹ Yo bro pls give the time in yyyy-mm-dd format thx.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"noobmaster19"},"content":"                task \u003d new Event(description, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"noobmaster19"},"content":"                Storage.saveToDisc(\"event\" + \",\" + \"0\"  + \",\" + description + \",\" + time);","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"noobmaster19"},"content":"            tasks.addTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"noobmaster19"},"content":"            return \"Heard ya! Saved your task!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"noobmaster19"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"noobmaster19"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":80}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":" * Represent a action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"public abstract class Command {    ","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":15}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":" * Represent an deletion action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"public class DeleteCommand extends Command{","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    Integer index;","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    public DeleteCommand(String input){","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"        Integer parsedIndex \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"        index \u003d parsedIndex-1;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"        assert(index\u003e\u003d0);","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"     * Deletes a task of interest from both short-term and long-term memory.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"     * @param tasks    the tasklist","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"     * @param ui    the user-interface","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"     * @param storage Persistent storage for data","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage){","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"            tasks.deleteTask(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"            Storage.removeLine(index);","lastModifiedDate":"2021-09-06"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"            return \"Deleted!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e){","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit(){","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":42}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" * Represent an Done action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    Integer index;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    public DoneCommand(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"        Integer parsedIndex \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"        index \u003d parsedIndex-1;","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"        assert(index\u003e\u003d0);","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"     * Marks the task of interest as completed","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"     * @param tasks    the taskList","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"     * @param ui    the user-interface","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"     * @param storage Persistent storage for data","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage){","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d tasks.getTask(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"            task.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"            Storage.updateLine(index);","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"            return \"Nice! I\u0027ve marked this task as done: \" + task;","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit(){","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":42}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":" * Represent an bye/exit action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"public class ExitCommand extends Command{","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"     * prints out the bye statement","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"     * @param tasks    the tasklist","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"     * @param ui    the user-interface","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"     * @param storage Persistent storage for data","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage){","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"     * Returns true so that main program can exit the loop.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"     * @return returns true","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit(){","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":29}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    String keyword;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        keyword \u003d input.split(\"find \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"            String tasksToPrint \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"            assert (tasksToPrint \u003d\u003d \"\");","lastModifiedDate":"2021-09-06"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"            ArrayList\u003cTask\u003e userInputs \u003d tasks.getTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"            for (int i \u003d 0; i \u003c userInputs.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"                Task task \u003d userInputs.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"                String description \u003d task.getDescription();","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"                if (description.contains(keyword)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"                    tasksToPrint +\u003d (task + \" \");","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"            return tasksToPrint;","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":38}},{"path":"src/main/java/duke/commands/GetAtCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":" * Represent a retrieval action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"public class GetAtCommand extends Command{","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    public GetAtCommand(String datestring) throws DukeException{","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"        datestring \u003d datestring.split(\"getat \")[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        if (!datestring.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"            throw new DukeException(\"â˜¹ Yo bro pls give the time in yyyy-mm-dd format thx.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"        date \u003d LocalDate.parse(datestring);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"     * prints out the tasks at with a specific deadline/timing","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"     * @param tasks    the tasklist","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"     * @param ui    the user-interface","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"     * @param storage Persistent storage for data","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage){","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"        ArrayList\u003cTask\u003e userInputs \u003d tasks.getTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"        String tasksToPrint \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"        assert (tasksToPrint \u003d\u003d \"\");","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"        for (int i \u003d 0; i \u003c userInputs.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"            if (task instanceof TaskWithDate) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"                // We know that the incoming task is a TaskWithDate, so its safe to type cast it","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"                TaskWithDate datedTask \u003d (TaskWithDate) task;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"                if (datedTask.date.equals(date)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"                    // Print out only if its equals to the date of interest","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"                    tasksToPrint +\u003d (task + \" \");","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"        return tasksToPrint;","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit(){","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":53}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":" * Represent an listing/enumeration action to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"     * prints out all tasks in memory.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"     * @param tasks    the tasklist","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"     * @param ui    the user-interface","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"     * @param storage Persistent storage for data","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"        ArrayList\u003cTask\u003e userInputs \u003d tasks.getTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"        String tasksToPrint \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"        assert (tasksToPrint \u003d\u003d \"\");","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"        for (int i \u003d 0; i \u003c userInputs.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"            tasksToPrint +\u003d (task + \" \");","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"        return tasksToPrint;","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":35}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":" * Represent a task with a deadline.","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"public class Deadline extends TaskWithDate {","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    public Deadline(String description, String by, boolean done) {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"        super(description,by);","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"        super(description,by);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":19}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":" * Represent a task with a date.","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"public class Event extends TaskWithDate{","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    public Event(String description, String at, boolean done) {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"        super(description,at);","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"        super(description,at);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.date + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":19}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":" * Works as a object to store information about a task","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"        return this.description;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    @Override public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":29}},{"path":"src/main/java/duke/tasks/TaskWithDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":" * Is a special task with dates. Deadline and Event will inherit from this.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"public class TaskWithDate extends Task{","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    public final LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    public TaskWithDate(String description, String date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        super(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    public void printDate() {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"noobmaster19":18}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":" * Represent a task with no deadline or date.","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    public Todo(String description, boolean done) {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"        super(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"        return  \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":20}},{"path":"src/main/java/duke/utils/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.utils;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":6}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.utils;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import duke.commands.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":" * Helps to parse the user input and returns back a Command object which will be executed by the main Duke Program.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.startsWith(\"done\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"            return new DoneCommand(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"            return new FindCommand(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"            return new ListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.startsWith(\"getat\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"            return new GetAtCommand(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"        } else if (input.startsWith(\"todo\") || input.startsWith(\"event\") || input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"            return new AddCommand(input);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":27}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.utils;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import java.io.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":" * An abstraction to persist data incase the user reboots the program.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    static File directory;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    static File data;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    static String folderPath;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    public Storage(String path) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"        directory \u003d new File(path);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"        data \u003d new File(path + \"/duke.txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"        folderPath \u003d path;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"            directory.mkdirs();","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"        if (!data.exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"                data.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"                System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"     * Returns the tasks that were saved in the persistant storage","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"     * @return An ArrayList containing the saved tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"     * @throws DukeException If database file is not found.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"        ArrayList\u003cTask\u003e savedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"            Scanner s \u003d new Scanner(data);","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"                String[] parsed \u003d s.nextLine().split(\",\");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"                String type \u003d parsed[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"                boolean done \u003d (parsed[1].equals(\"1\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"                if (type.equals(\"todo\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"                    savedTasks.add(new Todo(parsed[2], done));","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"                } else if (type.equals(\"event\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"                    savedTasks.add(new Event(parsed[2], parsed[3], done));","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"                } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"                    savedTasks.add(new Deadline(parsed[2], parsed[3], done));","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"noobmaster19"},"content":"            return savedTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"noobmaster19"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"noobmaster19"},"content":"            throw new DukeException(\"File was not found!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"noobmaster19"},"content":"     * Removes a specific data entry in the database","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"noobmaster19"},"content":"     * @param lineNumber and integer containing the index of the entry.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"noobmaster19"},"content":"     * @throws IOException .","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"noobmaster19"},"content":"    public static void removeLine(int lineNumber) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"noobmaster19"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"noobmaster19"},"content":"        // Instantiating the Scanner class to read the file","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"noobmaster19"},"content":"        Scanner sc \u003d new Scanner(data);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"noobmaster19"},"content":"        // instantiating the StringBuilder class","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"noobmaster19"},"content":"        StringBuffer buffer \u003d new StringBuffer();","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"noobmaster19"},"content":"        // Reading lines of the file and appending them to StringBuffer","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"noobmaster19"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"noobmaster19"},"content":"            if (counter !\u003d lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"noobmaster19"},"content":"                buffer.append(sc.nextLine() + System.lineSeparator());","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"noobmaster19"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"noobmaster19"},"content":"                sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"noobmaster19"},"content":"            counter++;","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"noobmaster19"},"content":"        String fileContents \u003d buffer.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"noobmaster19"},"content":"        // closing the Scanner object","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"noobmaster19"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"noobmaster19"},"content":"        // instantiating the FileWriter class","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"noobmaster19"},"content":"        FileWriter writer \u003d new FileWriter(data);","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"noobmaster19"},"content":"        writer.append(fileContents);","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"noobmaster19"},"content":"        writer.flush();","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"noobmaster19"},"content":"     * Updates a specific task to be done","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"noobmaster19"},"content":"     * @param lineNumber and integer containing the index of the entry.","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"noobmaster19"},"content":"     * @throws IOException .","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"noobmaster19"},"content":"    public static void updateLine(int lineNumber) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"noobmaster19"},"content":"        int counter \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"noobmaster19"},"content":"        // Instantiating the Scanner class to read the file","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"noobmaster19"},"content":"        Scanner sc \u003d new Scanner(data);","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"noobmaster19"},"content":"        // instantiating the StringBuffer class","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"noobmaster19"},"content":"        StringBuffer buffer \u003d new StringBuffer();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"noobmaster19"},"content":"        // Reading lines of the file and appending them to StringBuffer","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"noobmaster19"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"noobmaster19"},"content":"            if (counter !\u003d lineNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"noobmaster19"},"content":"                buffer.append(sc.nextLine() + System.lineSeparator());","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"noobmaster19"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"noobmaster19"},"content":"                String[] stringArr \u003d sc.nextLine().split(\",\");","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"noobmaster19"},"content":"                stringArr[1] \u003d \"1\";","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"noobmaster19"},"content":"                String updatedString \u003d String.join(\",\", stringArr);","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"noobmaster19"},"content":"                buffer.append(updatedString + System.lineSeparator());","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"noobmaster19"},"content":"            counter++;","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"noobmaster19"},"content":"        String fileContents \u003d buffer.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"noobmaster19"},"content":"        // closing the Scanner object","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"noobmaster19"},"content":"        sc.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"noobmaster19"},"content":"        // instantiating the FileWriter class","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"noobmaster19"},"content":"        FileWriter writer \u003d new FileWriter(data);","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"noobmaster19"},"content":"        writer.append(fileContents);","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"noobmaster19"},"content":"        writer.flush();","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"noobmaster19"},"content":"    public static void saveToDisc(String task) throws IOException {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"noobmaster19"},"content":"        FileWriter fw \u003d new FileWriter(data, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"noobmaster19"},"content":"        fw.write(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"noobmaster19"},"content":"        fw.write(System.lineSeparator());","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"noobmaster19"},"content":"        fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":130}},{"path":"src/main/java/duke/utils/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.utils;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":" * Represents the non-persistent memory of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    ArrayList\u003cTask\u003e userInputs;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"     * Takes no arguments. It is to initialize an empty TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        this.userInputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"     * Takes in an arraylist of task. Is used to initialize with some past data (For rebooting purposes)","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"     * @param userInputs   an Arraylist of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"    public TaskList(ArrayList\u003cTask\u003e userInputs) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"        this.userInputs \u003d userInputs;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"     * Retrieves a specific task given by the index. Indexing starts from 0.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"     * @param input   the index of the task","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"     * @return Specific task of interest","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"    public Task getTask(Integer input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"            return userInputs.get(input);","lastModifiedDate":"2021-09-06"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"            return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"     * Retrieves all tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"     * @return All tasks in memory.","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"        return userInputs;","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"noobmaster19"},"content":"     * Adds a specific task to memory and prints out confirmations","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"noobmaster19"},"content":"     * @param task   the task of interest","lastModifiedDate":"2021-09-06"},{"lineNumber":56,"author":{"gitId":"noobmaster19"},"content":"     * ","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"noobmaster19"},"content":"    public void addTask(Task task) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"noobmaster19"},"content":"        userInputs.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"Now you have \" + userInputs.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"noobmaster19"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"noobmaster19"},"content":"     * Removes a specific task to memory and prints out confirmations","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"noobmaster19"},"content":"     * @param input  the index of task of interest","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"noobmaster19"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"noobmaster19"},"content":"    public void deleteTask(Integer input) {","lastModifiedDate":"2021-09-06"},{"lineNumber":70,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(input);","lastModifiedDate":"2021-09-06"},{"lineNumber":73,"author":{"gitId":"noobmaster19"},"content":"            userInputs.remove(input);","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\" \" + task);","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"noobmaster19"},"content":"            task \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Now you have \" + userInputs.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":81}},{"path":"src/main/java/duke/utils/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke.utils;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import java.io.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":" * Works as the UI for people to interact with. Communicates with other parts of the program to effect changes.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    public void showLine(){","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    public void showWelcome(){","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"        + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"        + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"    public void showLoadingError(){","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"Hey bro there was a problem loading please contact the devs!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"    public void showError(String e){","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.app.MainWindow\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"noobmaster19":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"package duke;","lastModifiedDate":"2021-09-06"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"import java.io.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.Parser;","lastModifiedDate":"2021-09-06"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-09-06"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"import duke.utils.TaskList;","lastModifiedDate":"2021-09-06"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-06"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"    public void checkParser() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"            Command addCom \u003d Parser.parse(\"todo test\");","lastModifiedDate":"2021-09-06"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"            Command delCom \u003d Parser.parse(\"delete 1\");","lastModifiedDate":"2021-09-06"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"            Command listCom \u003d Parser.parse(\"list\");","lastModifiedDate":"2021-09-06"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"            Command exitCom \u003d Parser.parse(\"bye\");","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"            assertEquals(addCom.getClass().getName(), duke.commands.AddCommand.class.getName());","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"            assertEquals(delCom.getClass().getName(), duke.commands.DeleteCommand.class.getName());","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"            assertEquals(listCom.getClass().getName(), duke.commands.ListCommand.class.getName());","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"            assertEquals(exitCom.getClass().getName(), duke.commands.ExitCommand.class.getName());","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"    public void checkTaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"            TaskList tasklist \u003d new duke.utils.TaskList();","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d new duke.tasks.Todo(\"test1\");","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"            tasklist.addTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"            ArrayList\u003cduke.tasks.Task\u003e taskArr \u003d tasklist.getTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"            assertEquals(taskArr.size(), 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"            assertEquals(taskArr.get(0), task);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"noobmaster19":44}}]

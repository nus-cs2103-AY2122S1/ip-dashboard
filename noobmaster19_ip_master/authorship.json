[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"todo,lol","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"deadline,test,2020-01-01","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"deadline,test,2020-01-01","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"noobmaster19":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"public class Deadline extends TaskWithDate {","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"        super(description,by);","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":11}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"import java.util.*;","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"import java.io.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    static ArrayList\u003cTask\u003e userInputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    static boolean userEnded \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    static File data;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    static File directory;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    public static void initialize() {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"        directory \u003d new File(\"data\");","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"        data \u003d new File(\"data/duke.txt\");","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"            directory.mkdirs();","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"        if (!data.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"                data.createNewFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"noobmaster19"},"content":"                System.out.println(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"            Scanner s \u003d new Scanner(data);","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"noobmaster19"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"noobmaster19"},"content":"                String[] parsed \u003d s.nextLine().split(\",\");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"noobmaster19"},"content":"                String type \u003d parsed[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"noobmaster19"},"content":"                if (type.equals(\"todo\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"noobmaster19"},"content":"                    userInputs.add(new Todo(parsed[1]));","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"noobmaster19"},"content":"                } else if (type.equals(\"event\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"noobmaster19"},"content":"                    userInputs.add(new Event(parsed[1], parsed[2]));","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"noobmaster19"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"noobmaster19"},"content":"                    userInputs.add(new Deadline(parsed[1], parsed[2]));","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"noobmaster19"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"noobmaster19"},"content":"    private static void appendToFile(String task) throws IOException {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"noobmaster19"},"content":"        FileWriter fw \u003d new FileWriter(data, true);","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"noobmaster19"},"content":"        fw.write(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"noobmaster19"},"content":"        fw.write(System.lineSeparator());","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"noobmaster19"},"content":"        fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"noobmaster19"},"content":"    public static void markAsDone(String input) {","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"noobmaster19"},"content":"            int taskIndex \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(taskIndex - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"noobmaster19"},"content":"            task.markAsDone();","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\" \" + task);","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"noobmaster19"},"content":"    public static void delete(String input) {","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":64,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"noobmaster19"},"content":"            int taskIndex \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\", \"\"));","lastModifiedDate":"2021-08-19"},{"lineNumber":66,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(taskIndex - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":67,"author":{"gitId":"noobmaster19"},"content":"            userInputs.remove(taskIndex - 1);","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\" \" + task);","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"noobmaster19"},"content":"            task \u003d null;","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Now you have \" + userInputs.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":71,"author":{"gitId":"noobmaster19"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":72,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":74,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":75,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":76,"author":{"gitId":"noobmaster19"},"content":"    public static void List() {","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"noobmaster19"},"content":"        for (int i \u003d 0; i \u003c userInputs.size(); i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(i);","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"noobmaster19"},"content":"            System.out.println((i + 1) + \". \" + task);","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"noobmaster19"},"content":"    public static void getTaskWithDatesOn(String date) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"noobmaster19"},"content":"        date \u003d date.split(\"getat \")[1];","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"noobmaster19"},"content":"        if (!date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"noobmaster19"},"content":"            throw new DukeException(\"☹ Yo bro pls give the time in yyyy-mm-dd format thx.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"noobmaster19"},"content":"        LocalDate parsedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"noobmaster19"},"content":"        for (int i \u003d 0; i \u003c userInputs.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"noobmaster19"},"content":"            Task task \u003d userInputs.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"noobmaster19"},"content":"            if (task instanceof TaskWithDate) {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"noobmaster19"},"content":"                // We know that the incoming task is a TaskWithDate, so its safe to type cast it","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"noobmaster19"},"content":"                TaskWithDate datedTask \u003d (TaskWithDate) task;","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"noobmaster19"},"content":"                if (datedTask.date.equals(parsedDate)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"noobmaster19"},"content":"                    // Print out only if its equals to the date of interest","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"noobmaster19"},"content":"                    System.out.println((i + 1) + \". \" + task);","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"noobmaster19"},"content":"    public static void addTask(String input) throws DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":103,"author":{"gitId":"noobmaster19"},"content":"        String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"noobmaster19"},"content":"        String time;","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"noobmaster19"},"content":"        Task task;","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"noobmaster19"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"noobmaster19"},"content":"            if (input.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":108,"author":{"gitId":"noobmaster19"},"content":"                if (input.equals(\"todo\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":109,"author":{"gitId":"noobmaster19"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":110,"author":{"gitId":"noobmaster19"},"content":"                } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":111,"author":{"gitId":"noobmaster19"},"content":"                    description \u003d input.split(\"todo \")[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"noobmaster19"},"content":"                    task \u003d new Todo(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"noobmaster19"},"content":"                    appendToFile(\"todo\" + \",\" + description);","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"noobmaster19"},"content":"            } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"noobmaster19"},"content":"                if (input.equals(\"deadline\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":117,"author":{"gitId":"noobmaster19"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":118,"author":{"gitId":"noobmaster19"},"content":"                } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":119,"author":{"gitId":"noobmaster19"},"content":"                    description \u003d input.split(\"deadline \")[1].split(\" /\")[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":120,"author":{"gitId":"noobmaster19"},"content":"                    time \u003d input.split(\"/by \")[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":121,"author":{"gitId":"noobmaster19"},"content":"                    if (!time.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"noobmaster19"},"content":"                        throw new DukeException(\"☹ Yo bro pls give the time in yyyy-mm-dd format thx.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"noobmaster19"},"content":"                    }","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"noobmaster19"},"content":"                    task \u003d new Deadline(description, time);","lastModifiedDate":"2021-08-19"},{"lineNumber":125,"author":{"gitId":"noobmaster19"},"content":"                    appendToFile(\"deadline\" + \",\" + description + \",\" + time);","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":127,"author":{"gitId":"noobmaster19"},"content":"            } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":128,"author":{"gitId":"noobmaster19"},"content":"                if (input.equals(\"event\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":129,"author":{"gitId":"noobmaster19"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":130,"author":{"gitId":"noobmaster19"},"content":"                } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":131,"author":{"gitId":"noobmaster19"},"content":"                    description \u003d input.split(\"event \")[1].split(\" /\")[0];","lastModifiedDate":"2021-08-19"},{"lineNumber":132,"author":{"gitId":"noobmaster19"},"content":"                    time \u003d input.split(\"/at \")[1];","lastModifiedDate":"2021-08-19"},{"lineNumber":133,"author":{"gitId":"noobmaster19"},"content":"                    if (!time.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"noobmaster19"},"content":"                        throw new DukeException(\"☹ Yo bro pls give the time in yyyy-mm-dd format thx.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"noobmaster19"},"content":"                    }","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"noobmaster19"},"content":"                    task \u003d new Event(description, time);","lastModifiedDate":"2021-08-19"},{"lineNumber":137,"author":{"gitId":"noobmaster19"},"content":"                    appendToFile(\"event\" + \",\" + description + \",\" + time);","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":139,"author":{"gitId":"noobmaster19"},"content":"            } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":140,"author":{"gitId":"noobmaster19"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-19"},{"lineNumber":141,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":142,"author":{"gitId":"noobmaster19"},"content":"            userInputs.add(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":143,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-08-19"},{"lineNumber":144,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(task);","lastModifiedDate":"2021-08-19"},{"lineNumber":145,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Now you have \" + userInputs.size() + \" tasks in the list.\");","lastModifiedDate":"2021-08-19"},{"lineNumber":146,"author":{"gitId":"noobmaster19"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":147,"author":{"gitId":"noobmaster19"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":150,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-19"},{"lineNumber":152,"author":{"gitId":"noobmaster19"},"content":"        initialize();","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"Hello! I\u0027m Duke What can I do for you?\");","lastModifiedDate":"2021-08-19"},{"lineNumber":154,"author":{"gitId":"noobmaster19"},"content":"        while (!userEnded) {","lastModifiedDate":"2021-08-19"},{"lineNumber":155,"author":{"gitId":"noobmaster19"},"content":"            Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-19"},{"lineNumber":156,"author":{"gitId":"noobmaster19"},"content":"            String str \u003d sc.nextLine();","lastModifiedDate":"2021-08-19"},{"lineNumber":157,"author":{"gitId":"noobmaster19"},"content":"            if (str.equals(\"bye\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":158,"author":{"gitId":"noobmaster19"},"content":"                userEnded \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":159,"author":{"gitId":"noobmaster19"},"content":"            } else if (str.startsWith(\"done\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":160,"author":{"gitId":"noobmaster19"},"content":"                markAsDone(str);","lastModifiedDate":"2021-08-19"},{"lineNumber":161,"author":{"gitId":"noobmaster19"},"content":"            } else if (str.equals(\"list\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":162,"author":{"gitId":"noobmaster19"},"content":"                List();","lastModifiedDate":"2021-08-19"},{"lineNumber":163,"author":{"gitId":"noobmaster19"},"content":"            } else if (str.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-19"},{"lineNumber":164,"author":{"gitId":"noobmaster19"},"content":"                delete(str);","lastModifiedDate":"2021-08-19"},{"lineNumber":165,"author":{"gitId":"noobmaster19"},"content":"            } else if (str.startsWith(\"getat\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"noobmaster19"},"content":"                try {","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"noobmaster19"},"content":"                    getTaskWithDatesOn(str);","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"noobmaster19"},"content":"                } catch (DukeException de) {","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"noobmaster19"},"content":"                    System.out.print(de);","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"noobmaster19"},"content":"            } else {","lastModifiedDate":"2021-08-19"},{"lineNumber":172,"author":{"gitId":"noobmaster19"},"content":"                try {","lastModifiedDate":"2021-08-19"},{"lineNumber":173,"author":{"gitId":"noobmaster19"},"content":"                    addTask(str);","lastModifiedDate":"2021-08-19"},{"lineNumber":174,"author":{"gitId":"noobmaster19"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":175,"author":{"gitId":"noobmaster19"},"content":"                    System.out.println(e);","lastModifiedDate":"2021-08-19"},{"lineNumber":176,"author":{"gitId":"noobmaster19"},"content":"                }","lastModifiedDate":"2021-08-19"},{"lineNumber":177,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":178,"author":{"gitId":"noobmaster19"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":179,"author":{"gitId":"noobmaster19"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":180,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"noobmaster19":178,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"public class Event extends TaskWithDate{","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"        super(description,at);","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.date + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":10}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"    @Override public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"noobmaster19"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":21}},{"path":"src/main/java/TaskWithDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"public class TaskWithDate extends Task{","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    public TaskWithDate(String description, String date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"        super(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"    public void printDate() {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"noobmaster19"},"content":"        System.out.println(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"noobmaster19":15}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"    protected String at;","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"    ","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"noobmaster19"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"noobmaster19"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"noobmaster19"},"content":"        return  \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"noobmaster19"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"noobmaster19"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"noobmaster19"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"noobmaster19"},"content":"deadline meet girl 1 /by Monday 2359","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"noobmaster19"},"content":"event meet girl 2 /at Tuesday 2359","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"noobmaster19"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"noobmaster19"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"noobmaster19"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"noobmaster19"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"noobmaster19":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"noobmaster19"},"content":"\"C:\\Program Files\\Java\\jdk-11.0.9\\bin\\java\" -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"noobmaster19":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"noobmaster19"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"noobmaster19":1,"-":33}}]

[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    mainClassName \u003d \"duke.LaunchDuke\"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jiarong15":1,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"T | 1 | read book","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jiarong15":1}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":" * Duke object class. Contains methods to run the duke bot.","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"public class Duke {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    private final Parser parser;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     * Instantiates Parser, Storage, Ui and Tasklist and passes the filepath to storage class","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     * catches both exceptions from storage class. If either 1 exception happens,","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"     * Tasklist is initialized as empty, with no tasks in it.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"     * @param filePath String containing the relative file path ","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"     * that storage class takes in to store and read tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"        } catch (DukeException | FileNotFoundException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"     * Retrieves theresponse of th ebot given the input command by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"     * Interactis with the different classes to achieve the bot behaviour.","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"     * Run stops when a \"bye\" command is entered and ends the bot processes.","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"    protected void run() {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"            try {","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"                ui.showLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"                Command c \u003d parser.parse(fullCommand);","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"                System.err.println(e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"            } finally {","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"                ui.showLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":61}},{"path":"src/main/java/duke/LaunchDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * A Class to initialize Duke Object and run the entire program","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" * @author Jia Rong","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"public class LaunchDuke {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    private static final String path \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     * Main method to run the duke object","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"     * @param args","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"     * @throws FileNotFoundException if scanner in storage class ","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"     * cannot locate the text file to be written to or read from.","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    public static void main(","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"            String[] args) throws FileNotFoundException {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"        Duke duke \u003d new Duke(path);","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"        duke.run();","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":23}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.commands.TaskCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":" * Class that converts inputs by user to Command Object to be used.","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"public class Parser {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    private static final String BYE_COMMAND \u003d \"bye\";","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    private static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    private static final String DONE_COMMAND \u003d \"done\";","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    private static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    private static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    private static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    private static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"    private static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a new Parser class","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    public Parser() {}","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"     * Reads the given string by the user and checks what type of command is it.","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * Returns the matching Command Object.","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"     * @param input String instructions given by the user ","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"     * @return Command object of the relating to the input given by user","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"     * @throws NoSuchCommandException If command do not fulfill the requirements of the bot","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"     * and thus not recognized","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"    Command parse(String input) throws NoSuchCommandException {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"        String formattedInput \u003d input.trim();","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"        String[] commandItems \u003d formattedInput.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"        String commandInput \u003d commandItems[0];","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        if (this.isNormalCommandType(commandInput)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"            return this.extractNormalCommand(commandInput, formattedInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"        return this.extractSpecialCommand(commandInput, formattedInput, commandItems);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"    private Command extractSpecialCommand(","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"        String commandName, String fullCommandInput, String[] commandList)","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"            throws NoSuchCommandException {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"        if (commandList.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-20"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"            String errorMessage \u003d \"☹ OOPS!!! The description of a \" +","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"                    commandName + \" cannot be empty.\";","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"            throw new NoSuchCommandException(errorMessage);","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"        String actualInputs \u003d String.join(\" \", commandList);","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"        return new TaskCommand(actualInputs);","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"     * returns the respective command of the user as a Command object ","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"     * @param commandName String of the name of the type of the command given","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"     * @param fullCommandInput String of the full instructions given by user","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"     * @return Command of the correct type","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"     * @throws NoSuchCommandException if the command given by user is not something that this bot is supposed to handle","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"    private Command extractNormalCommand(","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"        String commandName, String fullCommandInput) throws NoSuchCommandException {","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"        if (commandName.equals(DELETE_COMMAND)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"            return new DeleteCommand(fullCommandInput);","lastModifiedDate":"2021-08-20"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"        } else if (commandName.equals(LIST_COMMAND)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"            return new ListCommand(fullCommandInput);","lastModifiedDate":"2021-08-20"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"        } else if (commandName.equals(BYE_COMMAND)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"            return new ByeCommand(fullCommandInput);","lastModifiedDate":"2021-08-20"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"        } else if (commandName.equals(DONE_COMMAND)) {","lastModifiedDate":"2021-08-20"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"            return new DoneCommand(fullCommandInput);","lastModifiedDate":"2021-08-20"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"        } else if (commandName.equals(FIND_COMMAND)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"            return new FindCommand(fullCommandInput);","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":85,"author":{"gitId":"jiarong15"},"content":"        String errorMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-20"},{"lineNumber":86,"author":{"gitId":"jiarong15"},"content":"        throw new NoSuchCommandException(errorMessage);","lastModifiedDate":"2021-08-20"},{"lineNumber":87,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":88,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":89,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jiarong15"},"content":"     * Checks if the respective command is of todo, deadline or event ","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"jiarong15"},"content":"     * to distinguish how the command Object is to be initialized","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jiarong15"},"content":"     * @param commandName String of the command","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"jiarong15"},"content":"     * @return boolean to indicate if the command given is a todo, event, deadline or otherwise","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jiarong15"},"content":"    private boolean isNormalCommandType(String commandName) {","lastModifiedDate":"2021-08-20"},{"lineNumber":97,"author":{"gitId":"jiarong15"},"content":"        return (!commandName.equals(TODO_COMMAND))","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"jiarong15"},"content":"                \u0026\u0026 (!commandName.equals(DEADLINE_COMMAND))","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"jiarong15"},"content":"                \u0026\u0026 (!commandName.equals(EVENT_COMMAND));","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":101,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"jiarong15":101}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import duke.status.Status;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"import duke.status.typeTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"import java.util.Map;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"import java.util.List;","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":" * Class that manages the reading from and ","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":" * writing to local files in the local directory","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"    private static final String TODO_IDENTIFIER \u003d \"T\";","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    private static final String EVENT_IDENTIFIER \u003d \"E\";","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"    private static final String DEADLINE_IDENTIFIER \u003d \"D\";","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"    private static final String TODO_FULL_IDEN \u003d typeTask.TODO.getTask();","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    private static final String EVENT_FULL_IDEN \u003d typeTask.EVENT.getTask();","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"    private static final String DEADLINE_FULL_IDEN \u003d typeTask.DEADLINE.getTask();","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"    private static final String INDICATOR_COMPLETE \u003d \"1\";","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"    private static final String INDICATOR_EVENT \u003d \"/at\";","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"    private static final String INDICATOR_DEADLINE \u003d \"/by\";","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    // private static final String INDICATOR_INCOMPLETE \u003d \"0\";","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"    private final File fileSource;","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"    private List\u003cString\u003e allStringTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"     * Initializes a new storage class","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"     * @param filePath String indicating the path of ","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"     * the local file to write to or read from.","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"        this.fileSource \u003d new File(filePath);","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"        Path path \u003d this.fileSource.toPath();","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"            Path parentPath \u003d path.getParent();","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"            Files.createDirectories(parentPath);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"            if (!Files.exists(path)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"                Files.createFile(path);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"            this.allStringTasks \u003d Files.readAllLines(path);","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"            System.err.println(\"Error in path set!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"     * returns all the tasks stored in the local directory as an arraylist","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"     * @return Arraylist of Task object ","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"     * @throws FileNotFoundException if local file directory does not exist","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"     * @throws DukeException if either the Todo, Event, Deadline task is not ","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"     * initialized because of a wrong input given by the user","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"    protected ArrayList\u003cTask\u003e load() throws FileNotFoundException, DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"        HashMap\u003cString, Boolean\u003e stringTasks \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"        for (String tasks : allStringTasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"            this.storeDiskStorageInputs(tasks, stringTasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"        return this.changeStorageToTasks(stringTasks);","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"    private ArrayList\u003cTask\u003e changeStorageToTasks(","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"            HashMap\u003cString, Boolean\u003e stringTasks) throws DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e finalOutputTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"jiarong15"},"content":"        for (Map.Entry\u003cString, Boolean\u003e entry : stringTasks.entrySet()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"jiarong15"},"content":"            String fullInstructions \u003d entry.getKey();","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"jiarong15"},"content":"            String[] instructionsArray \u003d fullInstructions.split(\" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"jiarong15"},"content":"            String crucialInstructions \u003d String.join(\" \",","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"jiarong15"},"content":"                    Arrays.copyOfRange(instructionsArray,","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"jiarong15"},"content":"                            1, instructionsArray.length));","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jiarong15"},"content":"            String identity \u003d instructionsArray[0];","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"jiarong15"},"content":"            if (identity.equals(TODO_FULL_IDEN)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"jiarong15"},"content":"                Task ToDoTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"jiarong15"},"content":"                if (entry.getValue()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"jiarong15"},"content":"                    ToDoTask \u003d new ToDo(crucialInstructions).","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jiarong15"},"content":"                            updateStatus(Status.COMPLETED.getStatus());","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jiarong15"},"content":"                } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"jiarong15"},"content":"                    ToDoTask \u003d new ToDo(crucialInstructions);","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"jiarong15"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"jiarong15"},"content":"                finalOutputTasks.add(ToDoTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"jiarong15"},"content":"            } else if (identity.equals(EVENT_FULL_IDEN)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"jiarong15"},"content":"                Task EventTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"jiarong15"},"content":"                if (entry.getValue()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"jiarong15"},"content":"                    EventTask \u003d new Event(crucialInstructions).","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"jiarong15"},"content":"                            updateStatus(Status.COMPLETED.getStatus());","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"jiarong15"},"content":"                } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"jiarong15"},"content":"                    EventTask \u003d new Event(crucialInstructions);","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"jiarong15"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"jiarong15"},"content":"                finalOutputTasks.add(EventTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"jiarong15"},"content":"            } else if (identity.equals(DEADLINE_FULL_IDEN)) {","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"jiarong15"},"content":"                Task DeadlineTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":111,"author":{"gitId":"jiarong15"},"content":"                if (entry.getValue()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"jiarong15"},"content":"                    DeadlineTask \u003d new Deadline(crucialInstructions).","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"jiarong15"},"content":"                            updateStatus(Status.COMPLETED.getStatus());","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"jiarong15"},"content":"                } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":115,"author":{"gitId":"jiarong15"},"content":"                    DeadlineTask \u003d new Deadline(crucialInstructions);","lastModifiedDate":"2021-08-29"},{"lineNumber":116,"author":{"gitId":"jiarong15"},"content":"                }","lastModifiedDate":"2021-08-29"},{"lineNumber":117,"author":{"gitId":"jiarong15"},"content":"                finalOutputTasks.add(DeadlineTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"jiarong15"},"content":"            } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"jiarong15"},"content":"                String errorMsg \u003d \"No such task!\";","lastModifiedDate":"2021-08-29"},{"lineNumber":120,"author":{"gitId":"jiarong15"},"content":"                throw new DukeException(errorMsg);","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":123,"author":{"gitId":"jiarong15"},"content":"        return finalOutputTasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":124,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"jiarong15"},"content":"     * Reads in all the task that user have keyed in to the bot ","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"jiarong15"},"content":"     * and writes it to the local directory file.","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"jiarong15"},"content":"     * catches exception if the file does not exist and hence cannot be written to.","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"jiarong15"},"content":"     * @param storageTaskList arraylist of task","lastModifiedDate":"2021-08-30"},{"lineNumber":132,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"jiarong15"},"content":"    public void updateStorageList(ArrayList\u003cTask\u003e storageTaskList) {","lastModifiedDate":"2021-08-29"},{"lineNumber":134,"author":{"gitId":"jiarong15"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":135,"author":{"gitId":"jiarong15"},"content":"            FileWriter fw \u003d new FileWriter(fileSource);","lastModifiedDate":"2021-08-30"},{"lineNumber":136,"author":{"gitId":"jiarong15"},"content":"            StringBuilder sb \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"jiarong15"},"content":"            for (int i \u003d 0; i \u003c storageTaskList.size(); i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":138,"author":{"gitId":"jiarong15"},"content":"                Task task \u003d storageTaskList.get(i);","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"jiarong15"},"content":"                String fullInstr \u003d task.getOriginalFormatForStorage();","lastModifiedDate":"2021-08-29"},{"lineNumber":140,"author":{"gitId":"jiarong15"},"content":"                String[] instr \u003d fullInstr.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"jiarong15"},"content":"                String indicator \u003d instr[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"jiarong15"},"content":"                if (i \u003d\u003d storageTaskList.size() - 1) {","lastModifiedDate":"2021-08-29"},{"lineNumber":143,"author":{"gitId":"jiarong15"},"content":"                    this.addToStringBuilder(sb, indicator,","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"jiarong15"},"content":"                            instr, fullInstr, \"\");","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"jiarong15"},"content":"                } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":146,"author":{"gitId":"jiarong15"},"content":"                    this.addToStringBuilder(sb, indicator,","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"jiarong15"},"content":"                            instr, fullInstr, System.lineSeparator());","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"jiarong15"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"jiarong15"},"content":"            fw.write(sb.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":151,"author":{"gitId":"jiarong15"},"content":"            fw.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"jiarong15"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":153,"author":{"gitId":"jiarong15"},"content":"            System.out.println(\"Error occured while updating file storage\");","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":155,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":156,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":157,"author":{"gitId":"jiarong15"},"content":"    private void addToStringBuilder(","lastModifiedDate":"2021-08-30"},{"lineNumber":158,"author":{"gitId":"jiarong15"},"content":"            StringBuilder sb, String indicator,","lastModifiedDate":"2021-08-30"},{"lineNumber":159,"author":{"gitId":"jiarong15"},"content":"            String[] instr, String fullInstr, String extra) {","lastModifiedDate":"2021-08-30"},{"lineNumber":160,"author":{"gitId":"jiarong15"},"content":"        if (indicator.contains(TODO_IDENTIFIER)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":161,"author":{"gitId":"jiarong15"},"content":"            String details \u003d String.join(\" \",","lastModifiedDate":"2021-08-30"},{"lineNumber":162,"author":{"gitId":"jiarong15"},"content":"                    Arrays.copyOfRange(instr, 1, instr.length));","lastModifiedDate":"2021-08-30"},{"lineNumber":163,"author":{"gitId":"jiarong15"},"content":"            if (indicator.contains(\"X\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":164,"author":{"gitId":"jiarong15"},"content":"                details \u003d TODO_IDENTIFIER + \" | 1 | \" + details;","lastModifiedDate":"2021-08-24"},{"lineNumber":165,"author":{"gitId":"jiarong15"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":166,"author":{"gitId":"jiarong15"},"content":"                details \u003d TODO_IDENTIFIER + \" | 0 | \" + details;","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":168,"author":{"gitId":"jiarong15"},"content":"            sb.append(details + extra);","lastModifiedDate":"2021-08-24"},{"lineNumber":169,"author":{"gitId":"jiarong15"},"content":"        } else if (indicator.contains(DEADLINE_IDENTIFIER)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":170,"author":{"gitId":"jiarong15"},"content":"            String details \u003d this.getImptContentsOfDescription(fullInstr);","lastModifiedDate":"2021-08-24"},{"lineNumber":171,"author":{"gitId":"jiarong15"},"content":"            if (indicator.contains(\"X\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":172,"author":{"gitId":"jiarong15"},"content":"                details \u003d DEADLINE_IDENTIFIER + \" | 1 | \" + details;","lastModifiedDate":"2021-08-24"},{"lineNumber":173,"author":{"gitId":"jiarong15"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":174,"author":{"gitId":"jiarong15"},"content":"                details \u003d DEADLINE_IDENTIFIER + \" | 0 | \" + details;","lastModifiedDate":"2021-08-24"},{"lineNumber":175,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":176,"author":{"gitId":"jiarong15"},"content":"            sb.append(details + extra);","lastModifiedDate":"2021-08-24"},{"lineNumber":177,"author":{"gitId":"jiarong15"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":178,"author":{"gitId":"jiarong15"},"content":"            String details \u003d this.getImptContentsOfDescription(fullInstr);","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"jiarong15"},"content":"            if (indicator.contains(\"X\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"jiarong15"},"content":"                details \u003d EVENT_IDENTIFIER + \" | 1 | \" + details;","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"jiarong15"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":182,"author":{"gitId":"jiarong15"},"content":"                details \u003d EVENT_IDENTIFIER + \" | 0 | \" + details;","lastModifiedDate":"2021-08-24"},{"lineNumber":183,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":184,"author":{"gitId":"jiarong15"},"content":"            sb.append(details + extra);","lastModifiedDate":"2021-08-24"},{"lineNumber":185,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":186,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":187,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":188,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":189,"author":{"gitId":"jiarong15"},"content":"    private String getImptContentsOfDescription(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":190,"author":{"gitId":"jiarong15"},"content":"        StringBuilder sb \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":191,"author":{"gitId":"jiarong15"},"content":"        String[] stringParts \u003d input.split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":192,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 0; i \u003c stringParts.length; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":193,"author":{"gitId":"jiarong15"},"content":"            String str \u003d stringParts[i];","lastModifiedDate":"2021-08-24"},{"lineNumber":194,"author":{"gitId":"jiarong15"},"content":"            if (str.matches(\"[/|(a-zA-Z0-9)|-]+\") \u0026\u0026","lastModifiedDate":"2021-08-30"},{"lineNumber":195,"author":{"gitId":"jiarong15"},"content":"                    i !\u003d stringParts.length - 1) {","lastModifiedDate":"2021-08-30"},{"lineNumber":196,"author":{"gitId":"jiarong15"},"content":"                sb.append(str + \" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":197,"author":{"gitId":"jiarong15"},"content":"            } else if (i \u003d\u003d stringParts.length - 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":198,"author":{"gitId":"jiarong15"},"content":"                sb.append(str.substring(0, str.length() - 1));","lastModifiedDate":"2021-08-24"},{"lineNumber":199,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":200,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":201,"author":{"gitId":"jiarong15"},"content":"        return sb.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":202,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":203,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":204,"author":{"gitId":"jiarong15"},"content":"    private void storeDiskStorageInputs(","lastModifiedDate":"2021-08-30"},{"lineNumber":205,"author":{"gitId":"jiarong15"},"content":"            String input, HashMap\u003cString, Boolean\u003e stringStorage) {","lastModifiedDate":"2021-08-30"},{"lineNumber":206,"author":{"gitId":"jiarong15"},"content":"        String[] formatted \u003d input.trim().split(\"[|]+\");","lastModifiedDate":"2021-08-24"},{"lineNumber":207,"author":{"gitId":"jiarong15"},"content":"        String[] trimFormatted \u003d this.formatStringToProperInput(formatted).split(\" \");","lastModifiedDate":"2021-08-24"},{"lineNumber":208,"author":{"gitId":"jiarong15"},"content":"        boolean isDone \u003d this.isTaskCompleted(trimFormatted);","lastModifiedDate":"2021-08-24"},{"lineNumber":209,"author":{"gitId":"jiarong15"},"content":"        String[] finalFormatted \u003d this.removeDigitIndicator(trimFormatted);","lastModifiedDate":"2021-08-24"},{"lineNumber":210,"author":{"gitId":"jiarong15"},"content":"        String formattedIden \u003d finalFormatted[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":211,"author":{"gitId":"jiarong15"},"content":"        String[] finalToOutuput \u003d this.","lastModifiedDate":"2021-08-30"},{"lineNumber":212,"author":{"gitId":"jiarong15"},"content":"                updateToCommandConverterReadableFormat(","lastModifiedDate":"2021-08-30"},{"lineNumber":213,"author":{"gitId":"jiarong15"},"content":"                        formattedIden, finalFormatted);","lastModifiedDate":"2021-08-30"},{"lineNumber":214,"author":{"gitId":"jiarong15"},"content":"        String outputStorageInput \u003d String.join(\" \", finalToOutuput);","lastModifiedDate":"2021-08-24"},{"lineNumber":215,"author":{"gitId":"jiarong15"},"content":"        stringStorage.put(outputStorageInput, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":216,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":217,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":218,"author":{"gitId":"jiarong15"},"content":"    private String[] updateToCommandConverterReadableFormat(","lastModifiedDate":"2021-08-30"},{"lineNumber":219,"author":{"gitId":"jiarong15"},"content":"            String identifier, String[] finalFormatted) {","lastModifiedDate":"2021-08-30"},{"lineNumber":220,"author":{"gitId":"jiarong15"},"content":"        if (identifier.equals(TODO_IDENTIFIER)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":221,"author":{"gitId":"jiarong15"},"content":"            finalFormatted[0] \u003d \"todo\";","lastModifiedDate":"2021-08-24"},{"lineNumber":222,"author":{"gitId":"jiarong15"},"content":"            return finalFormatted;","lastModifiedDate":"2021-08-24"},{"lineNumber":223,"author":{"gitId":"jiarong15"},"content":"        } else if (identifier.equals(EVENT_IDENTIFIER)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":224,"author":{"gitId":"jiarong15"},"content":"            finalFormatted[0] \u003d \"event\";","lastModifiedDate":"2021-08-24"},{"lineNumber":225,"author":{"gitId":"jiarong15"},"content":"            return this.addIndicator(","lastModifiedDate":"2021-08-30"},{"lineNumber":226,"author":{"gitId":"jiarong15"},"content":"                    finalFormatted, 3,","lastModifiedDate":"2021-08-30"},{"lineNumber":227,"author":{"gitId":"jiarong15"},"content":"                    INDICATOR_EVENT);","lastModifiedDate":"2021-08-30"},{"lineNumber":228,"author":{"gitId":"jiarong15"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":229,"author":{"gitId":"jiarong15"},"content":"            finalFormatted[0] \u003d \"deadline\";","lastModifiedDate":"2021-08-24"},{"lineNumber":230,"author":{"gitId":"jiarong15"},"content":"            return this.addIndicator(","lastModifiedDate":"2021-08-30"},{"lineNumber":231,"author":{"gitId":"jiarong15"},"content":"                    finalFormatted, 3,","lastModifiedDate":"2021-08-30"},{"lineNumber":232,"author":{"gitId":"jiarong15"},"content":"                    INDICATOR_DEADLINE);","lastModifiedDate":"2021-08-30"},{"lineNumber":233,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":234,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":235,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":236,"author":{"gitId":"jiarong15"},"content":"    private boolean isTaskCompleted(String[] input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":237,"author":{"gitId":"jiarong15"},"content":"        return (input[1].equals(INDICATOR_COMPLETE)) ? true : false;","lastModifiedDate":"2021-08-24"},{"lineNumber":238,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":239,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":240,"author":{"gitId":"jiarong15"},"content":"    private String[] addIndicator(","lastModifiedDate":"2021-08-30"},{"lineNumber":241,"author":{"gitId":"jiarong15"},"content":"            String[] input, int index, String indicator) {","lastModifiedDate":"2021-08-30"},{"lineNumber":242,"author":{"gitId":"jiarong15"},"content":"        String[] output \u003d new String[input.length + 1];","lastModifiedDate":"2021-08-24"},{"lineNumber":243,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 0; i \u003c output.length; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":244,"author":{"gitId":"jiarong15"},"content":"            if (i \u003d\u003d index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":245,"author":{"gitId":"jiarong15"},"content":"                output[i] \u003d indicator;","lastModifiedDate":"2021-08-24"},{"lineNumber":246,"author":{"gitId":"jiarong15"},"content":"                continue;","lastModifiedDate":"2021-08-24"},{"lineNumber":247,"author":{"gitId":"jiarong15"},"content":"            } else if (i \u003e index) {","lastModifiedDate":"2021-08-24"},{"lineNumber":248,"author":{"gitId":"jiarong15"},"content":"                output[i] \u003d input[i - 1];","lastModifiedDate":"2021-08-24"},{"lineNumber":249,"author":{"gitId":"jiarong15"},"content":"                continue;","lastModifiedDate":"2021-08-24"},{"lineNumber":250,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":251,"author":{"gitId":"jiarong15"},"content":"            output[i] \u003d input[i];","lastModifiedDate":"2021-08-24"},{"lineNumber":252,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":253,"author":{"gitId":"jiarong15"},"content":"        return output;","lastModifiedDate":"2021-08-24"},{"lineNumber":254,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":255,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":256,"author":{"gitId":"jiarong15"},"content":"    private String[] removeDigitIndicator(String[] input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":257,"author":{"gitId":"jiarong15"},"content":"        String[] output \u003d new String[input.length - 1];","lastModifiedDate":"2021-08-24"},{"lineNumber":258,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":259,"author":{"gitId":"jiarong15"},"content":"            if (i \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":260,"author":{"gitId":"jiarong15"},"content":"                continue;","lastModifiedDate":"2021-08-24"},{"lineNumber":261,"author":{"gitId":"jiarong15"},"content":"            } else if (i \u003e 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":262,"author":{"gitId":"jiarong15"},"content":"                output[i - 1] \u003d input[i];","lastModifiedDate":"2021-08-24"},{"lineNumber":263,"author":{"gitId":"jiarong15"},"content":"                continue;","lastModifiedDate":"2021-08-24"},{"lineNumber":264,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":265,"author":{"gitId":"jiarong15"},"content":"            output[i] \u003d input[i];","lastModifiedDate":"2021-08-24"},{"lineNumber":266,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":267,"author":{"gitId":"jiarong15"},"content":"        return output;","lastModifiedDate":"2021-08-24"},{"lineNumber":268,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":269,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":270,"author":{"gitId":"jiarong15"},"content":"    private String formatStringToProperInput(String[] input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":271,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":272,"author":{"gitId":"jiarong15"},"content":"            input[i] \u003d input[i].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":273,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":274,"author":{"gitId":"jiarong15"},"content":"        return String.join(\" \", input);","lastModifiedDate":"2021-08-24"},{"lineNumber":275,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":276,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"jiarong15":276}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.status.Status;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DoneOutOfBoundsException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DeleteOutOfBoundsException;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":" * Class that keeps track of all the tasks given by the user","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"public class TaskList {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    private final ArrayList\u003cTask\u003e allTasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     * Initializes the TaskList class with arraylist to store tasks in future","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     * @param allTasks arraylist of tasks to be stored","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    public TaskList(ArrayList\u003cTask\u003e allTasks) {","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"        this.allTasks \u003d allTasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"     * Overloaded constructor that returns a TaskList class","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"     * with no prior tasks stored, which may due to reading error from storage class","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"        this.allTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * Adds a newly input task by user into the tasklist arraylist for keeping track","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"     * @param newTask Task object of the new task to be added","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"     * @return boolean whether a new task has been added to the task arraylist","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    public boolean addNewTask(Task newTask) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"        return allTasks.add(newTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"     * Returns all the tasks that users have input thus far.","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"     * @return ArrayList of all the tasks ","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"        return allTasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"     * Returns the task that user wishes to mark as completed.","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"     * @param taskNumber Integer of the position of task to be marked as completed","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"     * @return Task that is marked as completed","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"     * @throws DoneOutOfBoundsException if user specify the task number to be marked done","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"     * is greater than the total tasks in the tracking arraylist.","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    public Task markTaskAsDone(int taskNumber) throws DoneOutOfBoundsException {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"        if (taskNumber \u003e allTasks.size()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"            throw new DoneOutOfBoundsException(allTasks.size());","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"        Task updatedTask \u003d allTasks.","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"        get(taskNumber - 1).","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"        updateStatus(Status.COMPLETED.getStatus());","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"        allTasks.set(taskNumber - 1, updatedTask);","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"        return updatedTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"     * Returns the task that user wishes to remove.","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"     * @param taskNumber Integer of the position of ","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"     * task to be removed from tracking arraylist.","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"     * @return Task that is going to be removed from tracking arraylist","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"     * @throws DeleteOutOfBoundsException if user specify the task number to be deleted","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"     * is greater than the total tasks in the tracking arraylist","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"    public Task deleteTask(","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"            int taskNumber) throws DeleteOutOfBoundsException {","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"        if (taskNumber \u003e allTasks.size()){ ","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"jiarong15"},"content":"            throw new DeleteOutOfBoundsException(allTasks.size());","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":86,"author":{"gitId":"jiarong15"},"content":"        return allTasks.remove(taskNumber - 1);","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jiarong15"},"content":"     * returns length of arraylist of tasks that are stored.","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"jiarong15"},"content":"     * @return Integer of the length of all the tasks user has input","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"jiarong15"},"content":"    public int getTaskListLength() {","lastModifiedDate":"2021-08-29"},{"lineNumber":95,"author":{"gitId":"jiarong15"},"content":"        return allTasks.size();","lastModifiedDate":"2021-08-29"},{"lineNumber":96,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":97,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"jiarong15"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"jiarong15"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 1; i \u003c\u003d allTasks.size(); i++) {","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"jiarong15"},"content":"            if (i \u003d\u003d allTasks.size()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":103,"author":{"gitId":"jiarong15"},"content":"                sb.append(i + \". \" + allTasks.get(i - 1) + \"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":104,"author":{"gitId":"jiarong15"},"content":"                continue;","lastModifiedDate":"2021-08-29"},{"lineNumber":105,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-29"},{"lineNumber":106,"author":{"gitId":"jiarong15"},"content":"            sb.append(i + \". \" + allTasks.get(i - 1) + \"\\n\");","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":108,"author":{"gitId":"jiarong15"},"content":"        return sb.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":109,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":110,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":110}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * Class that handles the interaction with the user","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" * by displaying the information and receiving user inputs.","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"public class Ui {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    private static final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"    private static final String GREETING_MESSAGE \u003d ","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    \"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\";","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"     * Instantiats a new UI class","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    public Ui() {}","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     * Prints out the welcome message when user first uses the bot","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    protected void showWelcome() {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"        System.out.println(GREETING_MESSAGE);","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"     * Prints out that reading from storage of past stored tasks have failed.","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    protected void showLoadingError() {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Error in loading task in local disk!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * Prints segmentation line ","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"    protected void showLine() {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"________________________________\");","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"     * Returns user input as string to be ","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"     * used in the duke bot for processing","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"     * @return String of the user input","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"    protected String readCommand() {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"        return userInput;","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"     * Prints the exit message when user exits the bot","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"     * and closes the scanner classes.","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"    public void displayByeMessage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"        sc.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"     * Prints the task that is marked completed by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"     * @param completedMessage String of task that is completed","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"    public void displayCompletedMessage(String completedMessage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\" + ","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"        \"\\n\" + completedMessage);","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"     * Prints the task that is going to be deleted by user.","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"     * @param deleteMessage String of task to be deleted","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"     * @param taskLength Integer of length of taskList ArrayList","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"    public void displayDeleteMessage(String deleteMessage, int taskLength) {","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task\" +","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"        \"\\n\" + \"Now you have \" + taskLength + \" tasks in the list.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"     * Prints the task that user has just specified to be stored in TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"     * @param displayMessage String of task to be added to TaskList","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"jiarong15"},"content":"     * @param taskLength Integer of length of taskList ArrayList","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"jiarong15"},"content":"    public void displayTaskInstructions(String displayMessage, int taskLength) {","lastModifiedDate":"2021-08-29"},{"lineNumber":87,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\" + ","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"jiarong15"},"content":"        \"\\n\" + displayMessage + \"\\n\" + \"Now you have \" + taskLength + ","lastModifiedDate":"2021-08-29"},{"lineNumber":89,"author":{"gitId":"jiarong15"},"content":"        \" tasks in the list.\");","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":91,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jiarong15"},"content":"     * Prints out all the tasks stored by user in chronological order.","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jiarong15"},"content":"     * @param listMessage String of the all the tasks stored in taskList","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"jiarong15"},"content":"    public void displayTaskList(String listMessage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Here are the tasks in your list:\" + ","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"jiarong15"},"content":"        \"\\n\" + listMessage);","lastModifiedDate":"2021-08-29"},{"lineNumber":100,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"jiarong15"},"content":"    public void displayFoundTasks(String tasksFound) {","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"jiarong15"},"content":"        System.out.println(\"Here are the matching tasks in your list:\" + ","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"jiarong15"},"content":"        \"\\n\" + tasksFound);","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":106}},{"path":"src/main/java/duke/assignment/AssignmentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.assignment;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Enumeration to indicate the type of task","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"public enum AssignmentType {","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    TODO(\"[T]\"), EVENT(\"[E]\"), DEADLINE(\"[D]\");","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    private final String type;","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    AssignmentType(String type) {","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     * returns the task type in their corresponding label format","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     * @return String of the Task type","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"        return this.type;","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"jiarong15":23}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    public ByeCommand(String desc) {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"        super(desc);","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"        return true;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    };","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"        ui.displayByeMessage();","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":21}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":" * Abstract class that specifies the properties of a command","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    protected final String commandDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"     * Initializes the Command class with user input","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * @param command_description String of the user input","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    Command(String commandDescription) {","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"        this.commandDescription \u003d commandDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"     * returns if the command is an exit command ","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"     * to stop the duke bot from further running","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"     * @return boolean if the command is an exit command","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * Does potentially 3 operations of displaying messages to user,","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     * adding new task to stored tasks and updating of local file tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"     * @param tasks TaskList to update change given by user","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"     * @param ui Ui class to display messages to user","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"     * @param storage Storage updates each time a command make changes","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"     * to the existing stored tasks","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"     * @throws DukeException if any of the commands come up erroneous","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"    public abstract void execute(TaskList tasks, ","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"    Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":45}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DeleteOutOfBoundsException;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDeleteFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    public DeleteCommand(String desc) {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"        super(desc);","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    public void execute(","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"            TaskList tasks, Ui ui,","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"            Storage storage) throws WrongDeleteFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"            DeleteOutOfBoundsException {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"        String[] instructions \u003d this.commandDescription.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"        if (instructions.length !\u003d 2) {","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"            throw new WrongDeleteFormatException();","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"        int taskNumber \u003d Integer.valueOf(instructions[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"        Task taskRemoved \u003d tasks.deleteTask(taskNumber);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"        storage.updateStorageList(tasks.getTaskList());","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"        ui.displayDeleteMessage(taskRemoved.toString(), tasks.getTaskListLength());","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":36}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DoneOutOfBoundsException;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDoneFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"    public DoneCommand(String desc) {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"        super(desc);","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    public void execute(","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"            TaskList tasks, Ui ui,","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"            Storage storage) throws WrongDoneFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"            DoneOutOfBoundsException {","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"        String[] instructions \u003d this.commandDescription.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"        if (instructions.length !\u003d 2) {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"            throw new WrongDoneFormatException();","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"        int taskNumber \u003d Integer.valueOf(instructions[1]);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"        Task completedTask \u003d tasks.markTaskAsDone(taskNumber);","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"        storage.updateStorageList(tasks.getTaskList());","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"        ui.displayCompletedMessage(completedTask.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":33}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.NoTaskMatchException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongFindFormatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    public FindCommand(String desc) {","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"        super(desc);","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    };","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    public void execute(","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"        TaskList tasks, Ui ui, ","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"        Storage storage) throws WrongFindFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"        NoTaskMatchException {","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"        String[] instructions \u003d this.commandDescription.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"        if (instructions.length !\u003d 2) {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"            throw new WrongFindFormatException();","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"        String toFind \u003d instructions[1];","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"        String displayString \u003d this.convertMatchingTaskToStringDisplay(","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"            toFind, tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"        if (displayString.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"            throw new NoTaskMatchException();","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"        ui.displayFoundTasks(displayString);","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"    private String convertMatchingTaskToStringDisplay(","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"        String searchString, TaskList tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"        StringBuilder sb \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e taskItems \u003d tasks.getTaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.getTaskListLength(); i++) {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"            Task task \u003d taskItems.get(i - 1);","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"            String taskString \u003d task.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"            if (taskString.contains(searchString)) {","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"                if (counter \u003d\u003d 1) {","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"                    sb.append(counter + \". \" + taskString);","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"                } else {","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"                    sb.append(\"\\n\" + counter + \". \" + taskString);","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"                }","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"                counter++;","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"        return sb.toString();","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jiarong15":59}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    public ListCommand(String desc) {","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"        super(desc);","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"        ui.displayTaskList(tasks.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":22}},{"path":"src/main/java/duke/commands/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.commands;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"import duke.status.typeTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"public class TaskCommand extends Command {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    public TaskCommand(String desc) {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"        super(desc);","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"        return false;","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"    public void execute(","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"            TaskList taskList, Ui ui,","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"            Storage storage) throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"        String[] instructions \u003d this.commandDescription.split(\" \");","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"        String importantInstructions \u003d String.join(\" \",","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"                Arrays.copyOfRange(instructions,","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"                        1, instructions.length));","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"        String identity \u003d instructions[0];","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"        Task task;","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        if (identity.equals(typeTask.TODO.getTask())) {","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"            task \u003d new ToDo(importantInstructions);","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"        } else if (identity.equals(typeTask.DEADLINE.getTask())) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"            task \u003d new Deadline(importantInstructions);","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"            task \u003d new Event(importantInstructions); ","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"        taskList.addNewTask(task);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        ui.displayTaskInstructions(task.toString(), taskList.getTaskListLength());","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"        storage.updateStorageList(taskList.getTaskList());","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":48}},{"path":"src/main/java/duke/date/Date.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.date;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import java.lang.NumberFormatException;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":" * Class that stores and format date time values","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"public class Date {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    private static final String MORNING_INDICATOR \u003d \"am\";","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    private static final String EVENING_INDICATOR \u003d \"pm\";","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    private final LocalDate globalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"    private final LocalTime globalTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"     * Initializes the date class with ","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"     * a given string form of date and time ","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"     * @param dateAndTime String of the date and time user input","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongTimeFormatException if the expected time format given by user is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongDateFormatException if the expected date format given by user is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"    public Date(","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"            String dateAndTime) throws WrongTimeFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"            WrongDateFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"        String[] dateTimeSplit \u003d dateAndTime.split(\" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"        LocalDate inputDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"        LocalTime inputTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"        inputDate \u003d formatDate(dateTimeSplit[0]);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        inputTime \u003d formatTime(dateTimeSplit[1]);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"        this.globalDate \u003d inputDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"        this.globalTime \u003d inputTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"    private LocalTime formatTime(","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"            String timeString) throws NumberFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException, DateTimeParseException {","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        String[] hhmm \u003d timeString.split(\"[-/:]+\");","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"        LocalTime time;","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"        if (hhmm.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"            time \u003d LocalTime.parse(timeString, timeFormatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"        } else if (hhmm.length \u003e 2) {","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"            throw new WrongTimeFormatException();","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"            int hours \u003d Integer.valueOf(hhmm[0]);","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"            int mins \u003d Integer.valueOf(hhmm[1]);","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"            time \u003d LocalTime.of(hours, mins);","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"        return time;","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    private LocalDate formatDate(","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"            String dateString) throws NumberFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"            WrongDateFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"        String[] ddmmyyyy \u003d dateString.split(\"[-/:]+\");","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"        if (ddmmyyyy.length !\u003d 3) {","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"            throw new WrongDateFormatException();","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"        int year \u003d Integer.valueOf(ddmmyyyy[2]);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"        int month \u003d Integer.valueOf(ddmmyyyy[1]);","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"        int date \u003d Integer.valueOf(ddmmyyyy[0]);","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"        LocalDate currentDate \u003d LocalDate.of(year, month, date);","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"        return currentDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"     * returns the proper format of date ","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"     * and time used for ONLY storing","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"     * @return String of date and time format","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"    public String getOriginalFormat() {","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"        DateTimeFormatter Dateformat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"        return this.globalDate.format(Dateformat) + \" \" + this.globalTime.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"jiarong15"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"jiarong15"},"content":"        return this.globalDate.getMonth() + \" \" +","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"jiarong15"},"content":"                this.globalDate.getDayOfMonth() +","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"jiarong15"},"content":"                \" \" + this.globalDate.getYear() +","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"jiarong15"},"content":"                \" \" + this.getStringTime();","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"jiarong15"},"content":"    private String getStringTime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"jiarong15"},"content":"        int timeInHours \u003d this.globalTime.getHour();","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"jiarong15"},"content":"        int timeInMins \u003d this.globalTime.getMinute();","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"jiarong15"},"content":"        if (timeInHours \u003d\u003d 12) {","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"jiarong15"},"content":"            if (timeInMins \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"jiarong15"},"content":"                return String.valueOf(timeInHours) +","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"jiarong15"},"content":"                        \".\" + timeInMins +","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"jiarong15"},"content":"                        EVENING_INDICATOR;","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"jiarong15"},"content":"            return String.valueOf(timeInHours) +","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"jiarong15"},"content":"                    EVENING_INDICATOR;","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"jiarong15"},"content":"        } else if (timeInHours \u003e 12) {","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"jiarong15"},"content":"            if (timeInMins \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"jiarong15"},"content":"                return String.valueOf(timeInHours - 12) + \".\"","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"jiarong15"},"content":"                        + timeInMins + EVENING_INDICATOR;","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"jiarong15"},"content":"            return String.valueOf(timeInHours - 12) + EVENING_INDICATOR;","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"jiarong15"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"jiarong15"},"content":"            if (timeInMins \u003e 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"jiarong15"},"content":"                return String.valueOf(timeInHours) + \".\"","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"jiarong15"},"content":"                        + timeInMins + MORNING_INDICATOR;","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"jiarong15"},"content":"            return String.valueOf(timeInHours) + MORNING_INDICATOR;","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"jiarong15":117}},{"path":"src/main/java/duke/exceptions/DeleteOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles deleting task ","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * number greater than number odf task available","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class DeleteOutOfBoundsException extends DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a deleting exception","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     * @param taskLength Integer of the length of the tasklist","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    public DeleteOutOfBoundsException(int taskLength) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"        super(\"You only have \" + taskLength + \" tasks! Cannot delete task!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":18}},{"path":"src/main/java/duke/exceptions/DoneOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles marking task","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * number greater than number of task available as done","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class DoneOutOfBoundsException extends DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a done exception","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     * @param taskLength Integer of the length of the tasklist","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    public DoneOutOfBoundsException(int taskLength) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"        super(\"You only have \" + taskLength + \" tasks! Cannot mark as Done!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":17}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles all exceptions that","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * occur in the running of duke bot","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a duke exception ","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     * capturing all errors that may occur in duke","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"     * @param exceptionMsg String error message ","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    public DukeException(String exceptionMsg) {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"        super(exceptionMsg);","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":18}},{"path":"src/main/java/duke/exceptions/NoSuchCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles ","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * command unknown to the duke bot","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class NoSuchCommandException extends DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a NoSuchCommand exception","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     * @param errorMsg String error message of the unknown command","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    public NoSuchCommandException(String errorMsg) {","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"        super(errorMsg);","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":17}},{"path":"src/main/java/duke/exceptions/NoTaskMatchException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"public class NoTaskMatchException extends DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"    public NoTaskMatchException() {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"        super(\"You have no task matching this description!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jiarong15":7}},{"path":"src/main/java/duke/exceptions/WrongDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles marking task","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * with a wrong format of date","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class WrongDateFormatException extends DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a exception that is wrong in its date format","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    public WrongDateFormatException() {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"        super(\"Date format needs to be of the form dd-MM-yyyy or dd/MM/yyyy!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":16}},{"path":"src/main/java/duke/exceptions/WrongDeleteFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles a","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" *  wrong format of command to delete task","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class WrongDeleteFormatException extends DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a exception that is wrong ","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     * in the command in deleting a task","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    public WrongDeleteFormatException() {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"        super(\"Delete command requires a number!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":16}},{"path":"src/main/java/duke/exceptions/WrongDoneFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles a","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" *  wrong format of command to mark task as done","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class WrongDoneFormatException extends DukeException{","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a exception that is wrong ","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     * in the format of command in marking task as done","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    public WrongDoneFormatException() {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"        super(\"Done command requires a number!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":16}},{"path":"src/main/java/duke/exceptions/WrongFindFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"public class WrongFindFormatException extends DukeException {","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"    public WrongFindFormatException() {","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"        super(\"Find command requires a description of what you want to find!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jiarong15":8}},{"path":"src/main/java/duke/exceptions/WrongTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Class of exception that handles marking task","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" * with a wrong format of time","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"public class WrongTimeFormatException extends DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"     * Instantiates a exception that is wrong in its time format","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    public WrongTimeFormatException() {","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"        super(\"Time format needs to be of the form HH:mm!\");","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":15}},{"path":"src/main/java/duke/status/Status.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.status;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Enumeration to indicate if task is completed or not","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"public enum Status {","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"    COMPLETED(\"[X]\"), NOT_COMPLETED(\"[]\");","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    private final String status;","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"    Status(String status) {","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"        this.status \u003d status;","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"     * returns the status of task in their corresponding label format","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * @return String of the status","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    public String getStatus() {","lastModifiedDate":"2021-08-20"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"        return this.status;","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"jiarong15":23}},{"path":"src/main/java/duke/status/typeTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.status;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":" * Enumeration to indicate task name","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"public enum typeTask {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"    TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\");","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"    private final String typeOfTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"    typeTask(String typeOfTask) {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"        this.typeOfTask \u003d typeOfTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"     * returns corresponding name of task","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * @return String of task name","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    public String getTask() {","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"        return this.typeOfTask;","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":23}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.assignment.AssignmentType;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.date.Date;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":" * Class that specifies the properties of deadline task","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    private static final String taskDirectivePoint \u003d \"by\";","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    private static final String assignmentType \u003d AssignmentType.DEADLINE.getStatus();","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    private static final boolean hasDateTime \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     * Initializes deadline class with a description given by user","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of the user input","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongDateFormatException if format of date in deadline is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongTimeFormatException if format of time in deadline is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"    public Deadline(","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"            String desc) throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"        super(desc, hasDateTime, taskDirectivePoint);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"     * Initializes a new deadline class with a change of the completion status","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of the user input","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String updated status of the task","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"     * @param date Optional date if date exist","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    public Deadline(String desc, String newStatus, Optional\u003cDate\u003e date) {","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"        super(desc, newStatus, date);","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"     * returns new deadline task with its completion status updated","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String new completion status of the deadline task","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"    public Deadline updateStatus(String newStatus) {","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"        return new Deadline(this.taskDescription, newStatus, this.date);","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"     * returns the string of the deadline task to be stored in storage","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"    public String getOriginalFormatForStorage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"        return assignmentType + this.status + \" \" +","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"                this.getOutputMessage(this.date.get().getOriginalFormat());","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"    public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"        String outputString \u003d this.getOutputMessage(this.date.get().toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"        String assignmentProg \u003d assignmentType +","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"                this.status + \" \" + outputString;","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"        return assignmentProg;","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"    private String getOutputMessage(String dateExpression) {","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"        StringBuilder sb \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"        String[] updatedDesc \u003d this.taskDescription.split(\" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 0; i \u003c updatedDesc.length; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"            String item \u003d updatedDesc[i];","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"            if (item.contains(\"/\" + taskDirectivePoint)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"            sb.append(item + \" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"        return sb.toString() + \"(\" +","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"                taskDirectivePoint + \": \" +","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"                dateExpression + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"jiarong15":83}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.assignment.AssignmentType;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.date.Date;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":" * Class that specifies the properties of event task","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    private static final String taskDirectivePoint \u003d \"at\";","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    private static final String assignmentType \u003d AssignmentType.EVENT.getStatus();","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    private static final boolean hasDateTime \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * Initializes event class with a description given by user","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of user input","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongDateFormatException if format of date in event is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongTimeFormatException if format of time in event is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"    public Event(","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"            String desc) throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"        super(desc, hasDateTime, taskDirectivePoint);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"     * Initializes a new event class with a change of the completion status","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of the user input","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String updated status of the task","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"     * @param date Optional date if date exist","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"    public Event(String desc, String newStatus, Optional\u003cDate\u003e date) {","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"        super(desc, newStatus, date);","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"     * returns new event task with its completion status updated","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String new completion status of the event task","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"    public Event updateStatus(String newStatus) {","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"        return new Event(this.taskDescription, newStatus, this.date);","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"     * returns the string of the event task to be stored in storage","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"    public String getOriginalFormatForStorage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"        return assignmentType + this.status + \" \" + this.getOutputMessage(this.date.get().getOriginalFormat());","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"    public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"        String outputString \u003d this.getOutputMessage(","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"                this.date.get().toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"        String assignmentProg \u003d assignmentType +","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"                this.status + \" \" + outputString;","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"        return assignmentProg;","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"    private String getOutputMessage(String dateExpression) {","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"        StringBuilder sb \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"        String[] updatedDesc \u003d this.taskDescription.split(\" \");","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"        for (int i \u003d 0; i \u003c updatedDesc.length; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"            String item \u003d updatedDesc[i];","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"            if (item.contains(\"/\" + taskDirectivePoint)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"                break;","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"            sb.append(item + \" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"        return sb.toString() + \"(\" +","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"                taskDirectivePoint + \": \" +","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"                dateExpression + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"jiarong15":82}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.date.Date;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import duke.status.Status;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":" * Abstract class that outlines the base structure of a task","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"    protected final String taskDescription;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    protected final String status;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    protected final Optional\u003cDate\u003e date;","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"     * Initializes a new task object with description ","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"     * of Task and its placement if any.","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of description of task","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"     * @param hasDateTime boolean if the task has a date time attribute","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"     * @param taskDirective String of the task with a placment \"at\" or \"by\"","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongDateFormatException if format of date in a task is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongTimeFormatException if format of time in a task is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"    public Task(","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"            String desc, boolean hasDateTime,","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"            String taskDirective) throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"        this.taskDescription \u003d desc;","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"        this.status \u003d Status.NOT_COMPLETED.getStatus();","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"        this.date \u003d this.getDateAndTime(desc, hasDateTime, taskDirective);","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    private Optional\u003cDate\u003e getDateAndTime(","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"            String desc, boolean hasDateTime,","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"            String taskDirective) throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"        if (hasDateTime) {","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"            String[] descArray \u003d desc.split(\"/\" + taskDirective);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"            String dateAndTime \u003d descArray[1].trim();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"            Date outputDate \u003d new Date(dateAndTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"            return Optional.ofNullable(outputDate);","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"        return Optional.empty();","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"     * Overloaded task constructor to update","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"     * completion status of a task","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"     * @param desc String description of the task","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String updated staus of task","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"     * @param date Optional date atribute of task","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"    public Task(","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"            String desc, String newStatus,","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"            Optional\u003cDate\u003e date) {","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"        this.taskDescription \u003d desc;","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"        this.status \u003d newStatus;","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"    public abstract String getOriginalFormatForStorage();","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"    public abstract Task updateStatus(String newStatus);","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":71}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.assignment.AssignmentType;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.date.Date;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"/**","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":" * Class that specifies the properties of todo task","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":" */","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"    private static final String assignmentType \u003d AssignmentType.TODO.getStatus();","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"    private static final boolean hasDateTime \u003d false;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"     * Initializes todo class with a description given by user","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of user input","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongDateFormatException if format of date in todo is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"     * @throws WrongTimeFormatException if format of time in todo is wrong","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"    public ToDo(","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"            String desc) throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"        super(desc, hasDateTime, \"\");","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"     * Initializes a new todo class with a change of the completion status","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"     * @param desc String of the user input","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String updated status of the task","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"     * @param date Optional date if date exist","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"    public ToDo(String desc, String newStatus, Optional\u003cDate\u003e date) {","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        super(desc, newStatus, date);","lastModifiedDate":"2021-08-29"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    ","lastModifiedDate":"2021-08-29"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"     * returns the string of the todo task to be stored in storage","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"    public String getOriginalFormatForStorage() {","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        return this.toString();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"     * returns new todo task with its completion status updated","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"     * ","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"     * @param newStatus String new completion status of the todo task","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"    public ToDo updateStatus(String newStatus) {","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"        return new ToDo(this.taskDescription, newStatus, this.date);","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"        String assignmentProg \u003d assignmentType +","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"                this.status + \" \" + this.taskDescription;","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"        return assignmentProg;","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"jiarong15":65}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DeleteOutOfBoundsException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.DoneOutOfBoundsException;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"    public void taskList_toString()","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new ToDo(\"read book\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new Event(\"return book /at 2/12/2019 1725\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"        TaskList tasklist \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"        String expectedString \u003d \"1. [T][] read book\" + \"\\n\" + \"2. return book (at: DECEMBER 2 2019 5.25pm\";","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"        assertEquals(expectedString, tasklist.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"    public void taskList_deleteTask_success()","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"            DeleteOutOfBoundsException {","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new ToDo(\"read book\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new Deadline(\"return book /by 2/12/2019 1800\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"        TaskList tasklist \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        Task taskRemoved \u003d tasklist.deleteTask(1);","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"        assertEquals(\"[T][] read book\", taskRemoved.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"    public void testTaskList()","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new ToDo(\"read book\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new Event(\"return book /at 2/12/2019 1800\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"        TaskList tasklist \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"        assertEquals(tasks, tasklist.getTaskList());","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"    public void taskList_markAsDone_Success()","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"            WrongTimeFormatException,","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"            DoneOutOfBoundsException {","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new ToDo(\"read book\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new Event(\"return book /at 2/12/2019 1725\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"        TaskList tasklist \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"        Task doneTask \u003d tasklist.markTaskAsDone(2);","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"        assertEquals(\"[E][X] return book (at: DECEMBER 2 2019 5.25pm)\", doneTask,toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"    public void taskList_lengthSuccess()","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new ToDo(\"read book\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"        tasks.add(new Event(\"return book /at 2/12/2019 1800\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"        TaskList tasklist \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"        assertEquals(2, tasklist.getTaskListLength());","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jiarong15":75}},{"path":"src/test/java/TasksTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.NoSuchCommandException;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"jiarong15"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"jiarong15"},"content":"//import duke.tasks.ToDo;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"jiarong15"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongTimeFormatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"jiarong15"},"content":"import duke.exceptions.WrongDateFormatException;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"jiarong15"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"jiarong15"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"public class TasksTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"jiarong15"},"content":"    public void eventTask_errorDate_exceptionThrown() {","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"jiarong15"},"content":"        assertThrows(WrongDateFormatException.class,","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"                () -\u003e new Event(\"return book /at Aug 1800\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"jiarong15"},"content":"    public void eventTask_errorTime_exceptionThrown() {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"jiarong15"},"content":"        assertThrows(DateTimeParseException.class,","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"jiarong15"},"content":"                () -\u003e new Event(\"return book /at 12/12/2019 6pm\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"jiarong15"},"content":"    public void updateEventStatus_success()","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"jiarong15"},"content":"        String completed \u003d \"[X]\";","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"jiarong15"},"content":"        Task eventTask \u003d new Event(","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"jiarong15"},"content":"                \"return book /at 12/12/2019 18:00\")","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"jiarong15"},"content":"                .updateStatus(completed);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"jiarong15"},"content":"        assertEquals(","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"jiarong15"},"content":"                \"[E][X] return book (at: DECEMBER 12 2019 6pm)\",","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"jiarong15"},"content":"                eventTask.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"jiarong15"},"content":"    public void eventTask_storageString()","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"jiarong15"},"content":"        Task eventTask \u003d new Event(\"project meeting /at 12-12-2019 18:00\");","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"jiarong15"},"content":"        assertEquals(","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"jiarong15"},"content":"                \"[E][] project meeting (at: 12-12-2019 18:00)\",","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"jiarong15"},"content":"                eventTask.getOriginalFormatForStorage());","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"jiarong15"},"content":"    public void eventTask_success() {","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"jiarong15"},"content":"        boolean willFail \u003d false;","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"jiarong15"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"jiarong15"},"content":"            Task eventTask \u003d new Event(\"return book /at 12/12/2019 18:00\");","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"jiarong15"},"content":"            assertFalse(willFail, \"Event task is indeed a success!\");","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"jiarong15"},"content":"        } catch (WrongTimeFormatException | WrongDateFormatException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"jiarong15"},"content":"            willFail \u003d true;","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"jiarong15"},"content":"            assertFalse(willFail, \"Shouldn\u0027t be failing\");","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"jiarong15"},"content":"    public void toDo_success() {","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"jiarong15"},"content":"        boolean willFail \u003d false;","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"jiarong15"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"jiarong15"},"content":"            Task todoTask \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"jiarong15"},"content":"            assertFalse(willFail, \"To Do task is a success\");","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"jiarong15"},"content":"        } catch (WrongTimeFormatException | WrongDateFormatException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"jiarong15"},"content":"            willFail \u003d true;","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"jiarong15"},"content":"            assertFalse(willFail, \"Shouldn\u0027t be failing\");","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"jiarong15"},"content":"    public void toDo_updateStatus_Success()","lastModifiedDate":"2021-08-30"},{"lineNumber":80,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"jiarong15"},"content":"        String completed \u003d \"[X]\";","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"jiarong15"},"content":"        Task toDoEvent \u003d new ToDo(\"read book\").updateStatus(completed);","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"jiarong15"},"content":"        assertEquals(\"[T][X] read book\", toDoEvent.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":85,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"jiarong15"},"content":"    public void toDoTask_updateStatus_storageString()","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"jiarong15"},"content":"        Task toDoTask \u003d new ToDo(\"sleep well\");","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"jiarong15"},"content":"        String completed \u003d \"[X]\";","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"jiarong15"},"content":"        assertEquals(\"[T][X] sleep well\",","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"jiarong15"},"content":"                toDoTask","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"jiarong15"},"content":"                        .updateStatus(completed)","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"jiarong15"},"content":"                        .getOriginalFormatForStorage());","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"jiarong15"},"content":"    public void deadlineTask_Success() {","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"jiarong15"},"content":"        boolean willFail \u003d false;","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"jiarong15"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"jiarong15"},"content":"            Task deadlineTask \u003d new Deadline(\"return book /by 12/12/2019 18:00\");","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"jiarong15"},"content":"            assertFalse(willFail, \"Deadline task is a success\");","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"jiarong15"},"content":"        } catch (WrongTimeFormatException | WrongDateFormatException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"jiarong15"},"content":"            willFail \u003d true;","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"jiarong15"},"content":"            assertFalse(willFail, \"Shouldn\u0027t be failing\");","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"jiarong15"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":109,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":110,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":111,"author":{"gitId":"jiarong15"},"content":"    public void deadlineTask_Date_exceptionThrown() {","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"jiarong15"},"content":"        assertThrows(WrongDateFormatException.class,","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"jiarong15"},"content":"                () -\u003e new Deadline(\"project meeting /by December 12 2019 1800\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":115,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"jiarong15"},"content":"    public void deadlineTask_Time_exceptionThrown() {","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"jiarong15"},"content":"        assertThrows(DateTimeParseException.class,","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"jiarong15"},"content":"                () -\u003e new Deadline(\"project meeting /by 12/08/2020 6pm\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":120,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":122,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":124,"author":{"gitId":"jiarong15"},"content":"    public void deadlineTask_updateStatus_success()","lastModifiedDate":"2021-08-30"},{"lineNumber":125,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":126,"author":{"gitId":"jiarong15"},"content":"        String completed \u003d \"[X]\";","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"jiarong15"},"content":"        Task deadlineTask \u003d new Deadline(","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"jiarong15"},"content":"                \"return book /by 12/12/2019 18:20\")","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"jiarong15"},"content":"                .updateStatus(completed);","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"jiarong15"},"content":"        assertEquals(","lastModifiedDate":"2021-08-30"},{"lineNumber":131,"author":{"gitId":"jiarong15"},"content":"                \"[D][X] return book (by: DECEMBER 12 2019 6.20pm)\",","lastModifiedDate":"2021-08-30"},{"lineNumber":132,"author":{"gitId":"jiarong15"},"content":"                deadlineTask.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":134,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":136,"author":{"gitId":"jiarong15"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":137,"author":{"gitId":"jiarong15"},"content":"    public void deadlineTask_updateStatus_storageString()","lastModifiedDate":"2021-08-30"},{"lineNumber":138,"author":{"gitId":"jiarong15"},"content":"            throws WrongDateFormatException, WrongTimeFormatException {","lastModifiedDate":"2021-08-30"},{"lineNumber":139,"author":{"gitId":"jiarong15"},"content":"        Task deadlineTask \u003d new Deadline(\"return book /by 12/12/2019 18:20\");","lastModifiedDate":"2021-08-30"},{"lineNumber":140,"author":{"gitId":"jiarong15"},"content":"        String completed \u003d \"[X]\";","lastModifiedDate":"2021-08-30"},{"lineNumber":141,"author":{"gitId":"jiarong15"},"content":"        assertEquals(\"[D][X] return book (by: 12-12-2019 18:20)\",","lastModifiedDate":"2021-08-30"},{"lineNumber":142,"author":{"gitId":"jiarong15"},"content":"                deadlineTask","lastModifiedDate":"2021-08-30"},{"lineNumber":143,"author":{"gitId":"jiarong15"},"content":"                        .updateStatus(completed)","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"jiarong15"},"content":"                        .getOriginalFormatForStorage());","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"jiarong15"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"jiarong15"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"jiarong15"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"jiarong15":149}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jiarong15"},"content":"todo borrow book","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"jiarong15"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"jiarong15"},"content":"list","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"jiarong15"},"content":"done 2","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"jiarong15"},"content":"list","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"jiarong15":5}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jiarong15"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\commands\\*.java ..\\src\\main\\java\\assignment\\*.java ..\\src\\main\\java\\exceptions\\*.java ..\\src\\main\\java\\status\\*.java","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jiarong15"},"content":"java -classpath ..\\bin LaunchDuke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jiarong15":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"jiarong15"},"content":"if ! javac -cp ../src/main/java; ./src/main/java/commands; ../src/main/java/assignment; ../src/main/java/exceptions; ../src/main/java/status -Xlint:none -d ../bin ../src/main/java/*.java; ../src/main/java/commands/*.java ../src/main/java/assignment/*.java ../src/main/java/exceptions/*.java ../src/main/java/status/*.java","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"jiarong15"},"content":"java -classpath ../bin LaunchDuke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jiarong15":2,"-":36}}]

[{"path":"src/main/java/Brain.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"public class Brain {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"    private final Speech speech;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"    public Brain(Storage storage, Speech speech){","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"        this.speech \u003d speech;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"     * Takes the first word and decides the next course of action.","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"     * @param input takes in a string based on the scanner","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"     * @return boolean value to indicate whether to continue running the program","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"    public boolean decide(String input) {","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"        String[] parsedInput \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"        boolean cont \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"        String userReq \u003d\"\";","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"        try {","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"            switch (parsedInput[0]) {","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"                speech.goodbye();","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"                cont \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"            case \"list\":","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"                String[] listOutput \u003d storage.getStorage();","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"                speech.listMsg(listOutput, storage);","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"            case \"done\":","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"                userReq \u003d parsedInput[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"                try {","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"                    String outputMsg \u003d storage.done(userReq);","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"                    speech.doneMsg(outputMsg);","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"idgrr"},"content":"                } catch (InvalidDoneFormatException e){","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"                    speech.error(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"idgrr"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"idgrr"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"idgrr"},"content":"                userReq \u003d parsedInput[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"idgrr"},"content":"                try{","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"idgrr"},"content":"                    String deadlineSuccess \u003d storage.deadline(userReq);","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"idgrr"},"content":"                    speech.taskAdded(deadlineSuccess, storage);","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"idgrr"},"content":"                } catch (InvalidDeadlineFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"idgrr"},"content":"                    speech.error(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"idgrr"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"idgrr"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"idgrr"},"content":"                userReq \u003d parsedInput[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"idgrr"},"content":"                String todoSuccess \u003d storage.todo(userReq);","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"idgrr"},"content":"                speech.taskAdded(todoSuccess, storage);","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"idgrr"},"content":"            case \"event\":","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"idgrr"},"content":"                userReq \u003d parsedInput[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"idgrr"},"content":"                try{","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"idgrr"},"content":"                    String eventSuccess \u003d storage.event(userReq);","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"idgrr"},"content":"                    speech.taskAdded(eventSuccess, storage);","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"idgrr"},"content":"                } catch (InvalidEventFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"idgrr"},"content":"                    speech.error(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"idgrr"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"idgrr"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"idgrr"},"content":"                userReq \u003d parsedInput[1];","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"idgrr"},"content":"                try {","lastModifiedDate":"2021-08-18"},{"lineNumber":65,"author":{"gitId":"idgrr"},"content":"                    String deleteSuccess \u003d storage.delete(userReq);","lastModifiedDate":"2021-08-18"},{"lineNumber":66,"author":{"gitId":"idgrr"},"content":"                    speech.taskDeleted(deleteSuccess, storage);","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"idgrr"},"content":"                } catch (InvalidDeleteFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"idgrr"},"content":"                    speech.error(e.toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"idgrr"},"content":"                }","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"idgrr"},"content":"            default:","lastModifiedDate":"2021-08-14"},{"lineNumber":72,"author":{"gitId":"idgrr"},"content":"                throw new IllegalArgumentException();","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"idgrr"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"idgrr"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"idgrr"},"content":"            speech.error(new InvalidInputException(\"User input an invalid action.\").toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":76,"author":{"gitId":"idgrr"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"idgrr"},"content":"            speech.error(new InvalidInputException(\"Missing info after action\").toString());","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"idgrr"},"content":"        return cont;","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":83,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"idgrr":83}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"import java.util.List;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"    private final String eventType;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    private final String time;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"     * Takes in a string and splits msg into based on /by pattern. Set the eventType and time of the instance","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"     * @param input string from the user","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"    public Deadline(String input) throws InvalidDeadlineFormatException {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"        super();","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"        List\u003cString\u003e results \u003d Pattern.compile(\"/by\").splitAsStream(input).map(x-\u003ex.trim()).collect(Collectors.toList());","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"        String key;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"        if (results.size() \u003d\u003d 0){","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDeadlineFormatException(\"Missing description and timestamp\");","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"        } else if (results.size() \u003d\u003d 1){","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDeadlineFormatException(\"Invalid timestamp format\");","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"        key \u003d results.get(0);","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"        if (key.equals(\"\")){","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDeadlineFormatException(\"Missing description \");","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"        System.out.println(results.size());","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"        System.out.println(\"this is the first[\" + key+ \"]\");","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"        String time \u003d \"(by: \" + results.get(1) + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"        super.setDescription(key);","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"        this.eventType \u003d \"[D]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"idgrr"},"content":"     * Returns a string that describes the instance","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"idgrr"},"content":"     * @return String containing details of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"idgrr"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"idgrr"},"content":"    public String toString(){","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"idgrr"},"content":"        return this.eventType + super.toString() + \" \" + this.time;","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"idgrr":46}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    private final Brain brain;","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    private final Speech speech;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"    public Duke() {","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"        speech \u003d new Speech(true, 48);","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"        brain \u003d new Brain(storage, speech);","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"     * Continuous scan loops until user input \"bye\"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"    public void  run(){","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"        speech.welcome();","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"        while (true) {","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"            System.out.print(\"Say something to Duke: \");","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"            boolean cont \u003d brain.decide(input);","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"            if (!cont) {","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"                break;","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"     * Main program","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"     * @param args","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-14"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"idgrr":34,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"import java.util.List;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"    private final String eventType;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    private final String time;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"     * Takes in a string and splits msg into based on /at pattern. Set the eventType and time of the instance","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"     * @param input string from the user","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"    public Event(String input) throws InvalidEventFormatException {","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"        super();","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"        List\u003cString\u003e results \u003d Pattern.compile(\"/at\").splitAsStream(input).map(x-\u003ex.trim()).collect(Collectors.toList());","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"        if (results.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"            throw new InvalidEventFormatException(\"Missing description and empty\");","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"        } else if (results.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"            throw new InvalidEventFormatException(\"Invalid timestamp format\");","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"        String key \u003d results.get(0);","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"        if (key.equals(\"\")) {","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"            throw new InvalidEventFormatException(\" Missing description\");","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"        String time \u003d \"(at: \" + results.get(1) + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"        super.setDescription(key);","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"        this.eventType \u003d \"[E]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"     * Returns a string that describes the instance","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"     * @return String containing details of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"idgrr"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"    public String toString(){","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"idgrr"},"content":"        return this.eventType + super.toString() + \" \" + this.time;","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"idgrr":39}},{"path":"src/main/java/InvalidDeadlineFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":" * Exception to display error made by using in regards to deadline format","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"public class InvalidDeadlineFormatException extends InvalidInputException {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    public InvalidDeadlineFormatException(String explanation){","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"        super(explanation);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"idgrr":8}},{"path":"src/main/java/InvalidDeleteFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":" * Exception to display error made by using in regards to delete format","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"public class InvalidDeleteFormatException extends InvalidInputException {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    public InvalidDeleteFormatException(String explanation) {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"        super(explanation);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"idgrr":8}},{"path":"src/main/java/InvalidDoneFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":" * Exception to display error made by using in regards to done format","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"public class InvalidDoneFormatException extends InvalidInputException{","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    public InvalidDoneFormatException(String explanation){","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"        super(explanation);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"idgrr":8}},{"path":"src/main/java/InvalidEventFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":" * Exception to display error made by using in regards to event format","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"public class InvalidEventFormatException extends InvalidInputException{","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    public InvalidEventFormatException (String explanation) {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"        super(explanation);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"idgrr":8}},{"path":"src/main/java/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":" * Exception that is thrown when user inputs something invalid in general","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    public InvalidInputException( String explanation){","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"        super(explanation);","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"idgrr":8}},{"path":"src/main/java/Speech.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"public class Speech {","lastModifiedDate":"2021-08-14"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"    private final boolean testing;","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"    private int emoticonState;","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    private final int baseBubbleLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"    private final String baseTemplate;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"    private int currentBubbleLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"    public Speech(boolean testMode, int speechLimit){","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"        this.testing \u003d testMode;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"        this.emoticonState \u003d 0;","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"        this.baseBubbleLimit \u003d speechLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"        this.currentBubbleLimit \u003d 0;","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"        this.baseTemplate \u003d String.format(\"%\"+(speechLimit+1)+\"s\",\" \").replace(\u0027 \u0027, \u0027_\u0027);","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"     * Welcome msg speech ( To be called only once at the start of DUKE","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"    public void welcome() {","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"        String[] dukeWelcome \u003d {\"Hello! I\u0027m Duke!\" , \"What can I do for you\"};","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d baseBubbleLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"        speak(dukeWelcome);","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"    public void listMsg(String[] msg, Storage storage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d storage.listMaxLen();","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"        speak(msg);","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"     * Takes in a msg and formats it to the \"done\" success string","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"     * @param msg string that contains details of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"    public void doneMsg(String msg) {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"idgrr"},"content":"        String[] dukeAdded \u003d {\"Nice! I\u0027ve marked this task as done:\", msg};","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d msg.length();","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"idgrr"},"content":"        speak(dukeAdded);","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":43,"author":{"gitId":"idgrr"},"content":"     * Takes in a String and task and formats it to the task_added success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"idgrr"},"content":"     * @param msg string that contains details of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":45,"author":{"gitId":"idgrr"},"content":"     * @param storage takes in storage instance to check how many task left","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"idgrr"},"content":"    public void taskAdded(String msg, Storage storage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"idgrr"},"content":"        int task_left \u003d storage.task_left();","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"idgrr"},"content":"        String[] dukeAddedTask \u003d {\"Got it. I\u0027ve added this task:\", \"  \" + msg, \"Now you have \" + task_left + \" tasks in the list.\"};","lastModifiedDate":"2021-08-15"},{"lineNumber":50,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d msg.length() + 2;","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"idgrr"},"content":"        speak(dukeAddedTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"idgrr"},"content":"     * Takes in a String and task and formats it to the task_deleted success msg","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"idgrr"},"content":"     * @param msg string that contains details of the task","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"idgrr"},"content":"     * @param storage takes in storage instance to check how many task left","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"idgrr"},"content":"    public void taskDeleted(String msg, Storage storage) {","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"idgrr"},"content":"        int task_left \u003d storage.task_left();","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"idgrr"},"content":"        String[] dukeAddedTask \u003d {\"Noted. I\u0027ve removed this task:\", \"  \" + msg, \"Now you have \" + task_left + \" tasks in the list.\"};","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d msg.length() + 2;","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"idgrr"},"content":"        speak(dukeAddedTask);","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"idgrr"},"content":"     * takes in a string and formats it to the error found msg","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"idgrr"},"content":"     * @param error_msg string that contains details of the error","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"idgrr"},"content":"    public void error(String error_msg) {","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"idgrr"},"content":"        String[] dukeError \u003d {error_msg, \"Please try again\" };","lastModifiedDate":"2021-08-18"},{"lineNumber":71,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d dukeError[0].length();","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"idgrr"},"content":"        speak(dukeError);","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"idgrr"},"content":"     * Goodbye msg ( to be called when user inputs \"bye\"","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"idgrr"},"content":"    public void goodbye() {","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d baseBubbleLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":80,"author":{"gitId":"idgrr"},"content":"        speak(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":82,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":84,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":85,"author":{"gitId":"idgrr"},"content":"     * Duke Speech Template","lastModifiedDate":"2021-08-17"},{"lineNumber":86,"author":{"gitId":"idgrr"},"content":"     * @param in takes in a string array and cycle through and printing msg","lastModifiedDate":"2021-08-17"},{"lineNumber":87,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":88,"author":{"gitId":"idgrr"},"content":"    public void speak(String[] in) {","lastModifiedDate":"2021-08-17"},{"lineNumber":89,"author":{"gitId":"idgrr"},"content":"            int limit \u003d baseBubbleLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":90,"author":{"gitId":"idgrr"},"content":"            String base \u003d baseTemplate;","lastModifiedDate":"2021-08-17"},{"lineNumber":91,"author":{"gitId":"idgrr"},"content":"            if (baseBubbleLimit \u003c currentBubbleLimit) {","lastModifiedDate":"2021-08-17"},{"lineNumber":92,"author":{"gitId":"idgrr"},"content":"                limit \u003d currentBubbleLimit;","lastModifiedDate":"2021-08-17"},{"lineNumber":93,"author":{"gitId":"idgrr"},"content":"                base \u003d String.format(\"%\" + (limit + 1) + \"s\", \" \").replace(\u0027 \u0027, \u0027_\u0027);","lastModifiedDate":"2021-08-17"},{"lineNumber":94,"author":{"gitId":"idgrr"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":95,"author":{"gitId":"idgrr"},"content":"            String space \u003d \"          \";","lastModifiedDate":"2021-08-17"},{"lineNumber":96,"author":{"gitId":"idgrr"},"content":"            String topBorder \u003d \"\\n\" + space + \" \" + base + \"\\n\";","lastModifiedDate":"2021-08-18"},{"lineNumber":97,"author":{"gitId":"idgrr"},"content":"            String botBorder \u003d space + \"|\" + base + \"|\\n\" + space + \"|/\\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":98,"author":{"gitId":"idgrr"},"content":"            String emoticon \u003d emoticonRand();","lastModifiedDate":"2021-08-15"},{"lineNumber":99,"author":{"gitId":"idgrr"},"content":"            StringBuilder msges \u003d new StringBuilder();","lastModifiedDate":"2021-08-17"},{"lineNumber":100,"author":{"gitId":"idgrr"},"content":"            for( String x : in){","lastModifiedDate":"2021-08-14"},{"lineNumber":101,"author":{"gitId":"idgrr"},"content":"                msges.append(message_format(x, limit));","lastModifiedDate":"2021-08-17"},{"lineNumber":102,"author":{"gitId":"idgrr"},"content":"            }","lastModifiedDate":"2021-08-14"},{"lineNumber":103,"author":{"gitId":"idgrr"},"content":"            System.out.println( topBorder + msges + botBorder + emoticon);","lastModifiedDate":"2021-08-15"},{"lineNumber":104,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":105,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":107,"author":{"gitId":"idgrr"},"content":"     * Duke speech template","lastModifiedDate":"2021-08-17"},{"lineNumber":108,"author":{"gitId":"idgrr"},"content":"     * @param in takes in a string and coverts it to a string array to be used on speak(String[])","lastModifiedDate":"2021-08-17"},{"lineNumber":109,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":110,"author":{"gitId":"idgrr"},"content":"    public void speak(String in) {","lastModifiedDate":"2021-08-17"},{"lineNumber":111,"author":{"gitId":"idgrr"},"content":"        String[] temp \u003d {in};","lastModifiedDate":"2021-08-14"},{"lineNumber":112,"author":{"gitId":"idgrr"},"content":"        currentBubbleLimit \u003d in.length();","lastModifiedDate":"2021-08-18"},{"lineNumber":113,"author":{"gitId":"idgrr"},"content":"        speak(temp);","lastModifiedDate":"2021-08-14"},{"lineNumber":114,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":115,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":116,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":117,"author":{"gitId":"idgrr"},"content":"     * Formats the msg to be printed so it fits within duke\u0027s speech bubble","lastModifiedDate":"2021-08-17"},{"lineNumber":118,"author":{"gitId":"idgrr"},"content":"     * @param input input to be formatted","lastModifiedDate":"2021-08-17"},{"lineNumber":119,"author":{"gitId":"idgrr"},"content":"     * @param longest maximum spaces","lastModifiedDate":"2021-08-17"},{"lineNumber":120,"author":{"gitId":"idgrr"},"content":"     * @return String that is reformated to fit duke\u0027s speech bubble","lastModifiedDate":"2021-08-17"},{"lineNumber":121,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":122,"author":{"gitId":"idgrr"},"content":"    private String message_format(String input, int longest) {","lastModifiedDate":"2021-08-17"},{"lineNumber":123,"author":{"gitId":"idgrr"},"content":"        String spaces \u003d \"          | \";","lastModifiedDate":"2021-08-14"},{"lineNumber":124,"author":{"gitId":"idgrr"},"content":"        return spaces + String.format(\"%-\"+longest+\"s\", input) +\"|\\n\";","lastModifiedDate":"2021-08-17"},{"lineNumber":125,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":126,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":127,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":128,"author":{"gitId":"idgrr"},"content":"     * Adds a simple emoticon to add variety/ personality to the response printed (basically program glitter)","lastModifiedDate":"2021-08-17"},{"lineNumber":129,"author":{"gitId":"idgrr"},"content":"     * @return String containing the emoticon","lastModifiedDate":"2021-08-17"},{"lineNumber":130,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":131,"author":{"gitId":"idgrr"},"content":"    private String emoticonRand() {","lastModifiedDate":"2021-08-17"},{"lineNumber":132,"author":{"gitId":"idgrr"},"content":"        String[] emoticon \u003d {\"( ﾟ◇ﾟ)/\" ,\"( ＾◡＾)ノ\", \"(*°▽°)ノ\", \"(o^ω^)\" , \"(✿˘▽˘)\"};","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"idgrr"},"content":"        int state \u003d emoticonState;","lastModifiedDate":"2021-08-17"},{"lineNumber":134,"author":{"gitId":"idgrr"},"content":"        emoticonState \u003d (emoticonState+1) % emoticon.length;","lastModifiedDate":"2021-08-17"},{"lineNumber":135,"author":{"gitId":"idgrr"},"content":"        return emoticon[state];","lastModifiedDate":"2021-08-17"},{"lineNumber":136,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":137,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":138,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":139,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"idgrr":139}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"import java.util.Collection;","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"import java.util.LinkedHashMap;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"public class Storage {","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"    private final LinkedHashMap\u003cString, Task\u003e mapper;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"    private int listLen;","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"     * Basic constructor","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"    public Storage() {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"        mapper \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"        listLen \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"     * Prints a basic \"Added ____\"","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"     * @param action the string that describes the task","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"     * @return String that contains the message output of adding task","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"    public String basicAdd(String action) {","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"        mapper.put(action, new Task(action));","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"        return \"added: \" + action;","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"     * Identify, Search and Modify the isDone status of task based on the getStorage printed msg","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"     * @param input tajes in the input from user","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"     * @return String that contains the done success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"     * @throws NumberFormatException if character after \"done\" is not an integer","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"     * @throws NullPointerException if the number provided by user is not found in the getStorage printed msg","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"    public String done (String input) throws InvalidDoneFormatException {","lastModifiedDate":"2021-08-18"},{"lineNumber":37,"author":{"gitId":"idgrr"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":38,"author":{"gitId":"idgrr"},"content":"            int list_no \u003d Integer.parseInt(input.trim()); //possible NumberFormatException","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"idgrr"},"content":"            Collection\u003cTask\u003e values \u003d mapper.values();","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"idgrr"},"content":"            Task second \u003d values.stream().skip(list_no-1).findFirst().orElse(null); // possible for task to be null","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"idgrr"},"content":"            String key \u003d second.getDescription();","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"idgrr"},"content":"            mapper.put(key, mapper.get(key).setDone());","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"idgrr"},"content":"            return mapper.get(key).toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"idgrr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDoneFormatException(\"Ensure that list position in NUMERICAL form\");","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"idgrr"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDoneFormatException(\"Ensure that number inputted can be found in the list\");","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":49,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":50,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":51,"author":{"gitId":"idgrr"},"content":"    public String delete(String input) throws InvalidDeleteFormatException{","lastModifiedDate":"2021-08-18"},{"lineNumber":52,"author":{"gitId":"idgrr"},"content":"        try {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"idgrr"},"content":"            int list_no \u003d Integer.parseInt(input.trim());","lastModifiedDate":"2021-08-18"},{"lineNumber":54,"author":{"gitId":"idgrr"},"content":"            Collection\u003cTask\u003e values \u003d mapper.values();","lastModifiedDate":"2021-08-18"},{"lineNumber":55,"author":{"gitId":"idgrr"},"content":"            Task second \u003d values.stream().skip(list_no-1).findFirst().orElse(null); // possible for task to be null","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"idgrr"},"content":"            String key \u003d second.getDescription();","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"idgrr"},"content":"            mapper.remove(key);","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"idgrr"},"content":"            return second.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"idgrr"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":60,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDeleteFormatException(\"Ensure that list position in NUMERICAL form\");","lastModifiedDate":"2021-08-18"},{"lineNumber":61,"author":{"gitId":"idgrr"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":62,"author":{"gitId":"idgrr"},"content":"            throw new InvalidDeleteFormatException(\"Ensure that number inputted can be found in the list\");","lastModifiedDate":"2021-08-18"},{"lineNumber":63,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":64,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":67,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":68,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":69,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":70,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"idgrr"},"content":"     * Creates a task instance, adds to storage and prints a success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"idgrr"},"content":"     * @param input tajes in the input from user","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"idgrr"},"content":"     * @return String that contains the success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"idgrr"},"content":"    public String todo (String input) {","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"idgrr"},"content":"        Todo todo \u003d new Todo(input);","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"idgrr"},"content":"        mapper.put(todo.getDescription(), todo);","lastModifiedDate":"2021-08-15"},{"lineNumber":78,"author":{"gitId":"idgrr"},"content":"        return todo.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":79,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":80,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"idgrr"},"content":"     * Creates a task instance, adds to storage and prints a success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"idgrr"},"content":"     * @param input tajes in the input from user","lastModifiedDate":"2021-08-17"},{"lineNumber":83,"author":{"gitId":"idgrr"},"content":"     * @return String that contains the success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":84,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":85,"author":{"gitId":"idgrr"},"content":"    public String deadline (String input) throws InvalidDeadlineFormatException {","lastModifiedDate":"2021-08-18"},{"lineNumber":86,"author":{"gitId":"idgrr"},"content":"        Deadline deadline \u003d new Deadline(input);","lastModifiedDate":"2021-08-15"},{"lineNumber":87,"author":{"gitId":"idgrr"},"content":"        mapper.put(deadline.getDescription(), deadline);","lastModifiedDate":"2021-08-15"},{"lineNumber":88,"author":{"gitId":"idgrr"},"content":"        return deadline.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":89,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":90,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":91,"author":{"gitId":"idgrr"},"content":"     * Creates a task instance, adds to storage and prints a success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":92,"author":{"gitId":"idgrr"},"content":"     * @param input tajes in the input from user","lastModifiedDate":"2021-08-17"},{"lineNumber":93,"author":{"gitId":"idgrr"},"content":"     * @return String that contains the success msg","lastModifiedDate":"2021-08-17"},{"lineNumber":94,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":95,"author":{"gitId":"idgrr"},"content":"    public String event (String input) throws InvalidEventFormatException {","lastModifiedDate":"2021-08-18"},{"lineNumber":96,"author":{"gitId":"idgrr"},"content":"        Event event \u003d new Event(input);","lastModifiedDate":"2021-08-15"},{"lineNumber":97,"author":{"gitId":"idgrr"},"content":"        mapper.put(event.getDescription(), event);","lastModifiedDate":"2021-08-15"},{"lineNumber":98,"author":{"gitId":"idgrr"},"content":"        return event.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":99,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":100,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":101,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":102,"author":{"gitId":"idgrr"},"content":"     * Returns the number of task in the list ( does not matter if its done or not )","lastModifiedDate":"2021-08-17"},{"lineNumber":103,"author":{"gitId":"idgrr"},"content":"     * @return int returns the current list size","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":105,"author":{"gitId":"idgrr"},"content":"    public int task_left() {","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"idgrr"},"content":"        return mapper.size();","lastModifiedDate":"2021-08-15"},{"lineNumber":107,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":108,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":109,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":110,"author":{"gitId":"idgrr"},"content":"     * Details of the task and list them in insertion order","lastModifiedDate":"2021-08-17"},{"lineNumber":111,"author":{"gitId":"idgrr"},"content":"     * @return String that contains the details of task in list","lastModifiedDate":"2021-08-17"},{"lineNumber":112,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":113,"author":{"gitId":"idgrr"},"content":"    public String[] getStorage() {","lastModifiedDate":"2021-08-17"},{"lineNumber":114,"author":{"gitId":"idgrr"},"content":"        if (mapper.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-18"},{"lineNumber":115,"author":{"gitId":"idgrr"},"content":"            return new String[]{\"Empty List\"};","lastModifiedDate":"2021-08-18"},{"lineNumber":116,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-18"},{"lineNumber":117,"author":{"gitId":"idgrr"},"content":"        int maxLen \u003d 0;","lastModifiedDate":"2021-08-18"},{"lineNumber":118,"author":{"gitId":"idgrr"},"content":"        Collection\u003cTask\u003e values \u003d mapper.values();","lastModifiedDate":"2021-08-15"},{"lineNumber":119,"author":{"gitId":"idgrr"},"content":"        Iterator\u003cTask\u003e look \u003d values.iterator();","lastModifiedDate":"2021-08-15"},{"lineNumber":120,"author":{"gitId":"idgrr"},"content":"        String[] check \u003d new String[mapper.size()];;","lastModifiedDate":"2021-08-15"},{"lineNumber":121,"author":{"gitId":"idgrr"},"content":"        int iter_pos \u003d 0;","lastModifiedDate":"2021-08-15"},{"lineNumber":122,"author":{"gitId":"idgrr"},"content":"        while (look.hasNext()){","lastModifiedDate":"2021-08-15"},{"lineNumber":123,"author":{"gitId":"idgrr"},"content":"            String p_pos \u003d (iter_pos + 1) + \". \";","lastModifiedDate":"2021-08-15"},{"lineNumber":124,"author":{"gitId":"idgrr"},"content":"            check[iter_pos] \u003d p_pos + look.next().toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":125,"author":{"gitId":"idgrr"},"content":"            maxLen \u003d Math.max(maxLen, check[iter_pos].length());","lastModifiedDate":"2021-08-18"},{"lineNumber":126,"author":{"gitId":"idgrr"},"content":"            iter_pos++;","lastModifiedDate":"2021-08-15"},{"lineNumber":127,"author":{"gitId":"idgrr"},"content":"        }","lastModifiedDate":"2021-08-14"},{"lineNumber":128,"author":{"gitId":"idgrr"},"content":"        listLen \u003d maxLen;","lastModifiedDate":"2021-08-18"},{"lineNumber":129,"author":{"gitId":"idgrr"},"content":"        return check;","lastModifiedDate":"2021-08-17"},{"lineNumber":130,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":131,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":132,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":133,"author":{"gitId":"idgrr"},"content":"     * Retyrns the number of task in the list","lastModifiedDate":"2021-08-18"},{"lineNumber":134,"author":{"gitId":"idgrr"},"content":"     * @return int","lastModifiedDate":"2021-08-18"},{"lineNumber":135,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":136,"author":{"gitId":"idgrr"},"content":"    public int listMaxLen(){","lastModifiedDate":"2021-08-18"},{"lineNumber":137,"author":{"gitId":"idgrr"},"content":"        return listLen;","lastModifiedDate":"2021-08-18"},{"lineNumber":138,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":139,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":140,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"idgrr":140}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"    protected String description;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"     * Basic constructor for task (used during subclass instance)","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"    public Task(){","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"        setNotDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"     * Basic constructor for task, takes in a string that describes the task","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"     * @param description contains details of the task description","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"    public Task(String description){","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"        setNotDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"        setDescription(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"     * Basic constructor for an empty task","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"     * @return Task that has an empty description","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"    public static Task empty(){","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"        return new Task(\"\");","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"idgrr"},"content":"     * Sets the description of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"idgrr"},"content":"     * @param input set task description","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":33,"author":{"gitId":"idgrr"},"content":"    protected void setDescription(String input){","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"idgrr"},"content":"        this.description \u003d input;","lastModifiedDate":"2021-08-17"},{"lineNumber":35,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"idgrr"},"content":"     * Sets the Task state to true","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"idgrr"},"content":"     * @return Task instance itself","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"idgrr"},"content":"    public Task setDone(){","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"idgrr"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"idgrr"},"content":"        return this;","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":47,"author":{"gitId":"idgrr"},"content":"     * Sets the Task state to false","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"idgrr"},"content":"     * @return Task instance itself","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":50,"author":{"gitId":"idgrr"},"content":"    public Task setNotDone(){","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"idgrr"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"idgrr"},"content":"        return this;","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":55,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"idgrr"},"content":"     * Returns task description","lastModifiedDate":"2021-08-17"},{"lineNumber":57,"author":{"gitId":"idgrr"},"content":"     * @return String","lastModifiedDate":"2021-08-17"},{"lineNumber":58,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":59,"author":{"gitId":"idgrr"},"content":"    public String getDescription(){","lastModifiedDate":"2021-08-15"},{"lineNumber":60,"author":{"gitId":"idgrr"},"content":"        return this.description;","lastModifiedDate":"2021-08-15"},{"lineNumber":61,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":62,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":63,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"idgrr"},"content":"     * Returns a string that describes the instance","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"idgrr"},"content":"     * @return String containing details of the task","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"idgrr"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"idgrr"},"content":"    public String toString(){","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"idgrr"},"content":"        String state \u003d isDone ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"idgrr"},"content":"        return state + this.description;","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"idgrr":73}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"    private final String eventType;","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"     * Takes in a string Set the eventType and description of the instance","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"     * @param input","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"    public Todo(String input){","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"        super();","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"        String key \u003d input.trim();","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"        super.setDescription(key);","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"        this.eventType \u003d \"[T]\";","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"    public String toString(){","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"        return this.eventType + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"idgrr":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":2,"author":{"gitId":"idgrr"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"idgrr"},"content":" ","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"idgrr"},"content":"done one","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"idgrr"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"idgrr"},"content":"event","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"idgrr"},"content":"to do","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"idgrr"},"content":"todo task 1","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"idgrr"},"content":"todo task 2","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"idgrr"},"content":"todo task 3","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"idgrr"},"content":"todo 123456789123456789123456789123456789123456789123456789123456789","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"idgrr"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"idgrr"},"content":"done 3","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"idgrr"},"content":"event event at /at tonight","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"idgrr"},"content":"event event by /by tonight","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"idgrr"},"content":"deadline dead at /at tonight","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"idgrr"},"content":"deadline dead by /by tonight","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"idgrr"},"content":"done 5","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"idgrr"},"content":"done 6","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"idgrr"},"content":"list","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"idgrr"},"content":"bye","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"idgrr":26}}]

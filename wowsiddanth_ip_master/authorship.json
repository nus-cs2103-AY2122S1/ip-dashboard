[{"path":"src/main/java/petal/Petal.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.components.Parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import petal.components.Storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"import petal.components.TaskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-13"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":" * The class for the Petal bot. It is able to respond to","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":" * a certain number of pre-determined commands in order to add certain","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":" * activities and track them.","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"public class Petal {","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"    //Boolean representing if the user has said bye","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"    public static boolean bye \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    private final Parser parser;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-13"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the Duke class","lastModifiedDate":"2021-08-13"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-13"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"    public Petal() {","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        storage \u003d new Storage(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"        parser \u003d new Parser(storage, taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-13"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"     * Method to give the start message and to run the bot.","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-13"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"    public void run() {","lastModifiedDate":"2021-08-17"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"        storage.createDirectory();","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"        while (!bye) {","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"            String message \u003d scanner.nextLine();","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"            parser.handleInput(message.trim().toLowerCase());","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"        scanner.close();","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-13"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-13"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-21"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"        Petal petal \u003d new Petal();","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"        petal.run();","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-13"}],"authorContributionMap":{"wowsiddanth":46,"-":2}},{"path":"src/main/java/petal/components/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.components;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.Petal;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import petal.exception.*;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"public class Parser {","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"    public Parser(Storage storage, TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"     * Method that formats the message to be displayed. It splits the input and takes","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"     * the first word (assumed to be command if format followed) and reacts accordingly","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"     * @param message User input","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"    public void handleInput(String message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"            message +\u003d \" \"; //So blank inputs can be handled","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"            String command \u003d message.substring(0, message.indexOf(\" \"));","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"            String formatted \u003d message.substring(message.indexOf(\u0027 \u0027) + 1).trim();","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"            switch (command) { //Checks first word in string","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"                case \"list\":","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"                    ui.output(taskList.printList());","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"                case \"bye\":","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"                    storage.saveTasks();","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"                    Petal.bye \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"                case \"done\":","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"                    taskList.markTaskAsDone(formatted);","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"                case \"delete\":","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"                    taskList.deleteTask(formatted);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"                case \"todo\":","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"                    taskList.handleTasks(\"todo\", formatted);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"                case \"deadline\":","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"wowsiddanth"},"content":"                    taskList.handleTasks(\"deadline\", formatted);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"                case \"date\":","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"wowsiddanth"},"content":"                    taskList.tasksOnThisDay(formatted);","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"wowsiddanth"},"content":"                case \"event\":","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"wowsiddanth"},"content":"                    taskList.handleTasks(\"event\", formatted);","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"wowsiddanth"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"wowsiddanth"},"content":"                default: //All messages here do not meet the required format or are unintelligible","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wowsiddanth"},"content":"                    throw new InvalidInputException(\"I do not understand what you mean :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wowsiddanth"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wowsiddanth"},"content":"        } catch (PetalException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wowsiddanth"},"content":"            ui.output(e.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"wowsiddanth"},"content":"            ui.output(Responses.REQUIRED_FORMAT);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"wowsiddanth":63}},{"path":"src/main/java/petal/components/Responses.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.components;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"public enum Responses {","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"    //Greetings","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"    WELCOME_BACK(\"Welcome back! It definitely is good to see you again :D\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"    LINE(\"ꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤ\"","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"          + \"ꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤ\"","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"          + \"ꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤꕤ\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"    START_MESSAGE(\"Welcome to Petal (•◡•)/\" + \"\\nI am the best chat bot you\u0027ll meet! Don\u0027t be shy, say something! :P\" +","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"                  \"\\nPssss here\u0027s a disclaimer: use the \u0027bye\u0027 command to exit or else your tasks won\u0027t save properly!\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"    //Exception responses","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"    UNINTELLIGIBLE(\"I do not understand what you mean :(\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"    REQUIRED_FORMAT(\"Use \u0027todo \u003cinsert activity\u003e\u0027 to create a to-do!\" +","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"                    \"\\nUse \u0027deadline \u003cinsert activity\u003e /by \u003cDD/MM/YYYY\u003e \u003cTime in 24-hour format\u003e\u0027 \" +","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"                    \"to create an activity with a deadline!\" +","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"                    \"\\nUse \u0027event \u003cinsert activity\u003e /at \u003cDD/MM/YYYY\u003e \u003cStart Time\u003e \u003cEnd Time\u003e\u0027 \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"                    \"to create an activity with a start/end time!\" +","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"                    \"\\nUse \u0027delete \u003cinsert task number\u003e to delete a task!\" +","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"                    \"\\nUse \u0027date \u003cDD/MM/YYYY\u003e\u0027 to get the tasks on that date!\" +","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"                    \"\\nUse \u0027done \u003cinsert task number\u003e\u0027 to mark task as done!\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"    INVALID_TASK_NUMBER(\"Invalid task number given! Please enter another value!\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"    FILE_ERROR(\"Something when wrong whilst creating/accessing these files :/\\n\" +","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"               \"As such, the saving/retrieval of tasks will be turned off. Sorry!\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"    SAVE_ERROR(\"Sorry, the tasks couldn\u0027t be saved properly :/\u0027\"),","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"    GOODBYE(\"You\u0027re leaving :( I hope you return soon!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"    private final String response;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"    private Responses(String response) {","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"        this.response \u003d response;","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"        return this.response;","lastModifiedDate":"2021-08-21"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"wowsiddanth":39}},{"path":"src/main/java/petal/components/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.components;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.exception.InvalidInputException;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import petal.task.*;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"import java.util.Objects;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"public class Storage {","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    //Boolean representing if saving should be performed","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    public static boolean savedProperly;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"    //Relative path of the folder containing Tasks.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"    private final String folderPath;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"    //Relative path of the txt file with the tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    public Storage(TaskList taskList) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"        this.folderPath \u003d System.getProperty(\"user.dir\") + \"/PetalData\";","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"        this.filePath \u003d folderPath + \"/Tasks.txt\";","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"        savedProperly \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"     * Method to create the main PetalData folder, containing Tasks.txt","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"    public void createDirectory() {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"            if (retrieveTasks())","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"                return;","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"            Path path \u003d Paths.get(folderPath);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"            Files.createDirectories(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"            File petalData \u003d new File(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"            petalData.createNewFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"wowsiddanth"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"wowsiddanth"},"content":"            savedProperly \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"            printMessage(Responses.FILE_ERROR);","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"wowsiddanth"},"content":"        printMessage(Responses.START_MESSAGE);","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"wowsiddanth"},"content":"     * Method to parse the text from Tasks.txt in tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wowsiddanth"},"content":"     * @return True if tasks were retrieved, false if no tasks (new user) or exception occurred","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wowsiddanth"},"content":"    public boolean retrieveTasks() {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"wowsiddanth"},"content":"            File tasks \u003d new File(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"wowsiddanth"},"content":"            Scanner scanner \u003d new Scanner(tasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"wowsiddanth"},"content":"            ArrayList\u003cTask\u003e toBeAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"wowsiddanth"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"wowsiddanth"},"content":"                String taskLine \u003d scanner.nextLine();","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"wowsiddanth"},"content":"                String[] components \u003d taskLine.split(\"\\\\|\");","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"wowsiddanth"},"content":"                boolean isDone \u003d Objects.equals(components[1], \"X\");","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"wowsiddanth"},"content":"                switch (components[0]) {","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"wowsiddanth"},"content":"                    case \"T\":","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"wowsiddanth"},"content":"                        toBeAdded.add(new ToDo(components[2], isDone));","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"wowsiddanth"},"content":"                        break;","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"wowsiddanth"},"content":"                    case \"D\":","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"wowsiddanth"},"content":"                        toBeAdded.add(new Deadline(components[2], components[3], isDone));","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"wowsiddanth"},"content":"                        break;","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"wowsiddanth"},"content":"                    case \"E\":","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"wowsiddanth"},"content":"                        toBeAdded.add(new Event(components[2], components[3], isDone));","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"wowsiddanth"},"content":"                        break;","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"wowsiddanth"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"wowsiddanth"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"wowsiddanth"},"content":"            taskList.addTask(toBeAdded);","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"wowsiddanth"},"content":"            return true;","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"wowsiddanth"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"wowsiddanth"},"content":"            return false;","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"wowsiddanth"},"content":"     * Method to save the tasks. If the folder was not able to be created, Petal does not","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"wowsiddanth"},"content":"     * save any of the tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"wowsiddanth"},"content":"     * @throws InvalidInputException Thrown if tasks are not saved properly","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"wowsiddanth"},"content":"    public void saveTasks() throws InvalidInputException { //TODO: Double check this!","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"wowsiddanth"},"content":"        if (!savedProperly) {","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"wowsiddanth"},"content":"            return;","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"wowsiddanth"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"wowsiddanth"},"content":"            fileWriter.write(taskList.formatForSaving());","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"wowsiddanth"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"wowsiddanth"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"wowsiddanth"},"content":"            throw new InvalidInputException(Responses.SAVE_ERROR, e);","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"wowsiddanth"},"content":"        } finally {","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"wowsiddanth"},"content":"            ui.goodBye();","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"wowsiddanth"},"content":"     * Method to add the indentation to the message","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"wowsiddanth"},"content":"     * @param message Message to be printed","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"wowsiddanth"},"content":"    public void printMessage(Responses message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"wowsiddanth"},"content":"        System.out.println(Responses.LINE + \"\\n\" + message.toString() + \"\\n\" + Responses.LINE);","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"wowsiddanth":113}},{"path":"src/main/java/petal/components/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.components;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.exception.*;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import petal.task.*;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"public class TaskList {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"    //List of user inputted tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"     * Overloaded method to add previously saved tasks to the list of tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     * @param addTasks The arraylist of previously saved tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"    public void addTask(ArrayList\u003cTask\u003e addTasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"        tasks.addAll(addTasks);","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        ui.output(Responses.WELCOME_BACK);","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"     * Method to add a task to list of tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"     * @param task The task to be added","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"        String plural \u003d (tasks.size() + 1) \u003e 0 ? \" tasks!\" : \" task!\";","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"        ui.output(\"Okay. I\u0027ve added this task:\\n\" + task + \"\\nYou now have \" + tasks.size() + plural);","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"     * Method to delete a task from the list of tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"     * @param index The message given by the user input","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"     * @throws InvalidInputException Thrown if no index inputted by the user or","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"     *                               when index is out-of-bounds/not valid int or when","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"     *                               desc is empty","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"wowsiddanth"},"content":"    public void deleteTask(String index) throws InvalidInputException, EmptyDescException {","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"            int indexOfTask \u003d Integer.parseInt(index) - 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"wowsiddanth"},"content":"            Task toBeDeleted \u003d tasks.remove(indexOfTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"wowsiddanth"},"content":"            ui.output(\"Okay. I\u0027ve deleted this task:\\n\" + toBeDeleted  + \"\\nYou now have \" + tasks.size()","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"wowsiddanth"},"content":"                    + \" task(s)!\");","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"wowsiddanth"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"wowsiddanth"},"content":"            throw new InvalidInputException(\"Invalid task number given! Please enter another value!\", e);","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wowsiddanth"},"content":"     * Method to handle the tasks, depending on the command given","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"wowsiddanth"},"content":"     * @param type The type of task: To.Do, deadline, event","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The desc/time of the task","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"wowsiddanth"},"content":"     * @throws EmptyDescException Thrown when the task lacks a description","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"wowsiddanth"},"content":"     * @throws InvalidInputException Thrown when an invalid format is given or when a time is not given","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"wowsiddanth"},"content":"    public void handleTasks(String type, String message) throws EmptyDescException, InvalidInputException {","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"wowsiddanth"},"content":"        Task task;","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"wowsiddanth"},"content":"        String[] deadlineEvent \u003d type.equals(\"deadline\") ? message.split(\"/by\")","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"wowsiddanth"},"content":"                : message.split(\"/at\");","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"wowsiddanth"},"content":"        if (message.isBlank() || deadlineEvent[0].isBlank()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"wowsiddanth"},"content":"            throw new EmptyDescException(\"The description cannot be empty! Enter a valid one! :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"wowsiddanth"},"content":"        if ((type.equals(\"deadline\") || type.equals(\"event\")) \u0026\u0026 deadlineEvent.length \u003c 2) {","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"wowsiddanth"},"content":"            //No time given or the command /by or /at wasn\u0027t given by the user","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"wowsiddanth"},"content":"            throw new InvalidInputException(\"The format used was wrong! Try again :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"wowsiddanth"},"content":"        switch (type) {","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"wowsiddanth"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"wowsiddanth"},"content":"                task \u003d new ToDo(message, false);","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"wowsiddanth"},"content":"                break;","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"wowsiddanth"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-22"},{"lineNumber":80,"author":{"gitId":"wowsiddanth"},"content":"                try {","lastModifiedDate":"2021-08-22"},{"lineNumber":81,"author":{"gitId":"wowsiddanth"},"content":"                    task \u003d new Deadline(deadlineEvent[0], deadlineEvent[1], false);","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"wowsiddanth"},"content":"                } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"wowsiddanth"},"content":"                    throw new InvalidInputException(\"The date/time format used was wrong! Try again :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"wowsiddanth"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"wowsiddanth"},"content":"                break;","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"wowsiddanth"},"content":"            default: //Represents the Event task","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"wowsiddanth"},"content":"                try {","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"wowsiddanth"},"content":"                    task \u003d new Event(deadlineEvent[0], deadlineEvent[1], false);","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"wowsiddanth"},"content":"                } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"wowsiddanth"},"content":"                    throw new InvalidInputException(\"The date/time format used was wrong! Try again :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"wowsiddanth"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"wowsiddanth"},"content":"        addTask(task);","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"wowsiddanth"},"content":"     * Method to mark a particular task as done","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"wowsiddanth"},"content":"     * @param indexOfTask String representation of the index of the task","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"wowsiddanth"},"content":"     * @throws IndexOutOfBoundsException Thrown if string is not within size of list","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"wowsiddanth"},"content":"     * @throws NumberFormatException Thrown if string cannot be converted into valid int","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"wowsiddanth"},"content":"    public void markTaskAsDone(String indexOfTask) throws EmptyDescException, InvalidInputException {","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"wowsiddanth"},"content":"            Task taskToBeCompleted \u003d tasks.get(Integer.parseInt(indexOfTask) - 1);","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"wowsiddanth"},"content":"            taskToBeCompleted.taskDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"wowsiddanth"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"wowsiddanth"},"content":"            throw new InvalidInputException(\"Invalid task number given! Please enter another value!\", e);","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"wowsiddanth"},"content":"     * Method that returns the string representations of the tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"wowsiddanth"},"content":"     * @return String containing the number, type, and description of tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"wowsiddanth"},"content":"    public String printList() {","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"wowsiddanth"},"content":"        if (tasks.size() \u003d\u003d 0)","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"wowsiddanth"},"content":"            return \"No items in list yet!\";","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"wowsiddanth"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"wowsiddanth"},"content":"        StringBuilder list \u003d new StringBuilder();","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"wowsiddanth"},"content":"        for (Task m : tasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"wowsiddanth"},"content":"            //I do this check to ensure there isn\u0027t a newline at the top","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"wowsiddanth"},"content":"            if (count \u003d\u003d 1) {","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"wowsiddanth"},"content":"                list.append(count++).append(\". \").append(m);","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"wowsiddanth"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"wowsiddanth"},"content":"                list.append(\"\\n\").append(count++).append(\". \").append(m);","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"wowsiddanth"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"wowsiddanth"},"content":"        return list.toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":129,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":130,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":131,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":132,"author":{"gitId":"wowsiddanth"},"content":"     * Method that takes the tasks and returns a formatted string representation","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"wowsiddanth"},"content":"     * which can be easily parsed by retrieveTasks() once the program is run again","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"wowsiddanth"},"content":"     * @return Formatted string representation of all the user-added tasks","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"wowsiddanth"},"content":"    public String formatForSaving() {","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"wowsiddanth"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"wowsiddanth"},"content":"            return \"\";","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"wowsiddanth"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"wowsiddanth"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-08-22"},{"lineNumber":142,"author":{"gitId":"wowsiddanth"},"content":"        for (Task m : tasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":143,"author":{"gitId":"wowsiddanth"},"content":"            if (count \u003d\u003d 1) {","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"wowsiddanth"},"content":"                result.append(m.strForSaving());","lastModifiedDate":"2021-08-22"},{"lineNumber":145,"author":{"gitId":"wowsiddanth"},"content":"            } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":146,"author":{"gitId":"wowsiddanth"},"content":"                result.append(\"\\n\").append(m.strForSaving());","lastModifiedDate":"2021-08-22"},{"lineNumber":147,"author":{"gitId":"wowsiddanth"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"wowsiddanth"},"content":"            count++;","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"wowsiddanth"},"content":"        return result.toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"wowsiddanth"},"content":"    public void tasksOnThisDay(String date) throws InvalidInputException {","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"wowsiddanth"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"wowsiddanth"},"content":"            String deadlines \u003d Deadline.deadlinesOnDate(date);","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"wowsiddanth"},"content":"            String events \u003d Event.eventsOnDate(date);","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"wowsiddanth"},"content":"            ui.output(deadlines + \"\\n\" + events);","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"wowsiddanth"},"content":"        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"wowsiddanth"},"content":"            throw new InvalidInputException(\"The date/time format used was wrong! Try again :(\");","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"wowsiddanth":164}},{"path":"src/main/java/petal/components/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.components;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"public class Ui {","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"     * Method for Petal to say goodbye. In the case saveTasks() throws an error,","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"     * Petal does not save any of the tasks.","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"    public void goodBye() {","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"        output(Responses.GOODBYE);","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"     * Method to add the indentation to the message","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"     * @param message Message to be printed","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"    public void output(Responses message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"        System.out.println(Responses.LINE + \"\\n\" + message.toString() + \"\\n\" + Responses.LINE);","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     * Method to add the indentation to the message","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     * @param message Message to be printed","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"    public void output(String message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        System.out.println(Responses.LINE + \"\\n\" + message + \"\\n\" + Responses.LINE);","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"wowsiddanth":29}},{"path":"src/main/java/petal/exception/EmptyDescException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.exception;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.components.Responses;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":" * EmptyDescException class. Subclass of PetalException.","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":" * Thrown when user does not give a description for Event/Deadline.","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":" * Example: \"deadline /by 8pm\"","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"public class EmptyDescException extends PetalException {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the EmptyDescException","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The exception message","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"    public EmptyDescException(String message) {","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"        super(message);","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the EmptyDescException (Used as wrapper)","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The exception message","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     * @param cause Initial Cause","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"    public EmptyDescException(String message, Throwable cause) {","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        super(message, cause);","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the EmptyDescException (Used as wrapper)","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"     * @param response The exception message","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"     * @param cause Initial Cause","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"    public EmptyDescException(Responses response, Throwable cause) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"        super(response.toString(), cause);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":38}},{"path":"src/main/java/petal/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.exception;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.components.Responses;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":" * InvalidInputException class, subclass of PetalException.","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":" * Thrown when user enters something unintelligible (\"random command\")","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":" * or when the user enters the wrong format (\"deadline go for a run /at 6pm\")","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"public class InvalidInputException extends PetalException {","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for InvalidInputException","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The exception message","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"    public InvalidInputException(String message) {","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"        super(message);","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for InvalidInputException (Used as wrapper)","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The exception message","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     * @param cause Initial cause","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"    public InvalidInputException(String message, Throwable cause) {","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        super(message, cause);","lastModifiedDate":"2021-08-16"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for InvalidInputException (Used as wrapper)","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"     * @param response The exception message","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"     * @param cause Initial cause","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"    public InvalidInputException(Responses response, Throwable cause) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"        super(response.toString(), cause);","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":38}},{"path":"src/main/java/petal/exception/PetalException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.exception;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":" * The parent, PetalException. It represents all possible","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":" * exceptions in relation to the Petal bot.","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"public class PetalException extends Exception {","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the PetalException class","lastModifiedDate":"2021-08-14"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The message","lastModifiedDate":"2021-08-14"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"    public PetalException(String message) {","lastModifiedDate":"2021-08-14"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"        super(message);","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the PetalException class (Used as Wrapper)","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"     * @param message The exception message","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"     * @param cause Initial cause","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"    public PetalException(String message, Throwable cause) {","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"        super(message, cause);","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":26}},{"path":"src/main/java/petal/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.task;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":" * Deadline class, subclass of Task","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":" * Encapsulates Task with end time","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"    private final String dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    private final LocalTime time;","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"    private static final HashMap\u003cLocalDate, ArrayList\u003cDeadline\u003e\u003e dateMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     * The constructor for the Deadline class","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"     * @param description The description of the object","lastModifiedDate":"2021-08-14"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"     * @param dateTime The date given by the user","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    public Deadline(String description, String dateTime, boolean isDone) {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"        super(description.trim(), isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"        this.dateTime \u003d (dateTime \u003d dateTime.trim());","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"        String[] splitByWhiteSpace \u003d dateTime.split(\" \");","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"        this.date \u003d parseDate(splitByWhiteSpace[0]);","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"        this.time \u003d parseTime(splitByWhiteSpace[1]);","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"        addDeadline(this);","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"    private void addDeadline(Deadline deadline) {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"        Optional\u003cArrayList\u003cDeadline\u003e\u003e current \u003d Optional.ofNullable(dateMap.get(date));","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"        if (current.isPresent()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"            current.get().add(deadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"            ArrayList\u003cDeadline\u003e firstList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"            firstList.add(deadline);","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"            dateMap.put(date, firstList);","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"wowsiddanth"},"content":"    public static String deadlinesOnDate(String date) {","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"        LocalDate deadlineDate \u003d Deadline.parseDate(date);","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"wowsiddanth"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"wowsiddanth"},"content":"        Optional\u003cArrayList\u003cDeadline\u003e\u003e current \u003d Optional.ofNullable(dateMap.get(deadlineDate));","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"wowsiddanth"},"content":"        if (current.isPresent()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"wowsiddanth"},"content":"            StringBuilder result \u003d new StringBuilder(\"Here are the tasks on this date: \");","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"wowsiddanth"},"content":"            for (Deadline d: current.get()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"wowsiddanth"},"content":"                result.append(\"\\n\").append(count++).append(\". \").append(d);","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wowsiddanth"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wowsiddanth"},"content":"            return result.toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wowsiddanth"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wowsiddanth"},"content":"            return \"No tasks on this day!\";","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":63,"author":{"gitId":"wowsiddanth"},"content":"    public String strForSaving() {","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"wowsiddanth"},"content":"        return \"D|\" + this.getStatusIcon() + \"|\" + this.description + \"|\" + dateTime;","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"wowsiddanth"},"content":"    ","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"wowsiddanth"},"content":"    private LocalTime parseTime(String time)  {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"wowsiddanth"},"content":"        String formattedTime \u003d time.indexOf(\":\") \u003e 0 ? time","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"wowsiddanth"},"content":"                                                     : time.substring(0, 2) + \":\" + time.substring(2);","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"wowsiddanth"},"content":"        return LocalTime.parse(formattedTime);","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"wowsiddanth"},"content":"    private static LocalDate parseDate(String date) {","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"wowsiddanth"},"content":"        String[] ddMMYY \u003d date.split(\"/\");","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"wowsiddanth"},"content":"        if (ddMMYY[0].length() \u003d\u003d 1) { //if user types 2/12/2019 -\u003e 02/12/2019","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"wowsiddanth"},"content":"            ddMMYY[0] \u003d \"0\" + ddMMYY[0];","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"wowsiddanth"},"content":"        return LocalDate.parse(ddMMYY[2] + \"-\" + ddMMYY[1] + \"-\" + ddMMYY[0]);","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":80,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":81,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-14"},{"lineNumber":82,"author":{"gitId":"wowsiddanth"},"content":"     * The overridden toString method for the Deadline class","lastModifiedDate":"2021-08-14"},{"lineNumber":83,"author":{"gitId":"wowsiddanth"},"content":"     * @return String representation of object","lastModifiedDate":"2021-08-14"},{"lineNumber":84,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":86,"author":{"gitId":"wowsiddanth"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":87,"author":{"gitId":"wowsiddanth"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"wowsiddanth"},"content":"                                                     .format(date) +  \" \" + this.time + \")\";","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":90,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":90}},{"path":"src/main/java/petal/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.task;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"import java.util.Optional;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":" * Event class, subclass of Task.","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":" * Encapsulates a Task with a start/end time","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-14"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"    //The start time of the Event","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    protected String dateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"    private final LocalTime startTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"    private final LocalTime endTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"    private static final HashMap\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e eventMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"    public Event(String description, String dateTime, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"        super(description.trim(), isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        this.dateTime \u003d (dateTime \u003d dateTime.trim());","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"        String[] splitByWhiteSpace \u003d dateTime.split(\" \");","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"        this.date \u003d parseDate(splitByWhiteSpace[0]);","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"        this.startTime \u003d parseTime(splitByWhiteSpace[1]);","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"        this.endTime \u003d parseTime(splitByWhiteSpace[2]);","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"        addEvent(this);","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"    private void addEvent(Event event) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"        Optional\u003cArrayList\u003cEvent\u003e\u003e current \u003d Optional.ofNullable(eventMap.get(date));","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"        if (current.isPresent()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"            current.get().add(event);","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"            ArrayList\u003cEvent\u003e firstList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"            firstList.add(event);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"            eventMap.put(date, firstList);","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"    public static String eventsOnDate(String date) {","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"wowsiddanth"},"content":"        LocalDate eventDate \u003d Event.parseDate(date);","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"wowsiddanth"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"        Optional\u003cArrayList\u003cEvent\u003e\u003e current \u003d Optional.ofNullable(eventMap.get(eventDate));","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"wowsiddanth"},"content":"        if (current.isPresent()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"wowsiddanth"},"content":"            StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"wowsiddanth"},"content":"            for (Event e: current.get()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"wowsiddanth"},"content":"                result.append(\"\\n\").append(count++).append(\". \").append(e);","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"wowsiddanth"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"wowsiddanth"},"content":"            return result.toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"wowsiddanth"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"wowsiddanth"},"content":"            return \"No events on this day!\";","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":59,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":61,"author":{"gitId":"wowsiddanth"},"content":"    public String strForSaving() {","lastModifiedDate":"2021-08-21"},{"lineNumber":62,"author":{"gitId":"wowsiddanth"},"content":"        return \"E|\" + this.getStatusIcon() + \"|\" + this.description + \"|\" + this.dateTime;","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"wowsiddanth"},"content":"    private LocalTime parseTime(String time)  {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"wowsiddanth"},"content":"        String formattedTime \u003d time.indexOf(\":\") \u003e 0 ? time","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"wowsiddanth"},"content":"                : time.substring(0, 2) + \":\" + time.substring(2);","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"wowsiddanth"},"content":"        return LocalTime.parse(formattedTime);","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":70,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"wowsiddanth"},"content":"    private static LocalDate parseDate(String date) {","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"wowsiddanth"},"content":"        String[] ddMMYY \u003d date.split(\"/\");","lastModifiedDate":"2021-08-22"},{"lineNumber":73,"author":{"gitId":"wowsiddanth"},"content":"        if (ddMMYY[0].length() \u003d\u003d 1) { //if user types 2/12/2019 -\u003e 02/12/2019","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"wowsiddanth"},"content":"            ddMMYY[0] \u003d \"0\" + ddMMYY[0];","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"wowsiddanth"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":76,"author":{"gitId":"wowsiddanth"},"content":"        return LocalDate.parse(ddMMYY[2] + \"-\" + ddMMYY[1] + \"-\" + ddMMYY[0]);","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":78,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":79,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":80,"author":{"gitId":"wowsiddanth"},"content":"     * Overridden toString method for the Event class","lastModifiedDate":"2021-08-15"},{"lineNumber":81,"author":{"gitId":"wowsiddanth"},"content":"     * @return String representation of the Event object","lastModifiedDate":"2021-08-15"},{"lineNumber":82,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":83,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":84,"author":{"gitId":"wowsiddanth"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":85,"author":{"gitId":"wowsiddanth"},"content":"        return \"[E]\" + super.toString() + \" (at \" + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"wowsiddanth"},"content":"                .format(date) + \" \" + this.startTime + \" to \" + this.endTime + \")\";","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":88,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":88}},{"path":"src/main/java/petal/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.task;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"import petal.components.Responses;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":" * The Task class that encapsulates a directive given","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":" * by the user to track a certain activity and may have","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":" * start/end timings.","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"    //The description of the task","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"    protected String description;","lastModifiedDate":"2021-08-14"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"    //Boolean of whether a task is done","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"    protected LocalDate localDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    public abstract String strForSaving();","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-21"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"     * The constructor for the Task class","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"    public Task(String description, boolean isDone, LocalDate localDate) {","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"        this.description \u003d firstLetter(description);","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"     * The constructor for the Task class","lastModifiedDate":"2021-08-15"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"        this.description \u003d firstLetter(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"wowsiddanth"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":38,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":39,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":40,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"wowsiddanth"},"content":"     * Method that returns whether a task is done in string","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"wowsiddanth"},"content":"     * @return \"X\" if done, \" \" if not","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"wowsiddanth"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-14"},{"lineNumber":45,"author":{"gitId":"wowsiddanth"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-14"},{"lineNumber":46,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":47,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":48,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"wowsiddanth"},"content":"     * Method to set a task as done","lastModifiedDate":"2021-08-17"},{"lineNumber":50,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"wowsiddanth"},"content":"    public void taskDone() {","lastModifiedDate":"2021-08-14"},{"lineNumber":52,"author":{"gitId":"wowsiddanth"},"content":"        System.out.println(Responses.LINE + \"\\nYou have completed the task: \" + \"\u0027\"","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"wowsiddanth"},"content":"                                          + this.description + \"\u0027!\"","lastModifiedDate":"2021-08-14"},{"lineNumber":54,"author":{"gitId":"wowsiddanth"},"content":"                                          + \"\\nI am so happy for you!\\n\"","lastModifiedDate":"2021-08-14"},{"lineNumber":55,"author":{"gitId":"wowsiddanth"},"content":"                                          + Responses.LINE);","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"wowsiddanth"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-14"},{"lineNumber":57,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":58,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":59,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-17"},{"lineNumber":60,"author":{"gitId":"wowsiddanth"},"content":"     * Method to capitalize the first letter of the string","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"wowsiddanth"},"content":"     * @param str The string","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"wowsiddanth"},"content":"     * @return String but with first letter capitalized","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"wowsiddanth"},"content":"    public String firstLetter(String str) {","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"wowsiddanth"},"content":"        str \u003d str.substring(0, 1).toUpperCase() + str.substring(1);","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"wowsiddanth"},"content":"        return str;","lastModifiedDate":"2021-08-17"},{"lineNumber":67,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":69,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"wowsiddanth"},"content":"     * Overridden toString method for the Task class","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"wowsiddanth"},"content":"     * @return String representation of the Task object","lastModifiedDate":"2021-08-15"},{"lineNumber":72,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":74,"author":{"gitId":"wowsiddanth"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":75,"author":{"gitId":"wowsiddanth"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-14"},{"lineNumber":76,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":77,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":78,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":78}},{"path":"src/main/java/petal/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"package petal.task;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"/**","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":" * The To.Do class that is a subclass of Task","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":" * (Used a . in between to prevent IntelliJ from highlighting it)","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":" */","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"     * Constructor for the To.Do class","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"     * @param description The description of the task","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"        super(description.trim(), isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"    public String strForSaving() {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"        return \"T|\" + this.getStatusIcon() + \"|\" + this.description;","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"    /**","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"     * Overridden toString method for the To.Do class","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"     * @return String representation of To.Do object","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"     */","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"    @Override","lastModifiedDate":"2021-08-14"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"    public String toString() {","lastModifiedDate":"2021-08-14"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-14"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"    }","lastModifiedDate":"2021-08-14"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"}","lastModifiedDate":"2021-08-14"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":33}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a jog /by 2/12/2021 1800","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a jog /by 2/12/2021 1900","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"wowsiddanth"},"content":"event go for a jog /at 2/12/2021 1800 2100","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"wowsiddanth"},"content":"event go for a jog /at 2/12/2021 1900 2100","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"wowsiddanth"},"content":"date 2/12/2021","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a jog /by 8pm today","lastModifiedDate":"2021-08-14"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"deadline use a computer /by 7pm tomorrow","lastModifiedDate":"2021-08-14"},{"lineNumber":8,"author":{"gitId":"wowsiddanth"},"content":"event using a pc /at 8pm tonight till 7pm tomorrow","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"todo listening to music ","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"wowsiddanth"},"content":"todo use a computer ","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"wowsiddanth"},"content":"/deadline","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"wowsiddanth"},"content":"deadline use a computer /at tomorrow","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"wowsiddanth"},"content":"event using a pc /by 8pm tonight till 7pm tomorrow","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"wowsiddanth"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"wowsiddanth"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"done 1","lastModifiedDate":"2021-08-14"},{"lineNumber":17,"author":{"gitId":"wowsiddanth"},"content":"done 2","lastModifiedDate":"2021-08-14"},{"lineNumber":18,"author":{"gitId":"wowsiddanth"},"content":"done 3","lastModifiedDate":"2021-08-14"},{"lineNumber":19,"author":{"gitId":"wowsiddanth"},"content":"done 4","lastModifiedDate":"2021-08-14"},{"lineNumber":20,"author":{"gitId":"wowsiddanth"},"content":"list","lastModifiedDate":"2021-08-14"},{"lineNumber":21,"author":{"gitId":"wowsiddanth"},"content":"TODO LET\u0027S GO TO THE BEACH! ","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"wowsiddanth"},"content":"DEADLINE LET\u0027S FINISH WATCHING THIS SHOW /by TONIGHT","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"wowsiddanth"},"content":"EVENT FINISH WATCHING MOVIE /at 8-9PM","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"wowsiddanth"},"content":"DEADLINE LET\u0027S FINISH WATCHING THIS SHOW /at TONIGHT","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"wowsiddanth"},"content":"EVENT FINISH WATCHING MOVIE /by 8-9PM","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/12/2021 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/22/2021 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/12/2021 8900","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/12/2021 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run 21/12/2021 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/12/2021 ","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 1/12/2021 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/2/2021 2100","lastModifiedDate":"2021-08-21"},{"lineNumber":35,"author":{"gitId":"wowsiddanth"},"content":"deadline go for a run /by 21/12/2021 21:00","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"wowsiddanth"},"content":"bye","lastModifiedDate":"2021-08-14"}],"authorContributionMap":{"wowsiddanth":36}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"wowsiddanth"},"content":"REM compiles all file","lastModifiedDate":"2021-08-22"},{"lineNumber":7,"author":{"gitId":"wowsiddanth"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\petal\\*.java ..\\src\\main\\java\\petal\\task\\*.java ..\\src\\main\\java\\petal\\exception\\*.java ..\\src\\main\\java\\petal\\components\\*.java","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"wowsiddanth"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"wowsiddanth"},"content":"java -classpath ..\\bin petal.Petal \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wowsiddanth":4,"-":15}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"### Duke","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"\u003e *“You can do anything, but not everything.” – David Allen* [(source)](https://dansilvestre.com/productivity-quotes/)","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"Duke frees you from worry of taking care of everything. You can ask Duke to help you remember things. It\u0027s","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"* Text-based!","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"* Easy to understand!","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"* Super Fast to use! :grin:","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"All you need is: :wink:","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"   1. Click this [link](https://github.com/HangZelin/ip) to **download**!","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"   2. Double-click to open it.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"   3. Tell Duke tasks to add.","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"   4. Let Duke manage your tasks for you!","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"It is **FREE** to use!!!","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"Features:","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"- [x] Managing tasks: deadline, event, todo. ","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"- [x] Marking finished tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"- [x] Deleting certain tasks.","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"- [x] Searching certain tasks by key word or time.  ","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"- [ ] Recognizing time for tasks (Not all format supported)","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"- [ ] Reminding users when ddl for certain task is approaching. (Coming soon)","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"****","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"If you Java programmer, you can use it to practice Java too. Here\u0027s the `main` method:","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"```java","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HangZelin":25,"-":6}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.7.2\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    implementation \u0027org.testng:testng:7.4.0\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.7.0\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"repositories {","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    mavenCentral()","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2021-09-07"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    mainClassName \u003d \"duke.main.Launcher\"","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2021-09-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"test {","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"run {","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"checkstyle {","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"HangZelin":32,"-":22}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"T | 1 | borrow book","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"D | 0 | return book | I don\u0027t know the time","lastModifiedDate":"2021-09-14"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"D | 1 | return book | 23/9/2020 1525","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"E | 1 | project meeting | I don\u0027t know the time","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":4}},{"path":"src/main/java/Duke/Command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" * AddCommand will handle the situation when a user wants to add a task.","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"public class AddCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private final String taskType;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private final String taskInfo;","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    private final String timeInfo;","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     * Constructor for adding a command class.","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     * @param taskType TaskType user takes in.","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * @param taskInfo TaskInfo user takes in.","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * @param timeInfo TimeInfo user takes in.","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public AddCommand(TaskList taskList, TextUi textUi, String taskType, String taskInfo, String timeInfo){","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        this.taskInfo \u003d taskInfo;","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        this.timeInfo \u003d timeInfo;","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when adding a task to list.","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        String text;","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"        text \u003d add(taskType, taskInfo, timeInfo);","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"    private String add(String ... commands) {","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        String text;","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"            taskList.add(commands[0], commands[1], commands[2]);","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"            text \u003d textUi.addUi(taskList.get(taskList.size() - 1).getTaskStatus(), taskList.size());","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"            text \u003d e.getErrorMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":58}},{"path":"src/main/java/Duke/Command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * ByeCommand will handle the situation when a user wants to end the dialog.","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"public class ByeCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     * Constructor for ByeCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    public ByeCommand(TextUi textUi) {","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to say goodbye.","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        return goodbye();","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    private String goodbye() {","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        return textUi.goodbyeMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":35}},{"path":"src/main/java/Duke/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * An abstract class which indicates an abstract command type.","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"     * Returns a String response from a specific command type.","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"     * @return String value the specific command responses.","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    public abstract String returnResponse();","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":15}},{"path":"src/main/java/Duke/Command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" * DeleteCommand will handle the situation when a user wants to delete a task.","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"public class DeleteCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private final int index;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     * Constructor for DeleteCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     * @param index Index for the specific task.","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    public DeleteCommand(TaskList taskList, TextUi textUi, int index){","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to delete a task.","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        return delete(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    private String delete(int index) {","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        String text;","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"            taskList.detectIndex(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"            text \u003d textUi.deleteUi(taskList.get(index).getTaskStatus(), taskList.size() - 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"            taskList.delete(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            text \u003d e.getErrorMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":51}},{"path":"src/main/java/Duke/Command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" * DoneCommand will handle the situation when a user wants to mark a task as done.","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"public class DoneCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private final int index;","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     * Constructor for DoneCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     * @param index Index of the specific task.","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    public DoneCommand(TaskList taskList, TextUi textUi, int index){","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to mark a task as done.","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        return markDone(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    private String markDone(int index) {","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        String text;","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"            taskList.detectIndex(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"            text \u003d textUi.markDoneUi(taskList.get(index).getTaskStatus());","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"            taskList.markDone(index);","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            text \u003d e.getErrorMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":51}},{"path":"src/main/java/Duke/Command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" * FindCommand will handle the situation when a user wants to find a task using keywords.","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"public class FindCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    private final String keyword;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     * Constructor for FindCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * @param keyword String value for the keyword.","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    public FindCommand(TaskList taskList, TextUi textUi, String keyword){","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to find tasks by keyword.","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        return find();","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    private String find() {","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        return textUi.findTasksUi() + taskList.findTasks(keyword);","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":42}},{"path":"src/main/java/Duke/Command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * ListCommand will handle the situation when a user wants to see all the tasks in the list.","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"public class ListCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     * Constructor for ListCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    public ListCommand(TaskList taskList) {","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to see all tasks in list.","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        return printList();","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    private String printList() {","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        return taskList.printListUi();","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":35}},{"path":"src/main/java/Duke/Command/TellCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" * TellCommand will handle the situation when a user wants to search a task by specific time.","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"public class TellCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    private final String time;","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     * Constructor for TellCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * @param time String value for the time users take in.","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    public TellCommand(TaskList taskList, TextUi textUi, String time){","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to search tasks by time that user takes in.","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        return tell();","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    private String tell() {","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        return textUi.getSpecificDateEventUi() + taskList.getSpecificDateEvent(time);","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":42}},{"path":"src/main/java/Duke/Command/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" * UndoCommand will handle the situation when a user wants to Undo a most recent task.","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"public class UndoCommand extends Command{","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"     * Constructor for UndoCommand class.","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     * @param taskList TaskList in Duke.","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Duke\u0027s UI.","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    public UndoCommand(TaskList taskList, TextUi textUi) {","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * Return Duke\u0027s response when user wants to undo a most recent task.","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    public String returnResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        return undoMessages();","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    private String undoMessages() {","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        String text;","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        text \u003d textUi.undoUi() + taskList.undo();","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":42}},{"path":"src/main/java/Duke/JUnitTests/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.junittests;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.logics.Parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import org.testng.annotations.Test;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" * A JUnit class that tests some methods in Parser.","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    public void testParserTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"        assertEquals(LocalDate.of(2019, 12, 2).atTime(18, 0), new Parser(\"\").parseTime(\"2/12/2019 1800\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        assertEquals(LocalDate.of(2020, 9, 23).atTime(15, 25), new Parser(\"\").parseTime(\"23/9/2020 1525\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        assertEquals(LocalDate.of(2019, 10, 15).atTime(0, 0), new Parser(\"\").parseTime(\"2019-10-15\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        assertNull(new Parser(\"\").parseTime(\"ukpkmkk\"));","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    public void testGetSaveTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"borrow book\", new Parser(\"T | 0 | borrow book\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"return book\", new Parser(\"D | 0 | return book | 2/12/2019 1800\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"project meeting\", new Parser(\"E | 0 | project meeting | I don\u0027t know the time\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"project splashdown\", new Parser(\"E | 0 | project splashdown | 15/10/2019 0000\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    public void testGetSaveTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"\", new Parser(\"T | 0 | borrow book\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"2/12/2019 1800\", new Parser(\"D | 0 | return book | 2/12/2019 1800\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"\", new Parser(\"E | 0 | project meeting | I don\u0027t know the time\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"15/10/2019 0000\", new Parser(\"E | 0 | project splashdown | 15/10/2019 0000\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    public void testGetOperationType() {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"todo\", new Parser(\"todo borrow book\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"deadline\", new Parser(\"deadline return book /by 2/12/2019 1800\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"done\", new Parser(\"done 3\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"tell\", new Parser(\"tell 60\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"bye\", new Parser(\"bye\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"delete\", new Parser(\"delete 10\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"list\", new Parser(\"list\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"            fail(); //should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"    public void testGetTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"borrow book\", new Parser(\"todo borrow book\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"return book\", new Parser(\"deadline return book /by 2/12/2019 1800\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"project meeting\", new Parser(\"event project meeting /at Aug 6th 6pm\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"project splashdown\", new Parser(\"event project splashdown /at 2019-10-15\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"            fail(); //should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    public void testGetTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"\", new Parser(\"todo borrow book\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"2/12/2019 1800\", new Parser(\"deadline return book /by 2/12/2019 1800\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"Aug 6th 6pm\", new Parser(\"event project meeting /at Aug 6th 6pm\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"2019-10-15\", new Parser(\"event project splashdown /at 2019-10-15\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"            fail(); //should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"    public void testGetIndex() {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"        assertEquals(19, new Parser(\"delete 20\").getIndex());","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"        assertEquals(14, new Parser(\"done 15\").getIndex());","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        assertEquals(20312130, new Parser(\"done 20312131\").getIndex());","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":88}},{"path":"src/main/java/Duke/JUnitTests/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.junittests;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.saveloadmanager.Storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import org.testng.annotations.Test;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" * A JUnit class that tests some methods in Storage.","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    public void load_correctFilePath_success() {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[T][ ] borrow book\",","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"                    new Storage(\"data/tasks.txt\").load().get(0).getTaskStatus());","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[D][ ] return book (by: Dec 02 2019 18:00)\",","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"                    new Storage(\"data/tasks.txt\").load().get(1).getTaskStatus());","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[E][X] project meeting (at: I don\u0027t know the time.)\",","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"                    new Storage(\"data/tasks.txt\").load().get(2).getTaskStatus());","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[D][ ] return book (by: Sep 23 2020 15:25)\",","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"                    new Storage(\"data/tasks.txt\").load().get(3).getTaskStatus());","lastModifiedDate":"2021-09-07"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[E][X] project splashdown (at: Oct 15 2019 00:00)\",","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"                    new Storage(\"data/tasks.txt\").load().get(4).getTaskStatus());","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"            //Should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    public void load_wrongFilePath_exceptionThrown() {","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"            assertEquals(new ArrayList\u003c\u003e(), new Storage(\"I don\u0027t know\").load());","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"            fail(); //Should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"Cannot Read From Data.\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":47}},{"path":"src/main/java/Duke/SaveLoadManager/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.saveloadmanager;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.ExceptionType;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.logics.Parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":" * Programme that allows Duke to save any changes after execution and read data when it is initially invoked.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":" * In other words, programme allows Duke to save and read data from a file.","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    private final String filePath;","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    private final ArrayList\u003cTask\u003e list;","lastModifiedDate":"2021-09-07"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * Initialize filePath and the TaskList for Storage to read data.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     * @param filePath FilePath of the duke data storage.","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     * Returns a List of Tasks loaded from the local file.","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"     * @return TaskList loaded from the local file.","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the file cannot be loaded.","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"            readDataFromFile();","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(ExceptionType.FILE_READ_ERROR);","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        return this.list;","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     * Allows users to read all the info of tasks stored in local files, and write them into TaskList.","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     * @throws FileNotFoundException Throws when the file cannot be found.","lastModifiedDate":"2021-08-29"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"    public void readDataFromFile() throws FileNotFoundException {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"            String data \u003d s.nextLine();","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"            char done;","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"            createATask(data);","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"            done \u003d returnIsDone(data);","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"            if (done \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"                this.list.get(index - 1).markDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"            index++;","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"     * Allows users to save data from a TaskList to a specific file.","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"     * @param tasks TaskList tobe saved into the local file in the filePath.","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"     * @throws IOException Throws when data cannot be written into local file.","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"    public void saveListDataToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"            fw.write(tasks.get(i).getSaveDataInfo() + \"\\n\");","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"    private void createATask(String data) {","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"        Parser p \u003d new Parser(data);","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        char taskType \u003d data.charAt(0);","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"        String task;","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"        String time;","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"        task \u003d p.getSaveTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        time \u003d p.getSaveTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"        LocalDateTime parsedTime \u003d p.parseTime(time);","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"        TaskList.OperationType[] taskTypes \u003d TaskList.OperationType.values();","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"        for (TaskList.OperationType t : taskTypes) {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"            boolean isCorrectType \u003d t.toString().charAt(0) \u003d\u003d taskType;","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"            boolean isTaskType \u003d t.toString().equals(\"TODO\") || t.toString().equals(\"DEADLINE\")","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"                    || t.toString().equals(\"EVENT\");","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"            if (isCorrectType \u0026\u0026 isTaskType) {","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"                Task newTask \u003d t.assignTaskType(t, task, parsedTime);","lastModifiedDate":"2021-08-29"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"                this.list.add(newTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"     * Returns char for \"0\" or \"1\". The value indicates whether the task is done or not.","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"     * It also deals with the local file data and convert them into task and store into TaskList.","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"     * @param data A line of command in the save file to be parsed.","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"     * @return a Char indicates if the task is done or not.","lastModifiedDate":"2021-09-08"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"    private char returnIsDone(String data) {","lastModifiedDate":"2021-09-08"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"        char done \u003d data.charAt(4);","lastModifiedDate":"2021-09-08"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"        return done;","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":123}},{"path":"src/main/java/Duke/Task/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" * Deadlines class that extends Task class. It is one of the types in 3 tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":" * Will contain a time in the form of \"/by\"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private boolean isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    private final String task;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private final LocalDateTime time;","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    private static final String TASKTYPE \u003d \"D\";","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     * Constructor for Deadlines containing boolean value if the task is done, the","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     * specific task info, and the time for the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * @param isDone Indicates if the task is done.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * @param task Task info.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * @param time Time info.","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    public Deadlines(boolean isDone, String task, LocalDateTime time) {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of \"[type][] task info (/by ...)\"","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     * @return Task info parsed in the format duke executes.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        String doneStatus;","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        String taskStatus;","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"            doneStatus \u003d \" \";","lastModifiedDate":"2021-09-07"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            doneStatus \u003d \"X\";","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        taskStatus \u003d \"[\" + TASKTYPE + \"]\" + \"[\" + doneStatus + \"] \" + task + \" (at: \" + parsedTime() + \")\";","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        return taskStatus;","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"MMM dd yyyy HH:mm\"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"     * Note: This method is only applicable for \"event\" and \"deadline\" type task.","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     * @return Return the parsed time in the format duke can understand.","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"    public String parsedTime() {","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        String parsedTime;","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"        if (this.time !\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d this.time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH));","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d \"I don\u0027t know the time.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"        return parsedTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"    private String getUnknownTime() {","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"        specificTime \u003d \"I don\u0027t know the time\";","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"        return specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"    private String getDate() {","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        String specificDate;","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        specificDate \u003d this.time.getDayOfMonth() + \"/\"","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"                + this.time.getMonthValue() + \"/\" + this.time.getYear() + \" \";","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"        return specificDate;","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"    private String getHour() {","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"        if (this.time.getHour() \u003c 10) {","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"0\" + this.time.getHour();","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"\" + this.time.getHour();","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"        return  specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"    private String getMinute(){","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"        if (this.time.getMinute() \u003c 10) {","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"0\" + this.time.getMinute();","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"\" + this.time.getMinute();","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"        return specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"dd/mm/yy hhmm\".","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"     * Note: This method is only applicable for \"event\" and \"deadline\" type task,","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"     * @return Time in the format of \"dd/mm/yy hhmm\" which duke can understand.","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"    public String getTimeForSaveData() {","lastModifiedDate":"2021-09-07"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"        String saveDataTime \u003d \"\";","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"        String specificDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"        if (this.time \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"            saveDataTime \u003d getUnknownTime();","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"            return saveDataTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"        specificDate \u003d getDate();","lastModifiedDate":"2021-09-13"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"        specificTime \u003d getHour() + getMinute();","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"        saveDataTime +\u003d specificDate + specificTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"        return saveDataTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of save data requirement,","lastModifiedDate":"2021-08-31"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"     * that is: \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"     * @return Task info in the format of \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"    public String getSaveDataInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"        String dataInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"        int value;","lastModifiedDate":"2021-09-08"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-09-08"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"            value \u003d 1;","lastModifiedDate":"2021-09-08"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"            value \u003d 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"        dataInfo \u003d  TASKTYPE + \" | \" + value + \" | \" + task + \" | \" + getTimeForSaveData();","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"        return dataInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"     * Mark this task as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-09-01"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"     * Reset this task as undone.","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"HangZelin"},"content":"    public void resetDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":164,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-08"},{"lineNumber":165,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":166}},{"path":"src/main/java/Duke/Task/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" * Events class that extends Task class. It is one of the types in 3 tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" * Will contain a time in the form of \"/by\"","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"public class Events extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private boolean isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private final String task;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    private final LocalDateTime time;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private static final String TASKTYPE \u003d \"E\";","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * Constructor for Events containing boolean value if the task is done, the","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     * specific task info, and the time for the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     * @param isDone Indicates if the task is done or not.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * @param task Specific task info.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * @param time Specific time info.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public Events(boolean isDone, String task, LocalDateTime time) {","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of \"[type][] task info (/by ...)\"","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     * @return Task info parsed in the format duke executes.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        String doneStatus;","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        String taskStatus;","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"            doneStatus \u003d \" \";","lastModifiedDate":"2021-09-07"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"            doneStatus \u003d \"X\";","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        taskStatus \u003d \"[\" + TASKTYPE + \"]\" + \"[\" + doneStatus + \"] \" + task + \" (at: \" + parsedTime() + \")\";","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        return taskStatus;","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"MMM dd yyyy HH:mm\"","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     * Note: This method is only applicable for \"event\" and \"deadline\" type task.","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     * @return Return the parsed time in the format duke can understand.","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"    public String parsedTime() {","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        String parsedTime;","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        if (this.time !\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d this.time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH));","lastModifiedDate":"2021-08-29"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d \"I don\u0027t know the time.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"        return parsedTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    private String getUnknownTime() {","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        specificTime \u003d \"I don\u0027t know the time\";","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"        return specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"    private String getDate() {","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        String specificDate;","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        specificDate \u003d this.time.getDayOfMonth() + \"/\"","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"                + this.time.getMonthValue() + \"/\" + this.time.getYear() + \" \";","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"        return specificDate;","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"    private String getHour() {","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        if (this.time.getHour() \u003c 10) {","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"0\" + this.time.getHour();","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"\" + this.time.getHour();","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        return  specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"    private String getMinute(){","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        if (this.time.getMinute() \u003c 10) {","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"0\" + this.time.getMinute();","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"            specificTime \u003d \"\" + this.time.getMinute();","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"        return specificTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"dd/mm/yy hhmm\".","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"     * Note: This method is only applicable for \"event\" and \"deadline\" type task,","lastModifiedDate":"2021-09-07"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"     * @return Time in the format of \"dd/mm/yy hhmm\" which duke can understand.","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"    public String getTimeForSaveData() {","lastModifiedDate":"2021-09-07"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"        String saveDataTime \u003d \"\";","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"        String specificDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"        String specificTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"        if (this.time \u003d\u003d null) {","lastModifiedDate":"2021-08-29"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"            saveDataTime \u003d getUnknownTime();","lastModifiedDate":"2021-09-13"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"            return saveDataTime;","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"        specificDate \u003d getDate();","lastModifiedDate":"2021-09-13"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"        specificTime \u003d getHour() + getMinute();","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"        saveDataTime +\u003d specificDate + specificTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"        return saveDataTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of save data requirement,","lastModifiedDate":"2021-08-31"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"     * that is: \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"     * @return Task info in the format of \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"    public String getSaveDataInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"        String dataInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"        int value;","lastModifiedDate":"2021-09-08"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-09-08"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"            value \u003d 1;","lastModifiedDate":"2021-09-08"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"            value \u003d 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"        dataInfo \u003d TASKTYPE + \" | \" + value + \" | \" + task + \" | \" + getTimeForSaveData();","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"        return dataInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"     * Mark this task as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-09-01"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"     * Reset this task as undone.","lastModifiedDate":"2021-09-08"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"HangZelin"},"content":"    public void resetDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-08"},{"lineNumber":164,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":165,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":167,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":167}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * An abstract class that encapsulates the info basic for a task","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of \"[type][] task info (/by ...)\"","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"     * @return Task info parsed in the format duke executes.","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    public abstract String getTaskStatus();","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"MMM dd yyyy HH:mm\"","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     * Noted: This method is only applicable for \"event\" and \"deadline\" type task.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * @return Return the parsed time in the format duke can understand.","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    public abstract String parsedTime();","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"dd/mm/yy hhmm\".","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * Noted: This method is only applicable for \"event\" and \"deadline\" type task,","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * @return Time in the format of \"dd/mm/yy hhmm\" which duke can understand.","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    public abstract String getTimeForSaveData();","lastModifiedDate":"2021-09-07"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of save data requirement,","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"     * that is: \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     * @return Task info in the format of \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-29"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    public abstract String getSaveDataInfo();","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"     * Mark this task as done.","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    public abstract void markDone();","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    public abstract void resetDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":47}},{"path":"src/main/java/Duke/Task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.ExceptionType;","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.executions.LastExecution;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.logics.Parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":" * Stores all the tasks for the Duke. Duke can refer to this tasklist to see a specific task","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":" * or make use of the methods in it to execute an operation.","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    private LastExecution lastExecution;","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * Constructor to store all the tasks in a Generic ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * @param tasks A list of Task type variables.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        this.lastExecution \u003d new LastExecution(\"Null\", null, 0, null);","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"     * Another Constructor to initialize an empty TaskList if there is no save data.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"     * Returns all the tasks in a given list.","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"     * @return A list of tasks info.","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    public String printListUi() {","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        StringBuilder text \u003d new StringBuilder();","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        text.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        int[] index \u003d {0};","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        tasks.forEach(task -\u003e text.append(++index[0]).append(\".\").append(task.getTaskStatus()).append(\"\\n\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        return text.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"    private boolean returnIsFound(String time, String unparsedInfo, String task) {","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"        Parser parser \u003d new Parser(\"\");","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        String timeInFormat \u003d (parser.parseTime(time) !\u003d null)","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"                ? parser.parseTime(time).format(DateTimeFormatter.","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"                ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH))","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"                : \"Null time Info\";","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        boolean isMessageContains \u003d task.contains(time)","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"                || task.contains(timeInFormat);","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"        boolean isUnparsedInfoContains \u003d  unparsedInfo !\u003d null \u0026\u0026 (unparsedInfo.contains(time)","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"                || unparsedInfo.contains(timeInFormat));","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        return isMessageContains || isUnparsedInfoContains;","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     * Returns all the tasks that match the time users take in.","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"     * @param time String message that indicates time users take in to find specific event.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"     * @return All the tasks that match the time users take in.","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"    public String getSpecificDateEvent(String time) {","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"        StringBuilder text \u003d new StringBuilder();","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"        final int[] count \u003d {0}; //count the number of the events happen on the time.","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        tasks.stream()","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"                .filter(task -\u003e returnIsFound(time","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"                        , task.getTimeForSaveData(), task.getTaskStatus()))","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"                .forEach(task -\u003e text.append(++count[0])","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"                        .append(\".\").append(task.getTaskStatus()).append(\"\\n\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"        if (count[0] \u003d\u003d 0) {","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"            return \"Sorry. There is no tasks occurred on the time you give me!! :(\\n\";","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"        return text.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"     * Undo last duke operation.","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"     * @return Duke\u0027s response for undo message.","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"    public String undo() {","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        String text \u003d lastExecution.undo();","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"        this.lastExecution \u003d new LastExecution(\"Null\", null, 0, null);","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"     * Returns all the tasks that match the key word users take in.","lastModifiedDate":"2021-09-01"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"     * @param keyword String message that indicates the keyword users want to search.","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"     * @return All the tasks that match the key word users take in.","lastModifiedDate":"2021-09-01"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"    public String findTasks(String keyword) {","lastModifiedDate":"2021-09-01"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"        StringBuilder text \u003d new StringBuilder();","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"        final int[] count \u003d {0};","lastModifiedDate":"2021-09-08"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"        tasks.stream()","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"                .filter(task -\u003e task.getTaskStatus().contains(keyword))","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"                .forEach(task -\u003e text.append(++count[0]).append(\".\")","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"                        .append(task.getTaskStatus()).append(\"\\n\"));","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"        if (count[0] \u003d\u003d 0) {","lastModifiedDate":"2021-09-08"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"            return \"Sorry. There is no tasks matching the keyword you give me!! :(\\n\";","lastModifiedDate":"2021-09-01"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"        return text.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"     * Marks a specific task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"     * @param index Integer indicates the index for the task","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"    public void markDone(int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"        Task task \u003d this.tasks.get(index);","lastModifiedDate":"2021-09-08"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"        task.markDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"        lastExecution \u003d new LastExecution(\"done\", task, index, tasks);","lastModifiedDate":"2021-09-13"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"     * Deletes a specific task.","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"     * @param index Integer indicates the index for the task","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"    public void delete(int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"        Task task \u003d this.tasks.get(index);","lastModifiedDate":"2021-09-08"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"        lastExecution \u003d new LastExecution(\"delete\", task, index, tasks);","lastModifiedDate":"2021-09-13"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"    private void createNewTask(String taskType, String task, LocalDateTime parsedTime) {","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"        OperationType[] taskTypes \u003d OperationType.values();","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"        for (OperationType t : taskTypes) {","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"            boolean isMatch \u003d t.toString().equals(taskType.toUpperCase());","lastModifiedDate":"2021-09-08"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"            if (isMatch) {","lastModifiedDate":"2021-09-08"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"                Task newTask \u003d t.assignTaskType(t, task, parsedTime);","lastModifiedDate":"2021-09-08"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"                tasks.add(newTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"                lastExecution \u003d new LastExecution(\"add\", newTask, tasks.size() - 1, tasks);","lastModifiedDate":"2021-09-13"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"                break;","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"     * Adds a task to the TaskLists. This method will automatically decide which type of the","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"HangZelin"},"content":"     * task is added to the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"HangZelin"},"content":"     * @param taskType String message indicates the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"HangZelin"},"content":"     * @param task String message indicates the task info.","lastModifiedDate":"2021-08-26"},{"lineNumber":165,"author":{"gitId":"HangZelin"},"content":"     * @param time String message indicates the time info.","lastModifiedDate":"2021-08-26"},{"lineNumber":166,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when a task cannot be created or added to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"HangZelin"},"content":"    public void add(String taskType, String task, String time) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"HangZelin"},"content":"        Parser parser \u003d new Parser(\"\");","lastModifiedDate":"2021-08-26"},{"lineNumber":170,"author":{"gitId":"HangZelin"},"content":"        LocalDateTime parsedTime \u003d parser.parseTime(time);","lastModifiedDate":"2021-08-26"},{"lineNumber":171,"author":{"gitId":"HangZelin"},"content":"        createNewTask(taskType, task, parsedTime);","lastModifiedDate":"2021-09-08"},{"lineNumber":172,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"HangZelin"},"content":"     * Returns a specific task users refer to.","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"HangZelin"},"content":"     * @param index An integer indicates the index of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"HangZelin"},"content":"     * @return Task users refer to","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"HangZelin"},"content":"     * */","lastModifiedDate":"2021-08-26"},{"lineNumber":180,"author":{"gitId":"HangZelin"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"HangZelin"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":182,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":185,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"HangZelin"},"content":"     * Returns the size of the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":188,"author":{"gitId":"HangZelin"},"content":"     * @return Integer indicates the size of the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":189,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"HangZelin"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"HangZelin"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"HangZelin"},"content":"     * Detects if the index taking in is invalid or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"HangZelin"},"content":"     * @param index Integer indicates the index of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the index is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"HangZelin"},"content":"    public void detectIndex(int index) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"HangZelin"},"content":"        if (index \u003c 0 || index \u003e\u003d this.tasks.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(ExceptionType.WRONG_INDEX_ERROR);","lastModifiedDate":"2021-09-13"},{"lineNumber":203,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":205,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":207,"author":{"gitId":"HangZelin"},"content":"     * Enum of all types of operations that is able to execute.","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"HangZelin"},"content":"     * It also contains a method AssignTask Type to find the specific type of task to create.","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"HangZelin"},"content":"    public enum OperationType {","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"HangZelin"},"content":"        BYE, DONE, DELETE, TELL, FIND, UNDO, LIST, TODO, DEADLINE, EVENT;","lastModifiedDate":"2021-09-08"},{"lineNumber":212,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"HangZelin"},"content":"        /**","lastModifiedDate":"2021-08-31"},{"lineNumber":214,"author":{"gitId":"HangZelin"},"content":"         * Returns a task in a specific operationType. It can be either todo, deadline or event.","lastModifiedDate":"2021-08-31"},{"lineNumber":215,"author":{"gitId":"HangZelin"},"content":"         *","lastModifiedDate":"2021-08-31"},{"lineNumber":216,"author":{"gitId":"HangZelin"},"content":"         * @param type Task type given to Duke.","lastModifiedDate":"2021-09-08"},{"lineNumber":217,"author":{"gitId":"HangZelin"},"content":"         * @param task Specific task info.","lastModifiedDate":"2021-09-08"},{"lineNumber":218,"author":{"gitId":"HangZelin"},"content":"         * @param time Specific time info.","lastModifiedDate":"2021-09-08"},{"lineNumber":219,"author":{"gitId":"HangZelin"},"content":"         * @return Task in a specific operationType. It can be either todo, deadline or event.","lastModifiedDate":"2021-08-31"},{"lineNumber":220,"author":{"gitId":"HangZelin"},"content":"         */","lastModifiedDate":"2021-08-31"},{"lineNumber":221,"author":{"gitId":"HangZelin"},"content":"        public Task assignTaskType(OperationType type, String task, LocalDateTime time) {","lastModifiedDate":"2021-08-26"},{"lineNumber":222,"author":{"gitId":"HangZelin"},"content":"            return switch (type) {","lastModifiedDate":"2021-09-08"},{"lineNumber":223,"author":{"gitId":"HangZelin"},"content":"                   case TODO -\u003e new ToDos(false, task);","lastModifiedDate":"2021-09-08"},{"lineNumber":224,"author":{"gitId":"HangZelin"},"content":"                   case DEADLINE -\u003e new Deadlines(false, task, time);","lastModifiedDate":"2021-09-08"},{"lineNumber":225,"author":{"gitId":"HangZelin"},"content":"                   case EVENT -\u003e new Events(false, task, time);","lastModifiedDate":"2021-09-08"},{"lineNumber":226,"author":{"gitId":"HangZelin"},"content":"                   default -\u003e null;","lastModifiedDate":"2021-09-08"},{"lineNumber":227,"author":{"gitId":"HangZelin"},"content":"            };","lastModifiedDate":"2021-09-08"},{"lineNumber":228,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":229,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":230}},{"path":"src/main/java/Duke/Task/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * ToDos class that extends Task class. It is one of the types in 3 tasks.","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"public class ToDos extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    private boolean isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    private final String task;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"    private static final String TASKTYPE \u003d \"T\";","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"     * Constructor for ToDos containing boolean value if the task is done, the","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"     * specific task info.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     * @param isDone Indicates if the task is done or not.","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     * @param task Specifc task info.","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    public ToDos(boolean isDone, String task) {","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of \"[type][] task info (/by ...)\"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * @return Task info parsed in the format duke executes.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2021-09-07"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        String doneStatus;","lastModifiedDate":"2021-09-07"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        String taskStatus;","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        if (!this.isDone) {","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"            doneStatus \u003d \" \";","lastModifiedDate":"2021-09-07"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"            doneStatus \u003d \"X\";","lastModifiedDate":"2021-09-07"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        taskStatus \u003d \"[\" + TASKTYPE + \"]\" + \"[\" + doneStatus + \"] \" + task;","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        return taskStatus;","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"MMM dd yyyy HH:mm\"","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"     * Note: This method is only applicable for \"event\" and \"deadline\" type task.","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"     * @return Return the parsed time in the format duke can understand.","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"    public String parsedTime() {","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"        return null;","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"dd/mm/yy hhmm\".","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     * Note: This method is only applicable for \"event\" and \"deadline\" type task,","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"     * @return Time in the format of \"dd/mm/yy hhmm\" which duke can understand.","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"    public String getTimeForSaveData() {","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        return null;","lastModifiedDate":"2021-08-29"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of save data requirement,","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"     * that is: \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"     * @return Task info in the format of \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"    public String getSaveDataInfo() {","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"        String dataInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"        int value;","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"            value \u003d 1;","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"            value \u003d 0;","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"        dataInfo \u003d TASKTYPE + \" | \" + value + \" | \" + task;","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"        return dataInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"     * Mark this task as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"     * Reset this task as undone.","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"    public void resetDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":101}},{"path":"src/main/java/Duke/UiManager/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.uimanager;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    private void flip() {","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"     * Returns a DialogBox for user.","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"     * @param text Text info in user dialog box.","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     * @param img User\u0027s image.","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     * @return DialogBox for user.","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"     * Returns a DialogBox for Duke.","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"     * @param text Text info in Duke dialog box.","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"     * @param img  Duke\u0027s image.","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"     * @return DialogBox for Duke.","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-14"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        db.flip();","lastModifiedDate":"2021-09-14"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"        return db;","lastModifiedDate":"2021-09-14"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"HangZelin":76}},{"path":"src/main/java/Duke/UiManager/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.uimanager;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.main.Duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     * Start the GUI process with a specific stage.","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     * @param stage Stage info to start a GUI.","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"            stage.show();","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"HangZelin":40}},{"path":"src/main/java/Duke/UiManager/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.uimanager;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.main.Duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-14"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.BackgroundImage;","lastModifiedDate":"2021-09-14"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.BackgroundSize;","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    private BackgroundImage backgroundImage;","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    private void setBackgroundImage() {","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        BackgroundSize backgroundSize;","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        backgroundSize \u003d new BackgroundSize(900, 700,","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"                true, true, true, true);","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        backgroundImage \u003d new BackgroundImage(new Image(\"/background/background.jpg\")","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"                ,null,null, null, backgroundSize);","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"     * Initialize DialogBox and MainWindow stuff.","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        //Set scrollPane","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"        //Set background","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"        this.setBackgroundImage();","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"        dialogContainer.setBackground(new Background(backgroundImage));","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     * Constructor for MainWindow, initialize with a helloMessage.","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"     * @param d Duke to set ui position.","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-01"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        String response \u003d textUi.helloMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"        );","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-01"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"        );","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-01"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"HangZelin":86}},{"path":"src/main/java/Duke/UiManager/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.uimanager;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * Ui Part of Duke Programme. This programme mainly deals with all the user interactions.","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" * It will print out the information for each type of operation execution. And it will also accept users\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * input for each round of task execution.","lastModifiedDate":"2021-09-07"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"public class TextUi {","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"     * Returns Hello Message to users.","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"     * @return Default helloMessage.","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    public String helloMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"\"\"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"                Hello! I\u0027m Duke","lastModifiedDate":"2021-09-14"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"                What can I do for you?","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"                \"\"\";","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * Returns Goodbye Message to users.","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     * @return Default goodbyeMessage.","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    public String goodbyeMessage() {","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     * Returns the Ui info for the MarkDone method in TaskList.","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     * @param parsedTask Detailed info for a task that is parsed into a specific format.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     * @return Ui message when markDone is invoked.","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    public String markDoneUi(String parsedTask) {","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        text +\u003d \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"                + \" \" + parsedTask +\"\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"     * Returns the Ui info for the Delete method in TaskList.","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"     * @param parsedTask Detailed info for a task that is parsed into a specific format","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"     * @param size Size of the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"     * @return Ui message when delete is invoked.","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    public String deleteUi(String parsedTask, int size) {","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"        text +\u003d \"Noted. I\u0027ve removed this task:\\n\" + \" \" + parsedTask","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-01"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"     * Returns the Ui info for the add method in Tasklists.","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"     * @param parsedTask Detailed info for a task that is parsed into a specific format","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"     * @param size Size of the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"     * @return Ui message when add is invoked.","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    public String addUi(String parsedTask, int size) {","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"\";","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        text +\u003d \"Got it. I\u0027ve added this task: \\n\" + \"\\n \" + parsedTask","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"                + \"\\nNow you have \" + size + \"\"","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"                + \" tasks in the list.\\n\";","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"     * Returns the Ui info for the getSpecificDateEvent method in TaskLists.","lastModifiedDate":"2021-09-01"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"     * @return Ui message when getSpecificDateEvent is invoked.","lastModifiedDate":"2021-09-01"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"    public String getSpecificDateEventUi() {","lastModifiedDate":"2021-09-07"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"Here are all the tasks taking place on the date you give me: \\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"     * Returns the Ui info for the FindTask method in Tasklists.","lastModifiedDate":"2021-09-01"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"     * @return Ui message when findTask is invoked.","lastModifiedDate":"2021-09-01"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"    public String findTasksUi() {","lastModifiedDate":"2021-09-07"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"    public String undoUi() {","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"Okay, I have helped undo your most recent command!\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"     * Returns the Saving Error Text.","lastModifiedDate":"2021-09-01"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-01"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"     * @return Error Message in saving.","lastModifiedDate":"2021-09-01"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"    public String showSavingError() {","lastModifiedDate":"2021-09-01"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"        String text \u003d \"Cannot Save the Data.\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":114}},{"path":"src/main/java/Duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-07"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * Exception class which deals with invalid input or errors.","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"    ExceptionType type;","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"     * Constructor that stores the ErrorMessage encountered in Duke programme.","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     * @param type, Error type for duke","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    public DukeException(ExceptionType type) {","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    public String getErrorMessage() {","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        String errorMessage;","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        errorMessage \u003d switch (type){","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"            case UNKNOWN_OPERATION -\u003e \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"            case NO_TASK_ERROR -\u003e \"OOPS!!! The description for this task cannot be empty.\";","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"            case DEADLINE_FORMAT_ERROR -\u003e \"OOPS!!! I\u0027m sorry, but the format of deadline is wrong :-(\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"            case WRONG_INDEX_ERROR -\u003e \"OOPS!!! I\u0027m sorry, but the index is invalid :-(\";","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"            case EVENT_FORMAT_ERROR -\u003e \"OOPS!!! I\u0027m sorry, but the format of event is wrong :-(\";","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"            case TELL_FORMAT_ERROR -\u003e \"OOPS!!! I\u0027m sorry, but the format of tell is wrong :-(\";","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"            case FILE_WRITE_ERROR -\u003e \"OOPS!!! Cannot write in data into Duke!!!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"            case FILE_READ_ERROR -\u003e \"OOPS!!! Cannot Read From Data!!!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"            default -\u003e \"OOPS!!! There is Something wrong in Duke!!!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        };","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        return errorMessage;","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":37}},{"path":"src/main/java/Duke/exceptions/ExceptionType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.exceptions;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * Enum that stores all types of possible exceptions.","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"public enum ExceptionType {","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"    UNKNOWN_OPERATION, NO_TASK_ERROR, WRONG_INDEX_ERROR, DEADLINE_FORMAT_ERROR, EVENT_FORMAT_ERROR, TELL_FORMAT_ERROR","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    , FILE_WRITE_ERROR, FILE_READ_ERROR","lastModifiedDate":"2021-09-14"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":11}},{"path":"src/main/java/Duke/executions/Execution.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.executions;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.command.*;","lastModifiedDate":"2021-09-14"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.logics.Parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" * Execution will return a Duke response based on the command users take in.","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"public class Execution {","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    //Constant values","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private final static String BYE \u003d \"bye\";","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    private final static String LIST \u003d \"list\";","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    private final static String DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    private final static String DONE \u003d \"done\";","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    private final static String TELL \u003d \"tell\";","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    private final static String FIND \u003d \"find\";","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    private final static String UNDO \u003d \"undo\";","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    private final TaskList taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    private final Parser parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     * Constructor of Execution","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     * @param taskList the taskList Duke uses to do operation.","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"     * @param textUi Ui of Duke","lastModifiedDate":"2021-09-13"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"     * @param parser Parser that will help split the command.","lastModifiedDate":"2021-09-13"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    public Execution(TaskList taskList, TextUi textUi, Parser parser) {","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-13"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        this.textUi \u003d textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     * Returns a couple of sentences indicates Duke\u0027s Response.","lastModifiedDate":"2021-09-13"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"     * @return String value that represents Duke\u0027s response.","lastModifiedDate":"2021-09-13"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"    public String ExecutionResponse() {","lastModifiedDate":"2021-09-13"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        String text \u003d dealWithInput();","lastModifiedDate":"2021-09-13"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        assert text.equals(\"\") : \"OOPS, Duke stops responding!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-13"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"     * Returns a String provided by user\u0027s specific command.","lastModifiedDate":"2021-09-13"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     * It makes use of Parse to split a line of command into 3 small pieces,","lastModifiedDate":"2021-09-13"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"     * and put in specific command to get response.","lastModifiedDate":"2021-09-13"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     * @return String value from a specifc Command.","lastModifiedDate":"2021-09-13"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"    private String dealWithInput() {","lastModifiedDate":"2021-09-13"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        ArrayList\u003cString\u003e parsedMessages;","lastModifiedDate":"2021-09-13"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        Command command;","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"        String operationType, task, time;","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        String dukeResponse;","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        int index;","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"            parsedMessages \u003d parser.returnSplitComponent();","lastModifiedDate":"2021-09-13"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-13"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"            return e.getErrorMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        assert parsedMessages.size() \u003d\u003d 4 : \"Error in Parser, should produce 4 key value for duke to execute!!\";","lastModifiedDate":"2021-09-13"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"        operationType \u003d parsedMessages.get(0);","lastModifiedDate":"2021-09-13"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"        task \u003d parsedMessages.get(1);","lastModifiedDate":"2021-09-13"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"        time \u003d parsedMessages.get(2);","lastModifiedDate":"2021-09-13"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        index \u003d Integer.parseInt(parsedMessages.get(3));","lastModifiedDate":"2021-09-13"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        command \u003d operationForDuke(index, operationType, task, time);","lastModifiedDate":"2021-09-13"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"        dukeResponse \u003d command.returnResponse();","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"        return dukeResponse;","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"     * Chooses a specific task to execute via tasks type and add to the tasklists.","lastModifiedDate":"2021-09-13"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"     * Every time an execution is done, the task will be stored to the local file called tasks.txt","lastModifiedDate":"2021-09-13"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"     * via Storage.","lastModifiedDate":"2021-09-13"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"     * @param index Index of the task users input.","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"     * @param commands JavaVarargs Commands users input.","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"    public Command operationForDuke(int index, String... commands) {","lastModifiedDate":"2021-09-13"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"        Command command;","lastModifiedDate":"2021-09-13"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        String operationType \u003d commands[0], task \u003d commands[1], time \u003d commands[2];","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"        command \u003d switch (operationType) {","lastModifiedDate":"2021-09-13"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"            case BYE -\u003e new ByeCommand(textUi);","lastModifiedDate":"2021-09-13"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"            case LIST -\u003e new ListCommand(taskList);","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"            case DONE -\u003e new DoneCommand(taskList, textUi, index);","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"            case DELETE -\u003e new DeleteCommand(taskList, textUi, index);","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"            case TELL -\u003e new TellCommand(taskList, textUi, time);","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"            case FIND -\u003e new FindCommand(taskList, textUi, task);","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"            case UNDO -\u003e new UndoCommand(taskList, textUi);","lastModifiedDate":"2021-09-13"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"            default -\u003e new AddCommand(taskList, textUi, operationType, task, time);","lastModifiedDate":"2021-09-13"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"        };","lastModifiedDate":"2021-09-13"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"        return command;","lastModifiedDate":"2021-09-13"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-13"}],"authorContributionMap":{"HangZelin":111}},{"path":"src/main/java/Duke/executions/LastExecution.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.executions;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" * It stores previous operation info and methods to undo previous operation.","lastModifiedDate":"2021-09-13"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-13"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"public class LastExecution {","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    //Constant values","lastModifiedDate":"2021-09-13"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    private final static String ADD \u003d \"add\";","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private final static String DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private final static String DONE \u003d \"done\";","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private final String lastOperation;","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    private final Task lastTask;","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    private final int lastIndex;","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     * Constructor containing all last tasks.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * @param lastOperation user\u0027s previous operation","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * @param lastTask user\u0027s previous task","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     * @param lastIndex user\u0027s previous index","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * @param tasks user\u0027s taskList.","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    public LastExecution(String lastOperation, Task lastTask, int lastIndex, ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        this.lastOperation \u003d lastOperation;","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        this.lastTask \u003d lastTask;","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        this.lastIndex \u003d lastIndex;","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    private void resetDone() {","lastModifiedDate":"2021-09-14"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        this.tasks.get(lastIndex).resetDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    private void undoDelete() {","lastModifiedDate":"2021-09-14"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        this.tasks.add(lastIndex, lastTask);","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    private void undoAdd() {","lastModifiedDate":"2021-09-14"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        this.tasks.remove(tasks.size() - 1);","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"     * Returns a undo Message and help user to undo their previous work.","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"     * @return String message showing that duke has helped user to undo his previous operation.","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"    public String undo() {","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"        String text;","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        switch (lastOperation) {","lastModifiedDate":"2021-09-14"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"        case ADD -\u003e {","lastModifiedDate":"2021-09-14"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"            undoAdd();","lastModifiedDate":"2021-09-14"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"            text \u003d \"Good! I have undone your newly added task!\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        case DELETE -\u003e {","lastModifiedDate":"2021-09-14"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"            undoDelete();","lastModifiedDate":"2021-09-14"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"            text \u003d \"Good! I have helped recovered your deleted task!\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        case DONE -\u003e {","lastModifiedDate":"2021-09-14"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"            resetDone();","lastModifiedDate":"2021-09-14"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"            text \u003d \"Good! I have recovered your task to undone again!\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        default -\u003e text \u003d \"OOPs! There is no previous operation!\\n\";","lastModifiedDate":"2021-09-14"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-14"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        return text;","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"HangZelin":74}},{"path":"src/main/java/Duke/logics/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.logics;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-07"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-07"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":" * Parser will take in a full input Message and take out the operation type, task, time, index from the","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" * one line command input by users.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" * It can also deal with the local saved data and return the parsed Message, which can be a task, time, done(or not).","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":" * It can also parse the time users input into the LocalDateTime.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":" * Some invalid input Messages may cause throwing DukeException.","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    //Constant values","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    private final static String EMPTY \u003d \"\";","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    private final static String SLASH \u003d \"/\";","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    private final static String SPACE \u003d \" \";","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    private final static String DASH \u003d \"-\";","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    private final static String PIPE \u003d \"|\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    private final static String BY \u003d \"/by\";","lastModifiedDate":"2021-09-13"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    private final static String AT \u003d \"/at\";","lastModifiedDate":"2021-09-13"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    private final static String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-13"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    private final static String EVENT \u003d \"event\";","lastModifiedDate":"2021-09-13"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    private final static String TELL \u003d \"tell\";","lastModifiedDate":"2021-09-13"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    private final static char FIRST_LETTER_DEADLINE \u003d \u0027D\u0027;","lastModifiedDate":"2021-09-13"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"    private final static char FIRST_LETTER_EVENT \u003d \u0027E\u0027;","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    private final String message;","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    private final ParserExceptionDetector parserExceptionDetector;","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     * @param message Message users take in to be parsed.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    public Parser(String message) {","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        this.parserExceptionDetector \u003d new ParserExceptionDetector(message);","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    private static boolean isValidDate(int day, int month, int year, int hour, int minute) {","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        boolean isLeapYear \u003d (year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || (year % 400 \u003d\u003d 0) \u0026\u0026 month \u003d\u003d 2;","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        boolean isValidLeapYearFeb \u003d day \u003c\u003d 29 \u0026\u0026 day \u003e 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        boolean isValidFeb \u003d  day \u003c\u003d 28 \u0026\u0026 day \u003e 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        boolean isValidMonth \u003d month \u003e 0 \u0026\u0026 month \u003c\u003d 12;","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        boolean isValidDay \u003d  day \u003c\u003d 31 \u0026\u0026 day \u003e 0; //Is day valid for the month has 31 days.","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        boolean isValidDay2 \u003d (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"                || month \u003d\u003d 11) \u0026\u0026 day \u003c\u003d 30; //Is day valid for specific months.","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"        boolean isValidHour \u003d hour \u003c\u003d 24 \u0026\u0026 hour \u003e\u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"        boolean isValidMinute \u003d minute \u003c\u003d 60 \u0026\u0026 minute \u003e\u003d 0;","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        if ((isLeapYear \u0026\u0026 !isValidLeapYearFeb) || (month \u003d\u003d 2 \u0026\u0026 !isValidFeb)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        return isValidMonth \u0026\u0026 isValidDay \u0026\u0026 isValidDay2 \u0026\u0026 isValidHour \u0026\u0026 isValidMinute;","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"    private LocalDateTime parseTimeInFormat1(String time) {","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        int day, month, year, hour, minute;","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        int endIndex1 \u003d time.indexOf(SLASH);","lastModifiedDate":"2021-09-13"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"        int endIndex2 \u003d time.lastIndexOf(SPACE);","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"        day \u003d Integer.parseInt(time.substring(0, endIndex1));","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"        int dayInteger \u003d day;","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        int endIndex3 \u003d time.indexOf(SLASH, Integer.toString(dayInteger).length() + 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        month \u003d Integer.parseInt(time.substring(endIndex1 + 1, endIndex3));","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        year \u003d Integer.parseInt(time.substring(endIndex3 + 1, endIndex2));","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"        hour \u003d Integer.parseInt(time.substring(endIndex2 + 1).substring(0, 2));","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"        minute \u003d Integer.parseInt(time.substring(endIndex2 + 1).substring(2));","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"        if (!isValidDate(day, month, year, hour, minute)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"            return null;","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"            return LocalDate.of(year, month, day).atTime(hour, minute);","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"    private LocalDateTime parseTimeInFormat2(String time) {","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"            return LocalDate.parse(time).atTime(0, 0);","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"            return null;","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"     * Returns a LocalDateTime type that encapsulates the year, month, day, hour, minute of a time input.","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"     * The method takes in a String of time and converts it into a LocalDateTime","lastModifiedDate":"2021-09-07"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"     * The format can only be: 1. dd/mm/yyyy hhmm","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"     * 2. yyyy-mm-dd","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"     * @param time Time User takes in to be parsed.","lastModifiedDate":"2021-08-29"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"     * @return Parsed time converted in the type of LocalDateTime","lastModifiedDate":"2021-08-29"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"    public LocalDateTime parseTime(String time) {","lastModifiedDate":"2021-08-29"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"        LocalDateTime parsedTime;","lastModifiedDate":"2021-08-29"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"        boolean isFormat1 \u003d time.contains(SLASH) \u0026\u0026 time.indexOf(SLASH, 3) !\u003d -1","lastModifiedDate":"2021-09-13"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"                \u0026\u0026 time.contains(SPACE) \u0026\u0026 !time.contains(DASH);","lastModifiedDate":"2021-09-13"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"        boolean isFormat2 \u003d time.contains(DASH);","lastModifiedDate":"2021-09-13"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"        if (isFormat1) {","lastModifiedDate":"2021-09-08"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d parseTimeInFormat1(time);","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"        } else if (isFormat2) {","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d parseTimeInFormat2(time);","lastModifiedDate":"2021-09-08"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d null;","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"        return parsedTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-13"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"     * Returns the key 4 information from users\u0027 input encapsulated in a ArrayList of String.","lastModifiedDate":"2021-09-13"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"     * They are: operationType, task, time, index. They will be useful when executing in Duke programme.","lastModifiedDate":"2021-09-13"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-13"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"     * @return Size of 4 ArrayList contains Message of operationType, task, time and index.","lastModifiedDate":"2021-09-13"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the input cannot be parsed.","lastModifiedDate":"2021-09-13"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-13"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"    public ArrayList\u003cString\u003e returnSplitComponent() throws DukeException {","lastModifiedDate":"2021-09-13"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"        ArrayList\u003cString\u003e parsedMessageList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-13"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(getOperationType());","lastModifiedDate":"2021-09-13"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(getTask());","lastModifiedDate":"2021-09-13"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(getTime());","lastModifiedDate":"2021-09-13"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(getIndex().toString());","lastModifiedDate":"2021-09-13"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"        return parsedMessageList;","lastModifiedDate":"2021-09-13"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-13"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is a task info in a local save data.","lastModifiedDate":"2021-08-29"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"     * Note: you must specify it as local data, otherwise it can go wrong.","lastModifiedDate":"2021-09-07"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"     * @return Task retrieved from save data.","lastModifiedDate":"2021-08-29"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"    public String getSaveTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"        String task;","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"        char taskType \u003d message.charAt(0);","lastModifiedDate":"2021-08-31"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"        //Save Data taskType is in the form of \u0027D\u0027, \u0027E\u0027 or \u0027T\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"        if (taskType \u003d\u003d FIRST_LETTER_DEADLINE || taskType \u003d\u003d FIRST_LETTER_EVENT) {","lastModifiedDate":"2021-09-13"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"            task \u003d message.substring(8, message.indexOf(PIPE, 8) - 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"            task \u003d message.substring(8);","lastModifiedDate":"2021-08-31"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"        return task;","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is a time info in a local save data.","lastModifiedDate":"2021-08-29"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"     * Noted: you must specify it as local data, otherwise it can go wrong.","lastModifiedDate":"2021-08-29"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"     * @return Time retrieved from save data.","lastModifiedDate":"2021-08-29"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"    public String getSaveTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"        String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"HangZelin"},"content":"        char taskType \u003d message.charAt(0);","lastModifiedDate":"2021-08-31"},{"lineNumber":163,"author":{"gitId":"HangZelin"},"content":"        //Save Data taskType is in the form of \u0027D\u0027, \u0027E\u0027 or \u0027T\u0027","lastModifiedDate":"2021-09-07"},{"lineNumber":164,"author":{"gitId":"HangZelin"},"content":"        if ((taskType \u003d\u003d FIRST_LETTER_DEADLINE || taskType \u003d\u003d FIRST_LETTER_EVENT) \u0026\u0026 message.contains(SLASH)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":165,"author":{"gitId":"HangZelin"},"content":"            time \u003d message.substring(message.lastIndexOf(PIPE) + 2);","lastModifiedDate":"2021-09-13"},{"lineNumber":166,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"HangZelin"},"content":"            time \u003d EMPTY;","lastModifiedDate":"2021-09-13"},{"lineNumber":168,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"HangZelin"},"content":"        return time;","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is an operation type in a line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":174,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"HangZelin"},"content":"     * @return Operation type parsed from users\u0027 one line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":176,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the operation type does not belong to any one of the types that","lastModifiedDate":"2021-08-29"},{"lineNumber":177,"author":{"gitId":"HangZelin"},"content":"     * duke can do.","lastModifiedDate":"2021-08-29"},{"lineNumber":178,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"HangZelin"},"content":"    public String getOperationType() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"HangZelin"},"content":"        String operationType;","lastModifiedDate":"2021-08-31"},{"lineNumber":181,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":182,"author":{"gitId":"HangZelin"},"content":"        if (message.contains(SPACE)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":183,"author":{"gitId":"HangZelin"},"content":"            operationType \u003d message.substring(0, message.indexOf(SPACE));","lastModifiedDate":"2021-09-13"},{"lineNumber":184,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":185,"author":{"gitId":"HangZelin"},"content":"            operationType \u003d message;","lastModifiedDate":"2021-08-31"},{"lineNumber":186,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"HangZelin"},"content":"        parserExceptionDetector.detectOperationTypeException();","lastModifiedDate":"2021-09-08"},{"lineNumber":189,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":190,"author":{"gitId":"HangZelin"},"content":"        return operationType;","lastModifiedDate":"2021-08-31"},{"lineNumber":191,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is task info in a line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":195,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"HangZelin"},"content":"     * @return Operation type parsed from users\u0027 one line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":197,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the task info cannot be retrieved from users\u0027 one line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":198,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":199,"author":{"gitId":"HangZelin"},"content":"    public String getTask() throws DukeException{","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"HangZelin"},"content":"        String task;","lastModifiedDate":"2021-09-08"},{"lineNumber":201,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"HangZelin"},"content":"        parserExceptionDetector.detectGetTaskException();","lastModifiedDate":"2021-09-08"},{"lineNumber":203,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":204,"author":{"gitId":"HangZelin"},"content":"        if (message.contains(SLASH)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":205,"author":{"gitId":"HangZelin"},"content":"            task \u003d message.substring(message.indexOf(SPACE) + 1, message.indexOf(SLASH) - 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":206,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":207,"author":{"gitId":"HangZelin"},"content":"            task \u003d message.substring(message.indexOf(SPACE) + 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":208,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"HangZelin"},"content":"        return task;","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":212,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is time info in a line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":214,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":215,"author":{"gitId":"HangZelin"},"content":"     * @return Time parsed from users\u0027 one line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":216,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when users\u0027 the time cannot be parsed out or the parsed out time does not","lastModifiedDate":"2021-08-29"},{"lineNumber":217,"author":{"gitId":"HangZelin"},"content":"     * fit the format for a specific task type.","lastModifiedDate":"2021-08-29"},{"lineNumber":218,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"HangZelin"},"content":"    public String getTime() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":220,"author":{"gitId":"HangZelin"},"content":"        String time \u003d EMPTY;","lastModifiedDate":"2021-09-13"},{"lineNumber":221,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":222,"author":{"gitId":"HangZelin"},"content":"        parserExceptionDetector.detectGetTimeException();","lastModifiedDate":"2021-09-08"},{"lineNumber":223,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":224,"author":{"gitId":"HangZelin"},"content":"        if (message.startsWith(DEADLINE)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":225,"author":{"gitId":"HangZelin"},"content":"            time \u003d message.substring(message.indexOf(BY) + 4);","lastModifiedDate":"2021-09-13"},{"lineNumber":226,"author":{"gitId":"HangZelin"},"content":"        } else if (message.startsWith(EVENT)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":227,"author":{"gitId":"HangZelin"},"content":"            time \u003d message.substring(message.indexOf(AT) + 4);","lastModifiedDate":"2021-09-13"},{"lineNumber":228,"author":{"gitId":"HangZelin"},"content":"        } else if (message.startsWith(TELL)) {","lastModifiedDate":"2021-09-13"},{"lineNumber":229,"author":{"gitId":"HangZelin"},"content":"            time \u003d message.substring(message.indexOf(SPACE) + 1);","lastModifiedDate":"2021-09-13"},{"lineNumber":230,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":231,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"HangZelin"},"content":"        return time;","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":235,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":236,"author":{"gitId":"HangZelin"},"content":"     * return a String which is index info in a line of command.","lastModifiedDate":"2021-08-29"},{"lineNumber":237,"author":{"gitId":"HangZelin"},"content":"     * Noted: It is possible that index does not exist. This method will only be applicable for \"tell\", \"find\",","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"HangZelin"},"content":"     * \"done\" and \"delete\" operation type.","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":240,"author":{"gitId":"HangZelin"},"content":"     * @return Index parsed from users\u0027 one line of command if it contains an index.","lastModifiedDate":"2021-08-29"},{"lineNumber":241,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":242,"author":{"gitId":"HangZelin"},"content":"    public Integer getIndex() {","lastModifiedDate":"2021-08-25"},{"lineNumber":243,"author":{"gitId":"HangZelin"},"content":"        int index;","lastModifiedDate":"2021-09-08"},{"lineNumber":244,"author":{"gitId":"HangZelin"},"content":"        if (!parserExceptionDetector.detectIndexException()) {","lastModifiedDate":"2021-09-08"},{"lineNumber":245,"author":{"gitId":"HangZelin"},"content":"            return -1;","lastModifiedDate":"2021-09-08"},{"lineNumber":246,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":247,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":248,"author":{"gitId":"HangZelin"},"content":"        index \u003d Integer.parseInt(message.substring(message.indexOf(SPACE) + 1)) - 1;","lastModifiedDate":"2021-09-13"},{"lineNumber":249,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":250,"author":{"gitId":"HangZelin"},"content":"        return index;","lastModifiedDate":"2021-08-25"},{"lineNumber":251,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":252,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":252}},{"path":"src/main/java/Duke/logics/ParserExceptionDetector.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.logics;","lastModifiedDate":"2021-09-13"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.ExceptionType;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":" * CommandExceptionDetector will take in the message and see if there is any invalid","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":" * command inside.","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"public class ParserExceptionDetector {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"    //Constant values","lastModifiedDate":"2021-09-13"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private final static String SLASH \u003d \"/\";","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private final static String SPACE \u003d \" \";","lastModifiedDate":"2021-09-13"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    private final static String BY \u003d \"/by\";","lastModifiedDate":"2021-09-13"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private final static String AT \u003d \"/at\";","lastModifiedDate":"2021-09-13"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    private final static String TODO \u003d \"todo\";","lastModifiedDate":"2021-09-13"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    private final static String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2021-09-13"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    private final static String DONE \u003d \"done\";","lastModifiedDate":"2021-09-13"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    private final static String DELETE \u003d \"delete\";","lastModifiedDate":"2021-09-13"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    private final static String EVENT \u003d \"event\";","lastModifiedDate":"2021-09-13"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    private final static String FIND \u003d \"find\";","lastModifiedDate":"2021-09-13"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    private final static String TELL \u003d \"tell\";","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    private final String message;","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * Takes in the message and will configure it later.","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     * @param message Message to be parsed.","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    public ParserExceptionDetector(String message) {","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     * Determines if operation type is valid by checking if it is in the domain of","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     * the list of all operation types.","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Exception is thrown if operationType does not occur in any","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"     * of the given type list.","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    public void detectOperationTypeException() throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        //If the task type does not belong to the three types, throw an error.","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        TaskList.OperationType[] operationTypes \u003d TaskList.OperationType.values();","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        for (TaskList.OperationType o : operationTypes) {","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"            boolean isMatch \u003d message.toUpperCase().startsWith(o.toString());","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            if (isMatch) {","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"                return;","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"        throw new DukeException(ExceptionType.UNKNOWN_OPERATION);","lastModifiedDate":"2021-09-13"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     * Determines whether there is no task info.","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Exception is thrown when task cannot be read","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"    public void detectGetTaskException() throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        boolean isCorrectType \u003d message.startsWith(DEADLINE) || message.startsWith(EVENT)","lastModifiedDate":"2021-09-13"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"                || message.startsWith(TODO) || message.startsWith(FIND);","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        boolean isInCorrectFormat \u003d message.contains(SPACE);","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        if (!isCorrectType) {","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"            return;","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        if (!isInCorrectFormat) {","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(ExceptionType.NO_TASK_ERROR);","lastModifiedDate":"2021-09-13"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"     * Determines if there miss time info or the format of deadline, event, tell is incorrect.","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Exception is thrown when the format of time is wrong or time info is missing.","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"    public void detectGetTimeException() throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"        boolean isContainTime \u003d message.startsWith(TODO) || message.startsWith(DEADLINE)","lastModifiedDate":"2021-09-13"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"                || message.startsWith(EVENT) || message.startsWith(TELL);","lastModifiedDate":"2021-09-13"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"        boolean isDeadlineFormat \u003d message.contains(SLASH) \u0026\u0026 message.contains(BY);","lastModifiedDate":"2021-09-13"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"        boolean isEventFormat \u003d message.contains(SLASH) \u0026\u0026 message.contains(AT);","lastModifiedDate":"2021-09-13"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"        boolean isTellFormat \u003d message.contains(SPACE);","lastModifiedDate":"2021-09-13"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"        if (!isContainTime) {","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"            return;","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        //throw exceptions for deadline or events\u0027 format.","lastModifiedDate":"2021-09-13"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"        if (message.startsWith(DEADLINE) \u0026\u0026 !isDeadlineFormat) {","lastModifiedDate":"2021-09-13"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(ExceptionType.DEADLINE_FORMAT_ERROR);","lastModifiedDate":"2021-09-13"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        if (message.startsWith(EVENT) \u0026\u0026 !isEventFormat) {","lastModifiedDate":"2021-09-13"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(ExceptionType.EVENT_FORMAT_ERROR);","lastModifiedDate":"2021-09-13"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"        if (message.startsWith(TELL) \u0026\u0026 !isTellFormat) {","lastModifiedDate":"2021-09-13"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(ExceptionType.EVENT_FORMAT_ERROR);","lastModifiedDate":"2021-09-13"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"     * Returns a boolean value of whether there is no index given to parser.","lastModifiedDate":"2021-09-08"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"     * @return Boolean value indicates whether there is no value for index.","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"    public boolean detectIndexException() {","lastModifiedDate":"2021-09-08"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"        boolean isCorrectFormat \u003d message.contains(SPACE) \u0026\u0026 (message.startsWith(DONE) || message.startsWith(DELETE));","lastModifiedDate":"2021-09-13"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"        return isCorrectFormat;","lastModifiedDate":"2021-09-08"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"HangZelin":115}},{"path":"src/main/java/Duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.main;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"import duke.executions.Execution;","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import duke.logics.Parser;","lastModifiedDate":"2021-09-13"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"import duke.saveloadmanager.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.TextUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":" * @@author Hang Zelin","lastModifiedDate":"2021-09-07"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":" * Main Programme to execute the Duke Project","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":" * Duke will allow users to add three types of tasks: \"todo\" \"deadline\" \"event\".","lastModifiedDate":"2021-09-07"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":" * Duke also allow users to list all tasks, mark a task to be done if it is finished, and","lastModifiedDate":"2021-09-07"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":" * delete the task if the task is finished.","lastModifiedDate":"2021-09-07"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":" * You can also search a specific task by its date, keyword.","lastModifiedDate":"2021-09-07"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-09-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    private final static String FILEPATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    private final Storage storage;","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    private final TextUi textUi;","lastModifiedDate":"2021-09-13"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     * initialize Ui, storage and load TaskLists from specific filePath for Duke","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    public Duke() {","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        textUi \u003d new TextUi();","lastModifiedDate":"2021-09-13"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        storage \u003d new Storage(FILEPATH);","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"            e.getErrorMessage();","lastModifiedDate":"2021-09-13"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     * Updates a save data every time a round of execution is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    public void updateSaveData() {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            storage.saveListDataToFile(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            textUi.showSavingError();","lastModifiedDate":"2021-09-13"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"     * Runs the programme of Duke. It will firstly say Hello to users. Then it will repeatedly accept input from","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"     * users and filter out key commands, then call OperationForDuke to execute a task by commands.","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"     * The process will not stop until users enter \"goodbye\".","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"     * Noted: Every time an execution is done, the savedata will be updated.","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     * @param input Input user take in.","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"     * @return Response Duke gives.","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2021-09-13"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        Execution execution \u003d new Execution(tasks, textUi, parser);","lastModifiedDate":"2021-09-13"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        String dukeResponse;","lastModifiedDate":"2021-09-13"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"        dukeResponse \u003d execution.ExecutionResponse();","lastModifiedDate":"2021-09-13"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"        updateSaveData(); //Update the SaveData every time a round of operation is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        return dukeResponse;","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HangZelin":69,"-":3}},{"path":"src/main/java/Duke/main/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"package duke.main;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.Main;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-13"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"public class Launcher {","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"HangZelin":11}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"150.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-color: #3DB2FF; -fx-border-style: dashed solid; -fx-border-width: 4px 1.25em;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"#ff9d00\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"         \u003cfont\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"            \u003cFont name\u003d\"Bell MT\" size\u003d\"17.0\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-14"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"HangZelin":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/16\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.uimanager.MainWindow\"\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"400.0\" /\u003e","lastModifiedDate":"2021-09-13"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"HangZelin":19}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"# duke project template","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HangZelin":2,"-":22}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"T | 0 | borrow book","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":"D | 0 | return book | 2/12/2019 1800","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":"E | 1 | project meeting | I don\u0027t know the time","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":"D | 0 | return book | 23/9/2020 1525","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"E | 1 | project splashdown | 15/10/2019 0000","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":5}},{"path":"src/main/java/duke/UiManager/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Ui Part of Duke Programme. This programme mainly deals with all the user interactions.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * It will print out the information for each type of operation execution. And it will also accept users\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * input for each round of task execution.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"package duke.uimanager;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import duke.command.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"public class Ui {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * Prints a line for users.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    public void printAline() {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     * Prints Hello Message to users.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    public void HelloMessage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        String helloMessage \u003d \"Hello! I\u0027m Duke\\n\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"                \"What can I do for you?\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        System.out.println(LINE + \"\\n\" + helloMessage + LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     * Prints Goodbye Message to users.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    public void goodbyeMessage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        String goodbyeMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        System.out.println(goodbyeMessage);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"     * Prints all the tasks in a given list.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"     * @param tasks TaskList contains all the tasks to be printed.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"    public void printList(TaskList tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"            System.out.println(i + 1 + \".\" + tasks.get(i).getTaskInfo());","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"     * Prints the Ui info for the MarkDone method in Tasklists.","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"     * @param parsedTask Detailed info for a task that is parsed into a specific format.","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    public void markDone(String parsedTask) {","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\" \" + parsedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"     * Prints the Ui info for the Delete method in TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     * @param parsedTask Detailed info for a task that is parsed into a specific format","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"     * @param size Size of the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"    public void delete(String parsedTask, int size) {","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\" \" + parsedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"     * Prints the Ui info for the add method in Tasklists.","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"     * @param parsedTask Detailed info for a task that is parsed into a specific format","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"     * @param size Size of the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"    public void add(String parsedTask, int size) {","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\" \" + parsedTask);","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Now you have \" + size + \"\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"                \" tasks in the list.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"     * Prints the Ui info for the getSpecificDateEvent method in Tasklists.","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"    public void getSpecificDateEvent() {","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Here are all the tasks taking place on the date you give me:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"     * Prints the Ui info for the FindTask method in Tasklists.","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"    public void findTasks() {","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"     * Returns the line of input from users.","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"     * @return Line of command input by users.","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"    public String getInput() {","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"     * Returns the key 4 information from users\u0027 input encapsulated in a ArrayList\u003cString\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"     * They are: operationType, task, time, index. They will be useful when executing in Duke programme.","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"     * @return Size of 4 ArrayList contains Message of operationType, task, time and index.","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the input cannot be parsed.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"    public ArrayList\u003cString\u003e getInputForARound() throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"        System.out.println();","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"        Parser parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"        ArrayList\u003cString\u003e parsedMessageList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"        String message;","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"        message \u003d getInput();","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"        parser \u003d new Parser(message);","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(parser.getOperationType());","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(parser.getTask());","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(parser.getTime());","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"        parsedMessageList.add(parser.getIndex().toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"        return parsedMessageList;","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"     * Shows the Loading Error Text.","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Cannot Load From Data.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"     * Shows the Saving Error Text.","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"    public void showSavingError() {","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"        System.out.println(\"Cannot Save the Data.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"HangZelin":155}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Parser will take in a full input Message and take out the operation type, task, time, index from the","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * one line command input by users.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * It can also deal with the local saved data and return the parsed Message, which can be a task, time, done(or not).","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" * It can also parse the time users input into the LocalDateTime.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" * Some invalid input Messages may cause throwing DukeException.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    String Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     * @param Message Message users take in to be parsed.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    public Parser(String Message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"        this.Message \u003d Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    private static boolean isValidDate(int day, int month, int year, int hour, int minute) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        if (((year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || (year % 400 \u003d\u003d 0)) \u0026\u0026 month \u003d\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"            if (day \u003e 29 || day \u003c\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"                return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        } else if (month \u003d\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"            if (day \u003e 28 || day \u003c\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"                return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        if (month \u003c\u003d 0 || month \u003e 12) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        if (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7 || month \u003d\u003d 8 || month \u003d\u003d 10 || month \u003d\u003d 12) {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            if (day \u003e 31 || day \u003c\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"                return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        } else if (month !\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"            if (day \u003e 30 || day \u003c\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"                return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"        if (hour \u003e 24 || hour \u003c 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"        if (minute \u003e 60 || minute \u003c 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"     * Returns a LocalDateTime type that encapsulates the year, month, day, hour, minute of a time input.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"     * The method takes in a String of time and convert into LocalDateTime type.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     * The format can only be: 1. dd/mm/yyyy hhmm","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"     * 2. yyyy-mm-dd","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"     * @param time Time User takes in to be parsed.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"     * @return Parsed time converted in the type of LocalDateTime","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"    public LocalDateTime parseTime(String time) {","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"        LocalDateTime parsedTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        int day;","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        int month;","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        int year;","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"        int hour;","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"        int minute;","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"        if (time.contains(\"/\") \u0026\u0026 time.indexOf(\"/\", 3) !\u003d -1 \u0026\u0026 time.contains(\" \") \u0026\u0026 !time.contains(\"-\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"            int endIndex1 \u003d time.indexOf(\"/\");","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"            int endIndex2 \u003d time.lastIndexOf(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"            day \u003d Integer.parseInt(time.substring(0, endIndex1));","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"            Integer dayInteger \u003d day;","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"            int endIndex3 \u003d time.indexOf(\"/\", dayInteger.toString().length() + 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"            month \u003d Integer.parseInt(time.substring(endIndex1 + 1, endIndex3));","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"            year \u003d Integer.parseInt(time.substring(endIndex3 + 1, endIndex2));","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"            hour \u003d Integer.parseInt(time.substring(endIndex2 + 1).substring(0, 2));","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"            minute \u003d Integer.parseInt(time.substring(endIndex2 + 1).substring(2));","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"        } else if (time.contains(\"-\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"                parsedTime \u003d LocalDate.parse(time).atTime(0, 0);","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"                return parsedTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"                return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"            return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"        //Some Other cases;","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"        if (!isValidDate(day, month, year, hour, minute)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"            return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d LocalDate.of(year, month, day).atTime(hour, minute);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"        return parsedTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is a task info in a local save data.","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"     * Noted: you must specify it as local data, otherwise it can go wrong.","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"     * @return Task retrieved from save data.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"    public String getSaveTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"        String task;","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"        char taskType \u003d Message.charAt(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"        if (taskType \u003d\u003d \u0027D\u0027 || taskType \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"            task \u003d Message.substring(8, Message.indexOf(\"|\", 8) - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"            task \u003d Message.substring(8);","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"        return task;","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is a time info in a local save data.","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"     * Noted: you must specify it as local data, otherwise it can go wrong.","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"     * @return Time retrieved from save data.","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"    public String getSaveTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"        String time;","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"        char taskType \u003d Message.charAt(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"        if ((taskType \u003d\u003d \u0027D\u0027 || taskType \u003d\u003d \u0027E\u0027) \u0026\u0026 Message.contains(\"/\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"            time \u003d Message.substring(Message.lastIndexOf(\"|\") + 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"            time \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"        return time;","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is an operation type in a line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"     * @return Operation type parsed from users\u0027 one line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the operation type does not belong to any one of the types that","lastModifiedDate":"2021-08-26"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"     * duke can do.","lastModifiedDate":"2021-08-26"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"HangZelin"},"content":"    public String getOperationType() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"HangZelin"},"content":"        String OperationType;","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"HangZelin"},"content":"        if (Message.contains(\" \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"HangZelin"},"content":"            OperationType \u003d Message.substring(0, Message.indexOf(\" \"));","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"HangZelin"},"content":"            OperationType \u003d Message;","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"HangZelin"},"content":"        //If the task type does not belong to the three types, throw an error.","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"HangZelin"},"content":"        TaskList.OperationType[] operationTypes \u003d TaskList.OperationType.values();","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"HangZelin"},"content":"        for (TaskList.OperationType o : operationTypes) {","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"HangZelin"},"content":"            if (Message.startsWith(o.toString())) {","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"HangZelin"},"content":"                return OperationType;","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":176,"author":{"gitId":"HangZelin"},"content":"        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":178,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is task info in a line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"HangZelin"},"content":"     * @return Operation type parsed from users\u0027 one line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the task info cannot be retrieved from users\u0027 one line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"HangZelin"},"content":"    public String getTask() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"HangZelin"},"content":"        String task \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"HangZelin"},"content":"        if (Message.startsWith(\"deadline\") || Message.startsWith(\"event\") || Message.startsWith(\"todo\") || Message.startsWith(\"find\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":190,"author":{"gitId":"HangZelin"},"content":"            //Get Task description and time if it has it.","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"HangZelin"},"content":"            if (Message.contains(\"/\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"HangZelin"},"content":"                task \u003d Message.substring(Message.indexOf(\" \") + 1, Message.indexOf(\"/\") - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"HangZelin"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"HangZelin"},"content":"                if (!Message.contains(\" \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"HangZelin"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a \" + Message + \" cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"HangZelin"},"content":"                } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":197,"author":{"gitId":"HangZelin"},"content":"                    task \u003d Message.substring(Message.indexOf(\" \") + 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":198,"author":{"gitId":"HangZelin"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":199,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"HangZelin"},"content":"        return task;","lastModifiedDate":"2021-08-25"},{"lineNumber":203,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":205,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"HangZelin"},"content":"     * Returns a String which is time info in a line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":207,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"HangZelin"},"content":"     * @return Time parsed from users\u0027 one line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":209,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when users\u0027 the time cannot be parsed out or the parsed out time does not","lastModifiedDate":"2021-08-26"},{"lineNumber":210,"author":{"gitId":"HangZelin"},"content":"     * fit the format for a specific task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":211,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":212,"author":{"gitId":"HangZelin"},"content":"    public String getTime() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"HangZelin"},"content":"        String time \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":214,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":215,"author":{"gitId":"HangZelin"},"content":"        //throw exceptions for deadline or events\u0027 format.","lastModifiedDate":"2021-08-25"},{"lineNumber":216,"author":{"gitId":"HangZelin"},"content":"        if (Message.startsWith(\"todo\") || Message.startsWith(\"deadline\") || Message.startsWith(\"event\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":217,"author":{"gitId":"HangZelin"},"content":"            if (Message.contains(\"/\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":218,"author":{"gitId":"HangZelin"},"content":"                if (Message.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"HangZelin"},"content":"                    if (Message.contains(\"/by\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":220,"author":{"gitId":"HangZelin"},"content":"                        time \u003d Message.substring(Message.indexOf(\"/by\") + 4);","lastModifiedDate":"2021-08-25"},{"lineNumber":221,"author":{"gitId":"HangZelin"},"content":"                    } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":222,"author":{"gitId":"HangZelin"},"content":"                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but the format of deadline is wrong :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":223,"author":{"gitId":"HangZelin"},"content":"                    }","lastModifiedDate":"2021-08-25"},{"lineNumber":224,"author":{"gitId":"HangZelin"},"content":"                } else if (Message.startsWith(\"event\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":225,"author":{"gitId":"HangZelin"},"content":"                    if (Message.contains(\"/at\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":226,"author":{"gitId":"HangZelin"},"content":"                        time \u003d Message.substring(Message.indexOf(\"/at\") + 4);","lastModifiedDate":"2021-08-25"},{"lineNumber":227,"author":{"gitId":"HangZelin"},"content":"                    } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":228,"author":{"gitId":"HangZelin"},"content":"                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but the format of event is wrong :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":229,"author":{"gitId":"HangZelin"},"content":"                    }","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"HangZelin"},"content":"                } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":231,"author":{"gitId":"HangZelin"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but the format of todo is wrong :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"HangZelin"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"HangZelin"},"content":"        } else if (Message.startsWith(\"tell\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":235,"author":{"gitId":"HangZelin"},"content":"            if (!Message.contains(\" \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":236,"author":{"gitId":"HangZelin"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but the format of tell is wrong :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":237,"author":{"gitId":"HangZelin"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"HangZelin"},"content":"                time \u003d Message.substring(Message.indexOf(\" \") + 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":240,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":241,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":242,"author":{"gitId":"HangZelin"},"content":"        //Time for deadlines or event cannot be empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":243,"author":{"gitId":"HangZelin"},"content":"        if ((Message.startsWith(\"event\") || Message.startsWith(\"deadline\") || Message.startsWith(\"tell\")) \u0026\u0026 time.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":244,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(\"☹ OOPS!!! The time of a \" + Message.substring(0, Message.indexOf(\" \")) + \" cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":245,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":246,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":247,"author":{"gitId":"HangZelin"},"content":"        return time;","lastModifiedDate":"2021-08-25"},{"lineNumber":248,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":249,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":250,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":251,"author":{"gitId":"HangZelin"},"content":"     * return a String which is index info in a line of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":252,"author":{"gitId":"HangZelin"},"content":"     * Noted: It is possible that index does not exist. This method will only be applicable for \"tell\", \"find\",","lastModifiedDate":"2021-08-25"},{"lineNumber":253,"author":{"gitId":"HangZelin"},"content":"     * \"done\" and \"delete\" operation type.","lastModifiedDate":"2021-08-25"},{"lineNumber":254,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":255,"author":{"gitId":"HangZelin"},"content":"     * @return Index parsed from users\u0027 one line of command if it contains an index.","lastModifiedDate":"2021-08-26"},{"lineNumber":256,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":257,"author":{"gitId":"HangZelin"},"content":"    public Integer getIndex() {","lastModifiedDate":"2021-08-25"},{"lineNumber":258,"author":{"gitId":"HangZelin"},"content":"        int index \u003d (Message.contains(\" \") \u0026\u0026 (Message.startsWith(\"done\") || Message.startsWith(\"delete\")))","lastModifiedDate":"2021-08-25"},{"lineNumber":259,"author":{"gitId":"HangZelin"},"content":"                ? Integer.parseInt(Message.substring(Message.indexOf(\" \") + 1)) - 1","lastModifiedDate":"2021-08-25"},{"lineNumber":260,"author":{"gitId":"HangZelin"},"content":"                : -1;","lastModifiedDate":"2021-08-25"},{"lineNumber":261,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":262,"author":{"gitId":"HangZelin"},"content":"        return index;","lastModifiedDate":"2021-08-25"},{"lineNumber":263,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":264,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":264}},{"path":"src/main/java/duke/duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" * Main Programme to execute the Duke Project","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Duke will allow users to add three types of tasks: \"todo\" \"deadline\" \"event\".","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * Duke also allow users to list all tasks, mark a task to be done if it is finished, and","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" * delete the task if the task is finished.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":" * You can also search a specific task by its date, keyword.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import duke.saveloadmanager.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import duke.uimanager.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * @param filePath","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     * @description initialize Ui, storage and load tasklists from specific filePath for Duke","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"     * Chooses a specific task to execute via tasks type and add to the tasklists.","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"     * Every time an execution is done, the task will be stored to the local file called tasks.txt","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"     * via Storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"     * @param operationType Type of the operation users input.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"     * @param task Task info users input.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"     * @param time Time info users input.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"     * @param index Index of the task users input.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"    public void operationForDuke(String operationType, String task, String time, int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        switch (operationType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"        case \"bye\": {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"            ui.goodbyeMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        case \"list\": {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"            ui.printList(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        case \"done\": {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"                tasks.detectIndex(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"                tasks.markDone(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"                ui.markDone(tasks.get(index).getTaskInfo());","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"                e.printErrorMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"        case \"delete\": {","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"                tasks.detectIndex(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"                ui.delete(tasks.get(index).getTaskInfo(), tasks.size() - 1);","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"                tasks.delete(index);","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"                e.printErrorMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"        case \"tell\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"            ui.getSpecificDateEvent();","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"            tasks.getSpecificDateEvent(time);","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        case \"find\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"            ui.findTasks();","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"            tasks.findTasks(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        default: {","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"            try {","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"                tasks.add(operationType, task, time);","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"                ui.add(tasks.get(tasks.size() - 1).getTaskInfo(), tasks.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"                e.printErrorMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"            break;","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"     * Updates a save data every time a round of execution is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"    public void updateSaveData() {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"            storage.saveListDataToFile(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"            ui.showSavingError();","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"     * Runs the programme of Duke. It will firstly say Hello to users. Then it will repeatedly accept input from","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"     * users and filter out key commands, then call OperationForDuke to execute a task by commands. The process will not stop","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"     * until users enter \"goodbye\".","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"     * Noted: Every time an execution is done, the savedata will be updated.","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"        //Say Hello to the User","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"        ArrayList\u003cString\u003e messages;","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"        String operationType \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"        String task \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"        String time \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"        int index \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"        ui.HelloMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"        while (true) {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"                messages \u003d ui.getInputForARound();","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"                ui.printAline();","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"                e.printErrorMessage();","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"                ui.printAline();","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"                continue;","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"            if (messages.size() \u003c 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"                continue;","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"            operationType \u003d messages.get(0);","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"            task \u003d messages.get(1);","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"            time \u003d messages.get(2);","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"            index \u003d Integer.parseInt(messages.get(3));","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"            ui.printAline();","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"            operationForDuke(operationType, task, time, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"            ui.printAline();","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"            updateSaveData(); //Update the SaveData every time a round of operation is done.","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"            if (operationType.equals(\"bye\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HangZelin":159,"-":3}},{"path":"src/main/java/duke/excpetions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Exception class which deals with invalid input or errors.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"package duke.excpetions;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    private String errorMessage \u003d \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     * Constructor that stores the ErrorMessage encountered in Duke programme.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"     * @param errorMessage Detail info of the error.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    public DukeException(String errorMessage){","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     * Prints out the Error Message in DukeException.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    public void printErrorMessage(){","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"        System.out.println(this.errorMessage);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     * Returns the Error Message in DukeException.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     * @return Detailed info of error message.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    public String getMessage() {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"        return this.errorMessage;","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"HangZelin":38}},{"path":"src/main/java/duke/junittests/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * A JUnit class that tests some methods in Parser.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"package duke.junittests;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import duke.command.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    public void testParserTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        assertEquals(LocalDate.of(2019, 12, 2).atTime(18, 0), new Parser(\"\").parseTime(\"2/12/2019 1800\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        assertEquals(LocalDate.of(2020, 9, 23).atTime(15, 25), new Parser(\"\").parseTime(\"23/9/2020 1525\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        assertEquals(LocalDate.of(2019, 10, 15).atTime(0, 0), new Parser(\"\").parseTime(\"2019-10-15\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"        assertEquals(null, new Parser(\"\").parseTime(\"ukpkmkk\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public void testGetSaveTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"borrow book\", new Parser(\"T | 0 | borrow book\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"return book\", new Parser(\"D | 0 | return book | 2/12/2019 1800\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"project meeting\", new Parser(\"E | 0 | project meeting | I don\u0027t know the time\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"project splashdown\", new Parser(\"E | 0 | project splashdown | 15/10/2019 0000\").getSaveTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    public void testGetSaveTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"\", new Parser(\"T | 0 | borrow book\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"2/12/2019 1800\", new Parser(\"D | 0 | return book | 2/12/2019 1800\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"\", new Parser(\"E | 0 | project meeting | I don\u0027t know the time\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\"15/10/2019 0000\", new Parser(\"E | 0 | project splashdown | 15/10/2019 0000\").getSaveTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    public void testGetOperationType() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"todo\", new Parser(\"todo borrow book\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"deadline\", new Parser(\"deadline return book /by 2/12/2019 1800\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"done\", new Parser(\"done 3\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"tell\", new Parser(\"tell 60\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"bye\", new Parser(\"bye\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"delete\", new Parser(\"delete 10\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"list\", new Parser(\"list\").getOperationType());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"            fail(); //should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"    public void testGetTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"borrow book\", new Parser(\"todo borrow book\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"return book\", new Parser(\"deadline return book /by 2/12/2019 1800\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"project meeting\", new Parser(\"event project meeting /at Aug 6th 6pm\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"project splashdown\", new Parser(\"event project splashdown /at 2019-10-15\").getTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"            fail(); //should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"    public void testGetTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"\", new Parser(\"todo borrow book\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"2/12/2019 1800\", new Parser(\"deadline return book /by 2/12/2019 1800\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"Aug 6th 6pm\", new Parser(\"event project meeting /at Aug 6th 6pm\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"2019-10-15\", new Parser(\"event project splashdown /at 2019-10-15\").getTime());","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"            fail(); //should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"    public void testGetIndex() {","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"        assertEquals(19, new Parser(\"delete 20\").getIndex());","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"        assertEquals(14, new Parser(\"done 15\").getIndex());","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"        assertEquals(20312130, new Parser(\"done 20312131\").getIndex());","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":91}},{"path":"src/main/java/duke/junittests/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * A JUnit class that tests some methods in Storage.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"package duke.junittests;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import duke.saveloadmanager.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    public void handleTaskTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\u00270\u0027, new Storage(\"data/tasks.txt\").handleTaskText(\"T | 0 | borrow book\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\u00271\u0027, new Storage(\"data/tasks.txt\").handleTaskText(\"D | 1 | return book | 2/12/2019 1800\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\u00271\u0027, new Storage(\"data/tasks.txt\").handleTaskText(\"E | 1 | project meeting | I don\u0027t know the time\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\u00270\u0027, new Storage(\"data/tasks.txt\").handleTaskText(\"D | 0 | return book | 23/9/2020 1525\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\u00270\u0027, new Storage(\"data/tasks.txt\").handleTaskText(\"E | 0 | project splashdown | 15/10/2019 0000\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"        assertEquals(\u00271\u0027, new Storage(\"data/tasks.txt\").handleTaskText(\"T | 1 | join sports club\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    public void load_CorrectFilePath_success() {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[T][ ] borrow book\", new Storage(\"data/tasks.txt\").load().get(0).getTaskInfo());","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[D][ ] return book (by: Dec 02 2019 18:00)\", new Storage(\"data/tasks.txt\").load().get(1).getTaskInfo());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[E][X] project meeting (at: I don\u0027t know the time.)\", new Storage(\"data/tasks.txt\").load().get(2).getTaskInfo());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[D][ ] return book (by: Sep 23 2020 15:25)\", new Storage(\"data/tasks.txt\").load().get(3).getTaskInfo());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"[E][X] project splashdown (at: Oct 15 2019 00:00)\", new Storage(\"data/tasks.txt\").load().get(4).getTaskInfo());","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"            //Should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    public void load_WrongFilePath_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            assertEquals(new ArrayList\u003c\u003e(), new Storage(\"I don\u0027t know\").load());","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"            fail(); //Should not reach this.","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"            assertEquals(\"Cannot Read From Data.\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":55}},{"path":"src/main/java/duke/saveloadmanager/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Programme that allows Duke to save any changes after execution and read data when it is initially invoked.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * In other words, programme allows Duke to save and read data from a file.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"package duke.saveloadmanager;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import duke.command.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    String filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"     * Returns a List of Tasks loaded from the local file.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     * @return ArrayList\u003cTask\u003e TaskList loaded from the local file.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the file cannot be loaded.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"            readDataFromFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(\"Cannot Read From Data.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        return this.list;","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"     * Allows users to read all the info of tasks stored in local files, and write them into TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"     * @throws FileNotFoundException Throws when the file cannot be found.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"    public void readDataFromFile() throws FileNotFoundException {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"            String Data \u003d s.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"            char done \u003d handleTaskText(Data);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"            if (done \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"                this.list.get(index - 1).markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"            index++;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"     * Allows users to save data from a TaskList to a specific file.","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"     * @param Tasks TaskList tobe saved into the local file in the filePath.","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"     * @throws IOException Throws when data cannot be written into local file.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"    public void saveListDataToFile(TaskList Tasks) throws IOException {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"        for (int i \u003d 0; i \u003c Tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"            fw.write(Tasks.get(i).getSaveDataInfo() + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"        fw.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"     * Returns char for \"0\" or \"1\". The value indicates whether the task is done or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"     * It also deals with the local file data and convert them into task and store into TaskList.","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"     * @param Data A line of command in the save file to be parsed.","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"     * @return a Char indicates if the task is done or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"    public char handleTaskText(String Data) {","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"        Parser p \u003d new Parser(Data);","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        char done \u003d Data.charAt(4);","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"        char taskType \u003d Data.charAt(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"        String task;","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"        String time;","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"        task \u003d p.getSaveTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"        time \u003d p.getSaveTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"        LocalDateTime parsedTime \u003d p.parseTime(time);","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"        TaskList.OperationType[] taskTypes \u003d TaskList.OperationType.values();","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"        for (TaskList.OperationType t : taskTypes) {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"            if (t.toString().toUpperCase().charAt(0) \u003d\u003d taskType \u0026\u0026 (t.toString().equals(\"todo\") || t.toString().equals(\"deadline\") ||","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"                    t.toString().equals(\"event\"))) {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"                Task newTask \u003d t.assignTaskType(t, task, parsedTime);","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"                this.list.add(newTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"        return done;","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":113}},{"path":"src/main/java/duke/task/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Deadlines class that extends Task class. It is one of the types in 3 tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * Will contain a time in the form of \"/by\"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private boolean done;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private String task;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    private LocalDateTime time;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private String taskType \u003d \"D\";","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    public Deadlines(boolean done, String task, LocalDateTime time) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        this.done \u003d done;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"        String done_str \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        if (!this.done) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"            done_str \u003d \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"            done_str \u003d \"X\";","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        return \"[\" + taskType + \"]\" + \"[\" + done_str + \"] \" + task + \" (by: \" + parsedTime() + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        this.done \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    public String parsedTime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        String parsedTime \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        if (this.time !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d this.time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH));","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d \"I don\u0027t know the time.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        return parsedTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    public String getTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        if (this.time \u003d\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"            return \"I don\u0027t know the time\";","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"        return this.time.getDayOfMonth() + \"/\" + this.time.getMonthValue() + \"/\" + this.time.getYear() + \" \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"                ((this.time.getHour() \u003c 10) ? \"0\" + this.time.getHour()","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"                        : this.time.getHour())","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"                + ((this.time.getMinute() \u003c 10) ? \"0\" + this.time.getMinute()","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"                : this.time.getMinute());","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"    public String getSaveDataInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        return this.taskType + \" | \" + (this.done ? 1 : 0) + \" | \" + task + \" | \" + getTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":72}},{"path":"src/main/java/duke/task/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Events class that extends Task class. It is one of the types in 3 tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * Will contain a time in the form of \"/by\"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"public class Events extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    private boolean done;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    private String task;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    private LocalDateTime time;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    private String taskType \u003d \"E\";","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"    public Events(boolean done, String task, LocalDateTime time) {","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        this.done \u003d done;","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"        String done_str \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"        if (!this.done) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"            done_str \u003d \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"            done_str \u003d \"X\";","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"        return \"[\" + taskType + \"]\" + \"[\" + done_str + \"] \" + task + \" (at: \" + parsedTime() + \")\";","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"        this.done \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"    public String parsedTime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"        String parsedTime \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        if (this.time !\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d this.time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH));","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            parsedTime \u003d \"I don\u0027t know the time.\";","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"        return parsedTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"    public String getTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"        if (this.time \u003d\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"            return \"I don\u0027t know the time\";","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"        return this.time.getDayOfMonth() + \"/\" + this.time.getMonthValue() + \"/\" + this.time.getYear() + \" \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"                ((this.time.getHour() \u003c 10) ? \"0\" + this.time.getHour()","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"                        : this.time.getHour())","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"                + ((this.time.getMinute() \u003c 10) ? \"0\" + this.time.getMinute()","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"                : this.time.getMinute());","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"    public String getSaveDataInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        return this.taskType + \" | \" + (this.done ? 1 : 0) + \" | \" + task + \" | \" + getTime();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":74}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * An abstract class that encapsulates the info basic for a task","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of \"[type][] task info (/by ...)\"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"     * @return Task info parsed in the format duke executes.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"    public abstract String getTaskInfo();","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"MMM dd yyyy HH:mm\"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"     * Noted: This method is only applicable for \"event\" and \"deadline\" type task.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"     * @return Return the parsed time in the format duke can understand.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"    public abstract String parsedTime();","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"     * Returns the Parsed time info in the format of \"dd/mm/yy hhmm\".","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"     * Noted: This method is only applicable for \"event\" and \"deadline\" type task,","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"     * @return Time in the format of \"dd/mm/yy hhmm\" which duke can understand.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    public abstract String getTime();","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"     * Returns the task info in the format of save data requirement, that is: \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"     * @return Task info in the format of \"taskType | done or not | task info | time\".","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    public abstract String getSaveDataInfo();","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"     * Mark this task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    public abstract void markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"HangZelin":44}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" * Stores all the tasks for the Duke. Duke can refer to this tasklist to see a specific task","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":" * or make use of the methods in it to execute an operation.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"import duke.command.Parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"import duke.excpetions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"     * Constructor to store all the tasks in a Generic ArrayList.","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"     * @param tasks A list of Task type variables.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"     * Another Constructor to initialize an empty TaskList if there is no save data.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"     * Gets all the tasks that match the time users take in.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"     * @param time String message that indicates time users take in to find specific event.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"    public void getSpecificDateEvent(String time) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"        Parser parser \u003d new Parser(\"\");","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"        int count \u003d 0;//count the number of the events happen on the time.","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"            String message \u003d tasks.get(i).getTaskInfo();","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"            String unParsedInfo \u003d tasks.get(i).getTime();","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"            String timeInFormat \u003d (parser.parseTime(time) !\u003d null) ?","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"HangZelin"},"content":"                    parser.parseTime(time).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH))","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"HangZelin"},"content":"                    : \"Nope\";","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"HangZelin"},"content":"            if ((unParsedInfo !\u003d null \u0026\u0026 (unParsedInfo.contains(time) || unParsedInfo.contains(timeInFormat)))","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"HangZelin"},"content":"                    || message.contains(time) || message.contains(timeInFormat)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"HangZelin"},"content":"                count++;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"HangZelin"},"content":"                System.out.println(count + \".\" + message);","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"HangZelin"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"HangZelin"},"content":"            System.out.println(\"Sorry. There is no tasks occurred on the time you give me!! :(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"HangZelin"},"content":"     * Finds all the tasks that match the key word users take in.","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"HangZelin"},"content":"     * @param keyword String message that indicates the keyword users want to search.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"HangZelin"},"content":"    public void findTasks(String keyword) {","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"HangZelin"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"HangZelin"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"HangZelin"},"content":"            String Message \u003d tasks.get(i).getTaskInfo();","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"HangZelin"},"content":"            if (Message.contains(keyword)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"HangZelin"},"content":"                count++;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"HangZelin"},"content":"                System.out.println(count + \".\" + Message);","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"HangZelin"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"HangZelin"},"content":"            System.out.println(\"Sorry. There is no tasks matching the keyword you give me!! :(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"HangZelin"},"content":"     * Marks a specific task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"HangZelin"},"content":"     * @param index Integer indicates the index for the task","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"HangZelin"},"content":"    public void markDone(int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"HangZelin"},"content":"        this.tasks.get(index).markDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"HangZelin"},"content":"     * Deletes a specific task.","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"HangZelin"},"content":"     * @param index Integer indicates the index for the task","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"HangZelin"},"content":"    public void delete(int index) {","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"HangZelin"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"HangZelin"},"content":"     * Adds a task to the TaskLists. This method will automatically decide which type of the","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"HangZelin"},"content":"     * task is added to the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"HangZelin"},"content":"     * @param taskType String message indicates the task type.","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"HangZelin"},"content":"     * @param task String message indicates the task info.","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"HangZelin"},"content":"     * @param time String message indicates the time info.","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when a task cannot be created or added to the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"HangZelin"},"content":"    public void add(String taskType, String task, String time) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"HangZelin"},"content":"        Parser parser \u003d new Parser(\"\");","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"HangZelin"},"content":"        LocalDateTime parsedTime \u003d parser.parseTime(time);","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"HangZelin"},"content":"        OperationType[] taskTypes \u003d OperationType.values();","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"HangZelin"},"content":"        for (OperationType t : taskTypes) {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"HangZelin"},"content":"            if (t.toString().equals(taskType)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"HangZelin"},"content":"                Task newTask \u003d t.assignTaskType(t, task, parsedTime);","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"HangZelin"},"content":"                tasks.add(newTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"HangZelin"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"HangZelin"},"content":"     * Returns a specific task users refer to.","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"HangZelin"},"content":"     * @param index An integer indicates the index of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"HangZelin"},"content":"     * @return Task users refer to","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"HangZelin"},"content":"     * */","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"HangZelin"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"HangZelin"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"HangZelin"},"content":"     * Returns the size of the TaskList","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"HangZelin"},"content":"     * @return Integer indicates the size of the TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"HangZelin"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"HangZelin"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"HangZelin"},"content":"     * Detects if the index taking in is invalid or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"HangZelin"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"HangZelin"},"content":"     * @param index Integer indicates the index of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"HangZelin"},"content":"     * @throws DukeException Throws when the index is invalid.","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"HangZelin"},"content":"    public void detectIndex(int index) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"HangZelin"},"content":"        if (index \u003c 0 || index \u003e\u003d this.tasks.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"HangZelin"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but the index is invalid :-(\");","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"HangZelin"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"HangZelin"},"content":"     * Enum of all types of operations that is able to execute.","lastModifiedDate":"2021-08-26"},{"lineNumber":161,"author":{"gitId":"HangZelin"},"content":"     * It also contains a method AssignTask Type to find the specific type of task to create.","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"HangZelin"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"HangZelin"},"content":"    public enum OperationType {","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"HangZelin"},"content":"        bye, done, delete, tell, find, list, todo, deadline, event;","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"HangZelin"},"content":"        public Task assignTaskType(OperationType type, String task, LocalDateTime time) {","lastModifiedDate":"2021-08-26"},{"lineNumber":167,"author":{"gitId":"HangZelin"},"content":"            switch (type) {","lastModifiedDate":"2021-08-26"},{"lineNumber":168,"author":{"gitId":"HangZelin"},"content":"                case todo:","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"HangZelin"},"content":"                    return new ToDos(false, task);","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"HangZelin"},"content":"                case deadline:","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"HangZelin"},"content":"                    return new Deadlines(false, task, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"HangZelin"},"content":"                case event:","lastModifiedDate":"2021-08-25"},{"lineNumber":173,"author":{"gitId":"HangZelin"},"content":"                    return new Events(false, task, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"HangZelin"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"HangZelin"},"content":"                    return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":176,"author":{"gitId":"HangZelin"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":178,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":179,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"HangZelin":179}},{"path":"src/main/java/duke/task/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HangZelin"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"HangZelin"},"content":" * @author Hang Zelin","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"HangZelin"},"content":" * @description ToDos class that extends Task class. It is one of the types in 3 tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"HangZelin"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"HangZelin"},"content":"package duke.task;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"HangZelin"},"content":"public class ToDos extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"HangZelin"},"content":"    private boolean done;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"HangZelin"},"content":"    private String task;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"HangZelin"},"content":"    private String taskType \u003d \"T\";","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"HangZelin"},"content":"    public ToDos(boolean done, String task) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"HangZelin"},"content":"        this.done \u003d done;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"HangZelin"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"HangZelin"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"HangZelin"},"content":"        String done_str \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"HangZelin"},"content":"        if (!this.done) {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"HangZelin"},"content":"            done_str \u003d \" \";","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"HangZelin"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"HangZelin"},"content":"            done_str \u003d \"X\";","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"HangZelin"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"HangZelin"},"content":"        return \"[\" + taskType + \"]\" + \"[\" + done_str + \"] \" + task;","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"HangZelin"},"content":"    public String parsedTime() {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"HangZelin"},"content":"        return null;","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"HangZelin"},"content":"    public String getTime() {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"HangZelin"},"content":"        return null;","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"HangZelin"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"HangZelin"},"content":"        this.done \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"HangZelin"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"HangZelin"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"HangZelin"},"content":"    public String getSaveDataInfo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"HangZelin"},"content":"        return this.taskType + \" | \" + (this.done ? 1 : 0) + \" | \" + task;","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"HangZelin"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"HangZelin"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"HangZelin":49}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"HangZelin"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HangZelin":1,"-":20}}]

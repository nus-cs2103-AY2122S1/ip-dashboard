[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"plugins {","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.10\u0027","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"repositories {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    mavenCentral()","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"dependencies {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"test {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    testLogging {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        showExceptions true","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        showCauses true","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"        showStackTraces true","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"application {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"shadowJar {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"checkstyle {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"javafx {","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"    version \u003d \"15.0.1\"","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"run{","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":52}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"@rem limitations under the License.","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"@rem","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"@rem Find java.exe","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"echo.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"echo.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"goto fail","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":":findJavaFromJavaHome","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"if exist \"%JAVA_EXE%\" goto init","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"echo.","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"echo.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"goto fail","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":":init","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"ganhongyao"},"content":"@rem Get command-line arguments, handling Windows variants","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"ganhongyao"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"ganhongyao"},"content":":win9xME_args","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"ganhongyao"},"content":"@rem Slurp the command line arguments.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"ganhongyao"},"content":"set CMD_LINE_ARGS\u003d","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"ganhongyao"},"content":"set _SKIP\u003d2","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"ganhongyao"},"content":":win9xME_args_slurp","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"ganhongyao"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"ganhongyao"},"content":"set CMD_LINE_ARGS\u003d%*","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"ganhongyao"},"content":":execute","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"ganhongyao"},"content":"@rem Setup the command line","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"ganhongyao"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"ganhongyao"},"content":"@rem Execute Gradle","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"ganhongyao"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"ganhongyao"},"content":":end","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"ganhongyao"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"ganhongyao"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"ganhongyao"},"content":":fail","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"ganhongyao"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"ganhongyao"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"ganhongyao"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"ganhongyao"},"content":"exit /b 1","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"ganhongyao"},"content":":mainEnd","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"ganhongyao"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"ganhongyao"},"content":":omega","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":103}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.parser.CommandParser;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeBadResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeProperties;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":" * Represents the main Duke application.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"public class Duke {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    public static final String DEFAULT_STORAGE_FILE_PATH \u003d \"./data/tasks.txt\";","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a Duke object.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    public Duke() {","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        String filePath \u003d DukeProperties.getPropertyOrDefault(\"storage\", DEFAULT_STORAGE_FILE_PATH);","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-17"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            taskManager \u003d new TaskManager(storage.loadTasks());","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"            ui.print(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"            taskManager \u003d new TaskManager();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"     * Returns a \u003ccode\u003eDukeResponse\u003c/code\u003e on startup.","lastModifiedDate":"2021-08-29"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"     * Displays the saved tasks if the task manager was loaded from storage.","lastModifiedDate":"2021-08-29"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse greet() {","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"        if (taskManager.getTaskCount() \u003e 0) {","lastModifiedDate":"2021-08-29"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"            return new DukeResponse(\"Welcome back! I\u0027m Duke. \" + storage.getTasksLoadedMessage(taskManager));","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"            return new DukeResponse(\"Hello! I\u0027m Duke. What can I do for you?\");","lastModifiedDate":"2021-08-29"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"     * Runs the program until termination.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"        DukeResponse startUpResponse \u003d greet();","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"        ui.print(startUpResponse.toString());","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"            String input \u003d ui.readCommand();","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"            DukeResponse response \u003d getResponse(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"            ui.print(response.toString());","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"            isExit \u003d response.isExit();","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":"     * Returns the appropriate response according to the user input.","lastModifiedDate":"2021-08-29"},{"lineNumber":68,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"ganhongyao"},"content":"     * @param input User input.","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eDukeResponse\u003c/code\u003e. If a \u003ccode\u003eDukeException\u003c/code\u003e was thrown, it is wrapped","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"ganhongyao"},"content":"     * in a \u003ccode\u003eDukeBadResponse\u003c/code\u003e.","lastModifiedDate":"2021-08-29"},{"lineNumber":72,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse getResponse(String input) {","lastModifiedDate":"2021-08-29"},{"lineNumber":74,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-29"},{"lineNumber":75,"author":{"gitId":"ganhongyao"},"content":"            Command command \u003d CommandParser.parse(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":76,"author":{"gitId":"ganhongyao"},"content":"            DukeResponse response \u003d command.execute(taskManager, storage);","lastModifiedDate":"2021-08-29"},{"lineNumber":77,"author":{"gitId":"ganhongyao"},"content":"            return response;","lastModifiedDate":"2021-08-29"},{"lineNumber":78,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-29"},{"lineNumber":79,"author":{"gitId":"ganhongyao"},"content":"            return new DukeBadResponse(e.getMessage());","lastModifiedDate":"2021-08-29"},{"lineNumber":80,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":81,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":84,"author":{"gitId":"ganhongyao"},"content":"     * Main entrypoint for the Duke application.","lastModifiedDate":"2021-08-29"},{"lineNumber":85,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":86,"author":{"gitId":"ganhongyao"},"content":"     * @param args Arguments that allow user to start the CLI version.","lastModifiedDate":"2021-09-02"},{"lineNumber":87,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":88,"author":{"gitId":"ganhongyao"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"ganhongyao"},"content":"        if (args.length \u003e 0 \u0026\u0026 args[0].equals(\"-c\")) {","lastModifiedDate":"2021-08-29"},{"lineNumber":90,"author":{"gitId":"ganhongyao"},"content":"            new Duke().run();","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"ganhongyao"},"content":"        } else {","lastModifiedDate":"2021-08-29"},{"lineNumber":92,"author":{"gitId":"ganhongyao"},"content":"            Application.launch(Gui.class, args);","lastModifiedDate":"2021-08-29"},{"lineNumber":93,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":94,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":1,"ganhongyao":94}},{"path":"src/main/java/duke/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"public class Gui extends Application {","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"            stage.getIcons().add(new Image(getClass().getResourceAsStream(\"/images/icon.png\")));","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"            String css \u003d getClass().getResource(\"/view/styles.css\").toExternalForm();","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"            scene.getStylesheets().add(css);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            stage.show();","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ganhongyao":37}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for adding a new \u003ccode\u003eDeadline\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To add a new deadline, use \u0027deadline \u003cname\u003e /by \u003cdue-date\u003e\u0027.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    public AddDeadlineCommand(String commandArguments) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        String[] deadlineDetails \u003d commandArguments.split(\"\\\\s+/by\\\\s+\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        if (deadlineDetails.length \u003c 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027deadline\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        String deadlineName \u003d deadlineDetails[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        DukeDateTime deadlineDueDate \u003d DukeDateTime.parseUserInputDateTime(deadlineDetails[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        Deadline deadline \u003d new Deadline(deadlineName, deadlineDueDate);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"        String message \u003d taskManager.addTask(deadline);","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        storage.saveTasks(taskManager);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":36}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for adding a new \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To add a new event, use \u0027event \u003cname\u003e /at \u003cevent-timestamp\u003e\u0027.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    public AddEventCommand(String commandArguments) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        String[] eventDetails \u003d commandArguments.split(\"\\\\s+/at\\\\s+\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        if (eventDetails.length \u003c 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027event\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        String eventName \u003d eventDetails[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        DukeDateTime eventTimestamp \u003d DukeDateTime.parseUserInputDateTime(eventDetails[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        Event event \u003d new Event(eventName, eventTimestamp);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"        String message \u003d taskManager.addTask(event);","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        storage.saveTasks(taskManager);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":36}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for adding a new \u003ccode\u003eToDo\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To add a new todo, use \u0027todo \u003cname\u003e\u0027.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    public AddToDoCommand(String commandArguments) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        if (commandArguments.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027todo\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"        ToDo toDo \u003d new ToDo(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        String message \u003d taskManager.addTask(toDo);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        storage.saveTasks(taskManager);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" * Represents a command entered by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     * Executes the command.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"     * @param taskManager \u003ccode\u003eTaskManager\u003c/code\u003e responsible for keeping track of the existing tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"     * @param storage \u003ccode\u003eStorage\u003c/code\u003e used to save updated task data.","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If any errors occur during execution.","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    public abstract DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException;","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ganhongyao":21}},{"path":"src/main/java/duke/command/CompleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for marking a \u003ccode\u003eTask\u003c/code\u003e as completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"public class CompleteTaskCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To mark a task as done, use \u0027done \u003ctask-number\u003e\u0027.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    public CompleteTaskCommand(String commandArguments) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        if (commandArguments.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027done\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            int taskNumber \u003d Integer.parseInt(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"            String message \u003d taskManager.markTaskAsDone(taskNumber);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"            storage.saveTasks(taskManager);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"            return new DukeResponse(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            // User provided an argument that is not parsable.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":36}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for deleting a \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To delete a task, use \u0027delete \u003ctask-number\u003e\u0027.\";","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    public DeleteTaskCommand(String commandArguments) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        if (commandArguments.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027delete\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            int taskNumber \u003d Integer.parseInt(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"            String message \u003d taskManager.deleteTask(taskNumber);","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"            storage.saveTasks(taskManager);","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"            return new DukeResponse(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            // User provided an argument that is not parsable.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":36}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for exiting the application.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To close Duke, use \u0027bye\u0027.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) {","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"        storage.saveTasks(taskManager);","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(\"Goodbye. Hope to see you again soon!\", true);","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":19}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for finding tasks using search strings.","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To find a task with matching names, \"","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"            + \"use \u0027find [\u003csearch-string\u003e...]\u0027.\";","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    public FindCommand(String commandArguments) {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        if (commandArguments.isEmpty()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027find\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"        String[] searchStrings \u003d commandArguments.split(\"\\\\s+\");","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(taskManager.list(searchStrings));","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":30}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for displaying help information and usage of the different commands.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    private static final String[] ALL_USAGES \u003d {","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"        LoadCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"        AddToDoCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        AddDeadlineCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"        AddEventCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"        ListCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        FindCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        CompleteTaskCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        DeleteTaskCommand.USAGE_MESSAGE,","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"        ExitCommand.USAGE_MESSAGE","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    };","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(String.join(\"\\n\", ALL_USAGES));","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":28}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for listing tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"            \"To list all tasks, use \u0027list\u0027.\\nTo list all tasks on a certain date, use \u0027list \u003cdate\u003e\u0027.\";","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    public ListCommand(String commandArguments) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        if (commandArguments.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"            return new DukeResponse(taskManager.list());","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"            DukeDateTime date \u003d DukeDateTime.parseUserInputDate(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"            return new DukeResponse(taskManager.list(date));","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":32}},{"path":"src/main/java/duke/command/LoadCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" * Represents a command for loading existing tasks from a specified file.","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"public class LoadCommand extends Command {","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    public static final String COMMAND_WORD \u003d \"load\";","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public static final String USAGE_MESSAGE \u003d \"To load tasks from a file, use \u0027load \u003crelative-file-path\u003e\u0027.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    private final String commandArguments;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    public LoadCommand(String commandArguments) {","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        this.commandArguments \u003d commandArguments;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse execute(TaskManager taskManager, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        if (commandArguments.isEmpty()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Invalid use of the \u0027load\u0027 command.\\n\\n\" + USAGE_MESSAGE);","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        storage.setFilePath(commandArguments);","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"        taskManager.setTaskList(storage.loadTasks());","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        return new DukeResponse(\"File successfully loaded! \" + storage.getTasksLoadedMessage(taskManager));","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"ganhongyao":30}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":" * Represents exceptions specific to the Duke application.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ganhongyao":10}},{"path":"src/main/java/duke/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.command.CompleteTaskCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"import duke.command.LoadCommand;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":" * Parses user input.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"public class CommandParser {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"     * Parses the command as well as any arguments entered by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"     * @param fullCommand Full command entered by the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eCommand\u003c/code\u003e, or the \u003ccode\u003eHelpCommand\u003c/code\u003e if the command is not recognised.","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    public static Command parse(String fullCommand) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        final String trimmedCommand \u003d fullCommand.trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"        final String commandWord \u003d trimmedCommand.split(\"\\\\s+\")[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        final String commandArguments \u003d trimmedCommand.replace(commandWord, \"\").trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            return new ListCommand(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"            return new FindCommand(commandArguments);","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        case AddToDoCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"            return new AddToDoCommand(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"        case AddDeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"            return new AddDeadlineCommand(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"            return new AddEventCommand(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"        case CompleteTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"            return new CompleteTaskCommand(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"        case DeleteTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"            return new DeleteTaskCommand(commandArguments);","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"        case LoadCommand.COMMAND_WORD:","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"            return new LoadCommand(commandArguments);","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":53}},{"path":"src/main/java/duke/parser/DeadlineParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":" * Parses deadlines.","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"public class DeadlineParser {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     * Parses a \u003ccode\u003eDeadline\u003c/code\u003e from its text representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"     * @param text Text representation found.","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eDeadline\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the text representation cannot be parsed accurately.","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    protected static Deadline parse(String text) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        String[] deadlineDetails \u003d text.split(\" \\\\| \", 4);","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        if (deadlineDetails.length \u003c 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(String.format(\"Cannot parse Deadline from \\n\\t`%s`\", text));","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        boolean isDone \u003d deadlineDetails[1].equals(\"X\");","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        String name \u003d deadlineDetails[2];","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        DukeDateTime dueDate \u003d DukeDateTime.parseIso(deadlineDetails[3]);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        return new Deadline(name, isDone, dueDate);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":28}},{"path":"src/main/java/duke/parser/EventParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":" * Parses events.","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"public class EventParser {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     * Parses an \u003ccode\u003eEvent\u003c/code\u003e from its text representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"     * @param text Text representation found.","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eEvent\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the text representation cannot be parsed accurately.","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    protected static Event parse(String text) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        String[] eventDetails \u003d text.split(\" \\\\| \", 4);","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        if (eventDetails.length \u003c 4) {","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(String.format(\"Cannot parse Event from \\n\\t`%s`\", text));","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        boolean isDone \u003d eventDetails[1].equals(\"X\");","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        String name \u003d eventDetails[2];","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        DukeDateTime timestamp \u003d DukeDateTime.parseIso(eventDetails[3]);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        return new Event(name, isDone, timestamp);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":28}},{"path":"src/main/java/duke/parser/TaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":" * Parses tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"public class TaskParser {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"     * Parses a \u003ccode\u003eTask\u003c/code\u003e from its text representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     * @param text Text representation found.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eTask\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the text does not start with a character corresponding to a valid \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    public static Task parse(String text) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        char taskType \u003d text.charAt(0);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"            return ToDoParser.parse(text);","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"            return DeadlineParser.parse(text);","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"            return EventParser.parse(text);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        default:","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(String.format(\"Cannot parse Task from \\n\\t`%s`\", text));","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":30}},{"path":"src/main/java/duke/parser/ToDoParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":" * Parses to-dos.","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"public class ToDoParser {","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"     * Parses a \u003ccode\u003eToDo\u003c/code\u003e from its text representation.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     * @param text Text representation found.","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eToDo\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the text representation cannot be parsed accurately.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    protected static ToDo parse(String text) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        String[] toDoDetails \u003d text.split(\" \\\\| \", 3);","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        if (toDoDetails.length \u003c 3) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(String.format(\"Cannot parse ToDo from \\n\\t`%s`\", text));","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        boolean isDone \u003d toDoDetails[1].equals(\"X\");","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        String name \u003d toDoDetails[2];","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        return new ToDo(name, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":26}},{"path":"src/main/java/duke/response/DukeBadResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.response;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":" * Represents a bad response after executing a command.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"public class DukeBadResponse extends DukeResponse {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"     * Constructor a \u003ccode\u003eDukeBadResponse\u003c/code\u003e object.","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    public DukeBadResponse(String message) {","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"        super(message);","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ganhongyao":13}},{"path":"src/main/java/duke/response/DukeResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.response;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-29"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":" * Represents a response after executing a command.","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"public class DukeResponse {","lastModifiedDate":"2021-08-29"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"    private final String message;","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"    private final boolean isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a \u003ccode\u003eDukeResponse\u003c/code\u003e object.","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse(String message, boolean isExit) {","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"        this.message \u003d message;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a \u003ccode\u003eDukeResponse\u003c/code\u003e object that does not exit the application.","lastModifiedDate":"2021-08-29"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    public DukeResponse(String message) {","lastModifiedDate":"2021-08-29"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        this(message, false);","lastModifiedDate":"2021-08-29"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-29"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"     * Returns whether the application should exit.","lastModifiedDate":"2021-08-29"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-29"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-29"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        return isExit;","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-29"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        return message;","lastModifiedDate":"2021-08-29"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-29"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"ganhongyao":36}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-21"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import java.io.File;","lastModifiedDate":"2021-08-21"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-21"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-21"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-21"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-21"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import java.util.List;","lastModifiedDate":"2021-08-21"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"import duke.parser.TaskParser;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":" * Represents the file used to store the user\u0027s task data.","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"public class Storage {","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    private String filePath;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    private File file;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a Storage object.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"     * @param filePath Path to the stored file.","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        if (!file.isFile()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"            try {","lastModifiedDate":"2021-08-21"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"                file.createNewFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"                System.out.printf(\"An error occurred when trying to access file %s.\"","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"                        + \"Changes to your task list will not be saved locally.\\n\", filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"     * Returns the path of the storage file.","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"    public String getFilePath() {","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"        return filePath;","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"     * Sets the path of the storage file. Data will be stored to the new file subsequently.","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"     * @param newFilePath The new path of the storage file.","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the file does not exist.","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"    public void setFilePath(String newFilePath) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"        File newFile \u003d new File(newFilePath);","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"        if (!newFile.isFile()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"                    String.format(\"Could not find file \u0027%s\u0027. Please ensure that the file exists.\", newFilePath));","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"        filePath \u003d newFilePath;","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"        file \u003d newFile;","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"     * Loads the user\u0027s tasks from file.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"ganhongyao"},"content":"     * @return List of tasks that were successfully loaded.","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If an \u003ccode\u003eIOException\u003c/code\u003e occurred while trying to read the file.","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"ganhongyao"},"content":"    public List\u003cTask\u003e loadTasks() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"ganhongyao"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"ganhongyao"},"content":"            FileReader fileReader \u003d new FileReader(file);","lastModifiedDate":"2021-08-21"},{"lineNumber":75,"author":{"gitId":"ganhongyao"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2021-08-21"},{"lineNumber":76,"author":{"gitId":"ganhongyao"},"content":"            String nextLine \u003d bufferedReader.readLine();","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"ganhongyao"},"content":"            while (nextLine !\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"ganhongyao"},"content":"                try {","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"ganhongyao"},"content":"                    taskList.add(TaskParser.parse(nextLine));","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"ganhongyao"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"ganhongyao"},"content":"                    System.out.printf(\"Bad task format found in %s: %s\\nSkipping over...\\n\", filePath, e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"ganhongyao"},"content":"                }","lastModifiedDate":"2021-08-21"},{"lineNumber":83,"author":{"gitId":"ganhongyao"},"content":"                nextLine \u003d bufferedReader.readLine();","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"ganhongyao"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"ganhongyao"},"content":"            bufferedReader.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"ganhongyao"},"content":"            fileReader.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"ganhongyao"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(String.format(\"An error occurred when trying to load %s:\\n\\t%s\\n\",","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"ganhongyao"},"content":"                    filePath, e.getMessage()));","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"ganhongyao"},"content":"        return taskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":92,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":93,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":94,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"ganhongyao"},"content":"     * Returns a string with details on the file and tasks that are loaded.","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"ganhongyao"},"content":"    public String getTasksLoadedMessage(TaskManager taskManager) {","lastModifiedDate":"2021-09-04"},{"lineNumber":98,"author":{"gitId":"ganhongyao"},"content":"        return String.format(\"These are the tasks I found from %s.\\n\\n%s\", getFilePath(), taskManager);","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"ganhongyao"},"content":"     * Saves the tasks into the file.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":104,"author":{"gitId":"ganhongyao"},"content":"     * @param tasks Tasks to be saved into the file.","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"ganhongyao"},"content":"    public void saveTasks(TaskManager tasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"ganhongyao"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"ganhongyao"},"content":"            fileWriter.write(tasks.toText());","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"ganhongyao"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-21"},{"lineNumber":111,"author":{"gitId":"ganhongyao"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":112,"author":{"gitId":"ganhongyao"},"content":"            System.out.printf(\"An error occurred when trying to save tasks locally:\\n\\t%s\\n\", e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":113,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":114,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":115,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"ganhongyao":115}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":" * Represents a \u003ccode\u003eTask\u003c/code\u003e with a due date.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"public class Deadline extends Task implements Timestampable {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    private final DukeDateTime dueDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a Deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public Deadline(String name, DukeDateTime dueDate) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        super(name);","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a Deadline object with completion status.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    public Deadline(String name, boolean isDone, DukeDateTime dueDate) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public String toText() {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        String[] props \u003d {\"D\", super.getStatusIcon(), super.getName(), dueDate.toIso()};","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        return String.join(\" | \", props);","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"    public boolean onSameDayAs(DukeDateTime date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        return DukeDateTime.onSameDay(dueDate, date);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), dueDate);","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"ganhongyao":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":" * Represents a \u003ccode\u003eTask\u003c/code\u003e that occurs on a specific date and time.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"public class Event extends Task implements Timestampable {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    private final DukeDateTime timestamp;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for an Event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public Event(String name, DukeDateTime timestamp) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        super(name);","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"        this.timestamp \u003d timestamp;","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for an Event object with completion status.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    public Event(String name, boolean isDone, DukeDateTime timestamp) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        this.timestamp \u003d timestamp;","lastModifiedDate":"2021-08-21"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public String toText() {","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        String[] props \u003d {\"E\", super.getStatusIcon(), super.getName(), timestamp.toIso()};","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        return String.join(\" | \", props);","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"    public boolean onSameDayAs(DukeDateTime date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        return DukeDateTime.onSameDay(timestamp, date);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), timestamp);","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"ganhongyao":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":" * Represents a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"    private String name;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    protected Task(String name) {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"        this(name, false);","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    protected Task(String name, boolean isDone) {","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    protected Task markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"        return this;","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"     * Returns the name of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    public String getName() {","lastModifiedDate":"2021-08-21"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        return name;","lastModifiedDate":"2021-08-21"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"     * Returns whether the task is marked as completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        return isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"     * Returns the string representation of the completion status of the \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-21"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"     * Returns the text representation of the \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"    public abstract String toText();","lastModifiedDate":"2021-08-21"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), name);","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"ganhongyao":54}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import java.util.List;","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":" * Represents the interface that deals with user\u0027s tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"public class TaskManager {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    // Success Messages","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    private static final String TASKS_COUNT_MESSAGE \u003d \"Now you have %d %s in the list.\";","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    private static final String UNDONE_TASKS_COUNT_MESSAGE \u003d \"You have %d incomplete %s remaining.\";","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    private static final String TASK_ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n  %s\\n\\n\" + TASKS_COUNT_MESSAGE;","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    private static final String MARKED_TASK_AS_DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n  %s\\n\\n\"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"            + UNDONE_TASKS_COUNT_MESSAGE;","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    private static final String DELETED_TASK_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n  %s\\n\\n\" + TASKS_COUNT_MESSAGE;","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    // Error Messages","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"    private static final String TASK_NOT_FOUND_MESSAGE \u003d","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            \"You don\u0027t have a task with that number.\";","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    public TaskManager(List\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-21"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-21"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    public TaskManager() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"     * Returns the number of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"    public int getTaskCount() {","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"     * Returns the number of incomplete tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"    private int getUndoneTaskCount() {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"            if (!t.isDone()) {","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"                count++;","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"        return count;","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"     * Overwrites the existing \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"    public void setTaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":"     * Adds a \u003ccode\u003eTask\u003c/code\u003e into the list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"ganhongyao"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"ganhongyao"},"content":"     * @return Message containing the task just added and the updated number of tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"ganhongyao"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"ganhongyao"},"content":"        assert task !\u003d null : \"Task should be initialised within xCommand::execute\";","lastModifiedDate":"2021-09-03"},{"lineNumber":74,"author":{"gitId":"ganhongyao"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"ganhongyao"},"content":"        int taskCount \u003d getTaskCount();","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"ganhongyao"},"content":"        String pluralised \u003d taskCount \u003e 1 ? \"tasks\" : \"task\";","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"ganhongyao"},"content":"        return String.format(TASK_ADDED_MESSAGE, task, taskCount, pluralised);","lastModifiedDate":"2021-08-15"},{"lineNumber":78,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":79,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":80,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"ganhongyao"},"content":"     * Marks a \u003ccode\u003eTask\u003c/code\u003e as completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":83,"author":{"gitId":"ganhongyao"},"content":"     * @param taskNumber Number of the task to be marked as completed.","lastModifiedDate":"2021-09-02"},{"lineNumber":84,"author":{"gitId":"ganhongyao"},"content":"     * @return Message containing the task just marked as completed and the updated number of incomplete tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":85,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If a task with that number cannot be found.","lastModifiedDate":"2021-09-02"},{"lineNumber":86,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"ganhongyao"},"content":"    public String markTaskAsDone(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":88,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-15"},{"lineNumber":89,"author":{"gitId":"ganhongyao"},"content":"            // User input is 1-indexed","lastModifiedDate":"2021-08-15"},{"lineNumber":90,"author":{"gitId":"ganhongyao"},"content":"            int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":91,"author":{"gitId":"ganhongyao"},"content":"            Task task \u003d taskList.get(taskIndex);","lastModifiedDate":"2021-08-15"},{"lineNumber":92,"author":{"gitId":"ganhongyao"},"content":"            task.markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":93,"author":{"gitId":"ganhongyao"},"content":"            int undoneTaskCount \u003d getUndoneTaskCount();","lastModifiedDate":"2021-08-15"},{"lineNumber":94,"author":{"gitId":"ganhongyao"},"content":"            String pluralised \u003d undoneTaskCount \u003e 1 || undoneTaskCount \u003d\u003d 0 ? \"tasks\" : \"task\";","lastModifiedDate":"2021-08-15"},{"lineNumber":95,"author":{"gitId":"ganhongyao"},"content":"            return String.format(MARKED_TASK_AS_DONE_MESSAGE, task, undoneTaskCount, pluralised);","lastModifiedDate":"2021-08-15"},{"lineNumber":96,"author":{"gitId":"ganhongyao"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":97,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(TASK_NOT_FOUND_MESSAGE);","lastModifiedDate":"2021-08-16"},{"lineNumber":98,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":99,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":100,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":101,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"ganhongyao"},"content":"     * Deletes a \u003ccode\u003eTask\u003c/code\u003e from the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":104,"author":{"gitId":"ganhongyao"},"content":"     * @param taskNumber Number of the task to be deleted.","lastModifiedDate":"2021-09-02"},{"lineNumber":105,"author":{"gitId":"ganhongyao"},"content":"     * @return Message containing the task just deleted and the updated number of tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":106,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If a task with that number cannot be found.","lastModifiedDate":"2021-09-02"},{"lineNumber":107,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"ganhongyao"},"content":"    public String deleteTask(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":109,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-16"},{"lineNumber":110,"author":{"gitId":"ganhongyao"},"content":"            // User input is 1-indexed","lastModifiedDate":"2021-08-16"},{"lineNumber":111,"author":{"gitId":"ganhongyao"},"content":"            int taskIndex \u003d taskNumber - 1;","lastModifiedDate":"2021-08-16"},{"lineNumber":112,"author":{"gitId":"ganhongyao"},"content":"            Task task \u003d taskList.remove(taskIndex);","lastModifiedDate":"2021-08-16"},{"lineNumber":113,"author":{"gitId":"ganhongyao"},"content":"            int taskCount \u003d getTaskCount();","lastModifiedDate":"2021-08-16"},{"lineNumber":114,"author":{"gitId":"ganhongyao"},"content":"            String pluralised \u003d taskCount \u003e 1 || taskCount \u003d\u003d 0 ? \"tasks\" : \"task\";","lastModifiedDate":"2021-08-16"},{"lineNumber":115,"author":{"gitId":"ganhongyao"},"content":"            return String.format(DELETED_TASK_MESSAGE, task, taskCount, pluralised);","lastModifiedDate":"2021-08-16"},{"lineNumber":116,"author":{"gitId":"ganhongyao"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":117,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(TASK_NOT_FOUND_MESSAGE);","lastModifiedDate":"2021-08-16"},{"lineNumber":118,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":119,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":120,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":121,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"ganhongyao"},"content":"     * Displays the user\u0027s tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"ganhongyao"},"content":"    public String list() {","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"ganhongyao"},"content":"        return formatTasksAsList(taskList);","lastModifiedDate":"2021-09-03"},{"lineNumber":126,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":127,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":128,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"ganhongyao"},"content":"     * Displays the user\u0027s tasks that fall on a specific date.","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":131,"author":{"gitId":"ganhongyao"},"content":"     * @param dateTime Date to filter by.","lastModifiedDate":"2021-09-02"},{"lineNumber":132,"author":{"gitId":"ganhongyao"},"content":"     * @return String representation of the filtered tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":133,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"ganhongyao"},"content":"    public String list(DukeDateTime dateTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"ganhongyao"},"content":"        List\u003cTask\u003e filteredTasks \u003d filterByDate(dateTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"ganhongyao"},"content":"        return formatTasksAsList(filteredTasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":137,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"ganhongyao"},"content":"     * Displays the user\u0027s tasks which have names that contain any of the specified search strings.","lastModifiedDate":"2021-08-29"},{"lineNumber":141,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":142,"author":{"gitId":"ganhongyao"},"content":"     * @param searchStrings Target search strings.","lastModifiedDate":"2021-09-02"},{"lineNumber":143,"author":{"gitId":"ganhongyao"},"content":"     * @return String representation of the filtered tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":144,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"ganhongyao"},"content":"    public String list(String... searchStrings) {","lastModifiedDate":"2021-08-29"},{"lineNumber":146,"author":{"gitId":"ganhongyao"},"content":"        List\u003cTask\u003e filteredTasks \u003d filterByName(searchStrings);","lastModifiedDate":"2021-08-29"},{"lineNumber":147,"author":{"gitId":"ganhongyao"},"content":"        return formatTasksAsList(filteredTasks);","lastModifiedDate":"2021-09-03"},{"lineNumber":148,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":150,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":151,"author":{"gitId":"ganhongyao"},"content":"     * Returns a list of tasks that occur on the specified date.","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":153,"author":{"gitId":"ganhongyao"},"content":"     * @param dateTime Date to filter by.","lastModifiedDate":"2021-09-02"},{"lineNumber":154,"author":{"gitId":"ganhongyao"},"content":"     * @return Filtered list.","lastModifiedDate":"2021-09-02"},{"lineNumber":155,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"ganhongyao"},"content":"    private List\u003cTask\u003e filterByDate(DukeDateTime dateTime) {","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"ganhongyao"},"content":"        Predicate\u003cTask\u003e isSameDate \u003d task -\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":158,"author":{"gitId":"ganhongyao"},"content":"                task instanceof Timestampable \u0026\u0026 ((Timestampable) task).onSameDayAs(dateTime);","lastModifiedDate":"2021-09-03"},{"lineNumber":159,"author":{"gitId":"ganhongyao"},"content":"        Stream\u003cTask\u003e filteredTasks \u003d taskList.stream().filter(isSameDate);","lastModifiedDate":"2021-09-03"},{"lineNumber":160,"author":{"gitId":"ganhongyao"},"content":"        return filteredTasks.collect(Collectors.toList());","lastModifiedDate":"2021-09-03"},{"lineNumber":161,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":162,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"ganhongyao"},"content":"     * Returns a list of tasks that have names that include any of the specified search strings.","lastModifiedDate":"2021-08-29"},{"lineNumber":165,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":166,"author":{"gitId":"ganhongyao"},"content":"     * @param searchStrings Strings to filter by.","lastModifiedDate":"2021-09-02"},{"lineNumber":167,"author":{"gitId":"ganhongyao"},"content":"     * @return Filtered list.","lastModifiedDate":"2021-09-02"},{"lineNumber":168,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":169,"author":{"gitId":"ganhongyao"},"content":"    private List\u003cTask\u003e filterByName(String... searchStrings) {","lastModifiedDate":"2021-08-29"},{"lineNumber":170,"author":{"gitId":"ganhongyao"},"content":"        Predicate\u003cTask\u003e hasMatchingString \u003d task -\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":171,"author":{"gitId":"ganhongyao"},"content":"                Arrays.stream(searchStrings).anyMatch(searchString -\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":172,"author":{"gitId":"ganhongyao"},"content":"                        task.getName().toLowerCase().contains(searchString.toLowerCase()));","lastModifiedDate":"2021-09-03"},{"lineNumber":173,"author":{"gitId":"ganhongyao"},"content":"        Stream\u003cTask\u003e filteredTasks \u003d taskList.stream().filter(hasMatchingString);","lastModifiedDate":"2021-09-03"},{"lineNumber":174,"author":{"gitId":"ganhongyao"},"content":"        return filteredTasks.collect(Collectors.toList());","lastModifiedDate":"2021-09-03"},{"lineNumber":175,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":176,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"ganhongyao"},"content":"    private static String prependNumberToTask(int taskNumber, Task task) {","lastModifiedDate":"2021-09-03"},{"lineNumber":178,"author":{"gitId":"ganhongyao"},"content":"        return String.format(\"%d. %s\", taskNumber, task.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":179,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":180,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":181,"author":{"gitId":"ganhongyao"},"content":"    private static String formatTasksAsList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-09-03"},{"lineNumber":182,"author":{"gitId":"ganhongyao"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-09-04"},{"lineNumber":183,"author":{"gitId":"ganhongyao"},"content":"            return \"You do not have any tasks.\";","lastModifiedDate":"2021-09-04"},{"lineNumber":184,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":185,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":186,"author":{"gitId":"ganhongyao"},"content":"        String[] tasksStrings \u003d new String[tasks.size()];","lastModifiedDate":"2021-09-03"},{"lineNumber":187,"author":{"gitId":"ganhongyao"},"content":"        for (int i \u003d 0; i \u003c tasksStrings.length; i++) {","lastModifiedDate":"2021-09-03"},{"lineNumber":188,"author":{"gitId":"ganhongyao"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2021-09-03"},{"lineNumber":189,"author":{"gitId":"ganhongyao"},"content":"            int taskNumber \u003d i + 1;","lastModifiedDate":"2021-09-03"},{"lineNumber":190,"author":{"gitId":"ganhongyao"},"content":"            tasksStrings[i] \u003d prependNumberToTask(taskNumber, task);","lastModifiedDate":"2021-09-03"},{"lineNumber":191,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":192,"author":{"gitId":"ganhongyao"},"content":"        return String.join(\"\\n\", tasksStrings);","lastModifiedDate":"2021-09-03"},{"lineNumber":193,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":194,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":195,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":196,"author":{"gitId":"ganhongyao"},"content":"     * Returns the text representation of the task list.","lastModifiedDate":"2021-08-26"},{"lineNumber":197,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":198,"author":{"gitId":"ganhongyao"},"content":"    public String toText() {","lastModifiedDate":"2021-08-26"},{"lineNumber":199,"author":{"gitId":"ganhongyao"},"content":"        String[] tasks \u003d new String[taskList.size()];","lastModifiedDate":"2021-08-26"},{"lineNumber":200,"author":{"gitId":"ganhongyao"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"ganhongyao"},"content":"            tasks[i] \u003d taskList.get(i).toText();","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"ganhongyao"},"content":"        return String.join(\"\\n\", tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":205,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":206,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":207,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":208,"author":{"gitId":"ganhongyao"},"content":"        return list();","lastModifiedDate":"2021-08-24"},{"lineNumber":209,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":210,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"ganhongyao":210}},{"path":"src/main/java/duke/task/Timestampable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.util.DukeDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":" * A class implements the Timestampable interface if it has a \u003ccode\u003eDukeDateTime\u003c/code\u003e field.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"public interface Timestampable {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"     * Returns whether the caller\u0027s \u003ccode\u003eDukeDateTime\u003c/code\u003e field represents the same date as the specified date.","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"    public boolean onSameDayAs(DukeDateTime date);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"ganhongyao":13}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":" * Represents a To-do.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"    public ToDo(String name) {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"        super(name);","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    public ToDo(String name, boolean isDone) {","lastModifiedDate":"2021-08-21"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"        super(name, isDone);","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    public String toText() {","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"        String[] props \u003d {\"T\", super.getStatusIcon(), super.getName()};","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        return String.join(\" | \", props);","lastModifiedDate":"2021-08-21"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"ganhongyao":25}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":" * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    // Dynamic style classes","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    private static final String[] dukeStyleClasses \u003d {\"duke-dialog-background\"};","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    private static final String[] userStyleClasses \u003d {\"user-dialog-background\"};","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-29"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    private DialogBox(String text, Image img, String... styleClasses) {","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"        dialog.getStyleClass().addAll(styleClasses);","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-29"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"    private void flip() {","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"     * Returns a \u003ccode\u003eDialogBox\u003c/code\u003e for the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"        return new DialogBox(text, img, userStyleClasses);","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"     * Returns a \u003ccode\u003eDialogBox\u003c/code\u003e for Duke.","lastModifiedDate":"2021-09-02"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":"        var db \u003d new DialogBox(text, img, dukeStyleClasses);","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"ganhongyao"},"content":"        db.flip();","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"ganhongyao"},"content":"        return db;","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ganhongyao":71}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import duke.Duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeBadResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import duke.response.DukeResponse;","lastModifiedDate":"2021-08-29"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    private Image dukeHappyImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/qoobee.png\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"    private Image dukeScaredImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/qoobeeScared.png\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"        DukeResponse startUpResponse \u003d duke.greet();","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(startUpResponse.toString(), dukeHappyImage));","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"    @FXML","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"        DukeResponse response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-29"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"        Image dukeImage \u003d response instanceof DukeBadResponse ? dukeScaredImage : dukeHappyImage;","lastModifiedDate":"2021-08-29"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"                DialogBox.getDukeDialog(response.toString(), dukeImage)","lastModifiedDate":"2021-08-29"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"        );","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"        if (response.isExit()) {","lastModifiedDate":"2021-08-29"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"            Stage stage \u003d (Stage) dialogContainer.getScene().getWindow();","lastModifiedDate":"2021-08-29"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"            stage.close();","lastModifiedDate":"2021-08-29"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-29"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ganhongyao":64}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":" * UI of the application.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    private static final int DEFAULT_INDENTATION_LEVEL \u003d 4;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    private static final String DEFAULT_SEPARATOR \u003d \"_\";","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"    private static final int DEFAULT_SEPARATOR_LENGTH \u003d 60;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    private final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    private final String indent;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"    private final String separator;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"     * Constructor for a Ui object, with the indent and separator set to default settings.","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"        indent \u003d \" \".repeat(DEFAULT_INDENTATION_LEVEL);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        separator \u003d DEFAULT_SEPARATOR.repeat(DEFAULT_SEPARATOR_LENGTH);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"     * Reads and returns the command entered by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"    private String indent(String str) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        // Indent all lines","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        String indentedString \u003d str.replace(\"\\n\", \"\\n\" + indent);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        return indent + indentedString;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    private void printSeparator() {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"        System.out.println(indent(separator));","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"     * Formats and displays the response to the ser.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"    public void print(String response) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"        printSeparator();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"        System.out.println(indent(response));","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"        printSeparator();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"        System.out.println();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"ganhongyao":51}},{"path":"src/main/java/duke/util/DukeDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.util;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":" * Represents a wrapper around a \u003ccode\u003eLocalDateTime\u003c/code\u003e.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"public class DukeDateTime {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    private static final DateTimeFormatter USER_INPUT_DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    private static final DateTimeFormatter USER_INPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    private static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh.mma\");","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    public DukeDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    public DukeDateTime(LocalDate date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        dateTime \u003d date.atStartOfDay();","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"     * Parses datetime string entered by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"     * @param str String entered by the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eDukeDateTime\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the datetime cannot be parsed with the given format.","lastModifiedDate":"2021-09-02"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    public static DukeDateTime parseUserInputDateTime(String str) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"        LocalDateTime dt;","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"            dt \u003d LocalDateTime.parse(str, USER_INPUT_DATE_TIME_FORMATTER);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Unable to parse datetime. Please use the `YYYY-MM-DD HHMM` format \"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"                    + \"(e.g. 2021-08-24 2130).\");","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"        return new DukeDateTime(dt);","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"     * Parses date string entered by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"     * @param str String entered by the user.","lastModifiedDate":"2021-09-02"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eDukeDateTime\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the date cannot be parsed with the given format.","lastModifiedDate":"2021-09-02"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"    public static DukeDateTime parseUserInputDate(String str) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"        LocalDate dt;","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"            dt \u003d LocalDate.parse(str, USER_INPUT_DATE_FORMATTER);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Unable to parse date. Please use the `YYYY-MM-DD` format \"","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"                    + \"(e.g. 2021-08-24).\");","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"        return new DukeDateTime(dt);","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"     * Parses a datetime string in ISO format.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":68,"author":{"gitId":"ganhongyao"},"content":"     * @param str String representing a datetime","lastModifiedDate":"2021-09-02"},{"lineNumber":69,"author":{"gitId":"ganhongyao"},"content":"     * @return Corresponding \u003ccode\u003eDukeDateTime\u003c/code\u003e object.","lastModifiedDate":"2021-09-02"},{"lineNumber":70,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the date cannot be parsed with the ISO format.","lastModifiedDate":"2021-09-02"},{"lineNumber":71,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"ganhongyao"},"content":"    public static DukeDateTime parseIso(String str) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"ganhongyao"},"content":"        LocalDateTime dt;","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"ganhongyao"},"content":"            dt \u003d LocalDateTime.parse(str, DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"ganhongyao"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(\"Unable to parse datetime. Please use the ISO datetime format.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"ganhongyao"},"content":"        return new DukeDateTime(dt);","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"ganhongyao"},"content":"     * Returns true if the two \u003ccode\u003eDukeDateTime\u003c/code\u003e objects fall on the same date.","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"ganhongyao"},"content":"    public static boolean onSameDay(DukeDateTime d1, DukeDateTime d2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"ganhongyao"},"content":"        return d1.dateTime.toLocalDate().equals(d2.dateTime.toLocalDate());","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"ganhongyao"},"content":"     * Returns the datetime formatted in ISO.","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"ganhongyao"},"content":"    public String toIso() {","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"ganhongyao"},"content":"        return dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"ganhongyao"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"ganhongyao"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"ganhongyao"},"content":"        return dateTime.format(DISPLAY_FORMATTER);","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"ganhongyao":100}},{"path":"src/main/java/duke/util/DukeProperties.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.util;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import java.util.Properties;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":" * Represent a helper class to deal with properties files.","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"public class DukeProperties {","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    private static final String PROPERTIES_FILE_PATH \u003d \"duke.properties\";","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"     * Returns the value of the key passed in as defined in duke.properties.","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"     * @param key The key to be queried.","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"     * @return The value if present. If the value is not present, a null object is returned.","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"     * @throws DukeException If the file cannot be found or if an \u003ccode\u003eIOException\u003c/code\u003e occurred when processing","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"     * the file.","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    public static String getProperty(String key) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        Properties appProps \u003d new Properties();","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"            appProps.load(new FileInputStream(PROPERTIES_FILE_PATH));","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"                    String.format(\"File \u0027%s\u0027 not found. Please make sure that the file exists.\", PROPERTIES_FILE_PATH));","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            throw new DukeException(String.format(\"An error occurred when trying to load %s:\\n\\t%s\\n\",","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"                    PROPERTIES_FILE_PATH, e.getMessage()));","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        return appProps.getProperty(key);","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"     * Returns the value of the key passed in as defined in duke.properties. Defaults to \u003ccode\u003edefaultValue\u003c/code\u003e if","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"     * the key was not found or if an exception was thrown.","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"     *","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"     * @param key The key to be queried.","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"     * @param defaultValue The default value to fall back to.","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"     * @return The value if found. Else, \u003ccode\u003edefaultValue\u003c/code\u003e is returned.","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"    public static String getPropertyOrDefault(String key, String defaultValue) {","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"        String valueIfPresent;","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"            valueIfPresent \u003d getProperty(key);","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"            return defaultValue;","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"        if (valueIfPresent \u003d\u003d null) {","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"            // Key-value pair was not defined in properties file","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"            return defaultValue;","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"        return valueIfPresent;","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"ganhongyao":60}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"dialog-box\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-29"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ganhongyao":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"524.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"        \u003cButton fx:id\u003d\"sendButton\" styleClass\u003d\"send-button\" layoutX\u003d\"524.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" fitToWidth\u003d\"true\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"                \u003cVBox styleClass\u003d\"dialog-container\" fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"588.0\" /\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"ganhongyao":19}},{"path":"src/test/java/duke/command/CompleteTaskCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"public class CompleteTaskCommandTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public void execute_noArguments_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"            new CompleteTaskCommand(\"\")","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"                    .execute(new TaskManager(), new Storage(\"./data/tasks.txt\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"            assertEquals(","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"                    \"Invalid use of the \u0027done\u0027 command.\\n\\nTo mark a task as done, use \u0027done \u003ctask-number\u003e\u0027.\",","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"                    e.getMessage()","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"            );","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public void execute_nonIntegerArgument_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"            new CompleteTaskCommand(\"blah\")","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"                    .execute(new TaskManager(), new Storage(\"./data/tasks.txt\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"            assertEquals(","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"                    \"Invalid task number.\",","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"                    e.getMessage()","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"            );","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":40}},{"path":"src/test/java/duke/command/DeleteTaskCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.command;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import duke.task.TaskManager;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"public class DeleteTaskCommandTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"    public void execute_noArguments_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"            new DeleteTaskCommand(\"\")","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"                    .execute(new TaskManager(), new Storage(\"./data/tasks.txt\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"            assertEquals(","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"                    \"Invalid use of the \u0027delete\u0027 command.\\n\\nTo delete a task, use \u0027delete \u003ctask-number\u003e\u0027.\",","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"                    e.getMessage()","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"            );","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    public void execute_nonIntegerArgument_exceptionThrown() {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"            new DeleteTaskCommand(\"blah\")","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"                    .execute(new TaskManager(), new Storage(\"./data/tasks.txt\"));","lastModifiedDate":"2021-08-29"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"            fail();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"            assertEquals(","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"                    \"Invalid task number.\",","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"                    e.getMessage()","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"            );","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":40}},{"path":"src/test/java/duke/parser/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"package duke.parser;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"import duke.command.CompleteTaskCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"import duke.command.DeleteTaskCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"public class CommandParserTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"    public void parse_addDeadlineCommand_deadlineCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"deadline return book /by 2021-08-31 2359\") instanceof AddDeadlineCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"ganhongyao"},"content":"    public void parse_addEventCommand_eventCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"event book convention /at 2021-08-31 2100\") instanceof AddEventCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"ganhongyao"},"content":"    public void parse_addToDoCommand_toDoCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"todo buy groceries\") instanceof AddToDoCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"ganhongyao"},"content":"    public void parse_completeTaskCommand_completeTaskCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"done 3\") instanceof CompleteTaskCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"ganhongyao"},"content":"    public void parse_deleteTaskCommand_deleteTaskCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"delete 3\") instanceof DeleteTaskCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"ganhongyao"},"content":"    public void parse_exitCommand_exitCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"bye\") instanceof ExitCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"ganhongyao"},"content":"    public void parse_helpCommand_helpCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"help\") instanceof HelpCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"ganhongyao"},"content":"    public void parse_listCommands_listCommandsReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"list\") instanceof ListCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"list 2021-08-29\") instanceof ListCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"ganhongyao"},"content":"    @Test void parse_findCommand_findCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"find test\") instanceof FindCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"ganhongyao"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"ganhongyao"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"ganhongyao"},"content":"    public void parse_unknownCommand_helpCommandReturned() {","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"ganhongyao"},"content":"        assertTrue(CommandParser.parse(\"blah\") instanceof HelpCommand);","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"ganhongyao"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"ganhongyao"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"ganhongyao":67}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ganhongyao"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"ganhongyao"},"content":"todo borrow book","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"ganhongyao"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"ganhongyao"},"content":"done","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"ganhongyao"},"content":"done asd","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"ganhongyao"},"content":"done 999","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"ganhongyao"},"content":"done 1","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"ganhongyao"},"content":"deadline","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"ganhongyao"},"content":"deadline return book","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"ganhongyao"},"content":"deadline return book /by 2021-08-31 2359 ","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"ganhongyao"},"content":"event","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"ganhongyao"},"content":"event book convention","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"ganhongyao"},"content":"event book convention /at 2021-08-29 1500","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"ganhongyao"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"ganhongyao"},"content":"list 2021-08-31","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"done 3","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"ganhongyao"},"content":"delete","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"ganhongyao"},"content":"delete asd","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"ganhongyao"},"content":"delete 999","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"ganhongyao"},"content":"delete 2","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"ganhongyao"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"ganhongyao"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"ganhongyao":22}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"ganhongyao"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/**/*.java","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"ganhongyao":1}}]

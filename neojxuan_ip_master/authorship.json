[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-02"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    ","lastModifiedDate":"2021-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"neojxuan":17,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"**Duke** is an app that helps you to manage all your tasks and deadlines through a Graphical User Interface.","lastModifiedDate":"2021-09-17"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"## Contents","lastModifiedDate":"2021-09-17"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"- [Quick Start](#quick-start)","lastModifiedDate":"2021-09-17"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"- [Features](#features)","lastModifiedDate":"2021-09-17"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"  - [Add Task](#add-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"  - [Edit Task](#edit-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"  - [Delete Task](#delete-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"  - [List Tasks](#list-tasks)","lastModifiedDate":"2021-09-17"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"  - [Mark Task as Done](#mark-task-as-done)","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"  - [Find Tasks](#find-tasks-containing-keyword)","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"  - [Save Tasks](#save-tasks)","lastModifiedDate":"2021-09-17"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"  - [Exit Program](#exit-program)","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"- [Command Usage](#command-usage)","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"  - [`todo`](#todo---add-todo-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"  - [`event`](#event---add-event-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"  - [`deadline`](#deadline---add-deadline-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"  - [`edit`](#edit---edit-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"  - [`delete`](#delete---delete-task)","lastModifiedDate":"2021-09-17"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"  - [`list`](#list---list-all-tasks)","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"  - [`done`](#done---mark-task-done)","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"  - [`find`](#find---find-tasks-containing-keyword)","lastModifiedDate":"2021-09-17"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"  - [`bye`](#bye---exit-program)","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"## Quick Start","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"1. Ensure that you have `Java 11` installed on your computer.","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"2. Download the latest duke.jar file [here](https://github.com/neojxuan/ip/releases).","lastModifiedDate":"2021-09-17"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"3. Copy the file to the folder you want to use as the home folder for Duke.","lastModifiedDate":"2021-09-17"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"4. Double-click the file to start the app. A GUI similar to below should appear:","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"![GUI](./Ui.png)","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"5. Type a command in the command box and press Enter to execute it. Here are some sample commands to try out:","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"     - todo do 2103 quiz: Adds a Todo task with `do 2103 quiz` as task description","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"     - event concert /at 20-02-2021 18:30: Adds an Event task with `concert` ","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"       description and 20 Feb 2021 6:30 PM as time","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"     - list: Lists all tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"     - delete 1: Deletes the first task shown in the list","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"     - bye: Exits the app","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"### Add Task","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"Add a task to the task list in Duke.","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"3 types of tasks can be added:","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"- Todo: Contains description of task","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"- Event: Contains description and date of event","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"- Deadline: Contains description and deadline of task","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"### Edit Task","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"Edit an existing task in the task list. Either the description, date, or both can be edited.","lastModifiedDate":"2021-09-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"### Delete Task","lastModifiedDate":"2021-09-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"Delete an existing task from the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"### List Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"List all the tasks in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"### Mark Task as Done","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"Mark an existing task as done in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"### Find Tasks Containing Keyword","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"Find all tasks that contain a specified keyword in their descriptions.","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"### Save Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"Duke automatically saves the list of tasks to the hard disc whenever it is updated. ","lastModifiedDate":"2021-09-17"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"There is no need to manually save the task list. ","lastModifiedDate":"2021-09-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"### Exit Program","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"Exit the Duke program.","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"## Command Usage","lastModifiedDate":"2021-09-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"### `todo` - Add Todo Task","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"Adds a Todo task to the task list. A Todo contains a description.","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"Format: `todo [DESC]`","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"`todo watch 2100 lecture`","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"neojxuan"},"content":"Displays the newly added Todo task and the total number of tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":96,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":97,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"neojxuan"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"neojxuan"},"content":"\t[T][ ] watch 2100 lecture","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"neojxuan"},"content":"Now you have 6 tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":103,"author":{"gitId":"neojxuan"},"content":"### `event` - Add Event Task","lastModifiedDate":"2021-09-17"},{"lineNumber":104,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":105,"author":{"gitId":"neojxuan"},"content":"Adds an Event task to the task list. An Event contains a description and a datetime.","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":107,"author":{"gitId":"neojxuan"},"content":"Format: `event [DESC] /at [DATETIME]`","lastModifiedDate":"2021-09-17"},{"lineNumber":108,"author":{"gitId":"neojxuan"},"content":"- DATETIME should be entered in this format: `dd-mm-yyyy hh:mm`","lastModifiedDate":"2021-09-17"},{"lineNumber":109,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":110,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":111,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":112,"author":{"gitId":"neojxuan"},"content":"`event attend concert /at 23-01-2021 14:30`","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":114,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"neojxuan"},"content":"Displays the newly added Event task and the total number of tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":117,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"neojxuan"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"neojxuan"},"content":"\t[E][ ] attend concert (at: 23 Jan 2021 02:30 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"neojxuan"},"content":"Now you have 7 tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"neojxuan"},"content":"### `deadline` - Add Deadline Task","lastModifiedDate":"2021-09-17"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":126,"author":{"gitId":"neojxuan"},"content":"Adds a Deadline task to the task list. A deadline contains a description and a datetime.","lastModifiedDate":"2021-09-17"},{"lineNumber":127,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"neojxuan"},"content":"Format: `deadline [DESC] /by [DATETIME]`","lastModifiedDate":"2021-09-17"},{"lineNumber":129,"author":{"gitId":"neojxuan"},"content":"- DATETIME should be entered in this format: `dd-mm-yyyy hh:mm`","lastModifiedDate":"2021-09-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":133,"author":{"gitId":"neojxuan"},"content":"`deadline submit report /by 22-01-2021 10:00`","lastModifiedDate":"2021-09-17"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"neojxuan"},"content":"Displays the newly added Deadline task and the total number of tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":140,"author":{"gitId":"neojxuan"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":141,"author":{"gitId":"neojxuan"},"content":"\t[D][ ] submit report (by: 22 Jan 2021 10:00 AM)","lastModifiedDate":"2021-09-17"},{"lineNumber":142,"author":{"gitId":"neojxuan"},"content":"Now you have 8 tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":143,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":144,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":145,"author":{"gitId":"neojxuan"},"content":"### `edit` - Edit Task","lastModifiedDate":"2021-09-17"},{"lineNumber":146,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":147,"author":{"gitId":"neojxuan"},"content":"Edits the task at the specified index. ","lastModifiedDate":"2021-09-17"},{"lineNumber":148,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":149,"author":{"gitId":"neojxuan"},"content":"Format: `edit INDEX /desc [DESC] /date [DATETIME]`","lastModifiedDate":"2021-09-17"},{"lineNumber":150,"author":{"gitId":"neojxuan"},"content":"- The index refers to the number shown in the displayed task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":151,"author":{"gitId":"neojxuan"},"content":"- The index should be a positive number not greater than the number of tasks in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":152,"author":{"gitId":"neojxuan"},"content":"- At least one of the fields (desc or date) must be provided","lastModifiedDate":"2021-09-17"},{"lineNumber":153,"author":{"gitId":"neojxuan"},"content":"- Existing values will be updated to the input values","lastModifiedDate":"2021-09-17"},{"lineNumber":154,"author":{"gitId":"neojxuan"},"content":"- DATETIME should be entered in this format: `dd-mm-yyyy hh:mm`","lastModifiedDate":"2021-09-17"},{"lineNumber":155,"author":{"gitId":"neojxuan"},"content":"- If the task to be edited is a Todo, the /date field will be ignored ","lastModifiedDate":"2021-09-17"},{"lineNumber":156,"author":{"gitId":"neojxuan"},"content":"but the description of the Todo will still be updated if the /desc field is present","lastModifiedDate":"2021-09-17"},{"lineNumber":157,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":158,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":159,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":160,"author":{"gitId":"neojxuan"},"content":"`edit 2 /desc Submit 2103 quiz /date 20-01-2020 14:20`","lastModifiedDate":"2021-09-17"},{"lineNumber":161,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":162,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":163,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":164,"author":{"gitId":"neojxuan"},"content":"Shows updated task.","lastModifiedDate":"2021-09-17"},{"lineNumber":165,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":166,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":167,"author":{"gitId":"neojxuan"},"content":"Task 2 has been successfully edited to:","lastModifiedDate":"2021-09-17"},{"lineNumber":168,"author":{"gitId":"neojxuan"},"content":"\t[D][X] Submit 2103 quiz (by: 20 Jan 2020 02:20 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":169,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":170,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":171,"author":{"gitId":"neojxuan"},"content":"### `delete` - Delete Task","lastModifiedDate":"2021-09-17"},{"lineNumber":172,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":173,"author":{"gitId":"neojxuan"},"content":"Deletes the task at the specified index.","lastModifiedDate":"2021-09-17"},{"lineNumber":174,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":175,"author":{"gitId":"neojxuan"},"content":"Format: `delete INDEX`","lastModifiedDate":"2021-09-17"},{"lineNumber":176,"author":{"gitId":"neojxuan"},"content":"- The index refers to the number shown in the displayed task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":177,"author":{"gitId":"neojxuan"},"content":"- The index should be a positive number not greater than the number of tasks in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":178,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":179,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":180,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":181,"author":{"gitId":"neojxuan"},"content":"`delete 2`","lastModifiedDate":"2021-09-17"},{"lineNumber":182,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":183,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":184,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":185,"author":{"gitId":"neojxuan"},"content":"Shows deleted task and total number of tasks after deletion.","lastModifiedDate":"2021-09-17"},{"lineNumber":186,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":187,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":188,"author":{"gitId":"neojxuan"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2021-09-17"},{"lineNumber":189,"author":{"gitId":"neojxuan"},"content":"\t[D][X] Submit 2103 quiz (by: 20 Jan 2020 02:20 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":190,"author":{"gitId":"neojxuan"},"content":"Now you have 8 tasks in the list.","lastModifiedDate":"2021-09-17"},{"lineNumber":191,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":192,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":193,"author":{"gitId":"neojxuan"},"content":"### `list` - List All Tasks","lastModifiedDate":"2021-09-17"},{"lineNumber":194,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":195,"author":{"gitId":"neojxuan"},"content":"Displays all tasks in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":196,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":197,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":198,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":199,"author":{"gitId":"neojxuan"},"content":"`list`","lastModifiedDate":"2021-09-17"},{"lineNumber":200,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":201,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":202,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":203,"author":{"gitId":"neojxuan"},"content":"Displays all tasks in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":204,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":205,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":206,"author":{"gitId":"neojxuan"},"content":"Here are the tasks in your list:","lastModifiedDate":"2021-09-17"},{"lineNumber":207,"author":{"gitId":"neojxuan"},"content":"1. [T][ ] read book","lastModifiedDate":"2021-09-17"},{"lineNumber":208,"author":{"gitId":"neojxuan"},"content":"2. [D][X] return book (by: 13 Sep 2020 06:00 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":209,"author":{"gitId":"neojxuan"},"content":"3. [E][ ] project meeting (at: 10 Oct 2019 11:10 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":210,"author":{"gitId":"neojxuan"},"content":"4. [T][X] join sports club","lastModifiedDate":"2021-09-17"},{"lineNumber":211,"author":{"gitId":"neojxuan"},"content":"5. [E][ ] Attend CCA (at: 23 Jan 2021 02:30 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":212,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":213,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":214,"author":{"gitId":"neojxuan"},"content":"### `done` - Mark Task Done","lastModifiedDate":"2021-09-17"},{"lineNumber":215,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":216,"author":{"gitId":"neojxuan"},"content":"Marks the task at the specified index as done.","lastModifiedDate":"2021-09-17"},{"lineNumber":217,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":218,"author":{"gitId":"neojxuan"},"content":"Format: `done INDEX`","lastModifiedDate":"2021-09-17"},{"lineNumber":219,"author":{"gitId":"neojxuan"},"content":"- The index refers to the number shown in the displayed task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":220,"author":{"gitId":"neojxuan"},"content":"- The index should be a positive number not greater than the number of tasks in the task list.","lastModifiedDate":"2021-09-17"},{"lineNumber":221,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":222,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":223,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":224,"author":{"gitId":"neojxuan"},"content":"`done 3`","lastModifiedDate":"2021-09-17"},{"lineNumber":225,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":226,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":227,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":228,"author":{"gitId":"neojxuan"},"content":"Shows task that was marked as done.","lastModifiedDate":"2021-09-17"},{"lineNumber":229,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":230,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":231,"author":{"gitId":"neojxuan"},"content":"I\u0027ve marked this task as done:","lastModifiedDate":"2021-09-17"},{"lineNumber":232,"author":{"gitId":"neojxuan"},"content":"\t[T][X] read book","lastModifiedDate":"2021-09-17"},{"lineNumber":233,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":234,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":235,"author":{"gitId":"neojxuan"},"content":"### `find` - Find Tasks Containing Keyword","lastModifiedDate":"2021-09-17"},{"lineNumber":236,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":237,"author":{"gitId":"neojxuan"},"content":"Finds all tasks whose descriptions contain the keyword specified by the user.","lastModifiedDate":"2021-09-17"},{"lineNumber":238,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":239,"author":{"gitId":"neojxuan"},"content":"Format: `find [KEYWORD]`","lastModifiedDate":"2021-09-17"},{"lineNumber":240,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":241,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":242,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":243,"author":{"gitId":"neojxuan"},"content":"`find book`","lastModifiedDate":"2021-09-17"},{"lineNumber":244,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":245,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":246,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":247,"author":{"gitId":"neojxuan"},"content":"Displays all tasks containing the keyword.","lastModifiedDate":"2021-09-17"},{"lineNumber":248,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":249,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":250,"author":{"gitId":"neojxuan"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2021-09-17"},{"lineNumber":251,"author":{"gitId":"neojxuan"},"content":"1. [T][X] read book","lastModifiedDate":"2021-09-17"},{"lineNumber":252,"author":{"gitId":"neojxuan"},"content":"2. [D][ ] return book (by: 19 Sep 2021 12:00 PM)","lastModifiedDate":"2021-09-17"},{"lineNumber":253,"author":{"gitId":"neojxuan"},"content":"```","lastModifiedDate":"2021-09-17"},{"lineNumber":254,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":255,"author":{"gitId":"neojxuan"},"content":"### `bye` - Exit Program","lastModifiedDate":"2021-09-17"},{"lineNumber":256,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":257,"author":{"gitId":"neojxuan"},"content":"Exits the Duke program.","lastModifiedDate":"2021-09-17"},{"lineNumber":258,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":259,"author":{"gitId":"neojxuan"},"content":"Example of usage:","lastModifiedDate":"2021-09-17"},{"lineNumber":260,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":261,"author":{"gitId":"neojxuan"},"content":"`bye`","lastModifiedDate":"2021-09-17"},{"lineNumber":262,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":263,"author":{"gitId":"neojxuan"},"content":"Expected outcome:","lastModifiedDate":"2021-09-17"},{"lineNumber":264,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":265,"author":{"gitId":"neojxuan"},"content":"Duke window is closed.","lastModifiedDate":"2021-09-17"},{"lineNumber":266,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":267,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":268,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"}],"authorContributionMap":{"neojxuan":240,"-":28}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":" * This class represents the Duke chatbot. It is the main class from which the chatbot is run.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"public class Duke {","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Duke object with a UI, Storage and TaskList with stored Tasks.","lastModifiedDate":"2021-09-16"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"    public Duke() {","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     * Executes command from parsing user input.","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"     * Returns message to be shown to user.","lastModifiedDate":"2021-09-16"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     * @param input User input.","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"     * @return Message to be shown to user.","lastModifiedDate":"2021-09-16"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"            return c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"            return ui.showError(e.getMessage());","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"neojxuan":41,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":" * This class represents an Exception that is thrown by the Duke program.","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"neojxuan":10}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-09-02"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.gui.Main;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"public class Launcher {","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"     * Launches the GUI.","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-09-02"}],"authorContributionMap":{"neojxuan":16}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.commands.AddTaskCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import duke.commands.EditCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"import duke.commands.FindTasksCommand;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":" * This class represents a Parser used to parse user input and return Commands that can be executed by Duke.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"public class Parser {","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     * Parses user input into a Command that should be executed by the Duke chatbot.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"     * @param input User input parsed into a String.","lastModifiedDate":"2021-09-17"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     * @return Command that is to be executed by Duke based on user input.","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If user input is not in the correct format or not a recognised command.","lastModifiedDate":"2021-09-02"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"        if (input \u003d\u003d null) {","lastModifiedDate":"2021-09-17"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"User input is null.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        String command \u003d getCommand(input);","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"        String commandDetails \u003d getCommandDetails(input);","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"        switch (command) {","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"        case \"done\":","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"            return parseDoneCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"            return parseDeleteCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"        case \"list\":","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"            return parseListCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"            return parseTodoCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"        case \"event\":","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"            return parseEventCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"            return parseDeadlineCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        case \"find\":","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"            return parseFindCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"        case \"edit\":","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"            return parseEditCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"            return parseByeCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"        default:","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Unknown command.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"    private static String getCommand(String input) {","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2021-09-17"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"        return parts[0];","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"    private static String getCommandDetails(String input) {","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"        String commandDetails \u003d \"\";","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"        if (input.contains(\" \")) {","lastModifiedDate":"2021-09-17"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"            commandDetails \u003d input.substring(input.indexOf(\" \") + 1).trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"        return commandDetails;","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"    private static void checkEmptyDetails(String commandDetails, String item) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"        if (commandDetails.isEmpty()) {","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(item + \" details cannot be empty.\");","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"    private static AddTaskCommand parseTodoCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"        checkEmptyDetails(commandDetails, \"Todo\");","lastModifiedDate":"2021-09-17"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"        Todo todo \u003d new Todo(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"        return new AddTaskCommand(todo);","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"    private static AddTaskCommand parseEventCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"        String[] parts \u003d commandDetails.split(\"/at\");","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"        String description \u003d parts[0].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"        checkEmptyDetails(description, \"Event\");","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":88,"author":{"gitId":"neojxuan"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Event descriptions must contain /at [dd-mm-yyyy hh:mm]\");","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"        String at \u003d parts[1].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"        Event event \u003d new Event(description, at);","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"        return new AddTaskCommand(event);","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":96,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"neojxuan"},"content":"    private static AddTaskCommand parseDeadlineCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":98,"author":{"gitId":"neojxuan"},"content":"        String[] parts \u003d commandDetails.split(\"/by\");","lastModifiedDate":"2021-09-17"},{"lineNumber":99,"author":{"gitId":"neojxuan"},"content":"        String description \u003d parts[0].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"neojxuan"},"content":"        checkEmptyDetails(description, \"Deadline\");","lastModifiedDate":"2021-09-17"},{"lineNumber":101,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":102,"author":{"gitId":"neojxuan"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Deadline descriptions must contain /by [dd-mm-yyyy hh:mm]\");","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"neojxuan"},"content":"        String by \u003d parts[1].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":106,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":107,"author":{"gitId":"neojxuan"},"content":"        Deadline deadline \u003d new Deadline(description, by);","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"neojxuan"},"content":"        return new AddTaskCommand(deadline);","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":110,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":111,"author":{"gitId":"neojxuan"},"content":"    private static EditCommand parseEditCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":112,"author":{"gitId":"neojxuan"},"content":"        String editMessage \u003d \"Usage of edit command:\\nedit [taskIndex] /desc [new desc] \"","lastModifiedDate":"2021-09-17"},{"lineNumber":113,"author":{"gitId":"neojxuan"},"content":"                + \"/date [new date]\\neg. edit 1 /desc Submit IP /date 17-9-2021 23:59\";","lastModifiedDate":"2021-09-17"},{"lineNumber":114,"author":{"gitId":"neojxuan"},"content":"        int taskIndex \u003d getTaskIndex(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":116,"author":{"gitId":"neojxuan"},"content":"            String detailsWithoutIndex \u003d commandDetails.split(\" \", 2)[1];","lastModifiedDate":"2021-09-17"},{"lineNumber":117,"author":{"gitId":"neojxuan"},"content":"            String[] editDescParts \u003d detailsWithoutIndex.split(\"/desc\", 2);","lastModifiedDate":"2021-09-17"},{"lineNumber":118,"author":{"gitId":"neojxuan"},"content":"            String[] editDateParts \u003d detailsWithoutIndex.split(\"/date\", 2);","lastModifiedDate":"2021-09-17"},{"lineNumber":119,"author":{"gitId":"neojxuan"},"content":"            if (editDescParts.length \u003c 2 \u0026\u0026 editDateParts.length \u003c 2) {","lastModifiedDate":"2021-09-17"},{"lineNumber":120,"author":{"gitId":"neojxuan"},"content":"                throw new DukeException(editMessage);","lastModifiedDate":"2021-09-17"},{"lineNumber":121,"author":{"gitId":"neojxuan"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":122,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":123,"author":{"gitId":"neojxuan"},"content":"            if (editDateParts.length \u003e\u003d 2 \u0026\u0026 editDescParts.length \u003e\u003d 2) {","lastModifiedDate":"2021-09-17"},{"lineNumber":124,"author":{"gitId":"neojxuan"},"content":"                // both description and date should be edited","lastModifiedDate":"2021-09-17"},{"lineNumber":125,"author":{"gitId":"neojxuan"},"content":"                String editedDescription \u003d editDescParts[1].split(\"/date\")[0].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":126,"author":{"gitId":"neojxuan"},"content":"                checkEmptyDetails(editedDescription, \"desc\");","lastModifiedDate":"2021-09-17"},{"lineNumber":127,"author":{"gitId":"neojxuan"},"content":"                String editedDate \u003d editDateParts[1].split(\"/desc\")[0].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":128,"author":{"gitId":"neojxuan"},"content":"                return new EditCommand(taskIndex, editedDescription, editedDate);","lastModifiedDate":"2021-09-17"},{"lineNumber":129,"author":{"gitId":"neojxuan"},"content":"            } else if (editDateParts.length \u003e\u003d 2) {","lastModifiedDate":"2021-09-17"},{"lineNumber":130,"author":{"gitId":"neojxuan"},"content":"                // only date should be edited","lastModifiedDate":"2021-09-17"},{"lineNumber":131,"author":{"gitId":"neojxuan"},"content":"                String editedDate \u003d editDateParts[1].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":132,"author":{"gitId":"neojxuan"},"content":"                return new EditCommand(taskIndex, null, editedDate);","lastModifiedDate":"2021-09-17"},{"lineNumber":133,"author":{"gitId":"neojxuan"},"content":"            } else {","lastModifiedDate":"2021-09-17"},{"lineNumber":134,"author":{"gitId":"neojxuan"},"content":"                // only description should be edited","lastModifiedDate":"2021-09-17"},{"lineNumber":135,"author":{"gitId":"neojxuan"},"content":"                String editedDescription \u003d editDescParts[1].trim();","lastModifiedDate":"2021-09-17"},{"lineNumber":136,"author":{"gitId":"neojxuan"},"content":"                checkEmptyDetails(editedDescription, \"desc\");","lastModifiedDate":"2021-09-17"},{"lineNumber":137,"author":{"gitId":"neojxuan"},"content":"                return new EditCommand(taskIndex, editedDescription, null);","lastModifiedDate":"2021-09-17"},{"lineNumber":138,"author":{"gitId":"neojxuan"},"content":"            }","lastModifiedDate":"2021-09-17"},{"lineNumber":139,"author":{"gitId":"neojxuan"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":140,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(editMessage);","lastModifiedDate":"2021-09-17"},{"lineNumber":141,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":142,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":143,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":144,"author":{"gitId":"neojxuan"},"content":"    private static int getTaskIndex(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":145,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":146,"author":{"gitId":"neojxuan"},"content":"            String taskNo \u003d commandDetails.split(\" \")[0];","lastModifiedDate":"2021-09-17"},{"lineNumber":147,"author":{"gitId":"neojxuan"},"content":"            int taskIndex \u003d Integer.parseInt(taskNo) - 1;","lastModifiedDate":"2021-08-27"},{"lineNumber":148,"author":{"gitId":"neojxuan"},"content":"            if (taskIndex \u003c 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":149,"author":{"gitId":"neojxuan"},"content":"                throw new DukeException(\"Invalid task number. Task number should be positive.\");","lastModifiedDate":"2021-08-30"},{"lineNumber":150,"author":{"gitId":"neojxuan"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":151,"author":{"gitId":"neojxuan"},"content":"            return taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":152,"author":{"gitId":"neojxuan"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":153,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Invalid task number. Sample input with correct format: [command] [taskNo]\"","lastModifiedDate":"2021-08-27"},{"lineNumber":154,"author":{"gitId":"neojxuan"},"content":"                    + \" eg. \u0027done 2\u0027\");","lastModifiedDate":"2021-08-27"},{"lineNumber":155,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":156,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":157,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":158,"author":{"gitId":"neojxuan"},"content":"    private static DoneCommand parseDoneCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":159,"author":{"gitId":"neojxuan"},"content":"        int taskIndex \u003d getTaskIndex(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":160,"author":{"gitId":"neojxuan"},"content":"        return new DoneCommand(taskIndex);","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"neojxuan"},"content":"    private static DeleteCommand parseDeleteCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":164,"author":{"gitId":"neojxuan"},"content":"        int taskIndex \u003d getTaskIndex(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":165,"author":{"gitId":"neojxuan"},"content":"        return new DeleteCommand(taskIndex);","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":167,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":168,"author":{"gitId":"neojxuan"},"content":"    private static ListCommand parseListCommand() {","lastModifiedDate":"2021-09-08"},{"lineNumber":169,"author":{"gitId":"neojxuan"},"content":"        return new ListCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":170,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":171,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":172,"author":{"gitId":"neojxuan"},"content":"    private static FindTasksCommand parseFindCommand(String commandDetails) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":173,"author":{"gitId":"neojxuan"},"content":"        checkEmptyDetails(commandDetails, \"Find keyword\");","lastModifiedDate":"2021-09-17"},{"lineNumber":174,"author":{"gitId":"neojxuan"},"content":"        return new FindTasksCommand(commandDetails);","lastModifiedDate":"2021-09-17"},{"lineNumber":175,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":176,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":177,"author":{"gitId":"neojxuan"},"content":"    private static ByeCommand parseByeCommand() {","lastModifiedDate":"2021-09-08"},{"lineNumber":178,"author":{"gitId":"neojxuan"},"content":"        return new ByeCommand();","lastModifiedDate":"2021-09-08"},{"lineNumber":179,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":180,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":180}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import java.io.File;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-09-02"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-09-02"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-02"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":" * This class represents a Storage that is used to save and load Tasks from a file.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"public class Storage {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    private static final String FILEPATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Storage that saves and loads tasks from the file specified by FILEPATH/","lastModifiedDate":"2021-09-02"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    public Storage() {","lastModifiedDate":"2021-09-02"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"    private static File getStoreFile() throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"        File store \u003d new File(FILEPATH);","lastModifiedDate":"2021-09-02"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"        String dirPath \u003d store.getParent();","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        File directory \u003d new File(dirPath);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"        // creates parent directories if they do not exist","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"        directory.mkdirs();","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"        // creates file if it does not exist","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"        store.createNewFile();","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"        assert store.isFile() : \"Storage file could not be found nor created.\";","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        return store;","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"     * Loads tasks from file specified by FILEPATH into an ArrayList of Tasks.","lastModifiedDate":"2021-09-02"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"     * @return ArrayList of Tasks loaded from the FILEPATH.","lastModifiedDate":"2021-09-02"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If tasks cannot be loaded from storage file or file is not found.","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    public static ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"            File store \u003d getStoreFile();","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"            return getTasksFromStore(store);","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"     * Saves tasks in the file specified by FILEPATH.","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList containing Tasks that should be saved.","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"    public static void saveTasks(TaskList tasks) {","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"            File store \u003d getStoreFile();","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"            writeTasksToStore(store, tasks);","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"    private static ArrayList\u003cTask\u003e getTasksFromStore(File store) throws DukeException, IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(store));","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"        String fileLine \u003d reader.readLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"        int lineNo \u003d 1;","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"        while (fileLine !\u003d null) {","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"            Task task \u003d parseTask(fileLine, lineNo);","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"            tasks.add(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"            lineNo++;","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"            fileLine \u003d reader.readLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"        reader.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"        return tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"    private static void writeTasksToStore(File store, TaskList tasks) throws IOException {","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(store));","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d tasks.getTaskStrings();","lastModifiedDate":"2021-08-27"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"        for (String taskString : taskStrings) {","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"neojxuan"},"content":"            writer.write(taskString);","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"neojxuan"},"content":"            writer.newLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"        writer.close();","lastModifiedDate":"2021-08-27"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"    private static Task parseTask(String fileLine, int lineNo) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"neojxuan"},"content":"        assert fileLine !\u003d null : \"Line \" + lineNo + \" of storage file is null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"neojxuan"},"content":"        assert !fileLine.isBlank() : \"Line \" + lineNo + \" of storage file is blank\";","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"neojxuan"},"content":"            String[] parts \u003d fileLine.split(\" \\\\| \");","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"neojxuan"},"content":"            String taskType \u003d parts[0];","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"neojxuan"},"content":"            int isDoneInt \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2021-08-27"},{"lineNumber":102,"author":{"gitId":"neojxuan"},"content":"            boolean isDone \u003d (isDoneInt \u003d\u003d 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"neojxuan"},"content":"            String description \u003d parts[2];","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"neojxuan"},"content":"            switch(taskType) {","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"neojxuan"},"content":"            case \"T\":","lastModifiedDate":"2021-08-27"},{"lineNumber":106,"author":{"gitId":"neojxuan"},"content":"                return new Todo(description, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":107,"author":{"gitId":"neojxuan"},"content":"            case \"D\":","lastModifiedDate":"2021-08-27"},{"lineNumber":108,"author":{"gitId":"neojxuan"},"content":"                String date \u003d parts[3];","lastModifiedDate":"2021-08-27"},{"lineNumber":109,"author":{"gitId":"neojxuan"},"content":"                return new Deadline(description, date, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":110,"author":{"gitId":"neojxuan"},"content":"            case \"E\":","lastModifiedDate":"2021-08-27"},{"lineNumber":111,"author":{"gitId":"neojxuan"},"content":"                date \u003d parts[3];","lastModifiedDate":"2021-08-27"},{"lineNumber":112,"author":{"gitId":"neojxuan"},"content":"                return new Event(description, date, isDone);","lastModifiedDate":"2021-08-27"},{"lineNumber":113,"author":{"gitId":"neojxuan"},"content":"            default:","lastModifiedDate":"2021-08-27"},{"lineNumber":114,"author":{"gitId":"neojxuan"},"content":"                throw new DukeException(\"Could not parse task type on file line \" + lineNo);","lastModifiedDate":"2021-08-27"},{"lineNumber":115,"author":{"gitId":"neojxuan"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":116,"author":{"gitId":"neojxuan"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":117,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Task details are missing on file line \" + lineNo);","lastModifiedDate":"2021-08-31"},{"lineNumber":118,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":119,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":120,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":120}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":" * This class represents a list of Tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"public class TaskList {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"     * Constructs a TaskList that contains all the tasks in the given param.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     * @param tasks ArrayList of Tasks that will be stored in the TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     * Constructs a TaskList with no Tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     * Prints the tasks in the TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    public String printTaskList() {","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"            return \"There are no tasks in the list.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"        message.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"            message.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"        return message.toString();","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"     * Prints the tasks in the TaskList that contain the specified keyword in a Find Command.","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"    public String printTaskListForFind() {","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"            return \"There are no matching tasks in the list.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"        StringBuilder message \u003d new StringBuilder();","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"        message.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"            message.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2021-09-16"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"        return message.toString();","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"    protected int getLength() {","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"     * Adds a Task to the TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"     * @param task Task to be added to the TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"    public void addNewTask(Task task) {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"        tasks.add(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"     * Marks a Task with the given taskIndex as done and returns the Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of the Task to be marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"     * @return Task that was marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If taskIndex is negative, no task exists at that index, or the task is already done.","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"    public Task markTaskDone(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"        validateTaskIndex(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"        Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"        if (task.getIsDone()) {","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Task \" + (taskIndex + 1) + \" is already marked as done.\");","lastModifiedDate":"2021-09-17"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"        task.markAsDone();","lastModifiedDate":"2021-08-27"},{"lineNumber":88,"author":{"gitId":"neojxuan"},"content":"        return task;","lastModifiedDate":"2021-08-27"},{"lineNumber":89,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":90,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"     * Deletes a Task and returns it.","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of Task to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":95,"author":{"gitId":"neojxuan"},"content":"     * @return Task that was deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":96,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If taskIndex is negative or more than or equal to size of array.","lastModifiedDate":"2021-09-16"},{"lineNumber":97,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":98,"author":{"gitId":"neojxuan"},"content":"    public Task deleteTask(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":99,"author":{"gitId":"neojxuan"},"content":"        validateTaskIndex(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":100,"author":{"gitId":"neojxuan"},"content":"        Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":101,"author":{"gitId":"neojxuan"},"content":"        tasks.remove(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":102,"author":{"gitId":"neojxuan"},"content":"        return task;","lastModifiedDate":"2021-08-27"},{"lineNumber":103,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":105,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":106,"author":{"gitId":"neojxuan"},"content":"     * Returns the String representations of all Tasks in an ArrayList in the format to be stored in a file.","lastModifiedDate":"2021-08-31"},{"lineNumber":107,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":108,"author":{"gitId":"neojxuan"},"content":"     * @return ArrayList of String representations of all Tasks in TaskList in the format to be stored in a file.","lastModifiedDate":"2021-08-31"},{"lineNumber":109,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":110,"author":{"gitId":"neojxuan"},"content":"    public ArrayList\u003cString\u003e getTaskStrings() {","lastModifiedDate":"2021-08-30"},{"lineNumber":111,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"neojxuan"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"neojxuan"},"content":"            taskStrings.add(task.toFileString());","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":115,"author":{"gitId":"neojxuan"},"content":"        return taskStrings;","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":119,"author":{"gitId":"neojxuan"},"content":"     * Returns a TaskList containing the Tasks that have the keyword searched for by the user in their descriptions.","lastModifiedDate":"2021-09-02"},{"lineNumber":120,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":121,"author":{"gitId":"neojxuan"},"content":"     * @param keyword Keyword searched for by users.","lastModifiedDate":"2021-09-02"},{"lineNumber":122,"author":{"gitId":"neojxuan"},"content":"     * @return TaskList containing the Tasks that have keyword in their descriptions.","lastModifiedDate":"2021-09-02"},{"lineNumber":123,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":124,"author":{"gitId":"neojxuan"},"content":"    public TaskList findTasksWithKeyword(String keyword) {","lastModifiedDate":"2021-08-31"},{"lineNumber":125,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e arrListTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-31"},{"lineNumber":126,"author":{"gitId":"neojxuan"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2021-08-31"},{"lineNumber":127,"author":{"gitId":"neojxuan"},"content":"            if (task.containsKeyword(keyword)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":128,"author":{"gitId":"neojxuan"},"content":"                arrListTasks.add(task);","lastModifiedDate":"2021-08-31"},{"lineNumber":129,"author":{"gitId":"neojxuan"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":130,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":131,"author":{"gitId":"neojxuan"},"content":"        return new TaskList(arrListTasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":132,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":133,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":134,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":135,"author":{"gitId":"neojxuan"},"content":"     * Updates task in TaskList at specified index with the updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":136,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":137,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of Task to be updated in tasks ArrayList.","lastModifiedDate":"2021-09-16"},{"lineNumber":138,"author":{"gitId":"neojxuan"},"content":"     * @param updatedTask Updated Task to replace original Task.","lastModifiedDate":"2021-09-16"},{"lineNumber":139,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If taskIndex is negative or more than or equal to size of array.","lastModifiedDate":"2021-09-17"},{"lineNumber":140,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":141,"author":{"gitId":"neojxuan"},"content":"    public void editTask(int taskIndex, Task updatedTask) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":142,"author":{"gitId":"neojxuan"},"content":"        validateTaskIndex(taskIndex);","lastModifiedDate":"2021-09-17"},{"lineNumber":143,"author":{"gitId":"neojxuan"},"content":"        tasks.set(taskIndex, updatedTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":144,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":145,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":146,"author":{"gitId":"neojxuan"},"content":"    private void validateTaskIndex(int taskIndex) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":147,"author":{"gitId":"neojxuan"},"content":"        int taskCount \u003d tasks.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":148,"author":{"gitId":"neojxuan"},"content":"        if (taskCount \u003d\u003d 0) {","lastModifiedDate":"2021-08-27"},{"lineNumber":149,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"There are no tasks in the list.\");","lastModifiedDate":"2021-08-27"},{"lineNumber":150,"author":{"gitId":"neojxuan"},"content":"        } else if (taskIndex \u003e\u003d taskCount) {","lastModifiedDate":"2021-08-27"},{"lineNumber":151,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Invalid task number. There are only \" + taskCount + \" tasks in the list\");","lastModifiedDate":"2021-08-27"},{"lineNumber":152,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":153,"author":{"gitId":"neojxuan"},"content":"        assert taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c taskCount : \"Invalid task index\";","lastModifiedDate":"2021-09-08"},{"lineNumber":154,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":155,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":156,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":157,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object being compared is a TaskList that contains the same Tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":158,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":159,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":160,"author":{"gitId":"neojxuan"},"content":"     * @return true if object is equal to TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":161,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":162,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":163,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":164,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof TaskList) {","lastModifiedDate":"2021-08-30"},{"lineNumber":165,"author":{"gitId":"neojxuan"},"content":"            TaskList other \u003d (TaskList) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":166,"author":{"gitId":"neojxuan"},"content":"            return tasks.equals(other.tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":167,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":168,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":169,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":170,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":171,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":172,"author":{"gitId":"neojxuan"},"content":"     * Returns Task in TaskList at specified index.","lastModifiedDate":"2021-09-16"},{"lineNumber":173,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":174,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of Task in tasks ArrayList to be returned.","lastModifiedDate":"2021-09-16"},{"lineNumber":175,"author":{"gitId":"neojxuan"},"content":"     * @return Task in TaskList at specified index.","lastModifiedDate":"2021-09-16"},{"lineNumber":176,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If taskIndex is negative or more than or equal to size of array.","lastModifiedDate":"2021-09-17"},{"lineNumber":177,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":178,"author":{"gitId":"neojxuan"},"content":"    public Task getTask(int taskIndex) throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":179,"author":{"gitId":"neojxuan"},"content":"        validateTaskIndex(taskIndex);","lastModifiedDate":"2021-09-17"},{"lineNumber":180,"author":{"gitId":"neojxuan"},"content":"        return tasks.get(taskIndex);","lastModifiedDate":"2021-09-16"},{"lineNumber":181,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-16"},{"lineNumber":182,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":182}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":" * This class represents a User Interface.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":" * It deals with user interactions like reading user input and displaying messages to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"public class Ui {","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Ui object.","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    public Ui() {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     * Returns loading error message when tasks cannot be loaded from Storage.","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    public String showLoadingError() {","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"        return \"There was a problem loading saved tasks.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     * Returns message to show when Duke chatbot is first started.","lastModifiedDate":"2021-09-16"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    public String showWelcome() {","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"        return \"Hello...\\nWhat do you want?\\n\";","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     * Returns message to show when Duke chatbot is exited.","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"    public String showBye() {","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"        return \"Whatever...\";","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"     * Returns message to show when DukeException is thrown.","lastModifiedDate":"2021-09-16"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"     * @param message Error message to be shown.","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"    public String showError(String message) {","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"        return \"Error. \" + message;","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"     * Returns message to show when task is marked as done.","lastModifiedDate":"2021-09-16"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"     * @param task Task that is marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"    public String showMarkDone(Task task) {","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"        return \"I\u0027ve marked this task as done:\\n\\t\" + task;","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"     * Returns message to show when task is deleted.","lastModifiedDate":"2021-09-16"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"     * @param task Task that was deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"     * @param tasks Updated TaskList that does not contain deleted task.","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"    public String showDelete(Task task, TaskList tasks) {","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\\t\" + task + \"\\n\" + printTasksCount(tasks);","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"     * Returns message showing number of tasks in TaskList.","lastModifiedDate":"2021-09-16"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList of tasks whose number of tasks is to be displayed.","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"    String printTasksCount(TaskList tasks) {","lastModifiedDate":"2021-09-05"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"        return \"Now you have \" + tasks.getLength() + \" tasks in the list.\";","lastModifiedDate":"2021-09-05"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"     * Returns message to show when a task is added to a TaskList.","lastModifiedDate":"2021-09-16"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"     * @param tasks Updated TaskList of tasks containing added task.","lastModifiedDate":"2021-08-31"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"     * @param task Task that was added to the TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"    public String showAddTask(TaskList tasks, Task task) {","lastModifiedDate":"2021-09-05"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"        return \"Got it. I\u0027ve added this task:\\n\\t\" + task + \"\\n\" + printTasksCount(tasks);","lastModifiedDate":"2021-09-05"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"     * Returns message showing edited task.","lastModifiedDate":"2021-09-16"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of Task that was edited.","lastModifiedDate":"2021-09-16"},{"lineNumber":88,"author":{"gitId":"neojxuan"},"content":"     * @param task Edited Task.","lastModifiedDate":"2021-09-16"},{"lineNumber":89,"author":{"gitId":"neojxuan"},"content":"     * @return message showing edited task.","lastModifiedDate":"2021-09-16"},{"lineNumber":90,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"    public String showEditedTask(int taskIndex, Task task) {","lastModifiedDate":"2021-09-11"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"        return \"Task \" + (taskIndex + 1) + \" has been successfully edited to:\\n\\t\" + task;","lastModifiedDate":"2021-09-16"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":94}},{"path":"src/main/java/duke/commands/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":" * Represents a command to add a Task to a TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"    private final Task task;","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     * Constructs an AddTaskCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     * @param task Task to be added to a TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    public AddTaskCommand(Task task) {","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     * Adds the Task stored in the AddTaskCommand to a TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList where the Task should be added.","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui that will display the messages to user when a Task is added.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where the TaskList should be saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        tasks.addNewTask(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"        Storage.saveTasks(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"        return ui.showAddTask(tasks, task);","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"     * Checks if an object is equal to this AddTaskCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object is an AddTaskCommand with the same Task to be added.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to this AddTaskCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"     * @return True if obj is equal to this AddTaskCommand, else false.","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof AddTaskCommand) {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"            AddTaskCommand otherTask \u003d (AddTaskCommand) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"            return task.equals(otherTask.task);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":51}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":" * Represents a ByeCommand to exit the Duke program.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"     * Saves tasks in storage file, shows exit messages to user and closes Ui.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList containing tasks to be saved to storage file.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui that displays messages to users.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage that is used to save tasks.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"        System.exit(0);","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"        return ui.showBye();","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object is a ByeCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to ByeCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"     * @return True if object is a ByeCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        return (obj instanceof ByeCommand);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":33}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":" * Represents a Command to be executed by the Duke program.","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"     * Executes a Command.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList containing tasks on which Command can be executed.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui to show messages to user when Command is executed.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where tasks should be stored.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If Command fails to execute.","lastModifiedDate":"2021-09-17"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":21}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":" * Represents Command to delete a Task from a TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    private final int taskIndex;","lastModifiedDate":"2021-09-17"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     * Constructs a DeleteCommand with the given taskIndex","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of Task in TaskList to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     * Deletes the Task in a TaskList with the index stored in the DeleteCommand\u0027s taskIndex.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList where the Task should be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui that will display the messages to user when a Task is deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where the TaskList should be saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"        Task task \u003d tasks.deleteTask(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"        return ui.showDelete(task, tasks);","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"     * Checks if an object is equal to this DeleteCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object is an DeleteCommand with the same taskIndex to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to this DeleteCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"     * @return True if obj is equal to this DeleteCommand, else false.","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof DeleteCommand) {","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"            DeleteCommand other \u003d (DeleteCommand) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"            return (taskIndex \u003d\u003d other.taskIndex);","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":52}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":" * Represents Command to mark a Task in a TaskList as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    private final int taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    public DoneCommand(int taskIndex) {","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     * Marks the Task in a TaskList with the index stored in the DoneCommand\u0027s taskIndex as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList where the Task should be marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui that will display the messages to user when a Task is marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where the TaskList should be saved.","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"        Task task \u003d tasks.markTaskDone(taskIndex);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"        Storage.saveTasks(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"        return ui.showMarkDone(task);","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"     * Checks if an object is equal to this DoneCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object is an DoneCommand with the same taskIndex to be deleted.","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to this DoneCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"     * @return True if obj is equal to this DoneCommand, else false.","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof DoneCommand) {","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"            DoneCommand other \u003d (DoneCommand) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"            return taskIndex \u003d\u003d other.taskIndex;","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":47}},{"path":"src/main/java/duke/commands/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":" * Represents Command to edit a Task\u0027s description and/or date.","lastModifiedDate":"2021-09-16"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-09-16"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    private final int taskIndex;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    private final String description;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    private final String date;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     * Constructs an EditCommand to update the information of an existing Task in the TaskList.","lastModifiedDate":"2021-09-16"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     * @param taskIndex Index of task to be edited.","lastModifiedDate":"2021-09-16"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"     * @param description Edited description of task. May be null if description does not need to be updated.","lastModifiedDate":"2021-09-16"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"     * @param date Edited description of task. May be null if date does not need to be updated.","lastModifiedDate":"2021-09-16"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    public EditCommand(int taskIndex, String description, String date) {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     * Returns description of updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"     * @return Description of updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"        return description;","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"     * Returns date of updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"     * @return Date of updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"    public String getDate() {","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        return date;","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"     * Returns the task list with the updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList that contains task to be updated.","lastModifiedDate":"2021-09-16"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui that will display the updated task.","lastModifiedDate":"2021-09-16"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where the TaskList should be saved.","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        Task toEditTask \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"        Task editedTask \u003d toEditTask.getUpdatedTask(this);","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"        tasks.editTask(taskIndex, editedTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"        Storage.saveTasks(tasks);","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"        return ui.showEditedTask(taskIndex, editedTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"neojxuan":63}},{"path":"src/main/java/duke/commands/FindTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"public class FindTasksCommand extends Command {","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"    private final String keyword;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    public FindTasksCommand(String keyword) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     * Searches for and prints the tasks in the task list that contain the keyword.","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-02"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList that contains tasks to be searched through.","lastModifiedDate":"2021-09-02"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui that will display the tasks containing keyword.","lastModifiedDate":"2021-09-02"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where the TaskList should be saved.","lastModifiedDate":"2021-09-02"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-02"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"        TaskList tasksWithKeyword \u003d tasks.findTasksWithKeyword(keyword);","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"        return tasksWithKeyword.printTaskListForFind();","lastModifiedDate":"2021-09-17"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object is a FindCommand with the same keyword.","lastModifiedDate":"2021-09-16"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to FindCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     * @return True if object is a FindCommand with the same keyword.","lastModifiedDate":"2021-09-16"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof FindTasksCommand) {","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"            FindTasksCommand otherCommand \u003d (FindTasksCommand) obj;","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"            return keyword.equals(otherCommand.keyword);","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"neojxuan":40}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.commands;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":" * Represents a ListCommand to display all the tasks in a TaskList to a user.","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     * Prints the tasks in the given TaskList.","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     * @param tasks TaskList containing tasks to be printed.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     * @param ui Ui to show messages to user when ListCommand is executed.","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     * @param storage Storage where tasks should be stored.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"        return tasks.printTaskList();","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"     * Returns true if object is a ListCommand, else false.","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to be compared to ListCommand.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"     * @return True if obj is a ListCommand, else false.","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"        return obj instanceof ListCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"neojxuan":35}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.gui;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2021-09-17"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-05"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-05"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"        // crop displayPicture image to be circular","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"        double centerX \u003d displayPicture.getFitWidth() / 2;","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"        double centerY \u003d displayPicture.getFitHeight() / 2;","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        double radius \u003d (centerX + centerY) / 2;","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"        Circle clip \u003d new Circle(centerX, centerY, radius);","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        displayPicture.setClip(clip);","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"    private void flip() {","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-05"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-05"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-05"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"        DialogBox userDialog \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"        userDialog.dialog.setStyle(\"-fx-background-color: aquamarine; -fx-padding: 9px; \"","lastModifiedDate":"2021-09-17"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"                + \"-fx-background-radius: 9px;\");","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"        return userDialog;","lastModifiedDate":"2021-09-17"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-05"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"        DialogBox dukeDialog \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-17"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"        dukeDialog.flip();","lastModifiedDate":"2021-09-17"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"        dukeDialog.dialog.setStyle(\"-fx-background-color: antiquewhite; -\"","lastModifiedDate":"2021-09-17"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"                + \"fx-padding: 9px; -fx-background-radius: 9px;\");","lastModifiedDate":"2021-09-17"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"        return dukeDialog;","lastModifiedDate":"2021-09-17"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"neojxuan":74}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.gui;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"            stage.show();","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-05"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"neojxuan":33}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.gui;","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-05"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-05"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2021-09-05"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"     * Initializes scrollPane and creates dialog box showing greeting message from Duke.","lastModifiedDate":"2021-09-17"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-05"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-05"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"        DialogBox greeting \u003d DialogBox.getDukeDialog(ui.showWelcome(), dukeImage);","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"        dialogContainer.getChildren().add(greeting);","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-05"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-05"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"    @FXML","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-05"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-05"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-05"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"        assert input !\u003d null : \"user input is null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"        assert response !\u003d null : \"duke\u0027s response is null\";","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-05"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-05"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-05"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"        );","lastModifiedDate":"2021-09-05"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-05"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"neojxuan":63}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import duke.commands.EditCommand;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":" * This class represents a Deadline Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-uuuu H:mm\");","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    private static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu hh:mm a\");","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"    protected LocalDateTime date;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Deadline Task that is not done.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of deadline task.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"     * @param by Date that task has to be completed by.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"        super(description, false);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"        this.date \u003d parseDateTime(by);","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Deadline Task which can be marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of deadline task.","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"     * @param by Date that task has to be completed by.","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"     * @param isDone Whether the task is done.","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"    public Deadline(String description, String by, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"        this.date \u003d parseDateTime(by);","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"    private LocalDateTime parseDateTime(String by) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"            return LocalDateTime.parse(by, FORMATTER);","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Unable to parse datetime. Datetime should be input in this format: \"","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"                    + \"dd-mm-yyyy hh:mm\");","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"     * Appends \"[D]\" to the front to show that Task is a Deadline.","lastModifiedDate":"2021-09-16"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + date.format(DISPLAY_FORMATTER) + \")\";","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"        return \"D\" + super.toFileString() + \" | \" + date.format(FORMATTER);","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof Deadline) {","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"            Deadline other \u003d (Deadline) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"            return super.equals(obj) \u0026\u0026 date.equals(other.date);","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"    public Task getUpdatedTask(EditCommand edit) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"        String newDescription \u003d edit.getDescription() \u003d\u003d null ? description : edit.getDescription();","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"        String newDate \u003d edit.getDate() \u003d\u003d null ? date.format(FORMATTER) : edit.getDate();","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"        return new Deadline(newDescription, newDate, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"neojxuan":85}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-16"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import duke.commands.EditCommand;","lastModifiedDate":"2021-09-16"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":" * This class represents an Event Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-uuuu H:mm\");","lastModifiedDate":"2021-09-02"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    private static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu hh:mm a\");","lastModifiedDate":"2021-09-02"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"    protected LocalDateTime date;","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Deadline Task that is not done.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of event task.","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"     * @param at Date that event is occurring.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    public Event(String description, String at) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"        super(description, false);","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"        this.date \u003d parseDateTime(at);","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of event task.","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"     * @param at Date that event is occurring.","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"     * @param isDone Whether task is done.","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    public Event(String description, String at, boolean isDone) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        this.date \u003d parseDateTime(at);","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"    private LocalDateTime parseDateTime(String at) throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"            return LocalDateTime.parse(at, FORMATTER);","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"            throw new DukeException(\"Unable to parse datetime. Datetime should be input in this format: \"","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"                    + \"dd-mm-yyyy hh:mm\");","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-16"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"        return \"E\" + super.toFileString() + \" | \" + date.format(FORMATTER);","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"     * Appends \"[E]\" to the front to show that Task is a Deadline.","lastModifiedDate":"2021-09-16"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DISPLAY_FORMATTER) + \")\";","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof Event) {","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"            Event other \u003d (Event) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"            return super.equals(obj) \u0026\u0026 date.equals(other.date);","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"    public Task getUpdatedTask(EditCommand edit) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"        String newDescription \u003d edit.getDescription() \u003d\u003d null ? description : edit.getDescription();","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"        String newDate \u003d edit.getDate() \u003d\u003d null ? date.format(FORMATTER) : edit.getDate();","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"        return new Event(newDescription, newDate, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"neojxuan":84}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import duke.commands.EditCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":" * This class represents a Task. It is a superclass from which more specific Task classes will extend from.","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-16"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Task object.","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of task.","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"     * @param isDone Whether the task is done.","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"     * Returns an icon representing the status of the task.","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"     * If the task is done, \"X\" is returned; else a space \" \" is returned.","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"     * @return Icon representing status.","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-17"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"     * Returns done status of task.","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"     * @return Done status of task.","lastModifiedDate":"2021-09-17"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"        return isDone;","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"     * Marks a task as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"     * Returns a string representation of the task to be stored in a hard disc.","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"     * This string can be parsed when the Duke chatbot is started in order to load the task into the task list.","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"     * @return String representation of task to be stored in hard disc.","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        String isDoneString \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"        return \" | \" + isDoneString + \" | \" + description;","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"     * Returns true if the Task\u0027s description contains the keyword; otherwise false.","lastModifiedDate":"2021-09-16"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"     * @param keyword Keyword that user is searching for.","lastModifiedDate":"2021-09-16"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"     * @return true if the Task\u0027s description contains the keyword; otherwise false.","lastModifiedDate":"2021-09-16"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"    public boolean containsKeyword(String keyword) {","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"        return description.contains(keyword);","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"     * Returns a string representation of a task to be shown to the user.","lastModifiedDate":"2021-08-31"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"     * @return String representation of task.","lastModifiedDate":"2021-09-16"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"     * Checks if an object is equal to this task.","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"     * The object is equal if it is a task and its description and done status are equal to this task\u0027s.","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"     * @param obj Object to compare to this task.","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"     * @return Whether object is equal to this task.","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":90,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof Task) {","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"            Task other \u003d (Task) obj;","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"            return description.equals(other.description) \u0026\u0026 isDone \u003d\u003d other.isDone;","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":95,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":97,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":98,"author":{"gitId":"neojxuan"},"content":"     * Returns updated task using information from the EditCommand.","lastModifiedDate":"2021-09-16"},{"lineNumber":99,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-09-16"},{"lineNumber":100,"author":{"gitId":"neojxuan"},"content":"     * @param edit EditCommand that includes information to update in this Task.","lastModifiedDate":"2021-09-16"},{"lineNumber":101,"author":{"gitId":"neojxuan"},"content":"     * @return Updated Task.","lastModifiedDate":"2021-09-16"},{"lineNumber":102,"author":{"gitId":"neojxuan"},"content":"     * @throws DukeException If information to update is invalid.","lastModifiedDate":"2021-09-16"},{"lineNumber":103,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":104,"author":{"gitId":"neojxuan"},"content":"    public abstract Task getUpdatedTask(EditCommand edit) throws DukeException;","lastModifiedDate":"2021-09-16"},{"lineNumber":105,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"neojxuan":105}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import duke.commands.EditCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":" * This class represents a Todo Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Todo Task with the given description that is not marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of the Todo Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"        super(description, false);","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"     * Constructs a Todo Task with the given description that can be marked as done.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"     * @param description Description of the Todo Task.","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"     * @param isDone Whether task is done.","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        return \"T\" + super.toFileString();","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"     * Appends \"[T]\" to the front to show that Task is a Todo.","lastModifiedDate":"2021-09-16"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        if (obj instanceof Todo) {","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"            return super.equals(obj);","lastModifiedDate":"2021-08-30"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"        return false;","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"    /**","lastModifiedDate":"2021-09-16"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"     * {@inheritDoc}","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"     */","lastModifiedDate":"2021-09-16"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"    public Task getUpdatedTask(EditCommand edit) {","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"        String newDescription \u003d edit.getDescription() \u003d\u003d null ? description : edit.getDescription();","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        return new Todo(newDescription, isDone);","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"neojxuan":59}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minWidth \u003d \"200.0\"/\u003e","lastModifiedDate":"2021-09-17"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"neojxuan":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"neojxuan":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-02"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-02"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import duke.commands.AddTaskCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskDeadline() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"        Deadline deadline \u003d new Deadline(\"test description 123\", \"20-01-2021 02:13\");","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new AddTaskCommand(deadline),","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"                Parser.parse(\"deadline test description 123 /by 20-01-2021 02:13\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskDeadline_noDescription_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"deadline\");","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Deadline details cannot be empty.\", e.getMessage());","lastModifiedDate":"2021-09-17"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskDeadline_noBy_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"deadline abc\");","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Deadline descriptions must contain /by [dd-mm-yyyy hh:mm]\", e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskEvent() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        Event event \u003d new Event(\"test description 123\", \"20-01-2021 02:13\");","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new AddTaskCommand(event),","lastModifiedDate":"2021-08-30"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"                Parser.parse(\"event test description 123 /at 20-01-2021 02:13\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskEvent_noDescription_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"event\");","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Event details cannot be empty.\", e.getMessage());","lastModifiedDate":"2021-09-17"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskEvent_noAt_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"event abc\");","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Event descriptions must contain /at [dd-mm-yyyy hh:mm]\", e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":71,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":72,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskTodo() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":74,"author":{"gitId":"neojxuan"},"content":"        Todo todo \u003d new Todo(\"test description 123\");","lastModifiedDate":"2021-08-30"},{"lineNumber":75,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new AddTaskCommand(todo), Parser.parse(\"todo test description 123\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":77,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":79,"author":{"gitId":"neojxuan"},"content":"    public void parseAddTaskTodo_noDescription_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":80,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":81,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"todo\");","lastModifiedDate":"2021-08-30"},{"lineNumber":82,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":83,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":84,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Todo details cannot be empty.\", e.getMessage());","lastModifiedDate":"2021-09-17"},{"lineNumber":85,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":86,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":87,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":88,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":89,"author":{"gitId":"neojxuan"},"content":"    public void parseBye() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":90,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new ByeCommand(), Parser.parse(\"bye\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":91,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"neojxuan"},"content":"    public void parseList() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":95,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new ListCommand(), Parser.parse(\"list\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":96,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":97,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":98,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":99,"author":{"gitId":"neojxuan"},"content":"    public void parseDelete() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":100,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new DeleteCommand(0), Parser.parse(\"delete 1\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"neojxuan"},"content":"    public void parseDelete_negativeIndex_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":105,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"delete 0\");","lastModifiedDate":"2021-08-30"},{"lineNumber":107,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":108,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":109,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Invalid task number. Task number should be positive.\", e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":110,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":111,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":112,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":113,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":114,"author":{"gitId":"neojxuan"},"content":"    public void parseDelete_nonNumericTaskIndex_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":115,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":116,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"delete abc\");","lastModifiedDate":"2021-08-30"},{"lineNumber":117,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":118,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":119,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Invalid task number. Sample input with correct format: \"","lastModifiedDate":"2021-08-30"},{"lineNumber":120,"author":{"gitId":"neojxuan"},"content":"                    + \"[command] [taskNo] eg. \u0027done 2\u0027\", e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":121,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":122,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":123,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":124,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":125,"author":{"gitId":"neojxuan"},"content":"    public void parseDone() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":126,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new DoneCommand(0), Parser.parse(\"done 1\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":127,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":128,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":129,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":130,"author":{"gitId":"neojxuan"},"content":"    public void parseDone_negativeIndex_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":131,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":132,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"done 0\");","lastModifiedDate":"2021-08-30"},{"lineNumber":133,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":134,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":135,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Invalid task number. Task number should be positive.\", e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":136,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":137,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":138,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":139,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":140,"author":{"gitId":"neojxuan"},"content":"    public void parseDone_nonNumericTaskIndex_exceptionThrown() {","lastModifiedDate":"2021-09-17"},{"lineNumber":141,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-08-30"},{"lineNumber":142,"author":{"gitId":"neojxuan"},"content":"            Parser.parse(\"done abc\");","lastModifiedDate":"2021-08-30"},{"lineNumber":143,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-08-30"},{"lineNumber":144,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-30"},{"lineNumber":145,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Invalid task number. Sample input with correct format: \"","lastModifiedDate":"2021-08-30"},{"lineNumber":146,"author":{"gitId":"neojxuan"},"content":"                    + \"[command] [taskNo] eg. \u0027done 2\u0027\", e.getMessage());","lastModifiedDate":"2021-08-30"},{"lineNumber":147,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-08-30"},{"lineNumber":148,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":149,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"neojxuan":149}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"package duke;","lastModifiedDate":"2021-08-30"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-02"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-17"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-02"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-02"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-09-02"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2021-09-02"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"    public void addNewTask() {","lastModifiedDate":"2021-09-17"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"        taskArr.add(new Todo(\"test\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"        TaskList otherTasks \u003d new TaskList(taskArr);","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"        tasks.addNewTask(new Todo(\"test\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"        assertEquals(tasks, otherTasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"    public void markTaskDone() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":27,"author":{"gitId":"neojxuan"},"content":"        taskArr.add(new Todo(\"test\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":28,"author":{"gitId":"neojxuan"},"content":"        Todo doneTodo \u003d new Todo(\"test\", true);","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"neojxuan"},"content":"        TaskList tasks \u003d new TaskList(taskArr);","lastModifiedDate":"2021-08-30"},{"lineNumber":30,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e doneArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":31,"author":{"gitId":"neojxuan"},"content":"        doneArr.add(doneTodo);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"neojxuan"},"content":"        TaskList otherTasks \u003d new TaskList(doneArr);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"neojxuan"},"content":"        tasks.markTaskDone(0);","lastModifiedDate":"2021-08-30"},{"lineNumber":34,"author":{"gitId":"neojxuan"},"content":"        assertEquals(otherTasks, tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":35,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":36,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":37,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":38,"author":{"gitId":"neojxuan"},"content":"    public void markTaskDone_alreadyDoneTask_exceptionThrown() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":39,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-17"},{"lineNumber":40,"author":{"gitId":"neojxuan"},"content":"        taskArr.add(new Todo(\"test\", true));","lastModifiedDate":"2021-09-17"},{"lineNumber":41,"author":{"gitId":"neojxuan"},"content":"        TaskList tasks \u003d new TaskList(taskArr);","lastModifiedDate":"2021-09-17"},{"lineNumber":42,"author":{"gitId":"neojxuan"},"content":"        try {","lastModifiedDate":"2021-09-17"},{"lineNumber":43,"author":{"gitId":"neojxuan"},"content":"            tasks.markTaskDone(0);","lastModifiedDate":"2021-09-17"},{"lineNumber":44,"author":{"gitId":"neojxuan"},"content":"            fail();","lastModifiedDate":"2021-09-17"},{"lineNumber":45,"author":{"gitId":"neojxuan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-17"},{"lineNumber":46,"author":{"gitId":"neojxuan"},"content":"            assertEquals(\"Task 1 is already marked as done.\", e.getMessage());","lastModifiedDate":"2021-09-17"},{"lineNumber":47,"author":{"gitId":"neojxuan"},"content":"        }","lastModifiedDate":"2021-09-17"},{"lineNumber":48,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":49,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-09-17"},{"lineNumber":50,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-09-17"},{"lineNumber":51,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-09-17"},{"lineNumber":52,"author":{"gitId":"neojxuan"},"content":"    public void deleteTask() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":53,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":54,"author":{"gitId":"neojxuan"},"content":"        taskArr.add(new Todo(\"test\"));","lastModifiedDate":"2021-08-30"},{"lineNumber":55,"author":{"gitId":"neojxuan"},"content":"        TaskList tasks \u003d new TaskList(taskArr);","lastModifiedDate":"2021-08-30"},{"lineNumber":56,"author":{"gitId":"neojxuan"},"content":"        tasks.deleteTask(0);","lastModifiedDate":"2021-08-30"},{"lineNumber":57,"author":{"gitId":"neojxuan"},"content":"        assertEquals(new TaskList(), tasks);","lastModifiedDate":"2021-08-30"},{"lineNumber":58,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":59,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":60,"author":{"gitId":"neojxuan"},"content":"    @Test","lastModifiedDate":"2021-08-30"},{"lineNumber":61,"author":{"gitId":"neojxuan"},"content":"    public void getTaskStrings() throws DukeException {","lastModifiedDate":"2021-09-17"},{"lineNumber":62,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":63,"author":{"gitId":"neojxuan"},"content":"        taskArr.add(new Todo(\"test\", true));","lastModifiedDate":"2021-08-30"},{"lineNumber":64,"author":{"gitId":"neojxuan"},"content":"        TaskList tasks \u003d new TaskList(taskArr);","lastModifiedDate":"2021-08-30"},{"lineNumber":65,"author":{"gitId":"neojxuan"},"content":"        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":66,"author":{"gitId":"neojxuan"},"content":"        expected.add(\"T | 1 | test\");","lastModifiedDate":"2021-08-30"},{"lineNumber":67,"author":{"gitId":"neojxuan"},"content":"        assertEquals(expected, tasks.getTaskStrings());","lastModifiedDate":"2021-08-30"},{"lineNumber":68,"author":{"gitId":"neojxuan"},"content":"    }","lastModifiedDate":"2021-08-30"},{"lineNumber":69,"author":{"gitId":"neojxuan"},"content":"}","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"neojxuan":69}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"neojxuan"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"neojxuan"},"content":"blah","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"neojxuan"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"neojxuan"},"content":"event","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"neojxuan"},"content":"event Rehearsal","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"neojxuan"},"content":"deadline","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"neojxuan"},"content":"deadline Submit CS2103T hw","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"neojxuan"},"content":"blah blah blah","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"neojxuan"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"neojxuan"},"content":"done","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"neojxuan"},"content":"delete","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"neojxuan"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"neojxuan"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"neojxuan"},"content":"todo Implement Automated Text UI Testing","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"neojxuan"},"content":"event Run away from problems /at 18-08-2021 01:00","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"neojxuan"},"content":"deadline Submit IP /by 19-8-2021 23:59","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"neojxuan"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"neojxuan"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"neojxuan"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"neojxuan"},"content":"delete 1","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"neojxuan"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"neojxuan"},"content":"delete 3","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"neojxuan"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"neojxuan"},"content":"bye","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"neojxuan"},"content":"lala","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"neojxuan"},"content":"","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"neojxuan":26}}]

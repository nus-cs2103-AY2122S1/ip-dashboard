[{"path":"src/main/java/Duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.util.Locale;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"public enum Command {","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"    UNRECOGNISED,","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"    LIST,","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"    DONE,","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"    TODO,","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"    DEADLINE,","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"    EVENT,","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"    DELETE,","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"    BYE;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"    public static Command readInput(String input) {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"        String newInput \u003d input.toLowerCase();","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"        Command newCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"        switch (newInput) {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"            case \"list\":","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.LIST;","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"            case \"done\":","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.DONE;","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.TODO;","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.DEADLINE;","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"            case \"event\":","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.EVENT;","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.DELETE;","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.BYE;","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"                newCommand \u003d Command.UNRECOGNISED;","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"        return newCommand;","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"zacharylwy":44}},{"path":"src/main/java/Duke/Data.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.io.File;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-23"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"public class Data {","lastModifiedDate":"2021-08-23"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"    private static File data;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"    public Data(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"        data \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"     * Loads the Tasks stored in the form of an ArrayList\u003cTask\u003e.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"     * @return An ArrayList of type Task with all Tasks previously stored.","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"    public static ArrayList\u003cTask\u003e loadData() {","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"            Scanner scanner \u003d new Scanner(data);","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"            ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"                try {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"                    loadedTasks.add(txtToTasks(scanner.nextLine()));","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"                } catch (IllegalStateException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"                    System.err.println(e);","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"            return loadedTasks;","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"            makeNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"            return new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"     * Writes the Task to the current txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"    public static void writeToFile(Task task) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"        if (!data.exists()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"            makeNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"            FileWriter writer \u003d new FileWriter(\"./data/data.txt\", true);","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"            writer.write(task.toTxt() + System.lineSeparator());","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"            writer.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"Oops! It seems like I am unable to update your Tasks\");","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"zacharylwy"},"content":"     * Updates the Tasks stored in the txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"zacharylwy"},"content":"    public static void updateData(ArrayList\u003cTask\u003e dukeList) throws DukeException {","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"zacharylwy"},"content":"            FileWriter writer \u003d new FileWriter(\"./data/data.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"zacharylwy"},"content":"            for (Task task : dukeList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"zacharylwy"},"content":"                writer.write(task.toTxt() + \"\\n\");","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"zacharylwy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"zacharylwy"},"content":"            writer.close();","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"zacharylwy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"Oops! It seems I am unable to update your Tasks\");","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"zacharylwy"},"content":"     * Converts txt String into a Task object.","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"zacharylwy"},"content":"     * @param txt the String that is read from the txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"zacharylwy"},"content":"     * @return a new Task interpreted from the txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"zacharylwy"},"content":"    public static Task txtToTasks(String txt) {","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"zacharylwy"},"content":"        String[] read \u003d txt.split(\" \\\\| \");","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"zacharylwy"},"content":"        String taskCategory \u003d read[0];","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"zacharylwy"},"content":"        Task task;","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"zacharylwy"},"content":"        switch(taskCategory) {","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"zacharylwy"},"content":"            case \"D\":","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"zacharylwy"},"content":"                task \u003d new Deadline(read[2], read[3]);","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"zacharylwy"},"content":"            case \"E\":","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"zacharylwy"},"content":"                task \u003d new Event(read[2], read[3]);","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"zacharylwy"},"content":"            case \"T\":","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"zacharylwy"},"content":"                task \u003d new Todo(read[2]);","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"zacharylwy"},"content":"                break;","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"zacharylwy"},"content":"            default:","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"zacharylwy"},"content":"                throw new IllegalStateException(\"Oops! It seems there is a category I do not understand.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"zacharylwy"},"content":"        if (read[1].equals(\"1\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"zacharylwy"},"content":"            task.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"zacharylwy"},"content":"        return task;","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":101,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":102,"author":{"gitId":"zacharylwy"},"content":"     * Creates a new txt file if there currently is nothing stored.","lastModifiedDate":"2021-08-23"},{"lineNumber":103,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":104,"author":{"gitId":"zacharylwy"},"content":"    public static void makeNewFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":105,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":106,"author":{"gitId":"zacharylwy"},"content":"            data.getParentFile().mkdirs();","lastModifiedDate":"2021-08-23"},{"lineNumber":107,"author":{"gitId":"zacharylwy"},"content":"            data.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":108,"author":{"gitId":"zacharylwy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":109,"author":{"gitId":"zacharylwy"},"content":"            System.err.println(\"Oops! Unable to create a new file. Your Tasks will not be saved.\");","lastModifiedDate":"2021-08-23"},{"lineNumber":110,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":111,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":112,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"zacharylwy":112}},{"path":"src/main/java/Duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.text.DateFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"import java.util.Date;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"    private final Date deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"    private final String dateInput;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"     * Constructor to create a Deadline.","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"     * @param description Description of the Deadline task.","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"     * @param dateInput Date of when Deadline is due entered by user in String format.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"    public Deadline(String description, String dateInput) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"        this.dateInput \u003d dateInput;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"        this.deadline \u003d stringToDate(dateInput);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"     * Converts a String input given by the user into a Date of a given format.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"     * @param dateInput String of date of deadline given by user.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"     * @return A Date object with the same details as what the user has given.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"    public Date stringToDate(String dateInput) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"        Date date;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"        DateFormat inFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"        if (dateInput.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"            inFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd hhmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"            inFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"            date \u003d inFormat.parse(dateInput);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"            return null;","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"        return date;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"     * Converts a Date deadline into a String","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"     * @return A String object of the Date","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"    public String dateToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"        if (deadline \u003d\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"            return dateInput;","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"        DateFormat outFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"        if (this.dateInput.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"            outFormat \u003d  new SimpleDateFormat(\"MMM dd yyyy h.mm aa\");","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"zacharylwy"},"content":"            outFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"zacharylwy"},"content":"        return outFormat.format(this.deadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"zacharylwy"},"content":"     * Converts the given Deadline into an appropriate format for txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"zacharylwy"},"content":"     * @return a String of the Deadline for input into a txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"zacharylwy"},"content":"    public String toTxt() {","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"zacharylwy"},"content":"        return String.format(\"D | %d | %s | %s\", super.getIsDone() ? 1 : 0, super.getDescription(),","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"zacharylwy"},"content":"                this.deadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"zacharylwy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"zacharylwy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateToString() + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":76,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"zacharylwy":77}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"/**","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":" *  This is my attempt at Duke.","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":" * @author Zachary Lau --\u003e I have sought feedback and suggestions from Charlton Tan, Wilbur Fong and Jia Yuan.","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":" *","lastModifiedDate":"2021-08-18"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":" */","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"    private  UI ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"    private  Parser parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"    private  ToDoList list;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"    private final Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"        ui \u003d new UI();","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"        Data data \u003d new Data(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"        list \u003d new ToDoList(data.loadData(), data);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"        parser \u003d new Parser(list, data);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"     * Calls the appropriate methods depending on what the user has input.","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"    public void start() {","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"        boolean loopStatus \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"        UI.greet();","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"        Command command \u003d parser.inputToCommand(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"        while (loopStatus) {","lastModifiedDate":"2021-08-17"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"            switch (command) {","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"                case BYE:","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"                    loopStatus \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"                    ui.exit();","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"                case LIST:","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"                    ToDoList.showList();","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"                case DEADLINE:","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"                    try {","lastModifiedDate":"2021-08-17"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"                        parser.addDeadline(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2021-08-17"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"                    }","lastModifiedDate":"2021-08-17"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"                case DELETE:","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"                        ToDoList.delete(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"                        ToDoList.update();","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":57,"author":{"gitId":"zacharylwy"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":58,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-18"},{"lineNumber":59,"author":{"gitId":"zacharylwy"},"content":"                case EVENT:","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"zacharylwy"},"content":"                    try {","lastModifiedDate":"2021-08-17"},{"lineNumber":61,"author":{"gitId":"zacharylwy"},"content":"                        parser.addEvent(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"zacharylwy"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"zacharylwy"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2021-08-17"},{"lineNumber":64,"author":{"gitId":"zacharylwy"},"content":"                    }","lastModifiedDate":"2021-08-17"},{"lineNumber":65,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":66,"author":{"gitId":"zacharylwy"},"content":"                case TODO:","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"zacharylwy"},"content":"                    try {","lastModifiedDate":"2021-08-17"},{"lineNumber":68,"author":{"gitId":"zacharylwy"},"content":"                        parser.addTodo(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"zacharylwy"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-17"},{"lineNumber":70,"author":{"gitId":"zacharylwy"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2021-08-17"},{"lineNumber":71,"author":{"gitId":"zacharylwy"},"content":"                    }","lastModifiedDate":"2021-08-17"},{"lineNumber":72,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":73,"author":{"gitId":"zacharylwy"},"content":"                case DONE:","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"zacharylwy"},"content":"                    try {","lastModifiedDate":"2021-08-18"},{"lineNumber":75,"author":{"gitId":"zacharylwy"},"content":"                        ToDoList.markDone(input);","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"zacharylwy"},"content":"                        ToDoList.update();","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"zacharylwy"},"content":"                    } catch (DukeException e) {","lastModifiedDate":"2021-08-18"},{"lineNumber":78,"author":{"gitId":"zacharylwy"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2021-08-18"},{"lineNumber":79,"author":{"gitId":"zacharylwy"},"content":"                    }","lastModifiedDate":"2021-08-18"},{"lineNumber":80,"author":{"gitId":"zacharylwy"},"content":"                    break;","lastModifiedDate":"2021-08-17"},{"lineNumber":81,"author":{"gitId":"zacharylwy"},"content":"                default:","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"zacharylwy"},"content":"                    //If no cases above are entered, Duke will not understand the command and prompt the user.","lastModifiedDate":"2021-08-17"},{"lineNumber":83,"author":{"gitId":"zacharylwy"},"content":"                    System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-08-17"},{"lineNumber":84,"author":{"gitId":"zacharylwy"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"zacharylwy"},"content":"            if (loopStatus) {","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"zacharylwy"},"content":"                input \u003d sc.nextLine();","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"zacharylwy"},"content":"                command \u003d parser.inputToCommand(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"zacharylwy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":91,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":92,"author":{"gitId":"zacharylwy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-16"},{"lineNumber":93,"author":{"gitId":"zacharylwy"},"content":"        Duke duke \u003d new Duke(\"data/data.txt\");","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"zacharylwy"},"content":"        duke.start();","lastModifiedDate":"2021-08-16"},{"lineNumber":95,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zacharylwy":93,"-":3}},{"path":"src/main/java/Duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"    public DukeException(String dukeErrorMessage) {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"        super(dukeErrorMessage);","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"zacharylwy":7}},{"path":"src/main/java/Duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.text.DateFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"import java.text.ParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"import java.util.Date;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"    private final Date eventTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"    private final String dateInput;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"     * Constructor for an Event.","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"     * @param description The description of th event.","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"     * @param dateInput The time of the event. (I only just realised that Events had a time and not location.","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"    public Event(String description, String dateInput) {","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"        this.dateInput \u003d dateInput;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"        this.eventTime \u003d stringToDate(dateInput);","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"     * Converts a String input given by the user into a Date of a given format.","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"     * @param dateInput String of date of event given by user.","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"     * @return A Date object with the same details as what the user has given.","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"    public Date stringToDate(String dateInput) {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"        Date date;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"        DateFormat inFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"        if (dateInput.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"            inFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd hhmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"            inFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"            date \u003d inFormat.parse(dateInput);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"            return null;","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"        return date;","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"     * Converts a Date deadline into a String","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"     * @return A String object of the Date","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"    public String dateToString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"        if (eventTime \u003d\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"            return dateInput;","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"        DateFormat outFormat;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"        if (this.dateInput.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"            outFormat \u003d  new SimpleDateFormat(\"MMM dd yyyy h.mm aa\");","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"zacharylwy"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"zacharylwy"},"content":"            outFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\");","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"zacharylwy"},"content":"        return outFormat.format(this.eventTime);","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":62,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":63,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"zacharylwy"},"content":"     * Converts the given Event into an appropriate format for txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"zacharylwy"},"content":"     * @return a String of the Event for input into a txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"zacharylwy"},"content":"    public String toTxt() {","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"zacharylwy"},"content":"        return String.format(\"E | %d | %s | %s\", super.getIsDone() ? 1 : 0, super.getDescription(),","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"zacharylwy"},"content":"                dateToString());","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":74,"author":{"gitId":"zacharylwy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"zacharylwy"},"content":"        return \"[E]\"+ super.toString() + \" (at: \" + dateToString() + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":77,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"zacharylwy":78}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"    private final ToDoList dukeList;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"    private final Data data;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"    public Parser(ToDoList dukeList, Data data) {","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"        this.dukeList \u003d dukeList;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"        this.data \u003d data;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"     * Interpret what the user has entered as an input and categorises it into a Command.","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"     * @return The correct command that is interpreted from the user input.","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"    public static Command inputToCommand(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"        String[] inputs \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"        return Command.readInput(inputs[0]);","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"     * Adds a Deadline to all Tasks that Duke has stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"     * @param input The entire String that the user has input i.e. \"deadline Whatever /by Whenever\".","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"     * @throws DukeException If an incorrect input is entered.","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"    public void addDeadline(String input) throws DukeException{","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"        // First check if the user has only input the one word \"deadline\".","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"        if (input.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the description and the deadline date! Try again :-)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"        // If \"deadline\" is entered with more words, check information.","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"        String[] information \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"        String [] description \u003d information[1].split(\"/by \", 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"        //In the case where date is not entered.","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"        if (description.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the deadline date! Try again :-)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"        Deadline newDL \u003d new Deadline(description[0], description[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"        dukeList.add(newDL);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"        Data.writeToFile(newDL);","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"        System.out.println(UI.addedText + newDL.toString() + \"\\nNow you have \" + ToDoList.numberOfTasks() + \" tasks in the list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"     * Adds an Event to all Tasks that Duke has stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"     * @param input The entire String that the user has input i.e. \"event Here /at There\".","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"     * @throws DukeException If an incorrect input is entered.","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"    public void addEvent(String input) throws DukeException{","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"        // First check if the user has only input the one word \"event\".","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"        if (input.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the description and the event location! Try again :-)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"        // If \"event\" is entered with more words, check information.","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"        String[] information \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"        String [] description \u003d information[1].split(\"/at \", 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"zacharylwy"},"content":"        //In the case where location is not entered.","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"zacharylwy"},"content":"        if (description.length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the event location! Try again :-)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"zacharylwy"},"content":"        Event newEV \u003d new Event(description[0], description[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"zacharylwy"},"content":"        dukeList.add(newEV);","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"zacharylwy"},"content":"        Data.writeToFile(newEV);","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"zacharylwy"},"content":"        System.out.println(UI.addedText + newEV.toString() + \"\\nNow you have \" + ToDoList.numberOfTasks() + \" tasks in the list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"zacharylwy"},"content":"     * Adds a Todo to all Tasks that Duke has stored.","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"zacharylwy"},"content":"     * @param input The entire String that the user has input i.e. \"todo This task\".","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"zacharylwy"},"content":"     * @throws DukeException If an incorrect input is entered.","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"zacharylwy"},"content":"    public void addTodo(String input) throws DukeException {","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"zacharylwy"},"content":"        // First check if the user has only input the one word \"todo\".","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"zacharylwy"},"content":"        if (input.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the description! Try again :-)\");","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"zacharylwy"},"content":"        //If \"todo\" is entered with more words, use the information.","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"zacharylwy"},"content":"        String[] information \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"zacharylwy"},"content":"        Todo newTD \u003d new Todo(information[1]);","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"zacharylwy"},"content":"        dukeList.add(newTD);","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"zacharylwy"},"content":"        Data.writeToFile(newTD);","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"zacharylwy"},"content":"        System.out.println(UI.addedText + newTD.toString() + \"\\nNow you have \" + ToDoList.numberOfTasks() + \" tasks in the list\");","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"zacharylwy":85}},{"path":"src/main/java/Duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"    private String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"     * Constructor","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"     * @param description The string that describes the Task.","lastModifiedDate":"2021-08-18"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"     * Correctly assigns the task a string that indicates if it has been marked as done or not.","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"     * @return String that hows the correct icon.","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"        if (!isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"            return \"[ ] \";","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"        } else {","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"            return \"[X] \";","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"     * Return the status of whether the Task is done.","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"     * @return Boolean indicating if Task is done.","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"    public Boolean getIsDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"     * Allows the marking of Tasks as done.","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"     * Return the description of the Task.","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"     * @return String of the Task description.","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"        return this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"    public abstract String toTxt();","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"        return this.getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2021-08-17"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"zacharylwy":56}},{"path":"src/main/java/Duke/ToDoList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"public class ToDoList {","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"    private static ArrayList\u003cTask\u003e dukeList;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"    private static Data data;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"    public ToDoList(ArrayList\u003cTask\u003e dukeList, Data data) {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"        ToDoList.dukeList \u003d dukeList;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"        ToDoList.data \u003d data;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"    public static void add(Task task) {","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"        dukeList.add(task);","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"     * Shows all Tasks in the list that the user has given to Duke to store.","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"     * Tasks are ordered from least recent to most recent. If no tasks have been given to Duke,","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"     * the appropriate message is shown.","lastModifiedDate":"2021-08-23"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"    public static void showList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"        String showListText \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2021-08-23"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"        String emptyListText \u003d \"☹ Oops! Looks like you have no tasks in your list!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":25,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":26,"author":{"gitId":"zacharylwy"},"content":"        if (dukeList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-23"},{"lineNumber":27,"author":{"gitId":"zacharylwy"},"content":"            System.out.println(emptyListText);","lastModifiedDate":"2021-08-23"},{"lineNumber":28,"author":{"gitId":"zacharylwy"},"content":"        } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":29,"author":{"gitId":"zacharylwy"},"content":"            for (int i \u003d 0; i \u003c dukeList.size(); i++) {","lastModifiedDate":"2021-08-23"},{"lineNumber":30,"author":{"gitId":"zacharylwy"},"content":"                showListText +\u003d \"\\n\" + (i + 1) + \".\" + dukeList.get(i).toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":31,"author":{"gitId":"zacharylwy"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"zacharylwy"},"content":"            System.out.println(showListText);","lastModifiedDate":"2021-08-23"},{"lineNumber":33,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":34,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":35,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":36,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"zacharylwy"},"content":"     * Updates the marking of a certain Task as \u0027done\u0027.","lastModifiedDate":"2021-08-23"},{"lineNumber":38,"author":{"gitId":"zacharylwy"},"content":"     * @param input The entire String that the user has input i.e. \"done 2\".","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"zacharylwy"},"content":"     * @throws DukeException If an incorrect input is entered.","lastModifiedDate":"2021-08-23"},{"lineNumber":40,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":41,"author":{"gitId":"zacharylwy"},"content":"    public static void markDone(String input) throws DukeException{","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"zacharylwy"},"content":"        int itemNumber;","lastModifiedDate":"2021-08-23"},{"lineNumber":43,"author":{"gitId":"zacharylwy"},"content":"        if (input.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":44,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the task number you wish to mark as done! Try again :-)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":45,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"zacharylwy"},"content":"        String numberInput \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-23"},{"lineNumber":47,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":48,"author":{"gitId":"zacharylwy"},"content":"            itemNumber \u003d Integer.parseInt(numberInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":49,"author":{"gitId":"zacharylwy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ You may have entered something incorrectly. Try adding a number behind \u0027done\u0027!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":51,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":52,"author":{"gitId":"zacharylwy"},"content":"        String message \u003d \"☹ Oops! I cannot seem to find that task number. Try again!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":53,"author":{"gitId":"zacharylwy"},"content":"        if (dukeList.isEmpty()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":54,"author":{"gitId":"zacharylwy"},"content":"            message \u003d \"☹ Oops! Your list is empty! Try adding a Task first!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":55,"author":{"gitId":"zacharylwy"},"content":"        } else if (itemNumber \u003c\u003d dukeList.size()){","lastModifiedDate":"2021-08-23"},{"lineNumber":56,"author":{"gitId":"zacharylwy"},"content":"            Task targetItem \u003d dukeList.get(itemNumber - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":57,"author":{"gitId":"zacharylwy"},"content":"            targetItem.markDone();","lastModifiedDate":"2021-08-23"},{"lineNumber":58,"author":{"gitId":"zacharylwy"},"content":"            message \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \" \" + targetItem.toString();","lastModifiedDate":"2021-08-23"},{"lineNumber":59,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":60,"author":{"gitId":"zacharylwy"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-23"},{"lineNumber":61,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":62,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":63,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":64,"author":{"gitId":"zacharylwy"},"content":"     * Deletes a specific task that Duke has stored.","lastModifiedDate":"2021-08-23"},{"lineNumber":65,"author":{"gitId":"zacharylwy"},"content":"     * @param input The entire String that the user has input i.e. \"delete 2\".","lastModifiedDate":"2021-08-23"},{"lineNumber":66,"author":{"gitId":"zacharylwy"},"content":"     * @throws DukeException If an incorrect input is entered.","lastModifiedDate":"2021-08-23"},{"lineNumber":67,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":68,"author":{"gitId":"zacharylwy"},"content":"    public static void delete(String input) throws DukeException{","lastModifiedDate":"2021-08-23"},{"lineNumber":69,"author":{"gitId":"zacharylwy"},"content":"        int itemNumber;","lastModifiedDate":"2021-08-23"},{"lineNumber":70,"author":{"gitId":"zacharylwy"},"content":"        if (input.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2021-08-23"},{"lineNumber":71,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are missing the number of the task you wish to delete! Try again :-)\");","lastModifiedDate":"2021-08-23"},{"lineNumber":72,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":73,"author":{"gitId":"zacharylwy"},"content":"        String numberInput \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2021-08-23"},{"lineNumber":74,"author":{"gitId":"zacharylwy"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"zacharylwy"},"content":"            itemNumber \u003d Integer.parseInt(numberInput);","lastModifiedDate":"2021-08-23"},{"lineNumber":76,"author":{"gitId":"zacharylwy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":77,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"You may have entered something incorrectly. Try adding a number behind \u0027delete\u0027!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":78,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":79,"author":{"gitId":"zacharylwy"},"content":"        String message \u003d \"☹ Oops! You may have incorrectly entered a number. Try again!\";","lastModifiedDate":"2021-08-23"},{"lineNumber":80,"author":{"gitId":"zacharylwy"},"content":"        if (itemNumber \u003e dukeList.size()) {","lastModifiedDate":"2021-08-23"},{"lineNumber":81,"author":{"gitId":"zacharylwy"},"content":"            throw new DukeException(\"☹ Oops! Looks like you are trying to delete something that is not in your list! Try again!\");","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"zacharylwy"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":83,"author":{"gitId":"zacharylwy"},"content":"        Task removed \u003d dukeList.remove(itemNumber - 1);","lastModifiedDate":"2021-08-23"},{"lineNumber":84,"author":{"gitId":"zacharylwy"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + removed.toString() + \"\\nNow you have \" + (dukeList.size())","lastModifiedDate":"2021-08-23"},{"lineNumber":85,"author":{"gitId":"zacharylwy"},"content":"                + \" tasks in the list\");","lastModifiedDate":"2021-08-23"},{"lineNumber":86,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":87,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":88,"author":{"gitId":"zacharylwy"},"content":"    public static void update() throws DukeException{","lastModifiedDate":"2021-08-23"},{"lineNumber":89,"author":{"gitId":"zacharylwy"},"content":"        Data.updateData(dukeList);","lastModifiedDate":"2021-08-23"},{"lineNumber":90,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":91,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":92,"author":{"gitId":"zacharylwy"},"content":"    public static ArrayList\u003cTask\u003e getDukeList() {","lastModifiedDate":"2021-08-23"},{"lineNumber":93,"author":{"gitId":"zacharylwy"},"content":"        return ToDoList.dukeList;","lastModifiedDate":"2021-08-23"},{"lineNumber":94,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":95,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":96,"author":{"gitId":"zacharylwy"},"content":"    public static int numberOfTasks() {","lastModifiedDate":"2021-08-23"},{"lineNumber":97,"author":{"gitId":"zacharylwy"},"content":"        return ToDoList.dukeList.size();","lastModifiedDate":"2021-08-23"},{"lineNumber":98,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":99,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":100,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"zacharylwy":100}},{"path":"src/main/java/Duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"     * Constructor to create a Todo","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"     * @param description Description of the Todo task.","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"        super(description);","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"     * Converts the given Todo into an appropriate format for txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"     * @return a String of the Todo for input into a txt file.","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"    public String toTxt() {","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"        return String.format(\"T | %d | %s\", super.getIsDone() ? 1 : 0, super.getDescription());","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"    @Override","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"zacharylwy":24}},{"path":"src/main/java/Duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"public class UI {","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"    public static String addedText \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"     * Handles the greeting or opening message that is shown to the user before inputs are read.","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"    public static void greet() {","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"        String greetText \u003d \"Hello I\u0027m Duke\\nWhat can I do for you?\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"        System.out.print(greetText);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"    /**","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"     * Handles the exiting or halting of Duke when the user has given the appropriate input.","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"     */","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"    public void exit() {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"        String exitText \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"        System.out.println(exitText);","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"zacharylwy":22}},{"path":"text-ui-test/data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"E | 1 | activity  | place","lastModifiedDate":"2021-08-23"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"T | 0 | this","lastModifiedDate":"2021-08-23"}],"authorContributionMap":{"zacharylwy":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zacharylwy"},"content":"blah","lastModifiedDate":"2021-08-17"},{"lineNumber":2,"author":{"gitId":"zacharylwy"},"content":"done","lastModifiedDate":"2021-08-18"},{"lineNumber":3,"author":{"gitId":"zacharylwy"},"content":"done 1","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"zacharylwy"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"zacharylwy"},"content":"deadline","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"zacharylwy"},"content":"deadline task","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"zacharylwy"},"content":"deadline  task","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"zacharylwy"},"content":"deadline task /by date","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"zacharylwy"},"content":"event","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"zacharylwy"},"content":"event activity","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"zacharylwy"},"content":"event  activity","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"zacharylwy"},"content":"event activity /at place","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"zacharylwy"},"content":"todo","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"zacharylwy"},"content":"todo this","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"zacharylwy"},"content":"done 1","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"zacharylwy"},"content":"done 2","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"zacharylwy"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"zacharylwy"},"content":"delete","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"zacharylwy"},"content":"delete this","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"zacharylwy"},"content":"delete 1","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"zacharylwy"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"zacharylwy"},"content":"bye","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"zacharylwy":22}}]

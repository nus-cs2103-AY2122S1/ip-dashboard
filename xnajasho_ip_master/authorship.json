[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xnajasho":19,"-":45}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":" * Custom control modelled with FXML tools.","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":" * Serves as a container consisting of an Image(photo) as well as the Label(text message) of the User/Duke.","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    private Label dialog;","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"    private void flip() {","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"        db.flip();","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"        return db;","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"xnajasho":63}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidDirectoryException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidStorageFilePathException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":" * Models a custom CLI guided Chatbot for task tracking","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"public class Duke {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    /** deals with loading tasks from the file and saving tasks in the file.  */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    /** contains the task list: has operations to add/delete tasks in the list.  */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"     * Initialises the Duke object which will run the main program.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     * @param filePath user specified file path to store/load saved data","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        assert filePath !\u003d null : \"Filepath is not specified\";","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"        } catch (InvalidStorageFilePathException isfpe) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"            System.out.println(isfpe.getMessage());","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"     * Parses the user input to get a display response for the GUI","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"            return c.execute(tasks, storage);","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"        } catch (DukeException | InvalidDirectoryException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"            return e.getMessage();","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"     * Displays this startup message upon initialization of the app","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"    public String showOpeningMessage() {","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"        return \"Hello! This is Duke :)\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"                + \"To use my AUTOSAVE feature, please type \u0027bye\u0027 when you\u0027re done!\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"                + \"Otherwise, I am unable to save your tasks for future reference :(\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"                + \"Now, what can I do for you?\";","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":62}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"public class Launcher {","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"xnajasho":13}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"public class Main extends Application {","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    private Duke duke \u003d new Duke(\"data/tasklist.txt\");","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"            stage.show();","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"xnajasho":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":" * Controller for MainWindow.","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":" * This class will provide the layout for other controls.","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-08-31"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    private TextField userInput;","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    private Button sendButton;","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    private Duke duke;","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user_icon.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/chatbot_icon.png\"));","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"    public void initialize() {","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        duke \u003d d;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"        String openingMessage \u003d duke.showOpeningMessage();","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"                DialogBox.getDukeDialog(openingMessage, dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"    @FXML","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"        );","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"        userInput.clear();","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"xnajasho":63}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import duke.commands.Command;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import duke.commands.DoneCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"import duke.commands.UnknownCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":" * Class which deals with the parsing of user input","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"     * Parses the user input to return the different types of Command which will then be processed accordingly.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     * @param fullCommand user input","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidInputException if \u0027done\u0027 or \u0027delete\u0027 command is not preceded by a number","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    public static Command parse(String fullCommand) throws InvalidInputException {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        String firstWord;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"        String remainingWords \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        if (fullCommand.contains(\" \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"            firstWord \u003d Parser.getFirstWord(fullCommand);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"            remainingWords \u003d Parser.getRestOfWords(fullCommand);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"            firstWord \u003d fullCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        Command c;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        switch (firstWord) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        case \"find\":","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"            c \u003d new FindCommand(remainingWords);","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"        case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"            c \u003d new ListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"            c \u003d new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"        case \"done\":","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"                int doneIndex \u003d Integer.parseInt(remainingWords);","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"                c \u003d new DoneCommand(doneIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"                throw new InvalidInputException(\"Please specify the TASK NUMBER after typing \u0027done\u0027\");","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"        case \"todo\": case \"deadline\": case \"event\": case \"dowithin\":","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"            c \u003d new AddCommand(firstWord, remainingWords);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"                int deleteIndex \u003d Integer.parseInt(remainingWords);","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"                c \u003d new DeleteCommand(deleteIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"                throw new InvalidInputException(\"Please specify the TASK NUMBER after typing \u0027delete\u0027\");","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"            c \u003d new UnknownCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"        return c;","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"     * Parses the user input for \u0027doWithinPeriod\u0027 tasks for readability.","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"xnajasho"},"content":"     * @param doWithinDescription user input description and start/end date of the \u0027doWithinPeriod\u0027 task","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"xnajasho"},"content":"     * @return array of 3 elements where 1st element \u003d \u0027doWithin\u0027 description, 2nd/3rd element \u003d start/end date","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"xnajasho"},"content":"    public static String[] parseDoWithin(String doWithinDescription) {","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"xnajasho"},"content":"        String[] descAndDates \u003d doWithinDescription.split(\"/between\");","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"xnajasho"},"content":"        String[] startEndDate \u003d descAndDates[1].split(\"and\");","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"xnajasho"},"content":"        String[] result \u003d new String[]{descAndDates[0].trim(),","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"xnajasho"},"content":"                parseDate(startEndDate[0].trim()), parseDate(startEndDate[1].trim())};","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"xnajasho"},"content":"        return result;","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"xnajasho"},"content":"     * Parses the user input for \u0027deadline\u0027 for readability.","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"xnajasho"},"content":"     * @param deadlineDescription user input description and time of the \u0027deadline\u0027 task","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"xnajasho"},"content":"     * @return array of 2 elements where 1st element \u003d \u0027deadline\u0027 description, 2nd element \u003d time","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"xnajasho"},"content":"    public static String[] parseDeadline(String deadlineDescription) {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"xnajasho"},"content":"        String[] arr \u003d deadlineDescription.split(\"/by\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"xnajasho"},"content":"        arr[0] \u003d arr[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"xnajasho"},"content":"        arr[1] \u003d parseDate(arr[1].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"xnajasho"},"content":"        return arr;","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"xnajasho"},"content":"     * Parses the user input for \u0027event\u0027 for readability.","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"xnajasho"},"content":"     * @param eventDescription user input description and time of the \u0027event\u0027 task","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"xnajasho"},"content":"     * @return array of 2 elements where 1st element \u003d \u0027event\u0027 description, 2nd element \u003d time","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"xnajasho"},"content":"    public static String[] parseEvent(String eventDescription) {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"xnajasho"},"content":"        String[] arr \u003d eventDescription.split(\"/at\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"xnajasho"},"content":"        arr[0] \u003d arr[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"xnajasho"},"content":"        arr[1] \u003d parseDate(arr[1].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"xnajasho"},"content":"        return arr;","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"xnajasho"},"content":"     * Reads the input date in \u0027YYYY-MM-DD TIME\u0027 format and converts it to local date format.","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"xnajasho"},"content":"     * If time is specified, it will be parsed as well. Otherwise, the output will not include the time.","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"xnajasho"},"content":"     * @param inputDate \u0027YYYY-MM-DD TIME\u0027 format i.e \u00272021-08-25\u0027","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"xnajasho"},"content":"     * @return String output in local date format i.e \u00272021-08-25\u0027 --\u003e Aug 25 2021","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"xnajasho"},"content":"    public static String parseDate(String inputDate) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"xnajasho"},"content":"        String output;","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"xnajasho"},"content":"        String[] dayTimeArr \u003d inputDate.split(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"xnajasho"},"content":"        LocalDate date \u003d LocalDate.parse(dayTimeArr[0]);","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"xnajasho"},"content":"        if (dayTimeArr.length \u003d\u003d 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"xnajasho"},"content":"            output \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" + dayTimeArr[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"xnajasho"},"content":"            output \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"xnajasho"},"content":"        return output;","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to get the first word of the input sentence */","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"xnajasho"},"content":"    public static String getFirstWord(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"xnajasho"},"content":"        String[] arr \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"xnajasho"},"content":"        return arr[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to get the rest of input sentence, EXCLUDING the first word */","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"xnajasho"},"content":"    public static String getRestOfWords(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"xnajasho"},"content":"        String[] arr \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"xnajasho"},"content":"        return arr[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":148}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"import java.util.List;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidDirectoryException;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidStorageFilePathException;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":" * Represents the class used to store the tasklist data.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    /** Contains the filepath for the project\u0027s directory */","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    private static final String DESKTOP_DIRECTORY \u003d System.getProperty(\"user.home\") + \"/Desktop\";","lastModifiedDate":"2021-08-31"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    /** User specified filePath destination */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    private final String givenFilePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    /** Stores relative path of the file */","lastModifiedDate":"2021-08-30"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"    private Path p;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidStorageFilePathException if filepath does not end with .txt, or invalid file path is given.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    Storage(String givenFilePath) throws InvalidStorageFilePathException {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"        this.givenFilePath \u003d givenFilePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"        File currDir \u003d new File(DESKTOP_DIRECTORY);","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"        File finalPath \u003d new File(currDir, givenFilePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        p \u003d Paths.get(finalPath.getPath());","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"        if (!isValidPath(p)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidStorageFilePathException(\"Storage filepath should end with \u0027.txt\u0027\");","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"        if (!isValidDirectory(givenFilePath)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidDirectoryException(\"1 or more directories in the specified file path does not exist\");","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to determine if the specified path ends with .txt */","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"    public static boolean isValidPath(Path filepath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"        return filepath.toString().endsWith(\".txt\");","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"     * Helper function to determine if the specified directory exists.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"     * @return true if directory exists. false if any parent/child directory is missing in the file path.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"    public static boolean isValidDirectory(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"        String[] folderNames \u003d filePath.split(\"/\");","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"        String currentPath \u003d DESKTOP_DIRECTORY;","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"        for (String folder: folderNames) {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"            File file \u003d new File(currentPath);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"            if (!file.exists()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"                return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"                currentPath +\u003d \"/\" + folder;","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"     * Reads the file upon app startup and attempts to load the data into a list for TaskList.java to parse.","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"     * Creates a new .txt file if specified .txt file is not found within the directory.","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"     * @return list of all tasks saved from the previous session.","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"     * @throws DukeException if error occurs while attempting to create a new file.","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"xnajasho"},"content":"    public List\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"xnajasho"},"content":"        List\u003cTask\u003e lt \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"xnajasho"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(p);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"xnajasho"},"content":"            for (String s: lines) {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"xnajasho"},"content":"                lt.add(convertToTask(s));","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"xnajasho"},"content":"            return lt;","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"xnajasho"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"xnajasho"},"content":"            String createdPath \u003d DESKTOP_DIRECTORY + \"/\" + givenFilePath;","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"xnajasho"},"content":"            File tempfile \u003d new File(createdPath);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"xnajasho"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"xnajasho"},"content":"                tempfile.createNewFile();","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"xnajasho"},"content":"                System.out.println(\"Succesfully created \u0027tasklist.txt\u0027 within \" + tempfile.getAbsolutePath());","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"xnajasho"},"content":"                return lt;","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"xnajasho"},"content":"            } catch (IOException x) {","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"xnajasho"},"content":"                throw new DukeException(\"UNEXPECTED ERROR: Unable to create file...\");","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"xnajasho"},"content":"     * Saves the list of tasks into the specified .txt file when function is invoked.","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"xnajasho"},"content":"    public void save(TaskList listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"xnajasho"},"content":"        String outputText \u003d Storage.printListForSave(listOfTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"xnajasho"},"content":"            // clears the file","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"xnajasho"},"content":"            Files.write(p, \"\".getBytes());","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"xnajasho"},"content":"            Files.write(p, outputText.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"xnajasho"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"xnajasho"},"content":"            System.out.println(\"An error occurred while trying to save...\");","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"xnajasho"},"content":"     * Converts the saved list of tasks into a format convenient for readability.","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"xnajasho"},"content":"    public static String printListForSave(TaskList lst) {","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"xnajasho"},"content":"        String outputText \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"xnajasho"},"content":"        for (Task t: lst.getListOfTasks()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"xnajasho"},"content":"            if (t instanceof Todo) {","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"T | \";","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(t.getStatusIcon())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":123,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + t.getDescription() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + t.getDescription() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"xnajasho"},"content":"            } else if (t instanceof Deadline) {","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"xnajasho"},"content":"                Deadline d \u003d (Deadline) t;","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"D | \";","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(d.getStatusIcon())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":131,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + d.getDescription() + \" | \" + d.getBy() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + d.getDescription() + \" | \" + d.getBy() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"xnajasho"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"xnajasho"},"content":"                Event e \u003d (Event) t;","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"E | \";","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(e.getStatusIcon())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":139,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + e.getDescription() + \" | \" + e.getAt() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + e.getDescription() + \" | \" + e.getAt() + \"\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"xnajasho"},"content":"            } else if (t instanceof DoWithinPeriod) {","lastModifiedDate":"2021-09-08"},{"lineNumber":144,"author":{"gitId":"xnajasho"},"content":"                DoWithinPeriod dw \u003d (DoWithinPeriod) t;","lastModifiedDate":"2021-09-08"},{"lineNumber":145,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"DW | \";","lastModifiedDate":"2021-09-08"},{"lineNumber":146,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(dw.getStatusIcon())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":147,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + dw.getDescription() + \" | \" + dw.getStartDate()","lastModifiedDate":"2021-09-08"},{"lineNumber":148,"author":{"gitId":"xnajasho"},"content":"                            + \" | \" + dw.getEndDate() + \"\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":149,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":150,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + dw.getDescription() + \" | \" + dw.getStartDate()","lastModifiedDate":"2021-09-08"},{"lineNumber":151,"author":{"gitId":"xnajasho"},"content":"                            + \" | \" + dw.getEndDate() + \"\\n\";","lastModifiedDate":"2021-09-08"},{"lineNumber":152,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-09-08"},{"lineNumber":153,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"xnajasho"},"content":"        return outputText;","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"xnajasho"},"content":"    /** Helper method to check if sentence includes a date from the parsed task in the storage file","lastModifiedDate":"2021-09-08"},{"lineNumber":159,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":160,"author":{"gitId":"xnajasho"},"content":"     * @param words a list in the format [task identifier, \u0027X\u0027/\u00270\u0027, task description, date]","lastModifiedDate":"2021-09-08"},{"lineNumber":161,"author":{"gitId":"xnajasho"},"content":"     * @return true if there are 4 elements, false otherwise","lastModifiedDate":"2021-09-08"},{"lineNumber":162,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":163,"author":{"gitId":"xnajasho"},"content":"    public static boolean hasDateInSentence(List\u003cString\u003e words) {","lastModifiedDate":"2021-09-08"},{"lineNumber":164,"author":{"gitId":"xnajasho"},"content":"        return words.size() \u003d\u003d 4;","lastModifiedDate":"2021-09-08"},{"lineNumber":165,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":166,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":167,"author":{"gitId":"xnajasho"},"content":"    /** Helper method to check if sentence includes a start and end date from the parsed doWithinPeriod task","lastModifiedDate":"2021-09-08"},{"lineNumber":168,"author":{"gitId":"xnajasho"},"content":"     *  in the storage file","lastModifiedDate":"2021-09-08"},{"lineNumber":169,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":170,"author":{"gitId":"xnajasho"},"content":"     * @param words a list in the format [task identifier, \u0027X\u0027/\u00270\u0027, task description, startDate, endDate]","lastModifiedDate":"2021-09-08"},{"lineNumber":171,"author":{"gitId":"xnajasho"},"content":"     * @return true if there are 5 elements, false otherwise","lastModifiedDate":"2021-09-08"},{"lineNumber":172,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":173,"author":{"gitId":"xnajasho"},"content":"    public static boolean hasStartAndEndDate(List\u003cString\u003e words) {","lastModifiedDate":"2021-09-08"},{"lineNumber":174,"author":{"gitId":"xnajasho"},"content":"        return words.size() \u003d\u003d 5;","lastModifiedDate":"2021-09-08"},{"lineNumber":175,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":176,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":177,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":178,"author":{"gitId":"xnajasho"},"content":"     * Helper method to check if task is completed after parsing the text from the storage file","lastModifiedDate":"2021-09-08"},{"lineNumber":179,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":180,"author":{"gitId":"xnajasho"},"content":"     * @param firstChar refers to the first character in the sentence (either \"X\" or \"0\")","lastModifiedDate":"2021-09-08"},{"lineNumber":181,"author":{"gitId":"xnajasho"},"content":"     * @return true if \"X\", false otherwise","lastModifiedDate":"2021-09-08"},{"lineNumber":182,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":183,"author":{"gitId":"xnajasho"},"content":"    public static boolean isTaskComplete(String firstChar) {","lastModifiedDate":"2021-09-08"},{"lineNumber":184,"author":{"gitId":"xnajasho"},"content":"        return firstChar.equals(\"X\");","lastModifiedDate":"2021-09-08"},{"lineNumber":185,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":186,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":187,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"xnajasho"},"content":"     * Upon loading of the storage file, functions parses the inputs found in the file into their respective tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"xnajasho"},"content":"     * Invalid inputs for deadline/events will be filtered and converted accordingly.","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"xnajasho"},"content":"    public Task convertToTask(String input) {","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"xnajasho"},"content":"        List\u003cString\u003e words \u003d List.of(input.split(\" \\\\| \"));","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"xnajasho"},"content":"        Task output \u003d null;","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"xnajasho"},"content":"        switch (words.get(0)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"xnajasho"},"content":"        case \"T\":","lastModifiedDate":"2021-08-25"},{"lineNumber":197,"author":{"gitId":"xnajasho"},"content":"            Todo t \u003d new Todo(words.get(2));","lastModifiedDate":"2021-08-25"},{"lineNumber":198,"author":{"gitId":"xnajasho"},"content":"            if (isTaskComplete(words.get(1))) {","lastModifiedDate":"2021-09-08"},{"lineNumber":199,"author":{"gitId":"xnajasho"},"content":"                t \u003d t.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"xnajasho"},"content":"            output \u003d t;","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":203,"author":{"gitId":"xnajasho"},"content":"        case \"D\":","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"xnajasho"},"content":"            Deadline d \u003d new Deadline(words.get(2), words.get(3));","lastModifiedDate":"2021-08-25"},{"lineNumber":205,"author":{"gitId":"xnajasho"},"content":"            if (hasDateInSentence(words)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":206,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(words.get(1))) {","lastModifiedDate":"2021-09-08"},{"lineNumber":207,"author":{"gitId":"xnajasho"},"content":"                    d \u003d d.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":208,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"xnajasho"},"content":"                output \u003d d;","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":212,"author":{"gitId":"xnajasho"},"content":"        case \"E\":","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"xnajasho"},"content":"            Event e \u003d new Event(words.get(2), words.get(3));","lastModifiedDate":"2021-08-25"},{"lineNumber":214,"author":{"gitId":"xnajasho"},"content":"            if (hasDateInSentence(words)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":215,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(words.get(1))) {","lastModifiedDate":"2021-09-08"},{"lineNumber":216,"author":{"gitId":"xnajasho"},"content":"                    e \u003d e.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":217,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":218,"author":{"gitId":"xnajasho"},"content":"                output \u003d e;","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":220,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":221,"author":{"gitId":"xnajasho"},"content":"        case \"DW\":","lastModifiedDate":"2021-09-08"},{"lineNumber":222,"author":{"gitId":"xnajasho"},"content":"            DoWithinPeriod dw \u003d new DoWithinPeriod(words.get(2), words.get(3), words.get(4));","lastModifiedDate":"2021-09-08"},{"lineNumber":223,"author":{"gitId":"xnajasho"},"content":"            if (hasStartAndEndDate(words)) {","lastModifiedDate":"2021-09-08"},{"lineNumber":224,"author":{"gitId":"xnajasho"},"content":"                if (isTaskComplete(words.get(1))) {","lastModifiedDate":"2021-09-08"},{"lineNumber":225,"author":{"gitId":"xnajasho"},"content":"                    dw \u003d dw.markAsDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":226,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-09-08"},{"lineNumber":227,"author":{"gitId":"xnajasho"},"content":"                output \u003d dw;","lastModifiedDate":"2021-09-08"},{"lineNumber":228,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":229,"author":{"gitId":"xnajasho"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":230,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":231,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"xnajasho"},"content":"        return output;","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":234}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import java.util.List;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":" * Container class for the lists of tasks","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    TaskList(List\u003cTask\u003e tasksFromStorage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"        if (!tasksFromStorage.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"            listOfTasks.addAll(tasksFromStorage);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to get the number of tasks in the list */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    public int getNumTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"        return listOfTasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to view the tasks in the list */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"        return this.listOfTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to get the add a new task to the list */","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        listOfTasks.add(t);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"     * Function to delete the specified task number from the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"     * Logic and extent of list modification is subjected to the following conditions:","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"     * Condition 1: Only one task in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"     * Condition 2: Specified task is the first in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"     * Condition 3: Specified task is the last in the list","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"     * Condition 4: Specified task is not the first/last task","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"    public String deleteTask(int deleteIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"        assert (deleteIndex \u003e\u003d 0 \u0026\u0026 deleteIndex \u003c\u003d listOfTasks.size()) : \"Invalid index\";","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"        String deletedTask \u003d listOfTasks.get(deleteIndex - 1).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"        if (this.listOfTasks.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks.clear();","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"        } else if (deleteIndex \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks \u003d new ArrayList\u003c\u003e(listOfTasks.subList(1, listOfTasks.size()));","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"        } else if (deleteIndex \u003d\u003d listOfTasks.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks \u003d new ArrayList\u003c\u003e(listOfTasks.subList(0, listOfTasks.size() - 1));","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"            ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e(this.listOfTasks.subList(0, deleteIndex - 1));","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"            for (int i \u003d deleteIndex; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"                newList.add(listOfTasks.get(i));","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks \u003d newList;","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"        return deletedTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"     * Function to \u0027complete\u0027 the specified task in the list based on the task type.","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"     * Returns the toString() value of the task for Ui class to output.","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"    public String completeTask(int taskIndex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"        assert (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c\u003d listOfTasks.size()) : \"Invalid index\";","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"xnajasho"},"content":"        String taskInfo;","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"xnajasho"},"content":"        if (this.listOfTasks.get(taskIndex - 1) instanceof Todo) {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"xnajasho"},"content":"            Todo completedTodo \u003d ((Todo) this.listOfTasks.get(taskIndex - 1)).markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks.set(taskIndex - 1, completedTodo);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"xnajasho"},"content":"            taskInfo \u003d completedTodo.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"xnajasho"},"content":"        } else if (this.listOfTasks.get(taskIndex - 1) instanceof Deadline) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"xnajasho"},"content":"            Deadline completedDeadline \u003d ((Deadline) this.listOfTasks.get(taskIndex - 1)).markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks.set(taskIndex - 1, completedDeadline);","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"xnajasho"},"content":"            taskInfo \u003d completedDeadline.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"xnajasho"},"content":"        } else if (this.listOfTasks.get(taskIndex - 1) instanceof DoWithinPeriod) {","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"xnajasho"},"content":"            DoWithinPeriod completedDoWithin \u003d ((DoWithinPeriod) this.listOfTasks.get(taskIndex - 1)).markAsDone();","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks.set(taskIndex - 1, completedDoWithin);","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"xnajasho"},"content":"            taskInfo \u003d completedDoWithin.toString();","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"xnajasho"},"content":"            Event completedEvent \u003d ((Event) this.listOfTasks.get(taskIndex - 1)).markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"xnajasho"},"content":"            this.listOfTasks.set(taskIndex - 1, completedEvent);","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"xnajasho"},"content":"            taskInfo \u003d completedEvent.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"xnajasho"},"content":"        return taskInfo;","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":100,"author":{"gitId":"xnajasho"},"content":"     * Finds a lists of tasks which contains the given keyword within the task (if any).","lastModifiedDate":"2021-08-30"},{"lineNumber":101,"author":{"gitId":"xnajasho"},"content":"     * Else, an empty list would be returned","lastModifiedDate":"2021-08-30"},{"lineNumber":102,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-30"},{"lineNumber":103,"author":{"gitId":"xnajasho"},"content":"     * @param keyWord input string in question","lastModifiedDate":"2021-08-30"},{"lineNumber":104,"author":{"gitId":"xnajasho"},"content":"     * @return a lists of tasks of size \u003e\u003d 0","lastModifiedDate":"2021-08-30"},{"lineNumber":105,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":106,"author":{"gitId":"xnajasho"},"content":"    public ArrayList\u003cTask\u003e findMatching(String keyWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"xnajasho"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"xnajasho"},"content":"        for (Task t: listOfTasks) {","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"xnajasho"},"content":"            if (t.toString().contains(keyWord)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"xnajasho"},"content":"                foundTasks.add(t);","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"xnajasho"},"content":"        return foundTasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"xnajasho"},"content":"    /** Helper function to check if tasklist is empty */","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"xnajasho"},"content":"    public boolean isEmptyTaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"xnajasho"},"content":"        return listOfTasks.isEmpty();","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":121}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":" * Adds a task to the task list","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    private final String taskType;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    private final String taskDescription;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"     * Constructor to create an AddCommand","lastModifiedDate":"2021-08-30"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    public AddCommand(String taskType, String taskDescription) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        return taskType;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        return taskDescription;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"     * Adds the specified task to the tasklist and reflects the result via the Ui.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidInputException if date is not indicated or it is in the incorrect format.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList task, Storage storage) throws InvalidInputException {","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"        if (taskDescription.equals(\"\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidInputException(printEmptyDescription(taskType));","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"            Task t;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"            if (taskType.equals(\"todo\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"                t \u003d new Todo(taskDescription);","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"            } else if (taskType.equals(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"                    String[] info \u003d Parser.parseDeadline(taskDescription);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"                    t \u003d new Deadline(info[0], info[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"                    throw new InvalidInputException(\"Please specify the date for the deadline\");","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"                    throw new InvalidInputException(\"Please specify date in \u0027YYYY-MM-DD TIME\u0027 format\");","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"            } else if (taskType.equals(\"dowithin\")){","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"                    String[] info \u003d Parser.parseDoWithin(taskDescription);","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"                    t \u003d new DoWithinPeriod(info[0], info[1], info[2]);","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"                    throw new InvalidInputException(\"Please specify both start/end dates for the task\");","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"                    throw new InvalidInputException(\"Please specify date in \u0027YYYY-MM-DD TIME\u0027 format\");","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"                    String[] info \u003d Parser.parseEvent(taskDescription);","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"                    t \u003d new Event(info[0], info[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"                    throw new InvalidInputException(\"Please specify the date for the event\");","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"                    throw new InvalidInputException(\"Please specify date in YYYY-MM-DD TIME\u0027 format\");","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"            task.addTask(t);","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"            return showAddTaskMessage(t.toString(), task.getNumTasks());","lastModifiedDate":"2021-08-31"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"xnajasho"},"content":"     * Prints the message with information on the task type if the user input enters an empty description","lastModifiedDate":"2021-08-31"},{"lineNumber":80,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":81,"author":{"gitId":"xnajasho"},"content":"    public String printEmptyDescription(String taskType) {","lastModifiedDate":"2021-08-31"},{"lineNumber":82,"author":{"gitId":"xnajasho"},"content":"        return String.format(\"OOPS!!! The description of a %s cannot be empty.\", taskType);","lastModifiedDate":"2021-08-31"},{"lineNumber":83,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":84,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":85,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":86,"author":{"gitId":"xnajasho"},"content":"     * Displays the description of the newly added task.","lastModifiedDate":"2021-08-31"},{"lineNumber":87,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":88,"author":{"gitId":"xnajasho"},"content":"    public String showAddTaskMessage(String message, int numTotalTasks) {","lastModifiedDate":"2021-08-31"},{"lineNumber":89,"author":{"gitId":"xnajasho"},"content":"        return String.format(\"Got it. I\u0027ve added this task: \\n   %s\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":90,"author":{"gitId":"xnajasho"},"content":"                + \"Now you have %d tasks in the list.\", message, numTotalTasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":91,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":92,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":93,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"xnajasho"},"content":"     * Helper function to tell Duke to continue reading inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"xnajasho"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":99}},{"path":"src/main/java/duke/commands/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import org.junit.Assert;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class AddCommandTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    public void testAddTodo() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        String taskType \u003d \"todo\";","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        String description \u003d \"read book\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        AddCommand add \u003d new AddCommand(taskType, description);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(add.getTaskType(), taskType);","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(add.getTaskDescription(), description);","lastModifiedDate":"2021-08-30"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    public void testAddDeadline() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        String taskType \u003d \"deadline\";","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"        String description \u003d \"return book /by 2019-10-04 6pm\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"        AddCommand add \u003d new AddCommand(taskType, description);","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(add.getTaskType(), taskType);","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(add.getTaskDescription(), description);","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    public void testAddEvent() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"        String taskType \u003d \"event\";","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        String description \u003d \"project meeting /at 2018-11-03 8pm\";","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"        AddCommand add \u003d new AddCommand(taskType, description);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(add.getTaskType(), taskType);","lastModifiedDate":"2021-08-30"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(add.getTaskDescription(), description);","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"    public void testExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"        AddCommand addCommand \u003d new AddCommand(\"todo\", \"read book\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        Assert.assertFalse(addCommand.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":40}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidDirectoryException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":" * Abstract class for the various different Commands","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    public abstract String execute(TaskList task, Storage storage) throws DukeException, InvalidDirectoryException;","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":16}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":" * Deletes a task from the task list","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    private final int deletionIndex;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"        this.deletionIndex \u003d index;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    public int getDeletionIndex() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"        return deletionIndex;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"     * Delete the specified task from the tasklist and reflects the result via the Ui.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidInputException if the task does not exist in the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList task, Storage storage) throws InvalidInputException {","lastModifiedDate":"2021-08-31"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"        if (deletionIndex \u003c\u003d 0 || deletionIndex \u003e task.getNumTasks() || task.isEmptyTaskList()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d String.format(\"Error: Task number \u0027%d\u0027 is not within the list\", deletionIndex);","lastModifiedDate":"2021-08-31"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"            String deletedTaskInfo \u003d task.deleteTask(deletionIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"            return String.format(\"Noted. I\u0027ve deleted this task: \\n   %s\\n\"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"                    + \"Now you have %d tasks in the list.\", deletedTaskInfo, task.getNumTasks());","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     * Helper function to tell Duke to continue reading inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":42}},{"path":"src/main/java/duke/commands/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import org.junit.Assert;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    public void testDelete() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        int index \u003d 5;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        DeleteCommand del \u003d new DeleteCommand(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(del.getDeletionIndex(), 5);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    public void testExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"        DeleteCommand del \u003d new DeleteCommand(5);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"        Assert.assertFalse(del.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":20}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":" * Marks a task from the task list as complete","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    private final int taskIndex;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    public DoneCommand(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"        this.taskIndex \u003d index;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    public int getTaskIndex() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        return taskIndex;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     * Marks the specified task from the tasklist as complete and reflects the result via the Ui.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidInputException if the task does not exist in the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList task, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e task.getNumTasks() || task.isEmptyTaskList()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d String.format(\"Error: Task number \u0027%d\u0027 is not within the list\", taskIndex);","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidInputException(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"            String completedTaskInfo \u003d task.completeTask(taskIndex);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"            return String.format(\"Nice! I\u0027ve marked this task as done: \\n   %s\", completedTaskInfo);","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     * Helper function to tell Duke to continue reading inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":42}},{"path":"src/main/java/duke/commands/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import org.junit.Assert;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class DoneCommandTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    public void testDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        int index \u003d 5;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        DoneCommand done \u003d new DoneCommand(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        Assert.assertEquals(done.getTaskIndex(), 5);","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    public void testExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"        DoneCommand done \u003d new DoneCommand(5);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"        Assert.assertFalse(done.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":20}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":" * Tells Duke to stop reading inputs.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"     * Tells the storage to save the most updated list and displays farewell message via the Ui.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList task, Storage storage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"        storage.save(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        return \"Bye! Hope to see you again soon!\";","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     * Helper function to tell Duke to STOP reading inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":28}},{"path":"src/main/java/duke/commands/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import org.junit.Assert;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class ExitCommandTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    public void testExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        ExitCommand exit \u003d new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        Assert.assertTrue(exit.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":13}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidInputException;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    private final String keyWord;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    public FindCommand(String keyWord) {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"        this.keyWord \u003d keyWord;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"     * Finds all tasks from the tasklist containing the keyword and reflects the result via the Ui.","lastModifiedDate":"2021-08-30"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidInputException if the task does not exist in the list.","lastModifiedDate":"2021-08-30"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList task, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"        if (keyWord.equals(\"\") || keyWord.equals(\" \")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidInputException(\"Keyword cannot be a space or be empty\");","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"            ArrayList\u003cTask\u003e matched \u003d task.findMatching(keyWord);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"            return printFoundTasks(matched, keyWord);","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"     * Helper method used by {@link #printFoundTasks(ArrayList, String) printFoundTasks}","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"     * Processes the list and concatenates the toString() values of tasks into a readable format","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     * @param listOfTasks The list to be processed (filtered by prior conditions in other functions)","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    public String processList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        boolean isEmptyList \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"        while (!isEmptyList) {","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"            if (counter - listOfTasks.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"                output \u003d output.replaceAll(\"[\\n\\r]$\", \"\"); // remove last newline","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"                isEmptyList \u003d true;","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"                String lineAdded \u003d String.format(\"   %d.%s \\n\", counter, listOfTasks.get(counter - 1));","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"                output +\u003d lineAdded;","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"                counter++;","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"        return output;","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"     * Prints out all matching tasks in the list which contains the keyword","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"     * @param listOfTasks ArrayList of current session\u0027s most updated list","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"     * @param keyWord user input","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"    public String printFoundTasks(ArrayList\u003cTask\u003e listOfTasks, String keyWord) {","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"            return String.format(\"No matching tasks containing \u0027%s\u0027 could be found :(\", keyWord);","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"            String output \u003d \"Here are the matching tasks in your list: \\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"            output +\u003d processList(listOfTasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"            return output;","lastModifiedDate":"2021-08-31"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"xnajasho":77}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import duke.exceptions.InvalidDirectoryException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":" * Tells Duke to reflect the most updated lists of tasks in the current session.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"     * Calls the Ui to output the tasks in the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"     * @throws InvalidDirectoryException if the directory path is invalid as the list would not have been initialised.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList tasks, Storage storage) throws InvalidDirectoryException {","lastModifiedDate":"2021-08-31"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"            return printList(tasks);","lastModifiedDate":"2021-08-31"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        } catch (NullPointerException npe) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"            throw new InvalidDirectoryException(\"Unable to retrieve task info as specified directory does not exist\");","lastModifiedDate":"2021-08-31"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"     * Helper method used by {@link #printList(TaskList) printList}","lastModifiedDate":"2021-08-31"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"     * Processes the list and concatenates the toString() values of tasks into a readable format","lastModifiedDate":"2021-08-31"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     * @param listOfTasks The list to be processed (filtered by prior conditions in other functions)","lastModifiedDate":"2021-08-31"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"    public String processList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2021-08-31"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-08-31"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        boolean isEmptyList \u003d false;","lastModifiedDate":"2021-08-31"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-31"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"        while (!isEmptyList) {","lastModifiedDate":"2021-08-31"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"            if (counter - listOfTasks.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-31"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"                output \u003d output.replaceAll(\"[\\n\\r]$\", \"\"); // remove last newline","lastModifiedDate":"2021-08-31"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"                isEmptyList \u003d true;","lastModifiedDate":"2021-08-31"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"            } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"                String lineAdded \u003d String.format(\"   %d.%s \\n\", counter, listOfTasks.get(counter - 1));","lastModifiedDate":"2021-08-31"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"                output +\u003d lineAdded;","lastModifiedDate":"2021-08-31"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"                counter++;","lastModifiedDate":"2021-08-31"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-31"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-31"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"        return output;","lastModifiedDate":"2021-08-31"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-31"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"     * Prints out all the tasks in the list","lastModifiedDate":"2021-08-31"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-08-31"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"     * @param lst current session\u0027s most updated list","lastModifiedDate":"2021-08-31"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-31"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"    public String printList(TaskList lst) {","lastModifiedDate":"2021-08-31"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"        if (lst.getListOfTasks().size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-31"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"            return \"Current List is empty...\";","lastModifiedDate":"2021-08-31"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-31"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"            String output \u003d \"Here are the tasks in your list: \\n\";","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"            output +\u003d processList(lst.getListOfTasks());","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"            return output;","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"     * Helper function to tell Duke to continue reading inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":77}},{"path":"src/main/java/duke/commands/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import org.junit.Assert;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class ListCommandTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    public void testExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        ListCommand lst \u003d new ListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        Assert.assertFalse(lst.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":14}},{"path":"src/main/java/duke/commands/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":" * Deals with invalid inputs.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    public UnknownCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"     * Calls the Ui to show an error message upon receiving invalid inputs.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    public String execute(TaskList task, Storage storage) {","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        return \"Please start the sentence with either \u0027todo\u0027/\u0027deadline\u0027/\u0027event\u0027/\u0027list\u0027/\u0027done\u0027/\u0027delete\u0027/\u0027bye\u0027\";","lastModifiedDate":"2021-08-31"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"     * Helper function to tell Duke to continue reading inputs","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":28}},{"path":"src/main/java/duke/commands/UnknownCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import org.junit.Assert;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import org.junit.Test;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class UnknownCommandTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    public void testExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"        UnknownCommand uk \u003d new UnknownCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        Assert.assertFalse(uk.isExit());","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":12}},{"path":"src/main/java/duke/data/tasklist.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"T | 0 | run tomorrow","lastModifiedDate":"2021-08-30"}],"authorContributionMap":{"xnajasho":1}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Models the exceptions handled by Duke","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":10}},{"path":"src/main/java/duke/exceptions/InvalidDirectoryException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Signals that the specified directory path leading to the storage file does not exist.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class InvalidDirectoryException extends InvalidStorageFilePathException {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"    public InvalidDirectoryException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":10}},{"path":"src/main/java/duke/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Signals that there are some inputs which were given and Duke is not able to comprehend them","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class InvalidInputException extends DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"     * @param errorMessage will indicate the type of invalid input given","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    public InvalidInputException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":14}},{"path":"src/main/java/duke/exceptions/InvalidStorageFilePathException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Signifies that the storage file does not end with a .txt format.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class InvalidStorageFilePathException extends Exception {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"    public InvalidStorageFilePathException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":10}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Reflects a particular Deadline Task","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    /** Indicates the date the task is due */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    protected String by;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"     * Constructor to create a deadline task containing a description, and due date of the task","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"     * Internal constructor called to indicate that the deadline task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    private Deadline(String description, String by, Boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"     * Outputs the date of the deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    public String getBy() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        return this.by;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"     * Indicates that the deadline task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"    public Deadline markAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        return new Deadline(this.description, this.by, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":45}},{"path":"src/main/java/duke/tasks/DoWithinPeriod.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.tasks;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Reflects a particular task to be completed within a certain period","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class DoWithinPeriod extends Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    /** Indicates the start date that the task can be started on */","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    protected String startDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    /** Indicates the end date that the task should be finished by */","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    protected String endDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"     * Constructor to create an DoWithinPeriod task containing a description, and the start/end date of the task","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    public DoWithinPeriod(String description, String startDate, String endDate) {","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     * Internal constructor called to indicate that the task is completed.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    private DoWithinPeriod(String description, String startDate, String endDate, Boolean isDone) {","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"     * Method to get the start date of the task","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     * @return start date in YYYY-MM-DD format","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"    public String getStartDate() {","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"        return startDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"     * Method to get the end date of the task","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"     * @return end date in YYYY-MM-DD format","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"    public String getEndDate() {","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"        return endDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"     * Method to obtain a completed task","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"     * @return a completed DoWithinPeriod task with the exact same description \u0026 start/end dates","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"    public DoWithinPeriod markAsDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"        return new DoWithinPeriod(this.description, this.startDate, this.endDate, true);","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"        return \"[DW]\" + super.toString() + \" (between: \" + startDate + \" \u0026 \" + endDate + \")\";","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"xnajasho":64}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Reflects a particular Event task","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    /** Indicates the date that the event is held  */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    protected String at;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"     * Constructor to create an event task containing a description, and the location/date of the task","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"     * Internal constructor called to indicate that the Event task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    private Event(String description, String at, Boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"     * Outputs the date of the Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    public String getAt() {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        return this.at;","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"     * Indicates that the Event task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"    public Event markAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"        return new Event(this.description, this.at, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":45}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Models the base type of various tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"public class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    /** Contains the description of the task */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"    protected String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    /** Indicates the task\u0027s state of completion */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"     * Constructor to create a task object","lastModifiedDate":"2021-08-30"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"     * Indicates that the given task is complete","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"        return this.description;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"     * Gets the status icon of the task.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"     * @return \"X\" if completed, otherwise empty.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"     * Indicates that the task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"    public Task markAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"        return new Task(this.description, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":54}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":" * Reflects a particular task on a Todo list","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"     * Internal constructor called to indicate that the Todo task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    private Todo(String description, Boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"     * Indicates that the Todo task is completed.","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    public Todo markAsDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        return new Todo(this.description, true);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"xnajasho":30}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"xnajasho":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-08-31"}],"authorContributionMap":{"xnajasho":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"todo read book","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"todo join sports club","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"done 1","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"done 4","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"todo borrow book","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"SET MY_PATH\u003dC:\\Users\\User\\Desktop\\ip","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\"","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xnajasho":6,"-":18}}]

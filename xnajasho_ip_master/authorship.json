[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"public class Deadline extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"    protected String by;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"    Deadline(String description, String by) {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    Deadline(String description, String by, Boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    public String getBy() {","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"        return this.by;","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    public Deadline markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"        return new Deadline(this.description, this.by, true);","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":26}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.NoSuchFileException;","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-23"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"import java.util.List;","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"    Duke() {","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"        Duke bot \u003d new Duke();","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"        bot.accessFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"        String openingMessage \u003d \"   -------------------------------------------- \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"                        + \"   Hello! I\u0027m Duke \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"                        + \"   What can I do for you? \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"                        + \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        System.out.println(openingMessage);","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-15"},{"lineNumber":32,"author":{"gitId":"xnajasho"},"content":"        boolean isReadingInput \u003d true;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"xnajasho"},"content":"        while (sc.hasNextLine() \u0026\u0026 isReadingInput) {","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"xnajasho"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"xnajasho"},"content":"            String firstWord;","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"xnajasho"},"content":"            String remainingWords \u003d \"\";","lastModifiedDate":"2021-08-15"},{"lineNumber":37,"author":{"gitId":"xnajasho"},"content":"            if (input.contains(\" \")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":38,"author":{"gitId":"xnajasho"},"content":"                firstWord \u003d bot.getFirstWord(input);","lastModifiedDate":"2021-08-15"},{"lineNumber":39,"author":{"gitId":"xnajasho"},"content":"                remainingWords \u003d bot.getRestOfWords(input);","lastModifiedDate":"2021-08-15"},{"lineNumber":40,"author":{"gitId":"xnajasho"},"content":"            } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":41,"author":{"gitId":"xnajasho"},"content":"                firstWord \u003d input;","lastModifiedDate":"2021-08-15"},{"lineNumber":42,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"xnajasho"},"content":"            switch (firstWord) {","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"xnajasho"},"content":"            case \"list\":","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"xnajasho"},"content":"                System.out.println(bot.printList());","lastModifiedDate":"2021-08-15"},{"lineNumber":47,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":48,"author":{"gitId":"xnajasho"},"content":"            case \"bye\":","lastModifiedDate":"2021-08-15"},{"lineNumber":49,"author":{"gitId":"xnajasho"},"content":"                bot.sayBye();","lastModifiedDate":"2021-08-23"},{"lineNumber":50,"author":{"gitId":"xnajasho"},"content":"                isReadingInput \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"xnajasho"},"content":"            case \"done\":","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"xnajasho"},"content":"                int index \u003d Integer.parseInt(remainingWords);","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-15"},{"lineNumber":55,"author":{"gitId":"xnajasho"},"content":"                    System.out.println(bot.completeTask(index));","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"xnajasho"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":57,"author":{"gitId":"xnajasho"},"content":"                    bot.printErrorMessage(\"done\");","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-15"},{"lineNumber":59,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":60,"author":{"gitId":"xnajasho"},"content":"            case \"todo\":","lastModifiedDate":"2021-08-15"},{"lineNumber":61,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-15"},{"lineNumber":62,"author":{"gitId":"xnajasho"},"content":"                    System.out.println(bot.addTodo(remainingWords));","lastModifiedDate":"2021-08-15"},{"lineNumber":63,"author":{"gitId":"xnajasho"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":64,"author":{"gitId":"xnajasho"},"content":"                    bot.printErrorMessage(\"todo\");","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-15"},{"lineNumber":66,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":67,"author":{"gitId":"xnajasho"},"content":"            case \"deadline\":","lastModifiedDate":"2021-08-15"},{"lineNumber":68,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-15"},{"lineNumber":69,"author":{"gitId":"xnajasho"},"content":"                    System.out.println(bot.addDeadline(remainingWords));","lastModifiedDate":"2021-08-15"},{"lineNumber":70,"author":{"gitId":"xnajasho"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":71,"author":{"gitId":"xnajasho"},"content":"                    bot.printErrorMessage(\"deadline\");","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-15"},{"lineNumber":73,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":74,"author":{"gitId":"xnajasho"},"content":"            case \"event\":","lastModifiedDate":"2021-08-15"},{"lineNumber":75,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-15"},{"lineNumber":76,"author":{"gitId":"xnajasho"},"content":"                    System.out.println(bot.addEvent(remainingWords));","lastModifiedDate":"2021-08-15"},{"lineNumber":77,"author":{"gitId":"xnajasho"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-15"},{"lineNumber":78,"author":{"gitId":"xnajasho"},"content":"                    bot.printErrorMessage(\"event\");","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-15"},{"lineNumber":80,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":81,"author":{"gitId":"xnajasho"},"content":"            case \"delete\":","lastModifiedDate":"2021-08-16"},{"lineNumber":82,"author":{"gitId":"xnajasho"},"content":"                int deleteIndex \u003d Integer.parseInt(remainingWords);","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"xnajasho"},"content":"                    System.out.println(bot.deleteTask(deleteIndex));","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"xnajasho"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"xnajasho"},"content":"                    bot.printErrorMessage(\"event\");","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":88,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-16"},{"lineNumber":89,"author":{"gitId":"xnajasho"},"content":"            default:","lastModifiedDate":"2021-08-15"},{"lineNumber":90,"author":{"gitId":"xnajasho"},"content":"                bot.printErrorMessage(\"error\");","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":92,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":93,"author":{"gitId":"xnajasho"},"content":"        sc.close();","lastModifiedDate":"2021-08-15"},{"lineNumber":94,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":95,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":96,"author":{"gitId":"xnajasho"},"content":"    public void printErrorMessage(String message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"xnajasho"},"content":"        String errorMessage \u003d \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"xnajasho"},"content":"        switch(message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"xnajasho"},"content":"        case \"done\":","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"xnajasho"},"content":"            errorMessage +\u003d \"      OOPS!!! Invalid task number given \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":102,"author":{"gitId":"xnajasho"},"content":"        case \"todo\":","lastModifiedDate":"2021-08-22"},{"lineNumber":103,"author":{"gitId":"xnajasho"},"content":"            errorMessage +\u003d \"      OOPS!!! The description of a todo cannot be empty. \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":105,"author":{"gitId":"xnajasho"},"content":"        case \"deadline\":","lastModifiedDate":"2021-08-22"},{"lineNumber":106,"author":{"gitId":"xnajasho"},"content":"            errorMessage +\u003d \"      OOPS!!! The description of a deadline cannot be empty. \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":108,"author":{"gitId":"xnajasho"},"content":"        case \"event\":","lastModifiedDate":"2021-08-22"},{"lineNumber":109,"author":{"gitId":"xnajasho"},"content":"            errorMessage +\u003d \"      OOPS!!! The description of an event cannot be empty. \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":111,"author":{"gitId":"xnajasho"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-22"},{"lineNumber":112,"author":{"gitId":"xnajasho"},"content":"            errorMessage +\u003d \"      Invalid index. Specified task does not exist to be deleted. \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":113,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":114,"author":{"gitId":"xnajasho"},"content":"        default:","lastModifiedDate":"2021-08-22"},{"lineNumber":115,"author":{"gitId":"xnajasho"},"content":"            errorMessage +\u003d \"      OOPS!!! I have no idea what that means :-( \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":116,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":117,"author":{"gitId":"xnajasho"},"content":"        errorMessage +\u003d \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-22"},{"lineNumber":118,"author":{"gitId":"xnajasho"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":121,"author":{"gitId":"xnajasho"},"content":"    public void accessFile() {","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"xnajasho"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"xnajasho"},"content":"        java.nio.file.Path path \u003d java.nio.file.Paths.get(home, \"Desktop\", \"ip\", \"src\", \"main\", \"java\");","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"xnajasho"},"content":"        boolean directoryExists \u003d java.nio.file.Files.exists(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"xnajasho"},"content":"        if (!directoryExists) {","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"xnajasho"},"content":"            System.out.println(\"   Specified tasklist directory does not exist. \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"xnajasho"},"content":"                    \"Duke is unable to save future data unless directory is created.\");","lastModifiedDate":"2021-08-22"},{"lineNumber":128,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":129,"author":{"gitId":"xnajasho"},"content":"            // create a directory for it to save","lastModifiedDate":"2021-08-23"},{"lineNumber":130,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":131,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":132,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":133,"author":{"gitId":"xnajasho"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":134,"author":{"gitId":"xnajasho"},"content":"                List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(home, \"Desktop\", \"ip\", \"src\", \"main\", \"java\", \"tasklist.txt\"));","lastModifiedDate":"2021-08-22"},{"lineNumber":135,"author":{"gitId":"xnajasho"},"content":"                for (String s: lines) {","lastModifiedDate":"2021-08-22"},{"lineNumber":136,"author":{"gitId":"xnajasho"},"content":"                    parseTaskFromFile(s);","lastModifiedDate":"2021-08-22"},{"lineNumber":137,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"xnajasho"},"content":"                System.out.println(\"   Autosave feature detected. Please type \u0027list\u0027 to view \" +","lastModifiedDate":"2021-08-22"},{"lineNumber":139,"author":{"gitId":"xnajasho"},"content":"                        \"previously saved tasks\");","lastModifiedDate":"2021-08-22"},{"lineNumber":140,"author":{"gitId":"xnajasho"},"content":"            } catch (NoSuchFileException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":141,"author":{"gitId":"xnajasho"},"content":"                System.out.println(\"   Tasklist file not found. Creating empty tasklist...\");","lastModifiedDate":"2021-08-23"},{"lineNumber":142,"author":{"gitId":"xnajasho"},"content":"                File tempfile \u003d new File(\"./src/main/java/tasklist.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":143,"author":{"gitId":"xnajasho"},"content":"                try {","lastModifiedDate":"2021-08-23"},{"lineNumber":144,"author":{"gitId":"xnajasho"},"content":"                    tempfile.createNewFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":145,"author":{"gitId":"xnajasho"},"content":"                } catch (IOException x) {","lastModifiedDate":"2021-08-23"},{"lineNumber":146,"author":{"gitId":"xnajasho"},"content":"                    System.out.println(\"   Unexpected error: Unable to create file...\");","lastModifiedDate":"2021-08-23"},{"lineNumber":147,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":148,"author":{"gitId":"xnajasho"},"content":"            } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":149,"author":{"gitId":"xnajasho"},"content":"                System.out.println(\"   An error occurred reading the tasklist file. Initialising empty tasklist...\");","lastModifiedDate":"2021-08-22"},{"lineNumber":150,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":151,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":152,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":153,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":154,"author":{"gitId":"xnajasho"},"content":"    public void parseTaskFromFile(String taskInput) {","lastModifiedDate":"2021-08-22"},{"lineNumber":155,"author":{"gitId":"xnajasho"},"content":"        List\u003cString\u003e words \u003d List.of(taskInput.split(\" \\\\| \"));","lastModifiedDate":"2021-08-22"},{"lineNumber":156,"author":{"gitId":"xnajasho"},"content":"        switch (words.get(0)) {","lastModifiedDate":"2021-08-22"},{"lineNumber":157,"author":{"gitId":"xnajasho"},"content":"        case \"T\":","lastModifiedDate":"2021-08-22"},{"lineNumber":158,"author":{"gitId":"xnajasho"},"content":"            Todo t \u003d new Todo(words.get(2));","lastModifiedDate":"2021-08-22"},{"lineNumber":159,"author":{"gitId":"xnajasho"},"content":"            if (words.get(1).equals(\"X\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":160,"author":{"gitId":"xnajasho"},"content":"                t \u003d t.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":161,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":162,"author":{"gitId":"xnajasho"},"content":"            this.taskList.add(t);","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":164,"author":{"gitId":"xnajasho"},"content":"        case \"D\":","lastModifiedDate":"2021-08-22"},{"lineNumber":165,"author":{"gitId":"xnajasho"},"content":"            Deadline d \u003d new Deadline(words.get(2), words.get(3));","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"xnajasho"},"content":"            if (words.size() \u003d\u003d 4) { // add only if date is  specified","lastModifiedDate":"2021-08-22"},{"lineNumber":167,"author":{"gitId":"xnajasho"},"content":"                if (words.get(1).equals(\"X\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":168,"author":{"gitId":"xnajasho"},"content":"                    d \u003d d.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":169,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":170,"author":{"gitId":"xnajasho"},"content":"                this.taskList.add(d);","lastModifiedDate":"2021-08-22"},{"lineNumber":171,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":172,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":173,"author":{"gitId":"xnajasho"},"content":"        case \"E\":","lastModifiedDate":"2021-08-22"},{"lineNumber":174,"author":{"gitId":"xnajasho"},"content":"            Event e \u003d new Event(words.get(2), words.get(3));;","lastModifiedDate":"2021-08-22"},{"lineNumber":175,"author":{"gitId":"xnajasho"},"content":"            if (words.size() \u003d\u003d 4) { // add only if date is specified","lastModifiedDate":"2021-08-22"},{"lineNumber":176,"author":{"gitId":"xnajasho"},"content":"                if (words.get(1).equals(\"X\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":177,"author":{"gitId":"xnajasho"},"content":"                    e \u003d e.markAsDone();","lastModifiedDate":"2021-08-22"},{"lineNumber":178,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":179,"author":{"gitId":"xnajasho"},"content":"                this.taskList.add(e);","lastModifiedDate":"2021-08-22"},{"lineNumber":180,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":181,"author":{"gitId":"xnajasho"},"content":"        default:","lastModifiedDate":"2021-08-22"},{"lineNumber":182,"author":{"gitId":"xnajasho"},"content":"            break;","lastModifiedDate":"2021-08-22"},{"lineNumber":183,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":184,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":185,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":186,"author":{"gitId":"xnajasho"},"content":"    public String printList() {","lastModifiedDate":"2021-08-15"},{"lineNumber":187,"author":{"gitId":"xnajasho"},"content":"        boolean isEmptyList \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":188,"author":{"gitId":"xnajasho"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-08-15"},{"lineNumber":189,"author":{"gitId":"xnajasho"},"content":"        String output \u003d \"   -------------------------------------------- \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":190,"author":{"gitId":"xnajasho"},"content":"                    + \"   Here are the tasks in your list: \\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":191,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":192,"author":{"gitId":"xnajasho"},"content":"        while (!isEmptyList) {","lastModifiedDate":"2021-08-15"},{"lineNumber":193,"author":{"gitId":"xnajasho"},"content":"            if (this.taskList.isEmpty()) {","lastModifiedDate":"2021-08-15"},{"lineNumber":194,"author":{"gitId":"xnajasho"},"content":"                output +\u003d \"   Current List is empty... \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":195,"author":{"gitId":"xnajasho"},"content":"                        + \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":196,"author":{"gitId":"xnajasho"},"content":"                isEmptyList \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":197,"author":{"gitId":"xnajasho"},"content":"            } else if (counter - this.taskList.size() \u003d\u003d 1) { // when there are no more tasks to iterate","lastModifiedDate":"2021-08-15"},{"lineNumber":198,"author":{"gitId":"xnajasho"},"content":"                output +\u003d \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":199,"author":{"gitId":"xnajasho"},"content":"                isEmptyList \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":200,"author":{"gitId":"xnajasho"},"content":"            } else { // adds current task to the list based on counter index","lastModifiedDate":"2021-08-15"},{"lineNumber":201,"author":{"gitId":"xnajasho"},"content":"                String lineAdded \u003d String.format(\"   %d.%s \\n\", counter, this.taskList.get(counter - 1));","lastModifiedDate":"2021-08-15"},{"lineNumber":202,"author":{"gitId":"xnajasho"},"content":"                output +\u003d lineAdded;","lastModifiedDate":"2021-08-15"},{"lineNumber":203,"author":{"gitId":"xnajasho"},"content":"                counter++;","lastModifiedDate":"2021-08-15"},{"lineNumber":204,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":205,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":206,"author":{"gitId":"xnajasho"},"content":"        return output;","lastModifiedDate":"2021-08-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":208,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":209,"author":{"gitId":"xnajasho"},"content":"    public void sayBye() {","lastModifiedDate":"2021-08-23"},{"lineNumber":210,"author":{"gitId":"xnajasho"},"content":"        saveToFile();","lastModifiedDate":"2021-08-23"},{"lineNumber":211,"author":{"gitId":"xnajasho"},"content":"        String closingMessage \u003d \"   -------------------------------------------- \\n\"","lastModifiedDate":"2021-08-23"},{"lineNumber":212,"author":{"gitId":"xnajasho"},"content":"                            + \"   Bye! Hope to see you again soon! \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":213,"author":{"gitId":"xnajasho"},"content":"                            + \"   --------------------------------------------\";","lastModifiedDate":"2021-08-15"},{"lineNumber":214,"author":{"gitId":"xnajasho"},"content":"        System.out.println(closingMessage);","lastModifiedDate":"2021-08-23"},{"lineNumber":215,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":216,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":217,"author":{"gitId":"xnajasho"},"content":"    public void saveToFile() {","lastModifiedDate":"2021-08-23"},{"lineNumber":218,"author":{"gitId":"xnajasho"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2021-08-23"},{"lineNumber":219,"author":{"gitId":"xnajasho"},"content":"        java.nio.file.Path path \u003d java.nio.file.Paths.get(","lastModifiedDate":"2021-08-23"},{"lineNumber":220,"author":{"gitId":"xnajasho"},"content":"                home, \"Desktop\", \"ip\", \"src\", \"main\", \"java\", \"tasklist.txt\");","lastModifiedDate":"2021-08-23"},{"lineNumber":221,"author":{"gitId":"xnajasho"},"content":"        String outputText \u003d \"\";","lastModifiedDate":"2021-08-23"},{"lineNumber":222,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":223,"author":{"gitId":"xnajasho"},"content":"        for (Task t: this.taskList) {","lastModifiedDate":"2021-08-23"},{"lineNumber":224,"author":{"gitId":"xnajasho"},"content":"            if (t instanceof Todo) {","lastModifiedDate":"2021-08-23"},{"lineNumber":225,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"T | \";","lastModifiedDate":"2021-08-23"},{"lineNumber":226,"author":{"gitId":"xnajasho"},"content":"                if (t.getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":227,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + t.getDescription() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":228,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":229,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + t.getDescription() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":230,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":231,"author":{"gitId":"xnajasho"},"content":"            } else if (t instanceof Deadline) {","lastModifiedDate":"2021-08-23"},{"lineNumber":232,"author":{"gitId":"xnajasho"},"content":"                Deadline d \u003d (Deadline) t;","lastModifiedDate":"2021-08-23"},{"lineNumber":233,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"D | \";","lastModifiedDate":"2021-08-23"},{"lineNumber":234,"author":{"gitId":"xnajasho"},"content":"                if (d.getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":235,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + d.getDescription() + \" | \" + d.getBy() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":236,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":237,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + d.getDescription() + \" | \" + d.getBy() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":238,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":239,"author":{"gitId":"xnajasho"},"content":"            } else if (t instanceof Event) {","lastModifiedDate":"2021-08-23"},{"lineNumber":240,"author":{"gitId":"xnajasho"},"content":"                Event e \u003d (Event) t;","lastModifiedDate":"2021-08-23"},{"lineNumber":241,"author":{"gitId":"xnajasho"},"content":"                outputText +\u003d \"E | \";","lastModifiedDate":"2021-08-23"},{"lineNumber":242,"author":{"gitId":"xnajasho"},"content":"                if (e.getStatusIcon().equals(\"X\")) {","lastModifiedDate":"2021-08-23"},{"lineNumber":243,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"X | \" + e.getDescription() + \" | \" + e.getAt() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":244,"author":{"gitId":"xnajasho"},"content":"                } else {","lastModifiedDate":"2021-08-23"},{"lineNumber":245,"author":{"gitId":"xnajasho"},"content":"                    outputText +\u003d \"0 | \" + e.getDescription() + \" | \" + e.getAt() + \"\\n\";","lastModifiedDate":"2021-08-23"},{"lineNumber":246,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-23"},{"lineNumber":247,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-23"},{"lineNumber":248,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":249,"author":{"gitId":"xnajasho"},"content":"        try {","lastModifiedDate":"2021-08-23"},{"lineNumber":250,"author":{"gitId":"xnajasho"},"content":"            Files.write(path, \"\".getBytes()); // clears the file","lastModifiedDate":"2021-08-23"},{"lineNumber":251,"author":{"gitId":"xnajasho"},"content":"            Files.write(path, outputText.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2021-08-23"},{"lineNumber":252,"author":{"gitId":"xnajasho"},"content":"            System.out.println(\"   Saved tasks to file\");","lastModifiedDate":"2021-08-23"},{"lineNumber":253,"author":{"gitId":"xnajasho"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-23"},{"lineNumber":254,"author":{"gitId":"xnajasho"},"content":"            System.out.println(\"   An error occurred...\");","lastModifiedDate":"2021-08-23"},{"lineNumber":255,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":256,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":257,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":258,"author":{"gitId":"xnajasho"},"content":"    public String completeTask(int index) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":259,"author":{"gitId":"xnajasho"},"content":"        if (index \u003c\u003d 0 || index \u003e taskList.size() || taskList.isEmpty()) {","lastModifiedDate":"2021-08-16"},{"lineNumber":260,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d \"OOPS!!! Invalid task number given.\";","lastModifiedDate":"2021-08-16"},{"lineNumber":261,"author":{"gitId":"xnajasho"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-15"},{"lineNumber":262,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":263,"author":{"gitId":"xnajasho"},"content":"            String taskClass;","lastModifiedDate":"2021-08-15"},{"lineNumber":264,"author":{"gitId":"xnajasho"},"content":"            if (this.taskList.get(index - 1) instanceof Todo) {","lastModifiedDate":"2021-08-15"},{"lineNumber":265,"author":{"gitId":"xnajasho"},"content":"                taskClass \u003d \"Todo\";","lastModifiedDate":"2021-08-15"},{"lineNumber":266,"author":{"gitId":"xnajasho"},"content":"            } else if (this.taskList.get(index - 1) instanceof Deadline) {","lastModifiedDate":"2021-08-15"},{"lineNumber":267,"author":{"gitId":"xnajasho"},"content":"                taskClass \u003d \"Deadline\";","lastModifiedDate":"2021-08-15"},{"lineNumber":268,"author":{"gitId":"xnajasho"},"content":"            } else if (this.taskList.get(index - 1) instanceof Event) {","lastModifiedDate":"2021-08-15"},{"lineNumber":269,"author":{"gitId":"xnajasho"},"content":"                taskClass \u003d \"Event\";","lastModifiedDate":"2021-08-15"},{"lineNumber":270,"author":{"gitId":"xnajasho"},"content":"            } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":271,"author":{"gitId":"xnajasho"},"content":"                taskClass \u003d \"Task\";","lastModifiedDate":"2021-08-15"},{"lineNumber":272,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":273,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":274,"author":{"gitId":"xnajasho"},"content":"            String output \u003d \"   -------------------------------------------- \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":275,"author":{"gitId":"xnajasho"},"content":"                    + \"   Nice! I\u0027ve marked this task as done: \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":276,"author":{"gitId":"xnajasho"},"content":"                    + \"      \";","lastModifiedDate":"2021-08-15"},{"lineNumber":277,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":278,"author":{"gitId":"xnajasho"},"content":"            switch (taskClass) {","lastModifiedDate":"2021-08-15"},{"lineNumber":279,"author":{"gitId":"xnajasho"},"content":"            case \"Todo\":","lastModifiedDate":"2021-08-15"},{"lineNumber":280,"author":{"gitId":"xnajasho"},"content":"                Todo completedTask \u003d ((Todo) this.taskList.get(index - 1)).markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":281,"author":{"gitId":"xnajasho"},"content":"                this.taskList.set(index - 1, completedTask);","lastModifiedDate":"2021-08-15"},{"lineNumber":282,"author":{"gitId":"xnajasho"},"content":"                output +\u003d completedTask.toString() + \"\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":283,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":284,"author":{"gitId":"xnajasho"},"content":"            case \"Deadline\":","lastModifiedDate":"2021-08-15"},{"lineNumber":285,"author":{"gitId":"xnajasho"},"content":"                Deadline completedTask2 \u003d ((Deadline) this.taskList.get(index - 1)).markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":286,"author":{"gitId":"xnajasho"},"content":"                this.taskList.set(index - 1, completedTask2);","lastModifiedDate":"2021-08-15"},{"lineNumber":287,"author":{"gitId":"xnajasho"},"content":"                output +\u003d completedTask2.toString() + \"\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":288,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":289,"author":{"gitId":"xnajasho"},"content":"            case \"Event\":","lastModifiedDate":"2021-08-15"},{"lineNumber":290,"author":{"gitId":"xnajasho"},"content":"                Event completedTask3 \u003d ((Event) this.taskList.get(index - 1)).markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":291,"author":{"gitId":"xnajasho"},"content":"                this.taskList.set(index - 1, completedTask3);","lastModifiedDate":"2021-08-15"},{"lineNumber":292,"author":{"gitId":"xnajasho"},"content":"                output +\u003d completedTask3.toString() + \"\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":293,"author":{"gitId":"xnajasho"},"content":"                break;","lastModifiedDate":"2021-08-15"},{"lineNumber":294,"author":{"gitId":"xnajasho"},"content":"            default:","lastModifiedDate":"2021-08-15"},{"lineNumber":295,"author":{"gitId":"xnajasho"},"content":"                Task completedTask4 \u003d this.taskList.get(index - 1).markAsDone();","lastModifiedDate":"2021-08-15"},{"lineNumber":296,"author":{"gitId":"xnajasho"},"content":"                this.taskList.set(index - 1, completedTask4);","lastModifiedDate":"2021-08-15"},{"lineNumber":297,"author":{"gitId":"xnajasho"},"content":"                output +\u003d completedTask4.toString() + \"\\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":298,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-15"},{"lineNumber":299,"author":{"gitId":"xnajasho"},"content":"            output +\u003d \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":300,"author":{"gitId":"xnajasho"},"content":"            return output;","lastModifiedDate":"2021-08-15"},{"lineNumber":301,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":302,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":303,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":304,"author":{"gitId":"xnajasho"},"content":"    public String deleteTask(int deleteIndex) throws DukeException {","lastModifiedDate":"2021-08-16"},{"lineNumber":305,"author":{"gitId":"xnajasho"},"content":"        if (deleteIndex \u003c\u003d 0 || deleteIndex \u003e taskList.size() || taskList.isEmpty()) {","lastModifiedDate":"2021-08-16"},{"lineNumber":306,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d \"OOPS!!! Invalid index to be deleted.\";","lastModifiedDate":"2021-08-16"},{"lineNumber":307,"author":{"gitId":"xnajasho"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-16"},{"lineNumber":308,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-16"},{"lineNumber":309,"author":{"gitId":"xnajasho"},"content":"            String deletedTask \u003d this.taskList.get(deleteIndex - 1).toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":310,"author":{"gitId":"xnajasho"},"content":"            if (this.taskList.size() \u003d\u003d 1) { // if there is only one task in the list","lastModifiedDate":"2021-08-16"},{"lineNumber":311,"author":{"gitId":"xnajasho"},"content":"                this.taskList.clear();","lastModifiedDate":"2021-08-16"},{"lineNumber":312,"author":{"gitId":"xnajasho"},"content":"            } else if (deleteIndex \u003d\u003d 1){ // deleting leftmost element","lastModifiedDate":"2021-08-16"},{"lineNumber":313,"author":{"gitId":"xnajasho"},"content":"                this.taskList \u003d new ArrayList\u003c\u003e(taskList.subList(1, taskList.size()));","lastModifiedDate":"2021-08-16"},{"lineNumber":314,"author":{"gitId":"xnajasho"},"content":"            } else if (deleteIndex \u003d\u003d taskList.size()) { // deleting rightmost element","lastModifiedDate":"2021-08-16"},{"lineNumber":315,"author":{"gitId":"xnajasho"},"content":"                this.taskList \u003d new ArrayList\u003c\u003e(taskList.subList(0, taskList.size() - 1));","lastModifiedDate":"2021-08-16"},{"lineNumber":316,"author":{"gitId":"xnajasho"},"content":"            } else { // deleting somewhere in between","lastModifiedDate":"2021-08-16"},{"lineNumber":317,"author":{"gitId":"xnajasho"},"content":"                ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e(this.taskList.subList(0, deleteIndex - 1));","lastModifiedDate":"2021-08-16"},{"lineNumber":318,"author":{"gitId":"xnajasho"},"content":"                for (int i \u003d deleteIndex; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-16"},{"lineNumber":319,"author":{"gitId":"xnajasho"},"content":"                    newList.add(taskList.get(i));","lastModifiedDate":"2021-08-16"},{"lineNumber":320,"author":{"gitId":"xnajasho"},"content":"                }","lastModifiedDate":"2021-08-16"},{"lineNumber":321,"author":{"gitId":"xnajasho"},"content":"                this.taskList \u003d newList;","lastModifiedDate":"2021-08-16"},{"lineNumber":322,"author":{"gitId":"xnajasho"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":323,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":324,"author":{"gitId":"xnajasho"},"content":"            return \"   -------------------------------------------- \\n\"","lastModifiedDate":"2021-08-16"},{"lineNumber":325,"author":{"gitId":"xnajasho"},"content":"                    + \"   Noted. I\u0027ve removed this task: \\n      \"","lastModifiedDate":"2021-08-16"},{"lineNumber":326,"author":{"gitId":"xnajasho"},"content":"                    + deletedTask","lastModifiedDate":"2021-08-16"},{"lineNumber":327,"author":{"gitId":"xnajasho"},"content":"                    + String.format(\"\\n   Now you have %d tasks in the list.\", taskList.size()) + \"\\n\"","lastModifiedDate":"2021-08-16"},{"lineNumber":328,"author":{"gitId":"xnajasho"},"content":"                    + \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-16"},{"lineNumber":329,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":330,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":331,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":332,"author":{"gitId":"xnajasho"},"content":"    public String addTodo(String input) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":333,"author":{"gitId":"xnajasho"},"content":"        if (!input.equals(\"\")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":334,"author":{"gitId":"xnajasho"},"content":"            Todo newTodo \u003d new Todo(input);","lastModifiedDate":"2021-08-15"},{"lineNumber":335,"author":{"gitId":"xnajasho"},"content":"            this.taskList.add(newTodo);","lastModifiedDate":"2021-08-15"},{"lineNumber":336,"author":{"gitId":"xnajasho"},"content":"            return printTaskMessage(newTodo.toString(), this.taskList.size());","lastModifiedDate":"2021-08-15"},{"lineNumber":337,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":338,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d \"OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2021-08-16"},{"lineNumber":339,"author":{"gitId":"xnajasho"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-15"},{"lineNumber":340,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":341,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":342,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":343,"author":{"gitId":"xnajasho"},"content":"    public String addDeadline(String input) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":344,"author":{"gitId":"xnajasho"},"content":"        if (!input.equals(\"\")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":345,"author":{"gitId":"xnajasho"},"content":"            String[] arr \u003d input.split(\"/by\", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":346,"author":{"gitId":"xnajasho"},"content":"            String dayTime \u003d arr[1].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":347,"author":{"gitId":"xnajasho"},"content":"            Deadline newDeadline \u003d new Deadline(arr[0].trim(), processDate(dayTime));","lastModifiedDate":"2021-08-23"},{"lineNumber":348,"author":{"gitId":"xnajasho"},"content":"            this.taskList.add(newDeadline);","lastModifiedDate":"2021-08-15"},{"lineNumber":349,"author":{"gitId":"xnajasho"},"content":"            return printTaskMessage(newDeadline.toString(), this.taskList.size());","lastModifiedDate":"2021-08-15"},{"lineNumber":350,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":351,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d \"OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2021-08-16"},{"lineNumber":352,"author":{"gitId":"xnajasho"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-15"},{"lineNumber":353,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":354,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":355,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":356,"author":{"gitId":"xnajasho"},"content":"    public String addEvent(String input) throws DukeException {","lastModifiedDate":"2021-08-15"},{"lineNumber":357,"author":{"gitId":"xnajasho"},"content":"        if (!input.equals(\"\")) {","lastModifiedDate":"2021-08-15"},{"lineNumber":358,"author":{"gitId":"xnajasho"},"content":"            String[] arr \u003d input.split(\"/at\", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":359,"author":{"gitId":"xnajasho"},"content":"            String dayTime \u003d arr[1].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":360,"author":{"gitId":"xnajasho"},"content":"            Event newEvent \u003d new Event(arr[0].trim(), processDate(dayTime));","lastModifiedDate":"2021-08-23"},{"lineNumber":361,"author":{"gitId":"xnajasho"},"content":"            this.taskList.add(newEvent);","lastModifiedDate":"2021-08-15"},{"lineNumber":362,"author":{"gitId":"xnajasho"},"content":"            return printTaskMessage(newEvent.toString(), this.taskList.size());","lastModifiedDate":"2021-08-15"},{"lineNumber":363,"author":{"gitId":"xnajasho"},"content":"        } else {","lastModifiedDate":"2021-08-15"},{"lineNumber":364,"author":{"gitId":"xnajasho"},"content":"            String errorMessage \u003d \"OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2021-08-16"},{"lineNumber":365,"author":{"gitId":"xnajasho"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2021-08-15"},{"lineNumber":366,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":367,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":368,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":369,"author":{"gitId":"xnajasho"},"content":"    public String processDate(String inputDate) {","lastModifiedDate":"2021-08-23"},{"lineNumber":370,"author":{"gitId":"xnajasho"},"content":"        String output;","lastModifiedDate":"2021-08-23"},{"lineNumber":371,"author":{"gitId":"xnajasho"},"content":"        String[] dayTimeArr \u003d inputDate.split(\" \");","lastModifiedDate":"2021-08-23"},{"lineNumber":372,"author":{"gitId":"xnajasho"},"content":"        LocalDate date \u003d LocalDate.parse(dayTimeArr[0]);","lastModifiedDate":"2021-08-23"},{"lineNumber":373,"author":{"gitId":"xnajasho"},"content":"        if (dayTimeArr.length \u003d\u003d 2) { // if there is a time to it","lastModifiedDate":"2021-08-23"},{"lineNumber":374,"author":{"gitId":"xnajasho"},"content":"            output \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" + dayTimeArr[1];","lastModifiedDate":"2021-08-23"},{"lineNumber":375,"author":{"gitId":"xnajasho"},"content":"        } else { // just the date","lastModifiedDate":"2021-08-23"},{"lineNumber":376,"author":{"gitId":"xnajasho"},"content":"            output \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-23"},{"lineNumber":377,"author":{"gitId":"xnajasho"},"content":"        }","lastModifiedDate":"2021-08-23"},{"lineNumber":378,"author":{"gitId":"xnajasho"},"content":"        return output;","lastModifiedDate":"2021-08-23"},{"lineNumber":379,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":380,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":381,"author":{"gitId":"xnajasho"},"content":"    public String printTaskMessage(String input, int numTasks) {","lastModifiedDate":"2021-08-15"},{"lineNumber":382,"author":{"gitId":"xnajasho"},"content":"        return \"   -------------------------------------------- \\n\"","lastModifiedDate":"2021-08-15"},{"lineNumber":383,"author":{"gitId":"xnajasho"},"content":"                + \"   Got it. I\u0027ve added this task: \\n      \"","lastModifiedDate":"2021-08-15"},{"lineNumber":384,"author":{"gitId":"xnajasho"},"content":"                + input","lastModifiedDate":"2021-08-16"},{"lineNumber":385,"author":{"gitId":"xnajasho"},"content":"                + String.format(\"\\n   Now you have %d tasks in the list.\", numTasks) + \"\\n\"","lastModifiedDate":"2021-08-16"},{"lineNumber":386,"author":{"gitId":"xnajasho"},"content":"                + \"   -------------------------------------------- \\n\";","lastModifiedDate":"2021-08-15"},{"lineNumber":387,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":388,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":389,"author":{"gitId":"xnajasho"},"content":"    public String getFirstWord(String input) {","lastModifiedDate":"2021-08-15"},{"lineNumber":390,"author":{"gitId":"xnajasho"},"content":"        String[] arr \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":391,"author":{"gitId":"xnajasho"},"content":"        return arr[0];","lastModifiedDate":"2021-08-15"},{"lineNumber":392,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":393,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":394,"author":{"gitId":"xnajasho"},"content":"    public String getRestOfWords(String input) {","lastModifiedDate":"2021-08-15"},{"lineNumber":395,"author":{"gitId":"xnajasho"},"content":"        String[] arr \u003d input.split(\" \", 2);","lastModifiedDate":"2021-08-15"},{"lineNumber":396,"author":{"gitId":"xnajasho"},"content":"        return arr[1];","lastModifiedDate":"2021-08-15"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":398,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"xnajasho":393,"-":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"    DukeException(String errorMessage) {","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"public class Event extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"    protected String at;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"    Event(String description, String at) {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"    Event(String description, String at, Boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    public String getAt() {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        return this.at;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    public Event markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"        return new Event(this.description, this.at, true);","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":27}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"    protected String description;","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        return this.description;","lastModifiedDate":"2021-08-23"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-23"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"xnajasho"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"xnajasho"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"xnajasho"},"content":"    public Task markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":24,"author":{"gitId":"xnajasho"},"content":"        return new Task(this.description, true);","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"xnajasho"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":31,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":31}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"public class Todo extends Task{","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"    Todo(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"        super(description);","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"    Todo(String description, Boolean isDone) {","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"    public Todo markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"        return new Todo(this.description, true);","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":14,"author":{"gitId":"xnajasho"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":15,"author":{"gitId":"xnajasho"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":16,"author":{"gitId":"xnajasho"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-15"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"xnajasho"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xnajasho"},"content":"todo read book","lastModifiedDate":"2021-08-15"},{"lineNumber":2,"author":{"gitId":"xnajasho"},"content":"deadline return book /by June 6th","lastModifiedDate":"2021-08-15"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"todo join sports club","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"xnajasho"},"content":"done 1","lastModifiedDate":"2021-08-15"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"done 4","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"xnajasho"},"content":"todo borrow book","lastModifiedDate":"2021-08-15"},{"lineNumber":8,"author":{"gitId":"xnajasho"},"content":"list","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"xnajasho"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"xnajasho"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"xnajasho"},"content":"bye","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"xnajasho":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"xnajasho"},"content":"SET MY_PATH\u003dC:\\Users\\User\\Desktop\\ip","lastModifiedDate":"2021-08-15"},{"lineNumber":4,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"xnajasho"},"content":"if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\"","lastModifiedDate":"2021-08-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"xnajasho"},"content":"javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"xnajasho"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"xnajasho"},"content":"java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xnajasho":6,"-":18}}]

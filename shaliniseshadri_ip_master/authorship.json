[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shaliniseshadri":1,"-":23}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | read book","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | return novel","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | borrow book","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | something","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"D | 0 | do something | Dec 22 2022","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"E | 0 | to do something | Dec 19 2022 2222","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | same","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":7}},{"path":"src/main/java/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"D | 0 | read book | Dec 31 2021","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"D | 1 | return book | Jan 01 2022","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"E | 0 | university fair | Jan 01 2022 0900","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | assignments","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | homework","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"D | 0 | submit worksheet | Oct 13 2021","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"T | 0 | task1","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":7}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.commands.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.parser.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":" * The Duke class is the main class which starts the chatbot","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    private TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    private final Ui ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    private final String FILEPATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    private final String FOLDERPATH \u003d \"./data\";","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor which initialises the ui, storage and tasklist before the chatbot runs","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public Duke() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"        storage \u003d new Storage(FILEPATH, FOLDERPATH);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"            storage.readTasks(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (DukeException ex) {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"            ui.displayLoadingError(ex);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"     * Starts the reading of the commands and the execution of the instructions","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"        ui.init();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"            try {","lastModifiedDate":"2021-08-17"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"                String fullCommand \u003d ui.read();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"                ui.displayLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"                Command c \u003d Parser.parse(fullCommand, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"                c.execute(taskList, ui);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"                storage.saveTasks(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"            } catch (DukeException ex) {","lastModifiedDate":"2021-08-17"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"                ui.displayError(ex.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"            } finally {","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"                ui.displayLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":57,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"shaliniseshadri"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"shaliniseshadri"},"content":"        new Duke().run();","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-15"}],"authorContributionMap":{"shaliniseshadri":60,"-":1}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.RepeatedTaskException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":" * The AddCommand task is a Command that adds a task to a list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    Task task;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     * Constructor - Initialises the task to be added.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"     * @param task input task","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"     * Takes in a list of tasks and the ui. Checks whether the task is already present in the list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"     * and if it is, it throws a RepeatedTaskException. Else it adds the task to the list of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"        if (taskList.containsTask(task)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"            throw new RepeatedTaskException();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"            taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"            ui.displayAdd(task, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":44}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":" *  The ByeCommand class is a Command that displays a goodbye message and exits the chatbot","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"     * Default constructor for ByeCommand","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    public ByeCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"     * Calls a ui method to display a goodbye message in the ui.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"        ui.displayBye();","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":32}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":" * Command is an abstract class which encapsulates the execution of the commands received from the parser","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"     * Carries out the operations on the list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public abstract void execute(TaskList taskList, Ui ui);","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     * Checks whether the chatbot should exit following the execution of the command","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"     * @return boolean value of whether the chatbot should exit","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":26}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.InvalidNumberInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":" * The DeleteCommand class is a Command that deletes a task from the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    int index;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor which initialises the index of the task to be deleted","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"     * @param index index of task which is to be deleted from the list","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"     * Deletes a task from the list provided the index is a valid integer within the range of the list","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"     * otherwise throws an InvalidNumberInputException","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"            Task currTask \u003d taskList.remove(index - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"            ui.displayDelete(currTask.toString(), taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException | NullPointerException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"            throw new InvalidNumberInputException();","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":46}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.InvalidNumberInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.RepeatedDoneException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":" * The DoneCommand is a Command that marks a task as done in the list","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    int index;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor which initialises the value of the index of the task to be marked done","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"     * @param index the index of task to be marked done","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    public DoneCommand(int index) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"     * Checks if a task is already done, in which case a RepeatedDoneException is thrown. Else it marks the","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"     * task as done. If an invalid index is entered, an InvalidNumberInputException is thrown.","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"            Task currTask \u003d taskList.get((index - 1));","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"            if (currTask.getStatus()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"                throw new RepeatedDoneException();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"                currTask.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"            ui.displayDone(currTask.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException | NullPointerException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"            throw new InvalidNumberInputException();","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":54}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":" * The FindCommand class is a Command that returns the tasks which contain the user\u0027s String input","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    String word;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor which is used to initialise the input word","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"     * @param word input word which is checked against the list","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    public FindCommand(String word) {","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"        this.word \u003d word;","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        return false;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"     * Checks whether a word is present in any of the tasks in the taskList and if a task contains the word, it","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"     * appends it to a temporary list","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"            if (task.getDescription().contains(word)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"                list.add(task);","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"        ui.displayFind(word, list);","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":46}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":" * The ListCommand is a Command that facilitates the display of the task on the ui","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    public ListCommand() {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"     * Calls the displayList method in the ui which prints out the list","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which a message relating to the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"        ui.displayList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":35}},{"path":"src/main/java/duke/commands/TasksOnCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.commands;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":" * The TasksOnCommand class is a Command that returns the tasks which have deadlines/end dates on the input date","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"public class TasksOnCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    LocalDate date;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor which is used to initialise the input date","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     * @param date input date which is used to retrieve the tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    public TasksOnCommand(LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"     * Checks whether the list contains a deadline or event with the input date as a deadline/end date and","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"     * appends it to a temporary list","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks upon which the operations need to be performed","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"     * @param ui the ui in which the result message of the command execution is displayed to the user","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"    public void execute(TaskList taskList, Ui ui) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"                if (((Deadline) task).getDate().equals(date)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"                    list.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"                if (((Event) task).getDate().equals(date)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"                    list.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"        ui.displayTasksOn(date, list);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":56}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":" * The DukeException class is the parent class of all the other runtime exceptions thrown.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":" * All the other runtime errors return respective string outputs as the message","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"     * public constructor which takes in the error message as an input","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"     * @param message input error message","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"        super(message);","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":17}},{"path":"src/main/java/duke/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class EmptyDescriptionException extends DukeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public EmptyDescriptionException(String desc) {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(desc);","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":9}},{"path":"src/main/java/duke/exceptions/IncorrectFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class IncorrectFormatException extends DukeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public IncorrectFormatException(String desc) {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(desc);","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":9}},{"path":"src/main/java/duke/exceptions/InvalidKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class InvalidKeywordException extends DukeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public InvalidKeywordException() {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(\"Sorry, I don\u0027t know what that means. \" +","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\nPlease use the keywords:\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027 to create a new task\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027list\u0027 to view all the existing tasks\" +","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027tasks_on\u0027 to view all tasks on a given date\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027find\u0027 to search for tasks containing a given word\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027done\u0027 to mark a task as complete\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027delete\u0027 to remove a task from the list\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"                \"\\n\u0027bye\u0027 to exit\");","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":17}},{"path":"src/main/java/duke/exceptions/InvalidNumberInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class InvalidNumberInputException extends DukeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public InvalidNumberInputException() {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(\"Please enter a valid task number\");","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":9}},{"path":"src/main/java/duke/exceptions/NonExistentTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class NonExistentTaskException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public NonExistentTaskException() {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(\"The task does not exist in the list\");","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"shaliniseshadri":9}},{"path":"src/main/java/duke/exceptions/RepeatedDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class RepeatedDoneException extends DukeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public RepeatedDoneException() {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(\"The task has already been completed\");","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":9}},{"path":"src/main/java/duke/exceptions/RepeatedTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"public class RepeatedTaskException extends DukeException {","lastModifiedDate":"2021-08-17"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"    public RepeatedTaskException() {","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"        super(\"The above task already exists in the list\");","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"shaliniseshadri":9}},{"path":"src/main/java/duke/parser/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.IncorrectFormatException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":" * The DateTimeParser class encapsulates the formatting of the date and/or time for an event or deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"public class DateTimeParser extends Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     * A static method which parses the date of a deadline from String to LocalDate","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"     * and throws an IncorrectFormatException in the case","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"     * that the input date is formatted incorrectly","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     * @param date input date string","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"     * @return the parsed date as a LocalDate","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    public static LocalDate deadlineDateParse(String date) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"            return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"uuuu-MM-dd\")","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"                    .withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"           throw new IncorrectFormatException(\"Incorrect date format! \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"                   \"\\nPlease enter a valid date in the given format:\" +","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"                   \" yyyy-MM-dd\");","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"     * Reads the dates from the storage file, parses and returns it.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"     * Throws an IncorrectFormatException if the stored date is formatted incorrectly","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"     * @param date the string value of the date read","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"     * @return parsed date which is returned as a LocalDate object","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"    public static LocalDate readDate(String date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"            return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"MMM dd uuuu\")","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"                    .withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"            ex.printStackTrace();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"            throw new IncorrectFormatException(\"The date has been stored in the wrong format\");","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"     * A static method which parses the date and Time of an event from String to LocalDateTime","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"     * and throws an IncorrectFormatException in the case","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"     * that the input date and/or is formatted incorrectly","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shaliniseshadri"},"content":"     * @param dateTime input dateTime string","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shaliniseshadri"},"content":"     * @return the parsed date as a LocalDate","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"shaliniseshadri"},"content":"    public static LocalDateTime eventDateTimeParse(String dateTime) {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"shaliniseshadri"},"content":"            return LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"uuuu-MM-dd HHmm\")","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"shaliniseshadri"},"content":"                    .withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"shaliniseshadri"},"content":"            throw new IncorrectFormatException(\"Incorrect date and time format! \" +","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"shaliniseshadri"},"content":"                    \"\\nPlease enter a valid date in the given format:\" +","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"shaliniseshadri"},"content":"                    \" yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"shaliniseshadri"},"content":"     * Reads the dates and times from the storage file, parses and returns it.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"shaliniseshadri"},"content":"     * Throws an IncorrectFormatException if the stored date and/or time are formatted incorrectly","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"shaliniseshadri"},"content":"     * @param dateTime the string value of the date read","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"shaliniseshadri"},"content":"     * @return parsed date and Time which is returned as a LocalDateTime object","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"shaliniseshadri"},"content":"    public static LocalDateTime readDateTime(String dateTime) {","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"shaliniseshadri"},"content":"            return LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"MMM dd uuuu HHmm\")","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"shaliniseshadri"},"content":"                    .withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.println(ex.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"shaliniseshadri"},"content":"            throw new IncorrectFormatException(\"The date and time have been stored in the wrong format\");","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"shaliniseshadri":88}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.commands.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"import duke.utils.Constants;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":" * The Parser class encapsulates the parsing, interpretation and validation of the user\u0027s input commands","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":" *","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     * The parse method interprets the keyword of the user\u0027s input and accordingly calls the other task-specific","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"     * parse functions","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"     * @param input user\u0027s string input","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks to be operated upon","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a command returned by the respective task-specific parse function","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"    public static Command parse(String input, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"        String[] parsedInput \u003d input.trim().split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"        String command \u003d parsedInput[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"        switch(command.toUpperCase()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"            case \"BYE\":","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"                return parseBye();","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"            case \"LIST\":","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"                return parseList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"            case \"DONE\":","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"                return parseDone(input, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"            case \"DELETE\":","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"                return parseDelete(input, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"            case \"TASKS_ON\":","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"                return parseTasksOn(input, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"            case \"FIND\":","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"                return parseFind(input, taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"            case \"TODO\":","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"            case \"DEADLINE\":","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"            case \"EVENT\":","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"                return parseTask(input, taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"            default:","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"                throw new InvalidKeywordException();","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseFind method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027find\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shaliniseshadri"},"content":"     * @param input user\u0027s string input","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks to be operated upon","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a FindCommand which will execute the task corresponding to the \u0027find\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shaliniseshadri"},"content":"    private static FindCommand parseFind(String input, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shaliniseshadri"},"content":"            String[] parsedString \u003d input.split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"shaliniseshadri"},"content":"            String word \u003d parsedString[1].trim();","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"shaliniseshadri"},"content":"            return new FindCommand(word);","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"shaliniseshadri"},"content":"            throw new EmptyDescriptionException(\"Please enter a word to search the list\");","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseBye method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027bye\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a ByeCommand which will execute the task corresponding to the \u0027bye\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"shaliniseshadri"},"content":"    private static ByeCommand parseBye() {","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"shaliniseshadri"},"content":"        return new ByeCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseList method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027list\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks which is to be parsed","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a ListCommand which will execute the task corresponding to the \u0027list\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":90,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"shaliniseshadri"},"content":"    private static ListCommand parseList(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"shaliniseshadri"},"content":"        return new ListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseTask method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027 keyword. Throws an exception if the tasks are formatted incorrectly","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"shaliniseshadri"},"content":"     * @param input the user\u0027s task input","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list of tasks which is to be operated on","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"shaliniseshadri"},"content":"     * @return an AddCommand which will execute the task corresponding to the \u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"shaliniseshadri"},"content":"    private static AddCommand parseTask(String input, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"shaliniseshadri"},"content":"        Task task;","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"shaliniseshadri"},"content":"        String[] splitTasks \u003d input.split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"shaliniseshadri"},"content":"        String taskType \u003d splitTasks[0].toLowerCase();","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"shaliniseshadri"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"shaliniseshadri"},"content":"                case \"todo\":","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"shaliniseshadri"},"content":"                    if (hasEmptyDesc(splitTasks)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"shaliniseshadri"},"content":"                        throw new EmptyDescriptionException(","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"shaliniseshadri"},"content":"                                \"Sorry, the description of a todo cannot be empty\" + Constants.TODO_FORMAT","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"shaliniseshadri"},"content":"                        );","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"shaliniseshadri"},"content":"                    } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"shaliniseshadri"},"content":"                        String desc \u003d splitTasks[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"shaliniseshadri"},"content":"                        task \u003d new ToDo(desc);","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"shaliniseshadri"},"content":"                    }","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"shaliniseshadri"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"shaliniseshadri"},"content":"                case \"deadline\":","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"shaliniseshadri"},"content":"                    if (hasEmptyDesc(splitTasks)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"shaliniseshadri"},"content":"                        throw new EmptyDescriptionException(","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"shaliniseshadri"},"content":"                                \"Sorry, the description of a deadline cannot be empty\" + Constants.DEADLINE_FORMAT","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"shaliniseshadri"},"content":"                        );","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"shaliniseshadri"},"content":"                    } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"shaliniseshadri"},"content":"                        String[] parsedDeadline \u003d splitTasks[1].split(\"/by\");","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"shaliniseshadri"},"content":"                        if (hasDateButEmptyDesc(parsedDeadline)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"shaliniseshadri"},"content":"                            throw new EmptyDescriptionException(","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"shaliniseshadri"},"content":"                                    \"Sorry, the description of a deadline cannot be empty\" + Constants.DEADLINE_FORMAT","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"shaliniseshadri"},"content":"                            );","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"shaliniseshadri"},"content":"                        } else if (hasEmptyDesc(parsedDeadline)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"shaliniseshadri"},"content":"                            throw new IncorrectFormatException(","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"shaliniseshadri"},"content":"                                    \"Please add a date for your deadline!\" + Constants.DEADLINE_FORMAT);","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"shaliniseshadri"},"content":"                        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"shaliniseshadri"},"content":"                            String desc \u003d parsedDeadline[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"shaliniseshadri"},"content":"                            String date \u003d parsedDeadline[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"shaliniseshadri"},"content":"                            task \u003d new Deadline(desc, DateTimeParser.deadlineDateParse(date));","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"shaliniseshadri"},"content":"                        }","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"shaliniseshadri"},"content":"                    }","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"shaliniseshadri"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"shaliniseshadri"},"content":"                case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"shaliniseshadri"},"content":"                    if (hasEmptyDesc(splitTasks)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"shaliniseshadri"},"content":"                        throw new EmptyDescriptionException(","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"shaliniseshadri"},"content":"                                \"Sorry the description of an event cannot be empty\" + Constants.EVENT_FORMAT","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"shaliniseshadri"},"content":"                        );","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"shaliniseshadri"},"content":"                    } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"shaliniseshadri"},"content":"                        String[] parsedEvent \u003d splitTasks[1].split(\"/at\");","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"shaliniseshadri"},"content":"                        if (hasDateButEmptyDesc(parsedEvent)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"shaliniseshadri"},"content":"                            throw new EmptyDescriptionException(","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"shaliniseshadri"},"content":"                                    \"Sorry the description of an event cannot be empty\" + Constants.EVENT_FORMAT","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"shaliniseshadri"},"content":"                            );","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"shaliniseshadri"},"content":"                        } else if (hasEmptyDesc(parsedEvent)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"shaliniseshadri"},"content":"                            throw new IncorrectFormatException(","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"shaliniseshadri"},"content":"                                    \"Please add a date and time for your event!\" + Constants.EVENT_FORMAT);","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"shaliniseshadri"},"content":"                        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"shaliniseshadri"},"content":"                            String details \u003d parsedEvent[0].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"shaliniseshadri"},"content":"                            String at \u003d parsedEvent[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":157,"author":{"gitId":"shaliniseshadri"},"content":"                            task \u003d new Event(details, DateTimeParser.eventDateTimeParse(at));","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"shaliniseshadri"},"content":"                        }","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"shaliniseshadri"},"content":"                    }","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"shaliniseshadri"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"shaliniseshadri"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"shaliniseshadri"},"content":"                    throw new InvalidKeywordException();","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"shaliniseshadri"},"content":"            return new AddCommand(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":165,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"shaliniseshadri"},"content":"            switch (taskType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"shaliniseshadri"},"content":"                case \"deadline\": throw new IncorrectFormatException(","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"shaliniseshadri"},"content":"                        \"Please specify a description and date for your deadline!\" + Constants.DEADLINE_FORMAT);","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"shaliniseshadri"},"content":"                case \"event\": throw new IncorrectFormatException(","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"shaliniseshadri"},"content":"                        \"Please specify a description, date and time for your event!\" + Constants.EVENT_FORMAT);","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"shaliniseshadri"},"content":"                default: throw new IncorrectFormatException(","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"shaliniseshadri"},"content":"                        \"Please specify a description and date/time for your task!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":176,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":178,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseDone method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":179,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027done\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":180,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":181,"author":{"gitId":"shaliniseshadri"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2021-08-26"},{"lineNumber":182,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list to be operated on","lastModifiedDate":"2021-08-26"},{"lineNumber":183,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a DoneCommand to execute the done operation","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"shaliniseshadri"},"content":"    private static DoneCommand parseDone(String input, TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"shaliniseshadri"},"content":"            String[] parsedTask \u003d input.split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":188,"author":{"gitId":"shaliniseshadri"},"content":"            String indexOfTask \u003d parsedTask[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"shaliniseshadri"},"content":"            int index \u003d Integer.parseInt(indexOfTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"shaliniseshadri"},"content":"            if (index \u003e 0 \u0026\u0026 index \u003e taskList.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":191,"author":{"gitId":"shaliniseshadri"},"content":"                throw new NonExistentTaskException();","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"shaliniseshadri"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":193,"author":{"gitId":"shaliniseshadri"},"content":"                return new DoneCommand(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":194,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":195,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException | NullPointerException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"shaliniseshadri"},"content":"            throw new InvalidNumberInputException();","lastModifiedDate":"2021-08-25"},{"lineNumber":197,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":198,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":199,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":201,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseDelete method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":202,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027delete\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":203,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":204,"author":{"gitId":"shaliniseshadri"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2021-08-26"},{"lineNumber":205,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list to be operated on","lastModifiedDate":"2021-08-26"},{"lineNumber":206,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a DeleteCommand to execute the delete operation","lastModifiedDate":"2021-08-26"},{"lineNumber":207,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":208,"author":{"gitId":"shaliniseshadri"},"content":"    private static DeleteCommand parseDelete(String input, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"shaliniseshadri"},"content":"            String[] parsedTask \u003d input.split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"shaliniseshadri"},"content":"            String indexOfTask \u003d parsedTask[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":212,"author":{"gitId":"shaliniseshadri"},"content":"            int index \u003d Integer.parseInt(indexOfTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":213,"author":{"gitId":"shaliniseshadri"},"content":"            if (index \u003e 0 \u0026\u0026 index \u003e taskList.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":214,"author":{"gitId":"shaliniseshadri"},"content":"                throw new NonExistentTaskException();","lastModifiedDate":"2021-08-25"},{"lineNumber":215,"author":{"gitId":"shaliniseshadri"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":216,"author":{"gitId":"shaliniseshadri"},"content":"                return new DeleteCommand(index);","lastModifiedDate":"2021-08-25"},{"lineNumber":217,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":218,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException | NullPointerException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":219,"author":{"gitId":"shaliniseshadri"},"content":"            throw new InvalidNumberInputException();","lastModifiedDate":"2021-08-25"},{"lineNumber":220,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":221,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":222,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":223,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":224,"author":{"gitId":"shaliniseshadri"},"content":"     * The parseTasksOn method is a task-specific parse function which is called when the user uses the","lastModifiedDate":"2021-08-26"},{"lineNumber":225,"author":{"gitId":"shaliniseshadri"},"content":"     * \u0027tasks_on\u0027 keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":226,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":227,"author":{"gitId":"shaliniseshadri"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2021-08-26"},{"lineNumber":228,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the list to be operated on","lastModifiedDate":"2021-08-26"},{"lineNumber":229,"author":{"gitId":"shaliniseshadri"},"content":"     * @return a TasksOnCommand to execute the tasks_on operation","lastModifiedDate":"2021-08-26"},{"lineNumber":230,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":231,"author":{"gitId":"shaliniseshadri"},"content":"    private static TasksOnCommand parseTasksOn(String input, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":232,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":233,"author":{"gitId":"shaliniseshadri"},"content":"            String[] parsedString \u003d input.split(\"\\\\s\", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":234,"author":{"gitId":"shaliniseshadri"},"content":"            LocalDate date \u003d DateTimeParser.deadlineDateParse(parsedString[1].trim());","lastModifiedDate":"2021-08-25"},{"lineNumber":235,"author":{"gitId":"shaliniseshadri"},"content":"            return new TasksOnCommand(date);","lastModifiedDate":"2021-08-25"},{"lineNumber":236,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":237,"author":{"gitId":"shaliniseshadri"},"content":"            throw new EmptyDescriptionException(\"Please enter a date to view all the tasks due\");","lastModifiedDate":"2021-08-25"},{"lineNumber":238,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":239,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":240,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":241,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":242,"author":{"gitId":"shaliniseshadri"},"content":"     * Returns a boolean value which checks if a task has an empty description","lastModifiedDate":"2021-08-26"},{"lineNumber":243,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":244,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskArray parsed string array","lastModifiedDate":"2021-08-26"},{"lineNumber":245,"author":{"gitId":"shaliniseshadri"},"content":"     * @return boolean value of whether a task has an empty description","lastModifiedDate":"2021-08-26"},{"lineNumber":246,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":247,"author":{"gitId":"shaliniseshadri"},"content":"    private static boolean hasEmptyDesc(String[] taskArray) {","lastModifiedDate":"2021-08-26"},{"lineNumber":248,"author":{"gitId":"shaliniseshadri"},"content":"        return taskArray.length \u003d\u003d 1 || taskArray[1].isBlank() || taskArray[1].isEmpty();","lastModifiedDate":"2021-08-25"},{"lineNumber":249,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":250,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":251,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":252,"author":{"gitId":"shaliniseshadri"},"content":"     * Returns a boolean value which checks if a task has a date but an empty description","lastModifiedDate":"2021-08-26"},{"lineNumber":253,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":254,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskArray parsed string array","lastModifiedDate":"2021-08-26"},{"lineNumber":255,"author":{"gitId":"shaliniseshadri"},"content":"     * @return boolean value of whether a task has a date but an empty description","lastModifiedDate":"2021-08-26"},{"lineNumber":256,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":257,"author":{"gitId":"shaliniseshadri"},"content":"    private static boolean hasDateButEmptyDesc(String[] taskArray) {","lastModifiedDate":"2021-08-26"},{"lineNumber":258,"author":{"gitId":"shaliniseshadri"},"content":"        return (taskArray[0].isBlank() || taskArray[0].isEmpty()) \u0026\u0026 (!taskArray[1].isBlank());","lastModifiedDate":"2021-08-25"},{"lineNumber":259,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":260,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":261,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":261}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.parser.DateTimeParser;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import java.io.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"import java.util.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":" * The Storage Class handles the reading and writing of tasks onto the disk","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    private final String filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    private final String folderPath;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"     * public constructor to initialise the filepath and folderpath of a storage object","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     * @param filePath filePath of the storage file","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"     * @param folderPath path of the folder in which the file is stored","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    public Storage(String filePath, String folderPath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        this.folderPath \u003d folderPath;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"     * Reads all the existing tasks in the file and appends them to the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the task list to be operated on","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"    public void readTasks(TaskList taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"            Task task;","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"            File fol \u003d new File(folderPath);","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"            fol.mkdir();","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"            file.createNewFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"            if (file.exists()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"                while (sc.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"                    String inp \u003d sc.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"                    task \u003d stringToTask(inp);","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"                    if (!taskList.containsTask(task)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"                        taskList.add(task);","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"                    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"            throw new DukeException(\"The storage file could not be created\");","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shaliniseshadri"},"content":"     * Saves all the tasks in a list to the file","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"shaliniseshadri"},"content":"     * @param taskList the input task list whose tasks will be saved locally","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"shaliniseshadri"},"content":"    public void saveTasks(TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"shaliniseshadri"},"content":"            FileWriter f \u003d new FileWriter(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"shaliniseshadri"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"shaliniseshadri"},"content":"                Task t \u003d taskList.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"shaliniseshadri"},"content":"                f.write(taskToString(t));","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"shaliniseshadri"},"content":"            f.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"shaliniseshadri"},"content":"            throw new DukeException(\"The storage file could not be found\");","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"shaliniseshadri"},"content":"     * Converts a string into a task to be stored in the task list","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"shaliniseshadri"},"content":"     * @param str task string to be converted","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"shaliniseshadri"},"content":"     * @return the output task","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"shaliniseshadri"},"content":"    public Task stringToTask(String str) {","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"shaliniseshadri"},"content":"        String[] parsed \u003d str.split(\"\\\\|\");","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"shaliniseshadri"},"content":"        String taskType \u003d parsed[0].trim();","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"shaliniseshadri"},"content":"        Task task;","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"shaliniseshadri"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"shaliniseshadri"},"content":"            case \"T\":","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"shaliniseshadri"},"content":"                task \u003d new ToDo(parsed[2].trim());","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"shaliniseshadri"},"content":"                if (parsed[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"shaliniseshadri"},"content":"                    task.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"shaliniseshadri"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"shaliniseshadri"},"content":"            case \"D\":","lastModifiedDate":"2021-08-24"},{"lineNumber":93,"author":{"gitId":"shaliniseshadri"},"content":"                task \u003d new Deadline(parsed[2].trim(), DateTimeParser.readDate(parsed[3].trim()));","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"shaliniseshadri"},"content":"                if (parsed[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"shaliniseshadri"},"content":"                    task.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"shaliniseshadri"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"shaliniseshadri"},"content":"            case \"E\":","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"shaliniseshadri"},"content":"                task \u003d new Event(parsed[2].trim(), DateTimeParser.readDateTime(parsed[3].trim()));","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"shaliniseshadri"},"content":"                if (parsed[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"shaliniseshadri"},"content":"                    task.markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"shaliniseshadri"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"shaliniseshadri"},"content":"            default:","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"shaliniseshadri"},"content":"                task \u003d new Task(\"\");","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"shaliniseshadri"},"content":"        return task;","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"shaliniseshadri"},"content":"     * Converts a task into a string to be stored in the file","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"shaliniseshadri"},"content":"     * @param task task to be converted into a string","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"shaliniseshadri"},"content":"     * @return the output string which is the format in which the task is stored locally","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"shaliniseshadri"},"content":"    public String taskToString(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"shaliniseshadri"},"content":"        String[] parsedTask \u003d task.toString().split(\"\\\\s\");","lastModifiedDate":"2021-08-24"},{"lineNumber":119,"author":{"gitId":"shaliniseshadri"},"content":"        String taskType \u003d parsedTask[0];","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"shaliniseshadri"},"content":"        String str;","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"shaliniseshadri"},"content":"        switch (taskType) {","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"shaliniseshadri"},"content":"            case \"[T]\":","lastModifiedDate":"2021-08-24"},{"lineNumber":124,"author":{"gitId":"shaliniseshadri"},"content":"                str \u003d \"T\" + \" | \" + task.getIntStatus() + \" | \" + task.getDescription() + \"\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"shaliniseshadri"},"content":"            case \"[D]\":","lastModifiedDate":"2021-08-24"},{"lineNumber":127,"author":{"gitId":"shaliniseshadri"},"content":"                str \u003d \"D\" + \" | \" + task.getIntStatus() + \" | \" + task.getDescription() + \" | \"","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"shaliniseshadri"},"content":"                        + task.getDateString() + \"\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":130,"author":{"gitId":"shaliniseshadri"},"content":"            case \"[E]\":","lastModifiedDate":"2021-08-24"},{"lineNumber":131,"author":{"gitId":"shaliniseshadri"},"content":"                str \u003d \"E\" + \" | \" + task.getIntStatus() + \" | \" + task.getDescription() + \" | \"","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"shaliniseshadri"},"content":"                        + task.getDateString() + \"\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":134,"author":{"gitId":"shaliniseshadri"},"content":"            default:","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"shaliniseshadri"},"content":"                str \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":136,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":138,"author":{"gitId":"shaliniseshadri"},"content":"        return str;","lastModifiedDate":"2021-08-24"},{"lineNumber":139,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":140,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":141,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":142,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"shaliniseshadri":142}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.tasklist;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.InvalidNumberInputException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":" * The TaskList is an abstraction for a list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    public Task get(int i) throws InvalidNumberInputException {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        return taskList.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"        return taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"     * Prints the list of tasks","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    public void print() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"        boolean allTasksDone \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"        for(int i \u003d 0; i \u003c this.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"            int ind \u003d i + 1;","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.println(ind + \". \" + this.get(i).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"            if (!this.get(i).getStatus()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"                allTasksDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"        if (allTasksDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.println(\"All tasks are complete!!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"    public Task remove(int i) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"        return taskList.remove(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"    public void printRemainingTasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"        if (taskList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.println(\"Now you have 1 task in the list.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.printf(\"Now you have %s tasks in the list.\\n\", taskList.size());","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"        taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"shaliniseshadri"},"content":"        return taskList.isEmpty();","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shaliniseshadri"},"content":"     * Checks if a list of tasks contains the given task","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"shaliniseshadri"},"content":"     * @param task task to be checked","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"shaliniseshadri"},"content":"     * @return boolean value of whether the task is contained in the list","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean containsTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"shaliniseshadri"},"content":"        boolean ans \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"shaliniseshadri"},"content":"        for (Task value : taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"shaliniseshadri"},"content":"            if (value.getDetails().trim().equals(task.getDetails().trim())) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"shaliniseshadri"},"content":"                ans \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"shaliniseshadri"},"content":"                break;","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"shaliniseshadri"},"content":"        return ans;","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":79}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":" *  The deadline class is a subclass of Task representing a deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"     * public constructor which initialises the description and end date of a deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"     * @param description description of deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     * @param by end date of deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        super(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDetails() {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        return super.getDetails() + \" (by: \" + getDateString() + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"     * Converts the Deadline\u0027s date into a String","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"     * @return String representation of a date","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDateString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"        return this.by;","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"shaliniseshadri":51}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":" *  The event class is a subclass of Task representing an event","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"    protected LocalDateTime at;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"     * public constructor which initialises the description and end date and time of an event","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"     * @param description description of event","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     * @param at end date of event","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public Event(String description, LocalDateTime at) {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        super(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDetails() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"        return super.toString() + \" (at: \" + getDateString() + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"     * Converts the Event\u0027s date and time into a String","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"     * @return String representation of the date and time","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDateString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"        return at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"        return this.at.toLocalDate();","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"        return \"[E] \" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"shaliniseshadri":50}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":" *  The task class is an abstraction of a task","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"public class Task {","lastModifiedDate":"2021-08-15"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"    protected String description;","lastModifiedDate":"2021-08-15"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"    protected LocalDateTime date;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"     * public constructor which initialises the description of a task","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"     * @param description description of a task","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-15"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-15"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-15"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-15"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"        return (isDone ? \"X\" : \" \"); // mark done duke.task with X","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"    public boolean getStatus() {","lastModifiedDate":"2021-08-15"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-15"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"    public int getIntStatus() {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"        return (isDone ? 1 : 0);","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDetails() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"        return this.description;","lastModifiedDate":"2021-08-17"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-15"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-15"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-15"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDateString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"        return this.date.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-15"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"    public String toString() {","lastModifiedDate":"2021-08-15"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2021-08-15"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-15"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-15"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":56}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":" *  The todo class is a subclass of Task representing a todo task","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"     * public constructor which initialises the description of a todo","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"     * @param description description of a task","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"        super(description);","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        return this.description;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    public String toString() {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"shaliniseshadri":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.utils.Constants;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":" * The Ui class deals with all the interactions with the user. Most of the methods prefixed with \u0027display\u0027 print out","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":" * the output obtained from their respective Command functions","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    private final Scanner sc;","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"     * Public constructor which initialises the scanner","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    public Ui() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    public void init() {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(Constants.LOGO + Constants.HELLO + Constants.LINE);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"     * Returns a string with the contents of the scanner. Throws an exception if the input is missing.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"     * @return string with contents of the scanner.","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"    public String read() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"            if (sc.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"                return sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"                return \"bye\";","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"        } catch (DukeException ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"            throw new DukeException(\"Missing Input!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayBye() {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(Constants.BYE);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"shaliniseshadri"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayList(TaskList list) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"shaliniseshadri"},"content":"        list.print();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayDone(String taskDetails) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(taskDetails);","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayDelete(String taskDetails, TaskList list) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(taskDetails);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"shaliniseshadri"},"content":"        list.printRemainingTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayTasksOn(LocalDate date, TaskList list) {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"shaliniseshadri"},"content":"        if (!list.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"shaliniseshadri"},"content":"            list.print();","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"shaliniseshadri"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.println(\"No tasks are due on \" + date + \"!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayFind(String word, TaskList list) {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"shaliniseshadri"},"content":"        if (!list.isEmpty()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"shaliniseshadri"},"content":"            list.print();","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"shaliniseshadri"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"shaliniseshadri"},"content":"            System.out.printf(\"Sorry there are no tasks containing \u0027%s\u0027 in the list\\n\", word);","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"shaliniseshadri"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayLoadingError(Exception ex) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(ex.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayError(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(message);","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(Constants.LINE);","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"shaliniseshadri"},"content":"    public void displayAdd(Task task, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"shaliniseshadri"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"shaliniseshadri"},"content":"        taskList.printRemainingTasks();","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":104}},{"path":"src/main/java/duke/utils/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.utils;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":" * The Constants class contains all the constants which are used in the UI and Parser classes.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"public class Constants {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"    private Constants() {","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String HELLO \u003d \"\\nHello! I\u0027m Duke\\nWhat can I do for you?\\n\";","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String LINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String BYE \u003d \"Bye. Hope to see you again soon!\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String TODO_FORMAT \u003d \"\\nPlease use the following format:\\ntodo [todo_description]\";","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String DEADLINE_FORMAT \u003d \"\\nPlease use the following format:\\n\" +","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"            \"deadline [deadline_description] /by [deadline_date]\";","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    public static final String EVENT_FORMAT \u003d \"\\nPlease use the following format:\\n\" +","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"            \"event [event_description] /at [event_date_and_time]\";","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"shaliniseshadri":24}},{"path":"src/test/java/duke/taskListTest/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.taskListTest;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.parser.DateTimeParser;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"public class TaskListTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    TaskList testList \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    public void loadTestList(TaskList testList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"        testList.add(new ToDo(\"clean room\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        testList.add(new Deadline(\"do homework\", DateTimeParser.deadlineDateParse(\"2021-12-31\")));","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        testList.add(new Event(\"university fair\", DateTimeParser.eventDateTimeParse(\"2021-11-30 0101\")));","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public void getTaskTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        loadTestList(testList);","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"        int index \u003d 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        assertEquals(new ToDo(\"clean room\").toString(), testList.get(index - 1).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    public void containsTaskTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"        loadTestList(testList);","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"        Task task1 \u003d new ToDo(\"clean room\");","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"        assertTrue(testList.containsTask(task1));","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"        Task task2 \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"        assertFalse(testList.containsTask(task2));","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":42}},{"path":"src/test/java/duke/taskTest/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.taskTest;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.parser.DateTimeParser;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"        LocalDate date \u003d DateTimeParser.deadlineDateParse(\"2022-01-01\");","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        String exp \u003d \"[D] [ ] return book (by: Jan 01 2022)\";","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        String act \u003d new Deadline(\"return book\", date).toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"        assertEquals(exp, act);","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    public void getDateTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"        LocalDate exp \u003d DateTimeParser.deadlineDateParse(\"2022-01-01\");","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"        LocalDate act \u003d new Deadline(\"return book\", DateTimeParser.deadlineDateParse(\"2022-01-01\")).getDate();","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        assertEquals(exp, act);","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    public void getStatusTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"        Task deadline \u003d new Deadline(\"return book\", DateTimeParser.deadlineDateParse(\"2022-01-01\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"        deadline.markAsDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"        assertTrue(deadline.getStatus());","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":36}},{"path":"src/test/java/duke/taskTest/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.taskTest;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.parser.DateTimeParser;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Event;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"public class EventTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"        LocalDateTime dateTime \u003d DateTimeParser.eventDateTimeParse(\"2022-01-01 0800\");","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"        String exp \u003d \"[E] [ ] return book (at: Jan 01 2022 0800)\";","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"        String act \u003d new Event(\"return book\", dateTime).toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"        assertEquals(exp, act);","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    public void getDateTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"        LocalDate exp \u003d DateTimeParser.deadlineDateParse(\"2022-01-01\");","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"        LocalDate act \u003d new Event(\"return book\", DateTimeParser.eventDateTimeParse(\"2022-01-01 2359\")).getDate();","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"shaliniseshadri"},"content":"        assertEquals(exp, act);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"shaliniseshadri"},"content":"    public void getStatusTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"shaliniseshadri"},"content":"        Task event \u003d new Event(\"return book\", DateTimeParser.eventDateTimeParse(\"2022-01-01 0000\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"shaliniseshadri"},"content":"        event.markAsDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"shaliniseshadri"},"content":"        assertTrue(event.getStatus());","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":39}},{"path":"src/test/java/duke/taskTest/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"package duke.taskTest;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"        String exp \u003d \"[T] [ ] read book\";","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"        String act \u003d new ToDo(\"read book\").toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"        assertEquals(exp, act);","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"    public void getStatusTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"shaliniseshadri"},"content":"        Task todo \u003d new ToDo(\"read book\");","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"shaliniseshadri"},"content":"        todo.markAsDone();","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"        assertTrue(todo.getStatus());","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"shaliniseshadri"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"shaliniseshadri"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"shaliniseshadri":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shaliniseshadri"},"content":"todo watch a movie","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"shaliniseshadri"},"content":"todo water plants","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"shaliniseshadri"},"content":"todo read novel","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"shaliniseshadri"},"content":"deadline read book /by 2021-12-31","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"shaliniseshadri"},"content":"deadline return book /by 2022-01-01","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"shaliniseshadri"},"content":"event watch movie /at 2021-12-31 2000","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"shaliniseshadri"},"content":"event university fair /at 2022-01-01 0900","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"shaliniseshadri"},"content":"list","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"shaliniseshadri"},"content":"done 2","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"shaliniseshadri"},"content":"done 4","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"shaliniseshadri"},"content":"done 5","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"shaliniseshadri"},"content":"tasks_on 2021-12-31","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"shaliniseshadri"},"content":"tasks_on 2022-01-01","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"shaliniseshadri"},"content":"delete 5","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"shaliniseshadri"},"content":"delete 2","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"find novel","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"find book","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"find tree","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"shaliniseshadri"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"shaliniseshadri"},"content":"bye","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"shaliniseshadri":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shaliniseshadri":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"shaliniseshadri"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"shaliniseshadri"},"content":"# need to verify file paths, test failed","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"shaliniseshadri"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"shaliniseshadri"},"content":"# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shaliniseshadri":4,"-":36}}]

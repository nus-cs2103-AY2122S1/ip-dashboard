[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jeromewjj":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"checkstyle {","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    configFile \u003d file(\"config/checkstyle/checkstyle.xml\")","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jeromewjj":6,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.parser.Parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"public class Duke {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"     * @param filePath Filepath of the data.txt that store.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"     * Execute a Duke object to run.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"    public void run() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"        while (!isExit) {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"        new Duke(\"data.txt\").run();","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":54}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"    private Task task;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"     * Constructs an AddCommand object.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * @param command The type of tasks to be added.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     * @param description The description to be added when creating a task.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If description given is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"    public AddCommand(String command, String description) throws DukeException{","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"        if (command.equals(\"todo\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"            String[] splitString \u003d description.split(\"todo \");","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"            if (splitString.length \u003e 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"                String taskDescription \u003d splitString[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"                task \u003d new Todo(taskDescription);","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"        } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"            String[] splitString \u003d description.split(\"deadline |/by\");","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"            if (splitString.length \u003e 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"                String taskDescription \u003d splitString[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"                String by \u003d splitString[2];","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"                task \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"                throw new DukeException(\"OOPS!!! The description/by of a deadline cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"            String[] splitString \u003d description.split(\"event |/at\");","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"            if (splitString.length \u003e 2) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"                String taskDescription \u003d splitString[1];","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"                String at \u003d splitString[2];","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"                task \u003d new Event(taskDescription, at);","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"                throw new DukeException(\"OOPS!!! The description/at of an event cannot be empty.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"     * Adds and store new task in the list and storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jeromewjj"},"content":"     * Sends added message to user.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If arguments enters has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jeromewjj"},"content":"        tasks.addTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jeromewjj"},"content":"        storage.save(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jeromewjj"},"content":"        ui.showAddTask(task, tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"jeromewjj"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":79}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"public abstract class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     * Executes based on the command with the arguments provided.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If arguments enters has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":26}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    private int taskNumber;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * Constructs DeleteCommand object.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     * @param taskNumber Task number of the task to be deleted.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    public DeleteCommand(int taskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     * Deletes task in Task List and Storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     * Send deleted message to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If arguments enters has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"        Task deletedTask \u003d tasks.getTask(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"        tasks.deleteTask(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"        storage.save(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"        ui.showDeleteTask(deletedTask, tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":47}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"public class DoneCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"    private int taskNumber;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"     * Constructs DoneCommand object.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * @param taskNumber Task number of the task to be marked done.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"    public DoneCommand(int taskNumber) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"     * Marks done task in Task List and Storage.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     * Send done message to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If arguments enters has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"        tasks.doneTask(taskNumber);","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"        storage.save(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"        ui.showDone(tasks.getTask(taskNumber));","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":46}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"     * Exits the program.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        ui.showExit();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"        System.exit(0);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"        return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"public class FindCommand extends Command{","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    private String keyWord;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     * Constructs FIndCommand object.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     * @param keyWord Key Word to match the description of task","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    public FindCommand(String keyWord) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"        this.keyWord \u003d keyWord;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     * Find task in Task List using key word.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     * Send list of matching task to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If arguments enters has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d tasks.findTask(keyWord);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"        ui.showFindTask(foundTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":47}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     * Shows the list of tasks stored.","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If arguments enters has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"        ui.showList(tasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":33}},{"path":"src/main/java/duke/command/LostCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.command;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"public class LostCommand extends Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"     * Informs user that Duke is unable to understand the command.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task List that store all current task.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * @param ui Ui object to interact with user.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * @param storage Storage that store tasks in hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        ui.showLost();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether the command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether command is an exit command.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"        return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":31}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"     * Constructs DukeException object.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"     * @param errorMessage Error message to be shown to user.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"        super(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":14}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"import duke.command.LostCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     * Returns command to be execute based on user\u0027s command.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"     * @param fullCommand User\u0027s input text.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"     * @return Command to be executed.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException if command created has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"        String command \u003d fullCommand.split(\" \")[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"        Command newCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"        switch(command) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"        case \"exit\":","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"            newCommand \u003d new ExitCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"        case \"delete\":","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"                newCommand \u003d new DeleteCommand(Integer.parseInt(fullCommand.split(\" \")[1]));","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"            } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"                throw new DukeException(\"OOPS!!! Please enter a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"        case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"            newCommand \u003d new ListCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"        case \"done\":","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"                newCommand \u003d new DoneCommand(Integer.parseInt(fullCommand.split(\" \")[1]));","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"            } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"                throw new DukeException(\"OOPS!!! Please enter a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"        case \"todo\": case \"deadline\": case \"event\":","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"            newCommand \u003d new AddCommand(command, fullCommand);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jeromewjj"},"content":"        case \"find\":","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jeromewjj"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"jeromewjj"},"content":"                newCommand \u003d new FindCommand(fullCommand.split(\" \")[1]);","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jeromewjj"},"content":"            } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"jeromewjj"},"content":"                throw new DukeException(\"OOPS!!! Please enter a valid keyword.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jeromewjj"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jeromewjj"},"content":"            newCommand \u003d new LostCommand();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jeromewjj"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jeromewjj"},"content":"        return newCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":73}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"import java.io.File;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"    private File file;","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    private String fileName;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a storage object.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     * @param fileName The name of the file that stored the Task List.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"        file \u003d new File(fileName);","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"     * Return an array of task that are stored in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"     * @return Array of task that are store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If file is corrupted.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException{","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"            Scanner scan \u003d new Scanner(this.file);","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"            while (scan.hasNext()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"                Task newTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"                String taskLine \u003d scan.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"                String[] task \u003d taskLine.split(\" \\\\| \");","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"                String taskType \u003d task[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"                switch (taskType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"                case (\"T\"):","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"                    newTask \u003d new Todo(task[2]);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jeromewjj"},"content":"                case (\"D\"):","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jeromewjj"},"content":"                    newTask \u003d new Deadline(task[2], task[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jeromewjj"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"jeromewjj"},"content":"                case (\"E\"):","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jeromewjj"},"content":"                    newTask \u003d new Event(task[2], task[3]);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"jeromewjj"},"content":"                    break;","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"jeromewjj"},"content":"                default:","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"jeromewjj"},"content":"                    throw new DukeException(\"Oops! Duke can\u0027t load a file\");","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jeromewjj"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jeromewjj"},"content":"                if (task[1].equals(\"X\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jeromewjj"},"content":"                    newTask.markDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jeromewjj"},"content":"                }","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jeromewjj"},"content":"                tasks.add(newTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jeromewjj"},"content":"            return tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"jeromewjj"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"jeromewjj"},"content":"            return tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"jeromewjj"},"content":"     * Stores all current tasks in the hard-drive.","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks Task list with all current tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If overriding of file can\u0027t be done.","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"jeromewjj"},"content":"    public void save(TaskList tasks) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"jeromewjj"},"content":"            String fileTask \u003d tasks.toFileString();","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"jeromewjj"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.fileName, false);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"jeromewjj"},"content":"            fileWriter.write(fileTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"jeromewjj"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"jeromewjj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"jeromewjj"},"content":"            throw new DukeException(\"Oops there is an issue with overriding the file\");","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":96}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"    protected LocalDate by;","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a Deadline object.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"     * @param by Date to complete the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If the format of date is incorrect.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"            this.by \u003d LocalDate.parse(by.replaceAll(\"\\\\s\", \"\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"            throw new DukeException(\"Please enter date in this format: YYYY-MM-DD\");","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"        return \"[D]\" + super.toString() + \"(by: \"","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"     * Convert the task into a string that can be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"     * @return the text format of the task to be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"        return \"D | \" + super.toFileString() + \" | \" + by;","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jeromewjj":46}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"    protected String at;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"     * Constructs an Event object.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"     * @param description Description of the event.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"     * @param at Time of the event.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"        this.at \u003d at;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"        return \"[E]\" + super.toString() + \"(at:\" + at + \")\";","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     * Convert the task into a string that can be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     * @return the text format of the task to be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"        return \"E | \" + super.toFileString() + \" | \" + at;","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jeromewjj":32}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"public class Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"    protected String description;","lastModifiedDate":"2021-08-18"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a Task object.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"     * Returns the status of the task (whether is it done).","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"     * @return Status Icon.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-18"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-08-18"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"     * Returns description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"     * @return decription of task","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"    public String getDescription(){","lastModifiedDate":"2021-08-18"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"        return this.description;","lastModifiedDate":"2021-08-18"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"     * Marks task as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-19"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"    public void markDone() {","lastModifiedDate":"2021-08-18"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-18"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"        String fullDescription \u003d String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2021-08-18"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"        return fullDescription;","lastModifiedDate":"2021-08-18"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"     * Convert the task into a string that can be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"     * @return the text format of the task to be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"        String fileString \u003d String.format(\"%s | %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jeromewjj"},"content":"        return fileString;","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jeromewjj"},"content":"     * Checks whether key word is present in the task\u0027s description.","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"jeromewjj"},"content":"     * @param keyWord Key word to match the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"jeromewjj"},"content":"     * @return Boolean whether the task match the key word.","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jeromewjj"},"content":"    public boolean isKeyWordPresent(String keyWord) {","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jeromewjj"},"content":"        int intIndex \u003d description.indexOf(keyWord);","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jeromewjj"},"content":"        if (intIndex \u003d\u003d -1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jeromewjj"},"content":"            return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jeromewjj"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jeromewjj"},"content":"            return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jeromewjj":74}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a TaskList object with empty task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a TaskList object with the given task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     * @param taskList Task list that are stored in previous execution.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"     * Adds task into the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"     * @param task Task to be added.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"     * Deletes task in the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"     * @param taskNumber The task number of the task to be deleted.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If task number entered is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"    public void deleteTask(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"            this.taskList.remove(taskNumber - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"            throw new DukeException(\"Please enter a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"     * Returns task based on task number.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jeromewjj"},"content":"     * @param taskNumber The task number of the task to get.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jeromewjj"},"content":"     * @return Task of the task number.","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If task number entered is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jeromewjj"},"content":"    public Task getTask(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"jeromewjj"},"content":"            return this.taskList.get(taskNumber - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"jeromewjj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jeromewjj"},"content":"            throw new DukeException(\"Please enter a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jeromewjj"},"content":"     * Marks task specified as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jeromewjj"},"content":"     * @param taskNumber The task number of the task to mark as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If task number entered is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"jeromewjj"},"content":"    public void doneTask(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"jeromewjj"},"content":"            this.taskList.get(taskNumber - 1).markDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"jeromewjj"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"jeromewjj"},"content":"            throw new DukeException(\"Please enter a valid task number.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"jeromewjj"},"content":"     * Returns the number of tasks stored in the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"jeromewjj"},"content":"     * @return Number of tasks stored in the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"jeromewjj"},"content":"    public int totalTask() {","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"jeromewjj"},"content":"        return this.taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"jeromewjj"},"content":"     * Returns string format of all tasks to be stored in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"jeromewjj"},"content":"     * @return String format of all tasks in the task list.","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"jeromewjj"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"jeromewjj"},"content":"        String fileTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"jeromewjj"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"jeromewjj"},"content":"            fileTask \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"jeromewjj"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"jeromewjj"},"content":"            fileTask \u003d taskList.get(0).toFileString();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"jeromewjj"},"content":"        for (int i \u003d 1; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"jeromewjj"},"content":"            fileTask \u003d fileTask + \"\\n\" + taskList.get(i).toFileString();","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"jeromewjj"},"content":"        return fileTask;","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"jeromewjj"},"content":"     * Returns an array of tasks that match the keyword.","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"jeromewjj"},"content":"     * @param keyWord Key word to match the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"jeromewjj"},"content":"     * @return Array of tasks that match the keyword","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If task get method has an error.","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"jeromewjj"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyWord) throws DukeException{","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"jeromewjj"},"content":"        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"jeromewjj"},"content":"        int numTask \u003d this.totalTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"jeromewjj"},"content":"        for(int i \u003d 1; i \u003c\u003d numTask; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"jeromewjj"},"content":"            Task task \u003d this.getTask(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"jeromewjj"},"content":"            if (task.isKeyWordPresent(keyWord)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"jeromewjj"},"content":"                newTasks.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"jeromewjj"},"content":"        return newTasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":134}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-08-18"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"     * Constructs a Todo object.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"     * @param description Description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-08-18"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"        super(description);","lastModifiedDate":"2021-08-18"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-18"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-18"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    public String toString() {","lastModifiedDate":"2021-08-18"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-18"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-18"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"     * Convert the task into a string that can be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"     * @return the text format of the task to be store in the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"    public String toFileString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"        return \"T | \" + super.toFileString();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-18"}],"authorContributionMap":{"jeromewjj":31}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"     * Returns inputs entered by user.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"     * @return User\u0027s input.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    public String readCommand() {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        Scanner sc\u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"        String userInput \u003d sc.nextLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"        return userInput;","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"    private void sendMessage(String message) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"        String start \u003d \"_____________________________________\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"        String end \u003d \"\\n_____________________________________\";","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"        String output \u003d start + message + end;","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"        System.out.println(output);","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"     * Shows welcome message when user start the program.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"jeromewjj"},"content":"    public void showWelcome() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"jeromewjj"},"content":"        String logo \u003d \" ____        _\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"jeromewjj"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"jeromewjj"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"jeromewjj"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"jeromewjj"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"jeromewjj"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"jeromewjj"},"content":"     * Shows exit message when user exit the programs","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"jeromewjj"},"content":"    public void showExit() {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"jeromewjj"},"content":"        String bye \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(bye);","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"jeromewjj"},"content":"     * Shows task added to the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"jeromewjj"},"content":"     * @param task Task that is added.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"jeromewjj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"jeromewjj"},"content":"    public void showAddTask(Task task, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"jeromewjj"},"content":"        String addTask \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d task(s) in the list.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"jeromewjj"},"content":"                task.toString(), taskList.totalTask());","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(addTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"jeromewjj"},"content":"     * Shows task that is deleted from the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"jeromewjj"},"content":"     * @param task Task that is deleted.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"jeromewjj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"jeromewjj"},"content":"    public void showDeleteTask(Task task, TaskList taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"jeromewjj"},"content":"        String deleteTask \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d task(s) in the list.\",","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"jeromewjj"},"content":"                task.toString(), taskList.totalTask()) ;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(deleteTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"jeromewjj"},"content":"     * Shows task that is marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"jeromewjj"},"content":"     * @param task Task that is marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"jeromewjj"},"content":"    public void showDone(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"jeromewjj"},"content":"        String done \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", task.toString()) ;","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(done);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"jeromewjj"},"content":"     * Shows list of tasks that are stored.","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"jeromewjj"},"content":"     * @param taskList The list of tasks that are stored.","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"jeromewjj"},"content":"     * @throws DukeException If task list has error.","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"jeromewjj"},"content":"    public void showList(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"jeromewjj"},"content":"        int numTask \u003d taskList.totalTask();","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"jeromewjj"},"content":"        String task;","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"jeromewjj"},"content":"        if (numTask \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"jeromewjj"},"content":"            task \u003d \"\";","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"jeromewjj"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"jeromewjj"},"content":"            task \u003d \"1. \" + taskList.getTask(1).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"jeromewjj"},"content":"            for(int taskNumber \u003d 2; taskNumber \u003c\u003d numTask; taskNumber++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"jeromewjj"},"content":"                task \u003d task + \"\\n\" + taskNumber + \". \" + taskList.getTask(taskNumber).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"jeromewjj"},"content":"        String listStatement \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"jeromewjj"},"content":"        String output \u003d listStatement + task;","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(output);","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"jeromewjj"},"content":"     * Tells user that Duke can\u0027t understand the input.","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"jeromewjj"},"content":"    public void showLost() {","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"jeromewjj"},"content":"        String lost \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(lost);","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"jeromewjj"},"content":"     * Tells user the error that Duke faced","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"jeromewjj"},"content":"     * @param errorMessage Error message to be shown to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"jeromewjj"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(errorMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"jeromewjj"},"content":"     * Tells user that there is an error loading the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"jeromewjj"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"jeromewjj"},"content":"        this.sendMessage(\"OOPS!!! There is a loading error.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"jeromewjj"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"jeromewjj"},"content":"     * Show user a list of tasks matching the key word.","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"jeromewjj"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"jeromewjj"},"content":"     * @param tasks List of tasks that match the key word.","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"jeromewjj"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"jeromewjj"},"content":"    public void showFindTask(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"jeromewjj"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"jeromewjj"},"content":"            String noMatch \u003d \"Sorry, no match found\";","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"jeromewjj"},"content":"            this.sendMessage(noMatch);","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"jeromewjj"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"jeromewjj"},"content":"            int numTask \u003d tasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"jeromewjj"},"content":"            String task \u003d \"1. \" + tasks.get(0).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"jeromewjj"},"content":"            for(int taskNumber \u003d 2; taskNumber \u003c\u003d numTask; taskNumber++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":146,"author":{"gitId":"jeromewjj"},"content":"                task \u003d task + \"\\n\" + taskNumber + \". \" + tasks.get(taskNumber -1 ).toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":147,"author":{"gitId":"jeromewjj"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"jeromewjj"},"content":"            task \u003d \"Here are the matching tasks in your list:\\n\" + task;","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"jeromewjj"},"content":"            this.sendMessage(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":155}},{"path":"src/test/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"    void parse_doneInvalidNumber_exceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"            assertEquals(0, Parser.parse(\"done a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"            assertEquals(\"OOPS!!! Please enter a valid task number.\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"    void parse_deleteInvalidNumber_exceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"            assertEquals(0, Parser.parse(\"delete a\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"            assertEquals(\"OOPS!!! Please enter a valid task number.\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":30}},{"path":"src/test/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"    public void testToString() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"        assertEquals(\"[D][ ] sleep(by: Dec 12 2019)\", new Deadline(\"sleep\", \"2019-12-12\").toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"        assertEquals(\"[D][ ] eat(by: Jan 12 2022)\", new Deadline(\"eat\", \"2022-01-12\").toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"    public void testToFileString() throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"        assertEquals(\"D |   | sleep | 2019-12-12\", new Deadline(\"sleep\", \"2019-12-12\").toFileString());","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"        assertEquals(\"D |   | eat | 2022-01-12\", new Deadline(\"eat\", \"2022-01-12\").toFileString());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"jeromewjj"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"jeromewjj"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"jeromewjj"},"content":"    public void deadline_wrongFormat_exceptionThrown() {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"jeromewjj"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"jeromewjj"},"content":"            assertEquals(0, new Deadline(\"sleep\", \"2011/12/12\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"jeromewjj"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"jeromewjj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"jeromewjj"},"content":"            assertEquals(\"Please enter date in this format: YYYY-MM-DD\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"jeromewjj"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"jeromewjj"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"jeromewjj"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"jeromewjj":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jeromewjj"},"content":"eat","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"jeromewjj"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"jeromewjj"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"jeromewjj"},"content":"done 2","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"jeromewjj"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"jeromewjj"},"content":"done 3","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"jeromewjj"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"jeromewjj"},"content":"done 4","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"jeromewjj"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"list","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"jeromewjj"},"content":"exit","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"jeromewjj":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jeromewjj"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jeromewjj":1,"-":20}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2021-08-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"samyipsh":1,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"//    id \u0027checkstyle\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"//checkstyle {","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"//    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"//}","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"samyipsh":19,"-":41}},{"path":"data/duke-storage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"E | 1 | party | town","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"E | 0 | smth | a time","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"T | 0 | party even more","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import duke.util.Parser;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import java.io.File;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"//import javafx.application.Application;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.Scene;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.Button;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.Label;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.layout.Region;","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"//import javafx.stage.Stage;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.image.Image;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"public class Duke {","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    private final Parser PARSER;","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"    private final Ui UI;","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    private static final String STORAGE_FILEPATH \u003d \"data\" + File.separatorChar + \"duke-storage.txt\";","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    public Duke() {","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        Storage dukeStore \u003d new Storage(STORAGE_FILEPATH);","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        TaskList taskList \u003d TaskList.of(dukeStore);","lastModifiedDate":"2021-08-31"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"        PARSER \u003d Parser.initialize(taskList);","lastModifiedDate":"2021-08-31"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"        UI \u003d new Ui();","lastModifiedDate":"2021-08-31"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"//    public void run() {","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"//        while (UI.isRunning()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"//            if (!UI.isPendingReply()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"//                continue;","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"//            }","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"//            String userInput \u003d UI.readCommand();","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"//            if (userInput.equals(\"bye\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"//                UI.close();","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"//            }","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"//            try {","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"//                String reply \u003d PARSER.parseCommand(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"//                Ui.printFormatted(reply);","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"//            } catch (DukeException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"//                Ui.printFormatted(e.toString());","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"//            } catch (Exception e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"//                e.printStackTrace();","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"//            }","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"//        }","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"        String reply \u003d \"defaultReply\";","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"            reply \u003d PARSER.parseCommand(userInput);","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"            reply \u003d e.toString();","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"        return reply;","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":69}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"public class Launcher {","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"samyipsh":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"import duke.controller.MainWindow;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindows.fxml\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"            stage.show();","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"//            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"//            Scene scene \u003d new Scene(fxmlLoader.load());","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"//            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(new Sora(false));","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"//            stage.setScene(scene);","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"//            stage.setResizable(false);","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"//            stage.initStyle(StageStyle.TRANSPARENT);","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"//            stage.show();","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"samyipsh":43}},{"path":"src/main/java/duke/TempDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"//package duke;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"//import duke.controller.DialogBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"//import javafx.application.Application;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.Scene;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.Button;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.layout.Region;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"//import javafx.stage.Stage;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"//import javafx.scene.image.Image;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"//public class TempDuke extends Application {","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"//    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"//    private VBox dialogContainer;","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"//    private TextField userInput;","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"//    private Button sendButton;","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"//    private Scene scene;","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"//    private Image userImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/globe.jpg\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"//    private Image dukeImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/soap-bubble.jpg\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"////    public static void main(String[] args) {","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"////        // ...","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"////    }","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"//    @Override","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"//    public void start(Stage stage) {","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"//        //Step 1. Setting up required components","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"//        //The container for the content of the chat to scroll.","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"//        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"//        dialogContainer \u003d new VBox();","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"//        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"//        userInput \u003d new TextField();","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"//        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"//        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"//        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"//        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"//        stage.setTitle(\"Duke\");","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"//        stage.setResizable(false);","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"//        stage.setMinHeight(600.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"//        stage.setMinWidth(400.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"//        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"//        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"//        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"//        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"//        scrollPane.setVvalue(1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"//        scrollPane.setFitToWidth(true);","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"//        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"//        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"//        userInput.setPrefWidth(325.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"//        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"//        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"//        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"//        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"//        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"//        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2021-09-04"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"//        //Step 3. Add functionality to handle user input.","lastModifiedDate":"2021-09-04"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"//        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"//            handleUserInput();","lastModifiedDate":"2021-09-04"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"//        });","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"//        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2021-09-04"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"//            handleUserInput();","lastModifiedDate":"2021-09-04"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"//        });","lastModifiedDate":"2021-09-04"},{"lineNumber":83,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":84,"author":{"gitId":"samyipsh"},"content":"//        //Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"samyipsh"},"content":"//        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":87,"author":{"gitId":"samyipsh"},"content":"//        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"samyipsh"},"content":"//        stage.setScene(scene);","lastModifiedDate":"2021-09-04"},{"lineNumber":89,"author":{"gitId":"samyipsh"},"content":"//        stage.show();","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":91,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-03"},{"lineNumber":92,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":93,"author":{"gitId":"samyipsh"},"content":"////    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":94,"author":{"gitId":"samyipsh"},"content":"////     * Iteration 1:","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"samyipsh"},"content":"////     * Creates a label with the specified text and adds it to the dialog container.","lastModifiedDate":"2021-09-04"},{"lineNumber":96,"author":{"gitId":"samyipsh"},"content":"////     * @param text String containing text to add","lastModifiedDate":"2021-09-04"},{"lineNumber":97,"author":{"gitId":"samyipsh"},"content":"////     * @return a label with the specified text that has word wrap enabled.","lastModifiedDate":"2021-09-04"},{"lineNumber":98,"author":{"gitId":"samyipsh"},"content":"////     */","lastModifiedDate":"2021-09-04"},{"lineNumber":99,"author":{"gitId":"samyipsh"},"content":"////    private Label getDialogLabel(String text) {","lastModifiedDate":"2021-09-04"},{"lineNumber":100,"author":{"gitId":"samyipsh"},"content":"////        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"samyipsh"},"content":"////        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2021-09-04"},{"lineNumber":102,"author":{"gitId":"samyipsh"},"content":"////        textToAdd.setWrapText(true);","lastModifiedDate":"2021-09-04"},{"lineNumber":103,"author":{"gitId":"samyipsh"},"content":"////","lastModifiedDate":"2021-09-04"},{"lineNumber":104,"author":{"gitId":"samyipsh"},"content":"////        return textToAdd;","lastModifiedDate":"2021-09-04"},{"lineNumber":105,"author":{"gitId":"samyipsh"},"content":"////    }","lastModifiedDate":"2021-09-04"},{"lineNumber":106,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":107,"author":{"gitId":"samyipsh"},"content":"//    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":108,"author":{"gitId":"samyipsh"},"content":"//     * Iteration 2:","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"samyipsh"},"content":"//     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-04"},{"lineNumber":110,"author":{"gitId":"samyipsh"},"content":"//     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"samyipsh"},"content":"//     */","lastModifiedDate":"2021-09-03"},{"lineNumber":112,"author":{"gitId":"samyipsh"},"content":"//    private void handleUserInput() {","lastModifiedDate":"2021-09-04"},{"lineNumber":113,"author":{"gitId":"samyipsh"},"content":"////        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2021-09-04"},{"lineNumber":114,"author":{"gitId":"samyipsh"},"content":"////        Label dukeText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2021-09-04"},{"lineNumber":115,"author":{"gitId":"samyipsh"},"content":"////        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-04"},{"lineNumber":116,"author":{"gitId":"samyipsh"},"content":"////                DialogBox.getUserDialog(userText, new ImageView(userImg)),","lastModifiedDate":"2021-09-04"},{"lineNumber":117,"author":{"gitId":"samyipsh"},"content":"////                DialogBox.getDukeDialog(dukeText, new ImageView(dukeImg))","lastModifiedDate":"2021-09-04"},{"lineNumber":118,"author":{"gitId":"samyipsh"},"content":"////        );","lastModifiedDate":"2021-09-04"},{"lineNumber":119,"author":{"gitId":"samyipsh"},"content":"////        userInput.clear();","lastModifiedDate":"2021-09-04"},{"lineNumber":120,"author":{"gitId":"samyipsh"},"content":"//        String userText \u003d userInput.getText();","lastModifiedDate":"2021-09-04"},{"lineNumber":121,"author":{"gitId":"samyipsh"},"content":"//        String dukeText \u003d getResponse(userInput.getText());","lastModifiedDate":"2021-09-04"},{"lineNumber":122,"author":{"gitId":"samyipsh"},"content":"//        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":123,"author":{"gitId":"samyipsh"},"content":"//                DialogBox.getUserDialog(userText, userImg),","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"samyipsh"},"content":"//                DialogBox.getDukeDialog(dukeText, dukeImg)","lastModifiedDate":"2021-09-04"},{"lineNumber":125,"author":{"gitId":"samyipsh"},"content":"//        );","lastModifiedDate":"2021-09-03"},{"lineNumber":126,"author":{"gitId":"samyipsh"},"content":"//        userInput.clear();","lastModifiedDate":"2021-09-03"},{"lineNumber":127,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":129,"author":{"gitId":"samyipsh"},"content":"//    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":130,"author":{"gitId":"samyipsh"},"content":"//     * You should have your own function to generate a response to user input.","lastModifiedDate":"2021-09-04"},{"lineNumber":131,"author":{"gitId":"samyipsh"},"content":"//     * Replace this stub with your completed method.","lastModifiedDate":"2021-09-04"},{"lineNumber":132,"author":{"gitId":"samyipsh"},"content":"//     */","lastModifiedDate":"2021-09-04"},{"lineNumber":133,"author":{"gitId":"samyipsh"},"content":"//    private String getResponse(String input) {","lastModifiedDate":"2021-09-04"},{"lineNumber":134,"author":{"gitId":"samyipsh"},"content":"//        return \"Duke heard: \" + input;","lastModifiedDate":"2021-09-04"},{"lineNumber":135,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-04"},{"lineNumber":136,"author":{"gitId":"samyipsh"},"content":"//}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"samyipsh":136}},{"path":"src/main/java/duke/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.controller;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-04"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"/**","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-04"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-04"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":" */","lastModifiedDate":"2021-09-04"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"    private void flip() {","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"        db.flip();","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"        return db;","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"samyipsh":61}},{"path":"src/main/java/duke/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.controller;","lastModifiedDate":"2021-09-04"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-04"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import duke.util.Ui;","lastModifiedDate":"2021-09-04"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"/**","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":" */","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-03"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-03"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-03"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/globe.jpg\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/soap-bubble.jpg\"));","lastModifiedDate":"2021-09-03"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-03"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-03"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"        this.sendMessageFromDuke(Ui.LOGO + Ui.WELCOME_STATEMENT);","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2021-09-03"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"        duke \u003d d;","lastModifiedDate":"2021-09-03"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"    private void sendMessageFromDuke(String text) {","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"                DialogBox.getDukeDialog(text, dukeImage)","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"    private void terminate() {","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"        sendMessageFromDuke(Ui.CLOSING_STATEMENT);","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"        //set timeout eqv?","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"        Platform.exit();","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-09-03"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-03"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-03"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-09-03"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"    @FXML","lastModifiedDate":"2021-09-03"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-03"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-03"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-03"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"        //handles termination command \"bye\"","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            this.terminate();","lastModifiedDate":"2021-09-04"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-03"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-03"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-03"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-09-03"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-03"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-09-03"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"samyipsh":73}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.exception;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"public class DukeException extends IllegalArgumentException {","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"    private final String MESSAGE_REPLY;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"     * Factory method of DukeException which takes in the invalidInput","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"     * and a messageReply","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"     * @param invalidInput invalid user input which triggered exception","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"     * @param messageReply message to reply user triggered exception","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"     * @return DukeException instance","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    public static DukeException of(String invalidInput, String messageReply) {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"        return new DukeException(invalidInput, messageReply);","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"     * Factory method of DukeException which takes in the invalidInput","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"     * @param userInput invalid user input which couldn\u0027t be parsed","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"     * @return DukeException instance","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    public static DukeException of(String userInput) {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        String reply \u003d DukeException.replyInput(userInput);","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        return new DukeException(userInput, reply);","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"     * Constructor for DukeException class which takes in the invalidInput","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"     * and a messageReply","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"     * @param invalidInput invalid user input which triggered exception","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"     * @param messageReply message to reply user triggered exception","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"    private DukeException(String invalidInput, String messageReply) {","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"        super(invalidInput);","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"        this.MESSAGE_REPLY \u003d messageReply;","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"    private static String replyInput(String userInput) {","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"        String defaultReply \u003d \"Invalid input!\\n\" +","lastModifiedDate":"2021-08-20"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"            \"    Available commands: [todo, deadline, event, list, bye]\";","lastModifiedDate":"2021-08-20"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"        if (userInput.matches(\"\\\\w+\\\\s*\")) {","lastModifiedDate":"2021-08-20"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"            String inputWord \u003d userInput.split(\" \", 2)[0].toLowerCase();","lastModifiedDate":"2021-08-20"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"            switch (inputWord) {","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"            case \"todo\":","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"                return ToDo.syntax();","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"            case \"deadline\":","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"                return Deadline.syntax();","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"            case \"event\":","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"                return Event.syntax();","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"            default:","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"                return defaultReply;","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"            }","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"        } else {","lastModifiedDate":"2021-08-20"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"            return defaultReply;","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"        return this.MESSAGE_REPLY;","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-20"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"samyipsh":71}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"    public static final String SYMBOL \u003d \"D\";","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"    public static final String COMMAND_REGEX \u003d \"deadline \\\\w[\\\\w, ]+\\\\w \\\\/by \\\\w[\\\\w,\\\\-, ]*\";","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    private String userInputDeadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    private LocalDateTime dateTimeDeadline;","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    private LocalDateTime dateTimeTaskCreation;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"        DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\");","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"     * Factory method of Deadline class","lastModifiedDate":"2021-08-31"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"     * @param taskSummary task description","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"     * @param byDate","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"     * @return","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    public static Deadline of(String taskSummary, String byDate) {","lastModifiedDate":"2021-08-20"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"        return new Deadline(taskSummary, byDate);","lastModifiedDate":"2021-08-20"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"     * Constructor for Deadline class.","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"     * @param taskSummary task description","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"     * @param byDate String detailing date and time of event. Must follow syntax \"dd-MM-uuuu HHmm\"","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"    public Deadline(String taskSummary, String byDate) {","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        super(taskSummary);","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        this.userInputDeadline \u003d byDate;","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"        this.dateTimeTaskCreation \u003d LocalDateTime.now();","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"        this.updateDateTimeDeadline(byDate);","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"     * Factory method of Deadline class.","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"     * Takes in a String, parses it and returns the Deadline instance it represented","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"     * @param storageLine string representing task","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"     * @return Deadline instance which the string represented","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"    public static Deadline parse(String storageLine) {","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"        //example line: \"D | 0 | work | 01-06-2020 1430\"","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"        String[] args \u003d storageLine.split(\" \\\\| \");","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"        if (args.length !\u003d 4) {","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"            throw new IllegalArgumentException(\"storage line passed in doesnt have enough arguments\");","lastModifiedDate":"2021-08-27"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"        Deadline loadedTask \u003d new Deadline(args[2], args[3]);","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"        boolean completed \u003d args[1].equals(\"1\");","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"        if (completed) {","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"            loadedTask.markCompleted();","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"        return loadedTask;","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"    private void updateDateTimeDeadline(String byDate) {","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            LocalDateTime parsedDateTime \u003d Deadline.stringToLocalDateTime(byDate);","lastModifiedDate":"2021-08-27"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"            // replace buggy code","lastModifiedDate":"2021-08-31"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"            // prob: after deadline passed, when its in the store, loading it will cause an exception to be thrown","lastModifiedDate":"2021-08-31"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"//            if (parsedDateTime.isBefore(dateTimeTaskCreation)) {","lastModifiedDate":"2021-08-31"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"//                throw new IllegalArgumentException(\"Time of deadline is in the past!\");","lastModifiedDate":"2021-08-31"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"//            }","lastModifiedDate":"2021-08-31"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"            this.dateTimeDeadline \u003d parsedDateTime;","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"            throw DukeException.of(\"date\",","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"    String.format(\"Invalid date \u0026 time passed (\u0027%s\u0027)\\n\\n\", byDate) + Deadline.syntax());","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"            throw DukeException.of(\"date\",","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"    String.format(\"Invalid date \u0026 time passed (\u0027%s\u0027)\\n\\n\", byDate) + e.getMessage());","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"    private static LocalDateTime stringToLocalDateTime(String text) {","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"        return LocalDateTime.parse(text, Deadline.DATE_TIME_FORMATTER);","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":84,"author":{"gitId":"samyipsh"},"content":"    private static String localDateTimeToString(LocalDateTime localDateTime) {","lastModifiedDate":"2021-08-27"},{"lineNumber":85,"author":{"gitId":"samyipsh"},"content":"        return localDateTime.format(Deadline.DATE_TIME_FORMATTER);","lastModifiedDate":"2021-08-27"},{"lineNumber":86,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":87,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"samyipsh"},"content":"     * Returns a string detailing the syntax of the ToDo command","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"samyipsh"},"content":"     * @return helper text of correct syntax","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"samyipsh"},"content":"    public static String syntax() {","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"samyipsh"},"content":"        return \"deadline command syntax: \\n\" +","lastModifiedDate":"2021-08-27"},{"lineNumber":95,"author":{"gitId":"samyipsh"},"content":"                \"    \u0027deadline \u003ctask\u003e /by dd-MM-yyyy HHmm\u0027\\n\" +","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"samyipsh"},"content":"                \"Eg. \u0027deadline project /by 01-01-2020 2359\u0027\";","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"samyipsh"},"content":"     * Converts an Task instance to a string to be stored.","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"samyipsh"},"content":"     * @return line of text detailing task details.","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"samyipsh"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"samyipsh"},"content":"            \"%s | %d | %s | %s\",","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"samyipsh"},"content":"            Deadline.SYMBOL, this.isCompleted() ? 1 : 0,this.getTaskSummary(), this.userInputDeadline","lastModifiedDate":"2021-08-27"},{"lineNumber":109,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"samyipsh"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"samyipsh"},"content":"        if (obj instanceof Deadline) {","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"samyipsh"},"content":"            Deadline deadline \u003d (Deadline) obj;","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"samyipsh"},"content":"            boolean isDescSame \u003d deadline.getTaskSummary().equals(this.getTaskSummary());","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"samyipsh"},"content":"            boolean isDeadlineSame \u003d deadline.dateTimeDeadline.equals(this.dateTimeDeadline);","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"samyipsh"},"content":"            return isDescSame \u0026\u0026 isDeadlineSame;","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"samyipsh"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":122,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":124,"author":{"gitId":"samyipsh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":125,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-20"},{"lineNumber":126,"author":{"gitId":"samyipsh"},"content":"            \"[%s][%s] %s (by: %s)\",","lastModifiedDate":"2021-08-20"},{"lineNumber":127,"author":{"gitId":"samyipsh"},"content":"            Deadline.SYMBOL,","lastModifiedDate":"2021-08-27"},{"lineNumber":128,"author":{"gitId":"samyipsh"},"content":"            this.isCompleted() ? \"X\" : \"\",","lastModifiedDate":"2021-08-20"},{"lineNumber":129,"author":{"gitId":"samyipsh"},"content":"            this.getTaskSummary(),","lastModifiedDate":"2021-08-20"},{"lineNumber":130,"author":{"gitId":"samyipsh"},"content":"            Deadline.localDateTimeToString(this.dateTimeDeadline)","lastModifiedDate":"2021-08-27"},{"lineNumber":131,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-20"},{"lineNumber":132,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":133,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"samyipsh":133}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"    public static final String SYMBOL \u003d \"E\";","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"    public static final String COMMAND_REGEX \u003d \"event \\\\w[\\\\w, ]+\\\\w \\\\/at \\\\w[\\\\w, ]*\";","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"    private String eventTime;","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"    public static Event of(String taskSummary, String eventTime) {","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"        return new Event(taskSummary, eventTime);","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"     * Factory method of Event class.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"     * Takes in a String, parses it and returns the Event instance it represented","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"     * @param storageLine string representing task","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"     * @return Event instance which the string represented","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    public static Event parse(String storageLine) {","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"        //example line: \"E | 0 | party | house\"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"        String[] args \u003d storageLine.split(\" \\\\| \");","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"        if (args.length !\u003d 4) {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"            throw new IllegalArgumentException(\"storage line passed in doesnt have enough arguments\");","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"        Event loadedEvent \u003d new Event(args[2], args[3]);","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        boolean completed \u003d args[1].equals(\"1\");","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"        if (completed) {","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"            loadedEvent.markCompleted();","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"        return loadedEvent;","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"    public Event(String taskSummary, String eventTime) {","lastModifiedDate":"2021-08-20"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        super(taskSummary);","lastModifiedDate":"2021-08-20"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-08-20"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"     * Returns a string detailing the syntax of the Event command","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"     * @return helper text of correct syntax","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"    public static String syntax() {","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"        return \"event command syntax: \u0027event \u003ctask\u003e /at \u003ceventTime\u003e\u0027\";","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"     * Converts an Task instance to a string to be stored.","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"     * @return line of text detailing task details.","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"            \"%s | %d | %s | %s\",","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"            Event.SYMBOL, this.isCompleted() ? 1 : 0, this.getTaskSummary(), this.eventTime","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"        if (obj instanceof Event) {","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"            Event event \u003d (Event) obj;","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            boolean isDescSame \u003d event.getTaskSummary().equals(this.getTaskSummary());","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"            boolean isTimeSame \u003d event.eventTime.equals(this.eventTime);","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"            return isDescSame \u0026\u0026 isTimeSame;","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-20"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-20"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-20"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"            \"[%s][%s] %s (at: %s)\",","lastModifiedDate":"2021-08-20"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"            Event.SYMBOL,","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"            this.isCompleted() ? \"X\" : \"\",","lastModifiedDate":"2021-08-20"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"            this.getTaskSummary(),","lastModifiedDate":"2021-08-20"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"            this.eventTime","lastModifiedDate":"2021-08-20"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-20"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-20"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"samyipsh":81}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import java.util.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"    private String taskSummary;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"     * Constructor for Task class.","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"     * Protected access modifier so that extending classes can call it.","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"     * @param taskSummary description of task","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"    protected Task(String taskSummary) {","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"        this.taskSummary \u003d taskSummary;","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"     * Factory method of Task class.","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"     * Takes in a String, parses it and returns the Task it represented","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"     * @param storageLine string representing task","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"     * @return Task which the string represented","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    public static Task parseLine(String storageLine) {","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        String taskSymbol \u003d Character.toString(storageLine.charAt(0));","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        switch (taskSymbol) {","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"        case \"T\":","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"            return ToDo.parse(storageLine);","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"        case \"E\":","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"            return Event.parse(storageLine);","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        case \"D\":","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"            return Deadline.parse(storageLine);","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"        default:","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"            throw new IllegalArgumentException(\"Should not enter here\");","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"     * @return \"x\" or \"\" depending on whether task is complete","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"    public String completeStatus() {","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"        return this.isDone ? \"x\" : \"\";","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"    //setter","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"    public void markCompleted() {","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"    //getters","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"    public String getTaskSummary() {","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"        return this.taskSummary;","lastModifiedDate":"2021-08-19"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"    //helper function","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"    public boolean isInTaskSummary(String keyword) {","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"        String[] keywords \u003d this.taskSummary.split(\" \");","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"        return keywordList.contains(keyword);","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"    //only for purpose of polymorphism, change to abstract?","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"            \"? | %d | %s \",","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"            this.isCompleted() ? 1 : 0,","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"            this.getTaskSummary()","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"        return String.format(\"[GENERIC TASK] [%s] %s\", this.completeStatus(),this.taskSummary);","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"samyipsh":83}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.util.Storage;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import java.io.File;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import java.util.List;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"public final class TaskList {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"    private final ArrayList\u003cTask\u003e TASKS;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"    private final Storage STORAGE_FILE;","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"    public static final String DONE_COMMAND_REGEX \u003d \"done [0-9]{1,2}\";","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"    public static final String DELETE_COMMAND_REGEX \u003d \"delete [0-9]{1,2}\";","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    public static final String FIND_COMMAND_REGEX \u003d \"find \\\\w+\";","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    //parse in Files containing Strings (line) of duke.task representation","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"    public static TaskList of(Storage storageFile) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"        File tasksStorageFile \u003d storageFile.getFile();","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"            Scanner sc \u003d new Scanner(tasksStorageFile);","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"                String line \u003d sc.nextLine();","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"                //can\u0027t use polymorphism because parseLine has to be static method","lastModifiedDate":"2021-08-31"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"                Task task \u003d Task.parseLine(line);","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"                tasks.add(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        return new TaskList(tasks, storageFile);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"    private TaskList(ArrayList\u003cTask\u003e tasks, Storage storageFile) {","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"        this.STORAGE_FILE \u003d storageFile;","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"        this.TASKS \u003d tasks;","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-20"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"        this.TASKS.add(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"        this.updateStore();","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"    public Task get(int idx) {","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"        return this.TASKS.get(idx);","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"    public int length() {","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"        return TASKS.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"    public void toggleDone(int idx) {","lastModifiedDate":"2021-08-19"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"        if (isValidIndex(idx, TASKS.size())) {","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"            TASKS.get(idx).markCompleted();","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-20"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-20"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"    public void removeTask(int idx) {","lastModifiedDate":"2021-08-20"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"        if (isValidIndex(idx, TASKS.size())) {","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"            TASKS.remove(idx);","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"        this.updateStore();","lastModifiedDate":"2021-08-27"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"    private void updateStore() {","lastModifiedDate":"2021-08-27"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"        this.STORAGE_FILE.write(this.TASKS);","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"    public static boolean isValidIndex(int idxFrom0, int numOfTasks) {","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"        if (idxFrom0 \u003c 0 || idxFrom0 \u003e\u003d numOfTasks) {","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"            throw new IllegalArgumentException(\"task index passed in out of range\");","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-19"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"        return true;","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"     * Filters the TaskList and returns all indexes of task which fulfil condition.","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"samyipsh"},"content":"     * Frequent use with selectedTasks() to print tasks.","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"samyipsh"},"content":"     * @param predicate Function condition which must be fulfilled by task for its index to be returned","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"samyipsh"},"content":"     * @return Array of integers (idx from 0) of tasks which fulfil predicate","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"samyipsh"},"content":"    public Integer[] filter(Function\u003cTask, Boolean\u003e predicate) {","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"samyipsh"},"content":"        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"samyipsh"},"content":"        int numOfTasks \u003d this.TASKS.size();","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"samyipsh"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"samyipsh"},"content":"            Task currTask \u003d this.TASKS.get(i);","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"samyipsh"},"content":"            if (predicate.apply(currTask)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"samyipsh"},"content":"                result.add(i);","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"samyipsh"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"samyipsh"},"content":"        Integer[] res \u003d result.toArray(new Integer[0]);","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"samyipsh"},"content":"        return res;","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"samyipsh"},"content":"    public String selectedTasks(Integer[] indexesFrom0) {","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"samyipsh"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"samyipsh"},"content":"        int numOfTasks \u003d this.TASKS.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":104,"author":{"gitId":"samyipsh"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"samyipsh"},"content":"            List\u003cInteger\u003e listOfIndexesFrom1 \u003d Arrays.asList(indexesFrom0);","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"samyipsh"},"content":"            if (listOfIndexesFrom1.contains(i)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"samyipsh"},"content":"                result.append(String.format(\"%d: %s\\n\", i + 1, this.TASKS.get(i).toString()));","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"samyipsh"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"samyipsh"},"content":"        return result.toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":112,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"samyipsh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"samyipsh"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"samyipsh"},"content":"        int numOfTasks \u003d this.TASKS.size();","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"samyipsh"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"samyipsh"},"content":"            int idxFrom1 \u003d i + 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"samyipsh"},"content":"            result.append(String.format(\"%d: %s\\n\", idxFrom1, this.TASKS.get(i).toString()));","lastModifiedDate":"2021-08-28"},{"lineNumber":120,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":121,"author":{"gitId":"samyipsh"},"content":"        return result.toString();","lastModifiedDate":"2021-08-28"},{"lineNumber":122,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":123,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"samyipsh":123}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"    public static final String SYMBOL \u003d \"T\";","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"    public static final String COMMAND_REGEX \u003d \"todo \\\\w+.*\";","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"     * Factory method of ToDo class","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"     * @param taskSummary task description","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    public static ToDo of(String taskSummary) {","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"        return new ToDo(taskSummary);","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"     * Factory method of ToDo class.","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"     * Takes in a String, parses it and returns the ToDo instance it represented","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"     * @param storageLine string representing task","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"     * @return ToDo instance which the string represented","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    public static ToDo parse(String storageLine) {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"        //eg. \"T | 0 | eat\"","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"        String[] args \u003d storageLine.split(\" \\\\| \");","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"        if (args.length !\u003d 3) {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"            throw new IllegalArgumentException(\"storage line passed in doesnt have enough arguments\");","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"        ToDo loadedToDo \u003d new ToDo(args[2]);","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        boolean completed \u003d args[1].equals(\"1\");","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"        if (completed) {","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"            loadedToDo.markCompleted();","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        return loadedToDo;","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"     * Constructor for ToDo class","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"     * @param taskSummary task description","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"    public ToDo(String taskSummary) {","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"        super(taskSummary);","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"     * Returns a string detailing the syntax of the ToDo command","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"     * @return helper text of correct syntax","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"    public static String syntax() {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"        return \"todo command syntax: \u0027todo \u003ctask\u003e\u0027\";","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"     * Converts an Task instance to a string to be stored.","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"     * @return line of text detailing task details.","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"    public String toStorageFormat() {","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"            \"%s | %d | %s\",","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            ToDo.SYMBOL, this.isCompleted() ? 1 : 0,","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"            this.getTaskSummary()","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"        if (obj instanceof ToDo) {","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"            ToDo toDo \u003d (ToDo) obj;","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"            return toDo.getTaskSummary().equals(this.getTaskSummary());","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"        return false;","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"        return String.format(","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"            \"[%s][%s] %s\",","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"            ToDo.SYMBOL,","lastModifiedDate":"2021-08-27"},{"lineNumber":83,"author":{"gitId":"samyipsh"},"content":"            this.isCompleted() ? \"X\" : \"\",","lastModifiedDate":"2021-08-19"},{"lineNumber":84,"author":{"gitId":"samyipsh"},"content":"            this.getTaskSummary()","lastModifiedDate":"2021-08-19"},{"lineNumber":85,"author":{"gitId":"samyipsh"},"content":"        );","lastModifiedDate":"2021-08-19"},{"lineNumber":86,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"samyipsh":87}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.util;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"public class Parser {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    private final TaskList TASKLIST;","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"     * Factory method of Parser class. Initializes tasklist.","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"     * @param taskList TaskList the commands will be working on","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    public static Parser initialize(TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"        return new Parser(taskList);","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"     * Constructor for Parser class","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"     * @param taskList TaskList the commands will be working on","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    private Parser(TaskList taskList) {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        this.TASKLIST \u003d taskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"     * Parses string command and returns system reply","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"     * @return System\u0027s reply message to user input","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"    public String parseCommand(String userInput) {","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        if (userInput.equals(\"list\")) {","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"            return String.format(","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"                    \"Here are the tasks in your list:\\n%s\",","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"                    TASKLIST.toString()","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"            );","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"        } else if (userInput.matches(TaskList.FIND_COMMAND_REGEX)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"            //eg. find \u003cword\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"            String keyword \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"            Integer[] indexesFrom0 \u003d TASKLIST.filter((task) -\u003e task.isInTaskSummary(keyword));","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"            String res \u003d TASKLIST.selectedTasks(indexesFrom0);","lastModifiedDate":"2021-08-28"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"            return String.format(\"Here are the matching tasks in your list:\\n%s\", res);","lastModifiedDate":"2021-08-28"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"        } else if (userInput.matches(TaskList.DONE_COMMAND_REGEX)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"            //eg. done 12","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"            //limiting tasks from 0-99","lastModifiedDate":"2021-08-28"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"            String inputBody \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"            int idxFrom0 \u003d Integer.parseInt(inputBody) - 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"            if (TaskList.isValidIndex(idxFrom0, TASKLIST.length())) {","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"                TASKLIST.toggleDone(idxFrom0);","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"                return String.format(","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"                        \"Nice! I\u0027ve marked this task as done:\\n    %s\",","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"                        TASKLIST.get(idxFrom0).toString()","lastModifiedDate":"2021-08-28"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"                );","lastModifiedDate":"2021-08-28"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"        } else if (userInput.matches(TaskList.DELETE_COMMAND_REGEX)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"            //eg. delete 3","lastModifiedDate":"2021-08-28"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"            String inputBody \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            int idxFrom0 \u003d Integer.parseInt(inputBody) - 1;","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"            if (TaskList.isValidIndex(idxFrom0, TASKLIST.length())) {","lastModifiedDate":"2021-08-28"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"                String reply \u003d String.format(","lastModifiedDate":"2021-08-28"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"                        \"Noted. I\u0027ve removed this task:\\n    %s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"                        TASKLIST.get(idxFrom0).toString(),","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"                        TASKLIST.length() - 1","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"                );","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"                TASKLIST.removeTask(idxFrom0);","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"                return reply;","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"            }","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"        } else if (userInput.matches(ToDo.COMMAND_REGEX)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"            //eg. todo read book","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"            String inputBody \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"            Task newTask \u003d ToDo.of(inputBody);","lastModifiedDate":"2021-08-28"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"            String reply \u003d String.format(","lastModifiedDate":"2021-08-28"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"                    \"Got it! I\u0027ve added this task:\\n %s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"                    newTask.toString(),","lastModifiedDate":"2021-08-28"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"                    TASKLIST.length() + 1","lastModifiedDate":"2021-08-28"},{"lineNumber":83,"author":{"gitId":"samyipsh"},"content":"            );","lastModifiedDate":"2021-08-28"},{"lineNumber":84,"author":{"gitId":"samyipsh"},"content":"            TASKLIST.addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":85,"author":{"gitId":"samyipsh"},"content":"            return reply;","lastModifiedDate":"2021-08-28"},{"lineNumber":86,"author":{"gitId":"samyipsh"},"content":"        } else if (userInput.matches(Deadline.COMMAND_REGEX)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":87,"author":{"gitId":"samyipsh"},"content":"            //eg. deadline xxx /by dd-MM-uuuu HHmm","lastModifiedDate":"2021-08-28"},{"lineNumber":88,"author":{"gitId":"samyipsh"},"content":"            String inputBody \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":89,"author":{"gitId":"samyipsh"},"content":"            String[] deadlineDetails \u003d inputBody.split(\"\\\\s/by\\\\s\", 2);","lastModifiedDate":"2021-09-01"},{"lineNumber":90,"author":{"gitId":"samyipsh"},"content":"            String deadlineTask \u003d deadlineDetails[0];","lastModifiedDate":"2021-08-28"},{"lineNumber":91,"author":{"gitId":"samyipsh"},"content":"            String deadlineByDate \u003d deadlineDetails[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":92,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":93,"author":{"gitId":"samyipsh"},"content":"            Task newTask \u003d Deadline.of(deadlineTask, deadlineByDate);","lastModifiedDate":"2021-08-28"},{"lineNumber":94,"author":{"gitId":"samyipsh"},"content":"            String reply \u003d String.format(","lastModifiedDate":"2021-08-28"},{"lineNumber":95,"author":{"gitId":"samyipsh"},"content":"                    \"Got it! I\u0027ve added this task:\\n %s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":96,"author":{"gitId":"samyipsh"},"content":"                    newTask.toString(),","lastModifiedDate":"2021-08-28"},{"lineNumber":97,"author":{"gitId":"samyipsh"},"content":"                    TASKLIST.length()  + 1","lastModifiedDate":"2021-08-28"},{"lineNumber":98,"author":{"gitId":"samyipsh"},"content":"            );","lastModifiedDate":"2021-08-28"},{"lineNumber":99,"author":{"gitId":"samyipsh"},"content":"            TASKLIST.addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":100,"author":{"gitId":"samyipsh"},"content":"            return reply;","lastModifiedDate":"2021-08-28"},{"lineNumber":101,"author":{"gitId":"samyipsh"},"content":"        } else if (userInput.matches(Event.COMMAND_REGEX)) {","lastModifiedDate":"2021-08-28"},{"lineNumber":102,"author":{"gitId":"samyipsh"},"content":"            //eg. event xxx /by xxx","lastModifiedDate":"2021-08-28"},{"lineNumber":103,"author":{"gitId":"samyipsh"},"content":"            String inputBody \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":104,"author":{"gitId":"samyipsh"},"content":"            String[] eventDetails \u003d inputBody.split(\"\\\\s/at\\\\s\", 2);","lastModifiedDate":"2021-09-01"},{"lineNumber":105,"author":{"gitId":"samyipsh"},"content":"            String eventTask \u003d eventDetails[0];","lastModifiedDate":"2021-08-28"},{"lineNumber":106,"author":{"gitId":"samyipsh"},"content":"            String eventTime \u003d eventDetails[1];","lastModifiedDate":"2021-08-28"},{"lineNumber":107,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":108,"author":{"gitId":"samyipsh"},"content":"            Task newTask \u003d Event.of(eventTask, eventTime);","lastModifiedDate":"2021-08-28"},{"lineNumber":109,"author":{"gitId":"samyipsh"},"content":"            String reply \u003d String.format(","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"samyipsh"},"content":"                    \"Got it! I\u0027ve added this task:\\n %s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2021-08-28"},{"lineNumber":111,"author":{"gitId":"samyipsh"},"content":"                    newTask.toString(),","lastModifiedDate":"2021-08-28"},{"lineNumber":112,"author":{"gitId":"samyipsh"},"content":"                    TASKLIST.length()  + 1","lastModifiedDate":"2021-08-28"},{"lineNumber":113,"author":{"gitId":"samyipsh"},"content":"            );","lastModifiedDate":"2021-08-28"},{"lineNumber":114,"author":{"gitId":"samyipsh"},"content":"            TASKLIST.addTask(newTask);","lastModifiedDate":"2021-08-28"},{"lineNumber":115,"author":{"gitId":"samyipsh"},"content":"            return reply;","lastModifiedDate":"2021-08-28"},{"lineNumber":116,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-28"},{"lineNumber":117,"author":{"gitId":"samyipsh"},"content":"        throw DukeException.of(userInput);","lastModifiedDate":"2021-08-28"},{"lineNumber":118,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":119,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":119}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.util;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"public class Storage {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    private String filePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    private File dir;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    private File file;","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"    private FileWriter fw;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"     * Constructor for Storage class.","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"     * Initializes storage file.","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"     * @param filePathToStorageFile file path to the file used for storing details","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    public Storage(String filePathToStorageFile) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"        this.filePath \u003d filePathToStorageFile;","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"        this.file \u003d new File(this.filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"        this.dir \u003d this.file.getParentFile(); //may be null","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"        //create directory and file if doesnt exist","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        if (!this.dir.exists()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"            dir.mkdirs();","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        if (!this.file.exists()) {","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"            createFile(this.file);","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"     * Creates file. Handles IO exception and prints stack trace.","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"     * @param file storage file of type File","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"    public void createFile(File file) {","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"            file.createNewFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"    //getter","lastModifiedDate":"2021-08-28"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"    public File getFile() {","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"        return this.file;","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"     * Writes text to the file initialized.","lastModifiedDate":"2021-08-28"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"     * @param text text to be written to file","lastModifiedDate":"2021-08-28"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"    public void write(String text)  {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"            this.fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"            fw.write(text);","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"            fw.close();","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"     * Converts tasks into text and writes it to the file initialized.","lastModifiedDate":"2021-08-28"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"     * @param tasks Tasks to be written to file","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"    public void write(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-27"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"        String text \u003d tasks","lastModifiedDate":"2021-08-27"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"                .stream()","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"                .map(Task::toStorageFormat)","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"                .reduce(\"\",","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"                    (stringRes, stringTask) -\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"                        stringRes + stringTask + System.getProperty(\"line.separator\"));","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"        this.write(text);","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"samyipsh":82}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.util;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"/**","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":" * Class wrapping all User Interface related functions and details","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":" */","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"public class Ui {","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"    private boolean isRunning;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"//    private Scanner sc;","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    private static final String INDENT \u003d \"    \";","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    private static final String TOP_BORDER \u003d \"____________________________________\";","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    private static final String BOTTOM_BORDER \u003d \"------------------------------------\";","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"    public static final String LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"                                    + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"                                    + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"                                    + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    public static final String WELCOME_STATEMENT \u003d \"Hello! How would you like to manage your tasks today?\\n\";","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"    public static final String CLOSING_STATEMENT \u003d \"Bye, hope to see you again! :)\";","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"     * Constructor for Ui class. Prints welcome message.","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"    public Ui() {","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"        this.start();","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        printFormatted(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"     * Starts the Ui and begins accepting inputs.","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"    public void start() {","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"//        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        this.isRunning \u003d true;","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"     * Closes the Ui and stops accepting inputs.","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"    public void close() {","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"//        sc.close();","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"        this.isRunning \u003d false;","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"        printFormatted(CLOSING_STATEMENT);","lastModifiedDate":"2021-08-28"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"//    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"//     * Returns user inputted command.","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"//     *","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"//     * @return user inputted command","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"//     */","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"//    public String readCommand() {","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"samyipsh"},"content":"//        return sc.nextLine();","lastModifiedDate":"2021-09-04"},{"lineNumber":54,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-04"},{"lineNumber":55,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"samyipsh"},"content":"//    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":57,"author":{"gitId":"samyipsh"},"content":"//     * Checks if user has inputted a command","lastModifiedDate":"2021-09-04"},{"lineNumber":58,"author":{"gitId":"samyipsh"},"content":"//     *","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"samyipsh"},"content":"//     * @return boolean representing whether user has inputted a command","lastModifiedDate":"2021-09-04"},{"lineNumber":60,"author":{"gitId":"samyipsh"},"content":"//     */","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"samyipsh"},"content":"//    public boolean isPendingReply() {","lastModifiedDate":"2021-09-04"},{"lineNumber":62,"author":{"gitId":"samyipsh"},"content":"//        return sc.hasNext();","lastModifiedDate":"2021-09-04"},{"lineNumber":63,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-04"},{"lineNumber":64,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":65,"author":{"gitId":"samyipsh"},"content":"//    //getter","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"samyipsh"},"content":"//    public boolean isRunning() {","lastModifiedDate":"2021-09-04"},{"lineNumber":67,"author":{"gitId":"samyipsh"},"content":"//        return this.isRunning;","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-09-04"},{"lineNumber":69,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":70,"author":{"gitId":"samyipsh"},"content":"    /**","lastModifiedDate":"2021-08-28"},{"lineNumber":71,"author":{"gitId":"samyipsh"},"content":"     * Helper function to print text in formatted manner","lastModifiedDate":"2021-08-28"},{"lineNumber":72,"author":{"gitId":"samyipsh"},"content":"     *","lastModifiedDate":"2021-08-28"},{"lineNumber":73,"author":{"gitId":"samyipsh"},"content":"     * @param text text to be printed","lastModifiedDate":"2021-08-28"},{"lineNumber":74,"author":{"gitId":"samyipsh"},"content":"     */","lastModifiedDate":"2021-08-28"},{"lineNumber":75,"author":{"gitId":"samyipsh"},"content":"    public static void printFormatted(String text) {","lastModifiedDate":"2021-08-27"},{"lineNumber":76,"author":{"gitId":"samyipsh"},"content":"        String textWithBorders \u003d TOP_BORDER + \"\\n\"+  text + \"\\n\" + BOTTOM_BORDER + \"\\n\";","lastModifiedDate":"2021-08-28"},{"lineNumber":77,"author":{"gitId":"samyipsh"},"content":"        String[] lines \u003d textWithBorders.split(\"\\n\");","lastModifiedDate":"2021-08-27"},{"lineNumber":78,"author":{"gitId":"samyipsh"},"content":"        for (String line : lines) {","lastModifiedDate":"2021-08-27"},{"lineNumber":79,"author":{"gitId":"samyipsh"},"content":"            System.out.println(Ui.INDENT + line);","lastModifiedDate":"2021-08-27"},{"lineNumber":80,"author":{"gitId":"samyipsh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":81,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":82,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"samyipsh":82}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-03"}],"authorContributionMap":{"samyipsh":16}},{"path":"src/main/resources/view/MainWindows.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-03"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"","lastModifiedDate":"2021-09-04"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"            style \u003d \"-fx-border-color: black; -fx-background-color: grey;\"\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"                   stylesheets \u003d \"@style.css\"/\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"\u003c!--        \u003c/TextField\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"            \u003c/content\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-03"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-09-04"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.geometry.Insets?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.scene.control.Button?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.scene.control.ScrollPane?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.scene.control.TextField?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.scene.layout.AnchorPane?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.scene.layout.VBox?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c?import javafx.scene.text.Font?\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003cAnchorPane xmlns:fx \u003d \"http://javafx.com/fxml/1\" maxHeight \u003d \"-Infinity\" maxWidth \u003d \"-Infinity\" minHeight \u003d \"-Infinity\" minWidth \u003d \"-Infinity\" prefHeight \u003d \"600.0\" prefWidth \u003d \"400.0\" style \u003d \"-fx-border-color: black; -fx-background-color: black;\" xmlns \u003d \"http://javafx.com/javafx/11\" fx:controller \u003d \"duke.controller.MainWindow\"\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"\u003c!--    \u003cchildren\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"\u003c!--        \u003cTextField fx:id \u003d \"userInput\" layoutY \u003d \"558.0\" onAction \u003d \"#handleUserInput\" prefHeight \u003d \"40.0\" promptText \u003d \"Enter Command Here ...\" style \u003d \"-fx-background-color: #373e43;\" styleClass \u003d \"text-field\" stylesheets \u003d \"@style.css\" AnchorPane.bottomAnchor \u003d \"1.0\" AnchorPane.leftAnchor \u003d \"1.0\" AnchorPane.rightAnchor \u003d \"75.0\"\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"\u003c!--            \u003cfont\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"\u003c!--                \u003cFont name \u003d \"Consolas\" size \u003d \"12.0\"/\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"\u003c!--            \u003c/font\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"\u003c!--        \u003c/TextField\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"samyipsh"},"content":"\u003c!--        \u003cButton fx:id \u003d \"sendButton\" layoutX \u003d \"324.0\" layoutY \u003d \"558.0\" mnemonicParsing \u003d \"false\" onAction \u003d \"#handleUserInput\" prefHeight \u003d \"40.0\" style \u003d \"-fx-background-color: #373e43;\" text \u003d \"Send\" textAlignment \u003d \"CENTER\" textFill \u003d \"#50ff00\" AnchorPane.bottomAnchor \u003d \"1.0\" AnchorPane.leftAnchor \u003d \"325.0\" AnchorPane.rightAnchor \u003d \"1.0\"/\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"samyipsh"},"content":"\u003c!--        \u003cScrollPane fx:id \u003d \"scrollPane\" fitToHeight \u003d \"true\" fitToWidth \u003d \"true\" hbarPolicy \u003d \"NEVER\" hvalue \u003d \"1.0\" prefHeight \u003d \"560.0\" stylesheets \u003d \"@style.css\" vvalue \u003d \"1.0\" AnchorPane.leftAnchor \u003d \"0.0\" AnchorPane.rightAnchor \u003d \"0.0\" AnchorPane.topAnchor \u003d \"0.0\"\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"samyipsh"},"content":"\u003c!--            \u003ccontent\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"samyipsh"},"content":"\u003c!--                \u003cVBox fx:id \u003d \"dialogContainer\" prefHeight \u003d \"500.0\" prefWidth \u003d \"300.0\" style \u003d \"-fx-background-color: #373e43;\"\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"samyipsh"},"content":"\u003c!--                    \u003copaqueInsets\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"samyipsh"},"content":"\u003c!--                        \u003cInsets/\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"samyipsh"},"content":"\u003c!--                    \u003c/opaqueInsets\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"samyipsh"},"content":"\u003c!--                \u003c/VBox\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"samyipsh"},"content":"\u003c!--            \u003c/content\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"samyipsh"},"content":"\u003c!--        \u003c/ScrollPane\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":51,"author":{"gitId":"samyipsh"},"content":"\u003c!--    \u003c/children\u003e--\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":52,"author":{"gitId":"samyipsh"},"content":"\u003c!--\u003c/AnchorPane\u003e--\u003e","lastModifiedDate":"2021-09-04"}],"authorContributionMap":{"samyipsh":52}},{"path":"src/test/java/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"//public class StorageStub {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"//}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":2}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"    public void randomTest() {","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"        assertEquals(2,2);","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"//    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"//    public void randomTest2() {","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"//        Duke duke \u003d new Duke(\"file\");","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":17}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"    private static final String TIME_IN_FUTURE1 \u003d \"12-12-2025 2359\";","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"    private static final String TIME_IN_FUTURE2 \u003d \"12-12-2026 2359\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameObj_returnTrue() {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline1 \u003d Deadline.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline2 \u003d Deadline.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"        assertEquals(deadline1.equals(deadline2), true);","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameTypeDiffDesc_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline1 \u003d Deadline.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline2 \u003d Deadline.of(\"Peel a banana\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"        assertEquals(deadline1.equals(deadline2), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameTypeDiffTime_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline1 \u003d Deadline.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline2 \u003d Deadline.of(\"Eat a potato\", TIME_IN_FUTURE2);","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"        assertEquals(deadline1.equals(deadline2), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_diffTaskObj_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        Deadline deadline1 \u003d Deadline.of(\"Eat a banana\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo1 \u003d ToDo.of(\"Eat a potato\");","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"        assertEquals(deadline1.equals(toDo1), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":39,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":40,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":40}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"public class EventTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"    private static final String TIME_IN_FUTURE1 \u003d \"12-12-2025 2359\";","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"    private static final String TIME_IN_FUTURE2 \u003d \"12-12-2026 2359\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameObj_returnTrue() {","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"        Event event1 \u003d Event.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"        Event event2 \u003d Event.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"        assertEquals(event1.equals(event2), true);","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameTypeDiffDesc_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"        Event event1 \u003d Event.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"        Event event2 \u003d Event.of(\"Eat a banana\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"        assertEquals(event1.equals(event2), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameTypeDiffTime_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        Event event1 \u003d Event.of(\"Eat a potato\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"        Event event2 \u003d Event.of(\"Eat a potato\", TIME_IN_FUTURE2);","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"        assertEquals(event1.equals(event2), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":33,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_diffTaskObj_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":34,"author":{"gitId":"samyipsh"},"content":"        Event event1 \u003d Event.of(\"Eat a banana\", TIME_IN_FUTURE1);","lastModifiedDate":"2021-08-28"},{"lineNumber":35,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo1 \u003d ToDo.of(\"Eat a potato\");","lastModifiedDate":"2021-08-28"},{"lineNumber":36,"author":{"gitId":"samyipsh"},"content":"        assertEquals(event1.equals(toDo1), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":37,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":38,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":38}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.task;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"    private static final String TIME_IN_FUTURE \u003d \"12-12-2025 2359\";","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameObj_returnTrue() {","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo1 \u003d ToDo.of(\"Eat a potato\");","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo2 \u003d ToDo.of(\"Eat a potato\");","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"        assertEquals(toDo1.equals(toDo2), true);","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_sameTypeDiffDesc_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo1 \u003d ToDo.of(\"Eat a potato\");","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo2 \u003d ToDo.of(\"Eat a banana\");","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"        assertEquals(toDo1.equals(toDo2), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"    public void equalsMtd_diffTaskObj_returnFalse() {","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"        ToDo toDo1 \u003d ToDo.of(\"Eat a potato\");","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"        Event event1 \u003d Event.of(\"Eat a banana\", TIME_IN_FUTURE);","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"        assertEquals(toDo1.equals(event1), false);","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"    }","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":29}},{"path":"src/test/java/duke/util/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"package duke.util;","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-08-28"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-28"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-28"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-28"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-28"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"//    @Test","lastModifiedDate":"2021-08-28"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"//    public void parseCommand_incorrectInput_DukeExceptionThrown() {","lastModifiedDate":"2021-08-28"},{"lineNumber":15,"author":{"gitId":"samyipsh"},"content":"//        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"samyipsh"},"content":"//        TaskList taskList \u003d new TaskList()","lastModifiedDate":"2021-08-28"},{"lineNumber":17,"author":{"gitId":"samyipsh"},"content":"//        String[] incorrectInputs \u003d new String[]{","lastModifiedDate":"2021-08-28"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"//                \"hi\",","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"samyipsh"},"content":"//                \"help\",","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"samyipsh"},"content":"//                \"task\",","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"samyipsh"},"content":"//                \"todoo\",","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"samyipsh"},"content":"//                \"del\",","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"samyipsh"},"content":"//                \"asdfgh\"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"samyipsh"},"content":"//        };","lastModifiedDate":"2021-08-28"},{"lineNumber":25,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"samyipsh"},"content":"//        for (String input : incorrectInputs) {","lastModifiedDate":"2021-08-28"},{"lineNumber":27,"author":{"gitId":"samyipsh"},"content":"//            try {","lastModifiedDate":"2021-08-28"},{"lineNumber":28,"author":{"gitId":"samyipsh"},"content":"//","lastModifiedDate":"2021-08-28"},{"lineNumber":29,"author":{"gitId":"samyipsh"},"content":"//            }","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"samyipsh"},"content":"//        }","lastModifiedDate":"2021-08-28"},{"lineNumber":31,"author":{"gitId":"samyipsh"},"content":"//    }","lastModifiedDate":"2021-08-28"},{"lineNumber":32,"author":{"gitId":"samyipsh"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"samyipsh":32}},{"path":"text-ui-test/data/duke-storage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"E | 1 | zoomMeeting | tonight","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"T | 0 | readme","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"E | 0 | zoomMeeting | tonight","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"T | 0 | readme","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"E | 0 | zoomMeeting | tonight","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"T | 0 | readme","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"E | 0 | zoomMeeting | tonight","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"samyipsh":7}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samyipsh"},"content":"list","lastModifiedDate":"2021-08-20"},{"lineNumber":2,"author":{"gitId":"samyipsh"},"content":"nonsene text","lastModifiedDate":"2021-08-20"},{"lineNumber":3,"author":{"gitId":"samyipsh"},"content":"todo","lastModifiedDate":"2021-08-20"},{"lineNumber":4,"author":{"gitId":"samyipsh"},"content":"todo readme","lastModifiedDate":"2021-08-20"},{"lineNumber":5,"author":{"gitId":"samyipsh"},"content":"list","lastModifiedDate":"2021-08-20"},{"lineNumber":6,"author":{"gitId":"samyipsh"},"content":"deadline projSubmission /by yesterday","lastModifiedDate":"2021-08-20"},{"lineNumber":7,"author":{"gitId":"samyipsh"},"content":"event zoomMeeting \\at tonight","lastModifiedDate":"2021-08-20"},{"lineNumber":8,"author":{"gitId":"samyipsh"},"content":"event zoomMeeting /at tonight","lastModifiedDate":"2021-08-20"},{"lineNumber":9,"author":{"gitId":"samyipsh"},"content":"list","lastModifiedDate":"2021-08-20"},{"lineNumber":10,"author":{"gitId":"samyipsh"},"content":"done 2","lastModifiedDate":"2021-08-20"},{"lineNumber":11,"author":{"gitId":"samyipsh"},"content":"list","lastModifiedDate":"2021-08-20"},{"lineNumber":12,"author":{"gitId":"samyipsh"},"content":"delete 1","lastModifiedDate":"2021-08-20"},{"lineNumber":13,"author":{"gitId":"samyipsh"},"content":"list","lastModifiedDate":"2021-08-20"},{"lineNumber":14,"author":{"gitId":"samyipsh"},"content":"bye","lastModifiedDate":"2021-08-20"}],"authorContributionMap":{"samyipsh":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"samyipsh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"samyipsh":1,"-":20}}]

[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"# duke.Duke project template","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"eltonyeh":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"eltonyeh":17,"-":45}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"T | 1 | book","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"D | 1 | project  | 2020-12-22","lastModifiedDate":"2021-09-04"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"D | 0 | e | 2020-01-12","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"eltonyeh":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.command.Command;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import duke.javafx.Main;","lastModifiedDate":"2021-09-04"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-09-04"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":" * A class that encapsulates Duke, a task management bot.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"     * Where the task in stored.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    private final Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     * A task list that store the tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a Duke bot that save its tasks in the {@code tasks.txt} file.","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    public Duke() {","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"        this.storage \u003d new Storage(\"tasks.txt\");","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"        this.tasks \u003d this.storage.parseToTaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-04"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2021-09-04"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-09-04"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"            Command command \u003d Parser.parseCommand(input);","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"            if (command.isExit()) {","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"                Platform.exit();","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"            return command.execute(this.tasks, this.storage);","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"            return e.getMessage();","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"eltonyeh":48,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import duke.command.AddTaskCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import duke.command.ModifyTaskCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"import duke.command.QueryCommand;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"import duke.command.UpdateTaskCommand;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Event;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":" * A class that deal with making sense of the user command.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"public class Parser {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"     * Takes an array of strings as input and check if it makes sense. If it does, parse it into a {@code Task} object","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     * and return it, and if it does not, throw a {@code DukeException}. The array make sense if and only if it is in","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     * the format {@code [taskType, isDone, description, (optional) date]}:","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     * \u003cul\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code taskType}: must be either {@code \"T\"}, {@code \"D\"} or {@code \"E\"};\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code isDone}: must be either {@code 0} or {@code 1};\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code description}: must be non-empty;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code date}: Only needed when {@code taskType} is {@code \"D\"} or {@code \"E\"}. Must be in the format","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"     *     \"YYYY-MM-DD\".\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"     * @param data The string array to be parsed.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"     * @return A {@code Task} object parsed from the input.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the input data does not make sense.","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    public static Task arrayCommandToTask(String[] data) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"        boolean hasValidLength \u003d data.length \u003d\u003d 3 || data.length \u003d\u003d 4;","lastModifiedDate":"2021-09-07"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        boolean hasValidDoneIndicator \u003d data[1].equals(\"0\") || data[1].equals(\"1\");","lastModifiedDate":"2021-09-07"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"        boolean hasDescription \u003d !data[2].trim().isEmpty();","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"        if (!hasValidLength || !hasValidDoneIndicator || !hasDescription) {","lastModifiedDate":"2021-09-07"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"        String proposedType \u003d data[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"        boolean isDone \u003d data[1].equals(\"1\");","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        String description \u003d data[2];","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"        switch (proposedType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"        case \"T\":","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"            if (data.length !\u003d 3) {","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"            return new ToDo(description, isDone);","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"        case \"D\":","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"            if (data.length !\u003d 4) {","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"                return new Deadline(description, isDone, LocalDate.parse(data[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"                throw new DukeException(\"Please use the YYYY-MM-DD format for the time!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"        case \"E\":","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"            if (data.length !\u003d 4) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"                return new Event(description, isDone, LocalDate.parse(data[3]));","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"                throw new DukeException(\"Please use the YYYY-MM-DD format for the time!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"            assert false;","lastModifiedDate":"2021-09-07"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"eltonyeh"},"content":"     * Transforms a description string to a {@code Task} object with the specified task type. If the description does","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"eltonyeh"},"content":"     * not meet the criteria:","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"eltonyeh"},"content":"     * \u003cul\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003efor type {@code TODO}: the description must be non-empty;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003efor type {@code DEADLINE}: the description must be in the format {@code \"(non-empty description) /by","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"eltonyeh"},"content":"     *     (YYYY-MM-DD)\"};\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003efor type {@code DEADLINE}: the description must be in the format {@code \"(non-empty description) /at","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"eltonyeh"},"content":"     *     (YYYY-MM-DD)\"},\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"eltonyeh"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"eltonyeh"},"content":"     * then a {@code DukeException} will be thrown.","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"eltonyeh"},"content":"     * @param type        The task type you want to transform the description to.","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"eltonyeh"},"content":"     * @param description The necessary information to create a {@code Task} object.","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"eltonyeh"},"content":"     * @return A {@code Task} object parsed from the description.","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the description does not make sense.","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"eltonyeh"},"content":"    public static Task descriptionToTask(Task.TaskType type, String description) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"eltonyeh"},"content":"        Task task;","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"eltonyeh"},"content":"        switch (type) {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"eltonyeh"},"content":"        case TODO: {","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"eltonyeh"},"content":"            if (description.trim().isEmpty()) {","lastModifiedDate":"2021-09-07"},{"lineNumber":102,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"eltonyeh"},"content":"            task \u003d new ToDo(description);","lastModifiedDate":"2021-09-07"},{"lineNumber":105,"author":{"gitId":"eltonyeh"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"eltonyeh"},"content":"        case DEADLINE: {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"eltonyeh"},"content":"            if (!description.contains(\"/by \")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":109,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"eltonyeh"},"content":"            String[] information \u003d description.split(\"/by \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"eltonyeh"},"content":"            if (information[0].isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":114,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"eltonyeh"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"eltonyeh"},"content":"                task \u003d new Deadline(information[0], LocalDate.parse(information[1]));","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"eltonyeh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"eltonyeh"},"content":"                throw new DukeException(\"Please use the YYYY-MM-DD format for the time!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":119,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"eltonyeh"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"eltonyeh"},"content":"        case EVENT: {","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"eltonyeh"},"content":"            if (!description.contains(\"/at \")) {","lastModifiedDate":"2021-09-07"},{"lineNumber":124,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-09-07"},{"lineNumber":125,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-09-07"},{"lineNumber":126,"author":{"gitId":"eltonyeh"},"content":"            String[] information \u003d description.split(\"/at \", 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":127,"author":{"gitId":"eltonyeh"},"content":"            if (information[0].isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":128,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"eltonyeh"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"eltonyeh"},"content":"                task \u003d new Event(information[0], LocalDate.parse(information[1]));","lastModifiedDate":"2021-08-27"},{"lineNumber":132,"author":{"gitId":"eltonyeh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"eltonyeh"},"content":"                throw new DukeException(\"Please use the YYYY-MM-DD format for the time!\");","lastModifiedDate":"2021-09-07"},{"lineNumber":134,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"eltonyeh"},"content":"            break;","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"eltonyeh"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"eltonyeh"},"content":"            assert false;","lastModifiedDate":"2021-09-07"},{"lineNumber":139,"author":{"gitId":"eltonyeh"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"eltonyeh"},"content":"        return task;","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"eltonyeh"},"content":"     * Parses the input command and return the corresponding {@code Command}. If the command is invalid, then raises a","lastModifiedDate":"2021-08-27"},{"lineNumber":146,"author":{"gitId":"eltonyeh"},"content":"     * {@code DukeException}.","lastModifiedDate":"2021-08-27"},{"lineNumber":147,"author":{"gitId":"eltonyeh"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"eltonyeh"},"content":"     * The command can be in the following format. Each \"()\" means a non-empty input.","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"eltonyeh"},"content":"     * \u003cul\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code todo (description)}: add a new {@code ToDo} task;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code deadline (description) /by (YYYY-MM-DD)}: add a new {@code Deadline} task;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":152,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code event (description) /at (YYYY-MM-DD)}: add a new {@code Event} task;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":153,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code done (item number)}: mark a certain task as done;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":154,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code delete (item number)}: delete a certain task;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":155,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code query (YYYY-MM-DD)}: query all tasks that will happen or due on a certain day;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":156,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code find (keyword)}: query all tasks that contain the keyword;\u003c/li\u003e","lastModifiedDate":"2021-08-27"},{"lineNumber":157,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code list}: list all the undeleted tasks;\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"eltonyeh"},"content":"     *     \u003cli\u003e{@code bye}: terminate the bot.\u003c/li\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"eltonyeh"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"eltonyeh"},"content":"     * @param command The command to perform certain action.","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException When the command is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":163,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":164,"author":{"gitId":"eltonyeh"},"content":"    public static Command parseCommand(String command) throws DukeException {","lastModifiedDate":"2021-08-27"},{"lineNumber":165,"author":{"gitId":"eltonyeh"},"content":"        command \u003d command.trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":166,"author":{"gitId":"eltonyeh"},"content":"        if (command.contains(\" \")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"eltonyeh"},"content":"            String commandType \u003d command.split(\" \", 2)[0];","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"eltonyeh"},"content":"            String description \u003d command.split(\" \", 2)[1].trim();","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":170,"author":{"gitId":"eltonyeh"},"content":"            switch (commandType) {","lastModifiedDate":"2021-08-25"},{"lineNumber":171,"author":{"gitId":"eltonyeh"},"content":"            case \"todo\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":172,"author":{"gitId":"eltonyeh"},"content":"                return new AddTaskCommand(Task.TaskType.TODO, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":173,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":174,"author":{"gitId":"eltonyeh"},"content":"            case \"deadline\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":175,"author":{"gitId":"eltonyeh"},"content":"                return new AddTaskCommand(Task.TaskType.DEADLINE, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":176,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":177,"author":{"gitId":"eltonyeh"},"content":"            case \"event\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":178,"author":{"gitId":"eltonyeh"},"content":"                return new AddTaskCommand(Task.TaskType.EVENT, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":179,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"eltonyeh"},"content":"            case \"done\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":181,"author":{"gitId":"eltonyeh"},"content":"                return new ModifyTaskCommand(ModifyTaskCommand.CommandType.DONE, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":182,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":183,"author":{"gitId":"eltonyeh"},"content":"            case \"delete\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":184,"author":{"gitId":"eltonyeh"},"content":"                return new ModifyTaskCommand(ModifyTaskCommand.CommandType.DELETE, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":185,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":186,"author":{"gitId":"eltonyeh"},"content":"            case \"query\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":187,"author":{"gitId":"eltonyeh"},"content":"                return new QueryCommand(QueryCommand.CommandType.QUERY, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":188,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":189,"author":{"gitId":"eltonyeh"},"content":"            case \"find\": {","lastModifiedDate":"2021-08-25"},{"lineNumber":190,"author":{"gitId":"eltonyeh"},"content":"                return new QueryCommand(QueryCommand.CommandType.FIND, description);","lastModifiedDate":"2021-08-27"},{"lineNumber":191,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":192,"author":{"gitId":"eltonyeh"},"content":"            case \"update\": {","lastModifiedDate":"2021-09-08"},{"lineNumber":193,"author":{"gitId":"eltonyeh"},"content":"                return new UpdateTaskCommand(description);","lastModifiedDate":"2021-09-08"},{"lineNumber":194,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":195,"author":{"gitId":"eltonyeh"},"content":"            default: {","lastModifiedDate":"2021-08-25"},{"lineNumber":196,"author":{"gitId":"eltonyeh"},"content":"                assert false;","lastModifiedDate":"2021-09-07"},{"lineNumber":197,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":198,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":199,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":200,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":201,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":202,"author":{"gitId":"eltonyeh"},"content":"        switch (command) {","lastModifiedDate":"2021-08-25"},{"lineNumber":203,"author":{"gitId":"eltonyeh"},"content":"        case \"list\":","lastModifiedDate":"2021-08-25"},{"lineNumber":204,"author":{"gitId":"eltonyeh"},"content":"            return new QueryCommand(QueryCommand.CommandType.LIST, \"\");","lastModifiedDate":"2021-08-27"},{"lineNumber":205,"author":{"gitId":"eltonyeh"},"content":"        case \"bye\":","lastModifiedDate":"2021-08-25"},{"lineNumber":206,"author":{"gitId":"eltonyeh"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-08-27"},{"lineNumber":207,"author":{"gitId":"eltonyeh"},"content":"        default:","lastModifiedDate":"2021-08-25"},{"lineNumber":208,"author":{"gitId":"eltonyeh"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-08-25"},{"lineNumber":209,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":210,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":211,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":211}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"import java.util.List;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":" * A class that can store a list of task into a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"public class Storage {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     * The default directory.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    private static final Path DEFAULT_DIR \u003d Paths.get(\"data\");","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     * The file that will be used to store the tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    private final File tasks;","lastModifiedDate":"2021-09-07"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Storage} object that stores tasks in a specific file name. It will create the file or the","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     * necessary directory if they do not exist.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"     * @param fileName The file name.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If unable to find or create a file.","lastModifiedDate":"2021-09-04"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"    public Storage(String fileName) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"            if (!Files.isDirectory(DEFAULT_DIR)) {","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"                Files.createDirectories(DEFAULT_DIR);","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"            Path taskPath \u003d Paths.get(DEFAULT_DIR.toString(), fileName);","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"            if (Files.notExists(taskPath)) {","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"                this.tasks \u003d Files.createFile(taskPath).toFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"                this.tasks \u003d taskPath.toFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"            assert taskPath.toFile().isFile() : \"Unable to find or create a file when calling Storage()!\";","lastModifiedDate":"2021-09-07"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"OOPS!!! Unable to find or create a file!\");","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"     * Parses a certain line in the file to the corresponding task.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"     * @param line The line you want to parse.","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"     * @return A {@code Task} object corresponding to the input line.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"    public static Task lineToTask(String line) {","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"        String[] data \u003d line.split(\" \\\\| \");","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"        return Parser.arrayCommandToTask(data);","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"     * Parses the entire file to a {@code TaskList} by parsing each line to a task. It will return an empty {@code","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"     * TaskList} if anything wrong happens.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"     * @return A {@code TaskList} based on the file content.","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If anything wrong happens.","lastModifiedDate":"2021-09-04"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"    public TaskList parseToTaskList() throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"            List\u003cString\u003e data \u003d Files.readAllLines(tasks.toPath());","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"            data.forEach(x -\u003e result.add(lineToTask(x)));","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2021-09-04"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"            result.clear();","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"OOPS!!! Something wrong happened when reading the file.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"        return new TaskList(result);","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"eltonyeh"},"content":"     * Adds the given task into the file.","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"eltonyeh"},"content":"     * @param task The given task.","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If anything wrong happens.","lastModifiedDate":"2021-09-04"},{"lineNumber":88,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"eltonyeh"},"content":"    public void addTask(Task task) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":90,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"eltonyeh"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.tasks, true);","lastModifiedDate":"2021-08-24"},{"lineNumber":92,"author":{"gitId":"eltonyeh"},"content":"            String line \u003d task.taskToLine();","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"eltonyeh"},"content":"            if (this.tasks.length() \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"eltonyeh"},"content":"                fileWriter.write(line);","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"eltonyeh"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"eltonyeh"},"content":"                fileWriter.write(\"\\n\" + line);","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"eltonyeh"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"eltonyeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"OOPS!!! Something wrong happened when modifying the file.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":101,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"eltonyeh"},"content":"     * Reset the file to make it only contains tasks in the given {@code taskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The {@code taskList} you want to overwrite the file data.","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If anything wrong happens.","lastModifiedDate":"2021-09-04"},{"lineNumber":109,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"eltonyeh"},"content":"    public void refreshTask(TaskList taskList) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":111,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"eltonyeh"},"content":"            int numOfTask \u003d taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"eltonyeh"},"content":"            if (numOfTask \u003d\u003d 0) {","lastModifiedDate":"2021-08-24"},{"lineNumber":114,"author":{"gitId":"eltonyeh"},"content":"                return;","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":116,"author":{"gitId":"eltonyeh"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.tasks);","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"eltonyeh"},"content":"            for (int i \u003d 1; i \u003c numOfTask; i++) {","lastModifiedDate":"2021-08-27"},{"lineNumber":118,"author":{"gitId":"eltonyeh"},"content":"                fileWriter.write(taskList.getTask(i).taskToLine() + \"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":120,"author":{"gitId":"eltonyeh"},"content":"            fileWriter.write(taskList.getTask(numOfTask).taskToLine());","lastModifiedDate":"2021-08-27"},{"lineNumber":121,"author":{"gitId":"eltonyeh"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":122,"author":{"gitId":"eltonyeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":123,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"OOPS!!! Something wrong happened when modifying the file.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":124,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":125,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":126,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"eltonyeh":126}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.IndexMismatchException;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.IndexOutOfBoundException;","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":" * A class that represents a list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"public class TaskList {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     * The list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     * Returns the number of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"     * @return The number of tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"        return this.taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"     * Gets the task with the specific index.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"     * @param index The index of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"     * @return The task with given index.","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"     * @throws IndexOutOfBoundException When the index is out of bound.","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"    public Task getTask(int index) throws IndexOutOfBoundException {","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"            return this.taskList.get(index - 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"            throw new IndexOutOfBoundException();","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"     * Adds a certain task to the list and print out the add message.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"     * @param task The task to be added.","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"     * Removes a certain task from the list and print out the remove message.","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"     * @param index The index of the task item to be removed.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the index is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"    public void removeTask(int index) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"        if (index \u003c\u003d 0) {","lastModifiedDate":"2021-09-07"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"            throw new IndexMismatchException();","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"        if (index \u003e this.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"            throw new IndexOutOfBoundException();","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"        this.taskList.remove(index - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"     * Marks a certain task in the list as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"eltonyeh"},"content":"     * @param item The index of the task item to be marked done.","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the task is already done or the index is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":85,"author":{"gitId":"eltonyeh"},"content":"    public void completeTask(int item) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"eltonyeh"},"content":"        if (item \u003c\u003d 0) {","lastModifiedDate":"2021-09-07"},{"lineNumber":87,"author":{"gitId":"eltonyeh"},"content":"            throw new IndexMismatchException();","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"eltonyeh"},"content":"        if (item \u003e this.taskList.size()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"eltonyeh"},"content":"            throw new IndexOutOfBoundException();","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"eltonyeh"},"content":"        Task task \u003d this.taskList.get(item - 1);","lastModifiedDate":"2021-08-27"},{"lineNumber":93,"author":{"gitId":"eltonyeh"},"content":"        if (task.isDone()) {","lastModifiedDate":"2021-08-27"},{"lineNumber":94,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"OOPS!!! The task is already done!\");","lastModifiedDate":"2021-09-04"},{"lineNumber":95,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"eltonyeh"},"content":"        task.setDone(true);","lastModifiedDate":"2021-08-27"},{"lineNumber":97,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":98,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"eltonyeh"},"content":"     * Transforms the list to a string list and store it in the {@code StringBuilder}. If the list is empty, then it","lastModifiedDate":"2021-08-25"},{"lineNumber":101,"author":{"gitId":"eltonyeh"},"content":"     * will store the {@code emptyMessage} instead.","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"eltonyeh"},"content":"     * @param builder      The {@code StringBuilder} to store the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"eltonyeh"},"content":"     * @param emptyMessage The message to be stored when the list is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":105,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"eltonyeh"},"content":"    private void buildList(StringBuilder builder, String emptyMessage) {","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"eltonyeh"},"content":"        if (this.taskList.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"eltonyeh"},"content":"            builder.append(emptyMessage);","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"eltonyeh"},"content":"            return;","lastModifiedDate":"2021-09-07"},{"lineNumber":110,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":111,"author":{"gitId":"eltonyeh"},"content":"        int listSize \u003d this.taskList.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"eltonyeh"},"content":"        for (int i \u003d 0; i \u003c listSize; i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":113,"author":{"gitId":"eltonyeh"},"content":"            builder.append(\"    \").append(i + 1).append(\". \").append(this.taskList.get(i));","lastModifiedDate":"2021-09-04"},{"lineNumber":114,"author":{"gitId":"eltonyeh"},"content":"            if (i \u003c listSize - 1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":115,"author":{"gitId":"eltonyeh"},"content":"                builder.append(\"\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":116,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":117,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":120,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":121,"author":{"gitId":"eltonyeh"},"content":"     * Transforms the list to a string of task descriptions.","lastModifiedDate":"2021-08-25"},{"lineNumber":122,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":123,"author":{"gitId":"eltonyeh"},"content":"     * @return A string of task descriptions.","lastModifiedDate":"2021-08-25"},{"lineNumber":124,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":125,"author":{"gitId":"eltonyeh"},"content":"    public String printList() {","lastModifiedDate":"2021-08-25"},{"lineNumber":126,"author":{"gitId":"eltonyeh"},"content":"        StringBuilder itemList \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2021-09-04"},{"lineNumber":127,"author":{"gitId":"eltonyeh"},"content":"        this.buildList(itemList, \"Nothing here yet...\");","lastModifiedDate":"2021-09-04"},{"lineNumber":128,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":129,"author":{"gitId":"eltonyeh"},"content":"        return itemList.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":130,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":131,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":132,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":133,"author":{"gitId":"eltonyeh"},"content":"     * Find out all tasks that is related to the given date and list them as a string.","lastModifiedDate":"2021-08-25"},{"lineNumber":134,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":135,"author":{"gitId":"eltonyeh"},"content":"     * @param date A certain to filter the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":136,"author":{"gitId":"eltonyeh"},"content":"     * @return A string of task description.","lastModifiedDate":"2021-08-25"},{"lineNumber":137,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":138,"author":{"gitId":"eltonyeh"},"content":"    public String printList(LocalDate date) {","lastModifiedDate":"2021-08-25"},{"lineNumber":139,"author":{"gitId":"eltonyeh"},"content":"        ArrayList\u003cTask\u003e targetTasks \u003d this.taskList.stream()","lastModifiedDate":"2021-08-25"},{"lineNumber":140,"author":{"gitId":"eltonyeh"},"content":"                .filter(x -\u003e x.getDate() !\u003d null \u0026\u0026 x.getDate().equals(date))","lastModifiedDate":"2021-08-25"},{"lineNumber":141,"author":{"gitId":"eltonyeh"},"content":"                .collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2021-08-25"},{"lineNumber":142,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":143,"author":{"gitId":"eltonyeh"},"content":"        TaskList targetList \u003d new TaskList(targetTasks);","lastModifiedDate":"2021-08-25"},{"lineNumber":144,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":145,"author":{"gitId":"eltonyeh"},"content":"        StringBuilder itemList \u003d new StringBuilder(\"Here is the result:\\n\");","lastModifiedDate":"2021-09-04"},{"lineNumber":146,"author":{"gitId":"eltonyeh"},"content":"        targetList.buildList(itemList, \"Nothing special will happen on this day\");","lastModifiedDate":"2021-09-04"},{"lineNumber":147,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":148,"author":{"gitId":"eltonyeh"},"content":"        return itemList.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":149,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":150,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":151,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":152,"author":{"gitId":"eltonyeh"},"content":"     * Find out all tasks that contains the given keyword and list them as a string.","lastModifiedDate":"2021-08-26"},{"lineNumber":153,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":154,"author":{"gitId":"eltonyeh"},"content":"     * @param keyword A keyword to filter the list.","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"eltonyeh"},"content":"     * @return A string of task description.","lastModifiedDate":"2021-08-26"},{"lineNumber":156,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":157,"author":{"gitId":"eltonyeh"},"content":"    public String printList(String keyword) {","lastModifiedDate":"2021-08-25"},{"lineNumber":158,"author":{"gitId":"eltonyeh"},"content":"        ArrayList\u003cTask\u003e targetTasks \u003d this.taskList.stream()","lastModifiedDate":"2021-08-25"},{"lineNumber":159,"author":{"gitId":"eltonyeh"},"content":"                .filter(x -\u003e x.getDescription().contains(keyword))","lastModifiedDate":"2021-08-25"},{"lineNumber":160,"author":{"gitId":"eltonyeh"},"content":"                .collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2021-08-25"},{"lineNumber":161,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"eltonyeh"},"content":"        TaskList targetList \u003d new TaskList(targetTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":163,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":164,"author":{"gitId":"eltonyeh"},"content":"        StringBuilder itemList \u003d new StringBuilder(\"Here is the result:\\n\");","lastModifiedDate":"2021-09-04"},{"lineNumber":165,"author":{"gitId":"eltonyeh"},"content":"        targetList.buildList(itemList, \"Wow! Nothing matches your keyword.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":166,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":167,"author":{"gitId":"eltonyeh"},"content":"        return itemList.toString();","lastModifiedDate":"2021-08-25"},{"lineNumber":168,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":169,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":169}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":" * A class in charge of the interaction to {@code Duke} users.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"    private static final String LOGO \u003d \"____        _        \\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    private static final String GREETING_TEXT \u003d \"Hello from \\n\"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"            + LOGO","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"            + \"How can I help you?\";","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    private static final String FAREWELL_TEXT \u003d \"Why do you choose to leave me!\";","lastModifiedDate":"2021-09-04"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"     * Greet the users by printing the greeting text.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    public static String greet() {","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"        return GREETING_TEXT;","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * Farewell the users by printing the farewell message.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"    public static String farewell() {","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"        return FAREWELL_TEXT;","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"     * Returns a message when a task is added to a {@code TaskList}.","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"     * @param tasks The list to which a new task is added.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"     * @param task  The task added to the list.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"    public static String addTaskMessage(TaskList tasks, Task task) {","lastModifiedDate":"2021-09-04"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"        return \"Got it. I\u0027ve added this task:\\n    \"","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"                + task","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"                + \"\\nTask(s) remaining in the list: \"","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"                + tasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"     * Returns a message when a task is updated.","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"     * @param taskNum The item number of the task.","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"     * @param task  The task added to the list.","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"    public static String updateTaskMessage(int taskNum, Task task) {","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"        return \"Got it. I\u0027ve update the task as:\\n    \"","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"                + taskNum + \". \" + task;","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"     * Returns a message \u003cstrong\u003eafter\u003c/strong\u003e a task is removed from the list.","lastModifiedDate":"2021-09-04"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"     * @param tasks The list from which a task is removed.","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"     * @param task  The task that is removed.","lastModifiedDate":"2021-08-27"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"    public static String removeTaskMessage(TaskList tasks, Task task) {","lastModifiedDate":"2021-09-04"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"        int tasksSize \u003d tasks.size();","lastModifiedDate":"2021-08-27"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"        return \"Noted. I\u0027ve removed this task:\\n    \"","lastModifiedDate":"2021-09-04"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"                + task","lastModifiedDate":"2021-08-27"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"                + \"\\nTask(s) remaining in the list: \"","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"                + tasksSize;","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"     * Returns a message when a task is done.","lastModifiedDate":"2021-09-04"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"     * @param task The task list to be marked done.","lastModifiedDate":"2021-08-27"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"    public static String taskDoneMessage(Task task) {","lastModifiedDate":"2021-09-04"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n    \" + task;","lastModifiedDate":"2021-09-04"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":81}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.command;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.Parser;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"     * The type of the task.","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    private final Task.TaskType taskType;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"     * Constructs an {@code AddTaskCommand} object.","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     * @param taskType The type of the task.","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     * @param commandBody The command body.","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    public AddTaskCommand(Task.TaskType taskType, String commandBody) {","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"        super(commandBody);","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     * Executes the command by adding a new task.","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The task list to which a task will be added.","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     * @param storage  The storage in which a task will be added.","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-04"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        Task task \u003d Parser.descriptionToTask(this.taskType, this.commandBody);","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"        taskList.addTask(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"        storage.addTask(task);","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"        return Ui.addTaskMessage(taskList, task);","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"eltonyeh":39}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.command;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":" * A class that represents a Duke command.","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"     * The main body of the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    protected final String commandBody;","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Command} object.","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     * @param commandBody The command body.","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"    public Command(String commandBody) {","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"        this.commandBody \u003d commandBody;","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     * Executes the command and return the reply.","lastModifiedDate":"2021-09-04"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The task list that may be modified or referenced by the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     * @param storage  The storage that may be modified of referenced by the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    public abstract String execute(TaskList taskList, Storage storage);","lastModifiedDate":"2021-09-04"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"     * Indicates if the command is an exit command.","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"     * @return false","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"        return false;","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"eltonyeh":40}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.command;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code ExitCommand} object.","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"        super(\"\");","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"     * Executes the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The task list that may be modified or referenced by the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     * @param storage  The storage that may be modified of referenced by the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"        return Ui.farewell();","lastModifiedDate":"2021-09-04"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     * Indicates if the command is an exit command.","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * @return true","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"        return true;","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"eltonyeh":35}},{"path":"src/main/java/duke/command/ModifyTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.command;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-08-27"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.IndexMismatchException;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-08-27"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"public class ModifyTaskCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"     * The type of the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"    private final CommandType commandType;","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Command} object.","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     * @param commandType The command type.","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     * @param commandBody The command body.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    public ModifyTaskCommand(CommandType commandType, String commandBody) {","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"        super(commandBody);","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     * Executes the command by modifying a current task in the task list and the storage.","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The task list that will be modified.","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     * @param storage  The storage that will be modified.","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"     * @throws IndexMismatchException If the command body cannot be parsed as a positive integer.","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"        if (!this.commandBody.matches(\"\\\\d+\")) {","lastModifiedDate":"2021-08-27"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"            throw new IndexMismatchException();","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"        int item \u003d Integer.parseInt(this.commandBody);","lastModifiedDate":"2021-08-27"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"        Task task \u003d taskList.getTask(item);","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"        assert task !\u003d null;","lastModifiedDate":"2021-09-07"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"        switch (this.commandType) {","lastModifiedDate":"2021-08-27"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"        case DONE: {","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"            taskList.completeTask(item);","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"            storage.refreshTask(taskList);","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"            return Ui.taskDoneMessage(task);","lastModifiedDate":"2021-09-04"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        case DELETE: {","lastModifiedDate":"2021-08-27"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"            taskList.removeTask(item);","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"            storage.refreshTask(taskList);","lastModifiedDate":"2021-08-27"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"            return Ui.removeTaskMessage(taskList, task);","lastModifiedDate":"2021-09-04"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"        default:","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"            assert false;","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"Something wrong happened when executing Duke!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-27"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"        DONE, DELETE","lastModifiedDate":"2021-08-27"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"eltonyeh":63}},{"path":"src/main/java/duke/command/QueryCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.command;","lastModifiedDate":"2021-08-27"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-08-27"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-08-27"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-08-27"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"public class QueryCommand extends Command {","lastModifiedDate":"2021-08-27"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"     * The type of the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    private final CommandType commandType;","lastModifiedDate":"2021-08-27"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code QueryCommand} object.","lastModifiedDate":"2021-08-27"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     * @param commandType The command type.","lastModifiedDate":"2021-08-27"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"     * @param commandBody The command body.","lastModifiedDate":"2021-08-27"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"    public QueryCommand(CommandType commandType, String commandBody) {","lastModifiedDate":"2021-08-27"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"        super(commandBody);","lastModifiedDate":"2021-08-27"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-08-27"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-27"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * Executes the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-27"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The task list that may be modified or referenced by the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"     * @param storage  The storage that may be modified of referenced by the command.","lastModifiedDate":"2021-08-27"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"     * @throws InvalidCommandException If the command body is invalid.","lastModifiedDate":"2021-08-27"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-27"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-27"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"        switch (this.commandType) {","lastModifiedDate":"2021-08-27"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"        case LIST: {","lastModifiedDate":"2021-08-27"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"            return taskList.printList();","lastModifiedDate":"2021-09-04"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        case QUERY: {","lastModifiedDate":"2021-08-27"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"            try {","lastModifiedDate":"2021-08-27"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"                return taskList.printList(LocalDate.parse(this.commandBody));","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-27"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-08-27"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-08-27"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        case FIND: {","lastModifiedDate":"2021-08-27"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"            return taskList.printList(this.commandBody);","lastModifiedDate":"2021-09-04"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"        default:","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"            assert false;","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"Something wrong happened when executing Duke!\");","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-27"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-27"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"    public enum CommandType {","lastModifiedDate":"2021-08-27"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"        QUERY, LIST, FIND","lastModifiedDate":"2021-08-27"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-27"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-27"}],"authorContributionMap":{"eltonyeh":60}},{"path":"src/main/java/duke/command/UpdateTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.command;","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.TaskList;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"public class UpdateTaskCommand extends Command {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"    private int taskNum;","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    private String newDescription;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    private LocalDate newTime;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code UpdateTaskCommand} object.","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"     * @param commandBody The command body. It should be in the format:","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"     *                    \u003cul\u003e","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"     *                        \u003cli\u003e{@code {item number} {new Description} /time {new time}}; or\u003c/li\u003e","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"     *                        \u003cli\u003e{@code {item number} {new Description}}\u003c/li\u003e.","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     *                    \u003c/ul\u003e","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     *                    If the description or the time remain the same, you can replace it by {@code *}.","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    public UpdateTaskCommand(String commandBody) {","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"        super(commandBody.trim());","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"        decodeCommandBody();","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"     * Decode the command body and set up the new task description/time accordingly.","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If anything goes wrong.","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"    private void decodeCommandBody() throws DukeException {","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"        assert this.commandBody !\u003d null;","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        String[] data \u003d this.commandBody.split(\"/time \", 2);","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"        String[] itemNumAndDescription \u003d data[0].split(\" \", 2);","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"        if (itemNumAndDescription.length \u003c 2) {","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        String taskNum \u003d itemNumAndDescription[0].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        String newDescription \u003d itemNumAndDescription[1].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"        if (!taskNum.matches(\"\\\\d+\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"        this.taskNum \u003d Integer.parseInt(taskNum);","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"        if (!newDescription.equals(\"*\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"            this.newDescription \u003d newDescription;","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"        if (!this.commandBody.contains(\"/time\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"            return;","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"        String newTime \u003d data[1].trim();","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"        if (!newTime.equals(\"*\")) {","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"            try {","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"                this.newTime \u003d LocalDate.parse(newTime);","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2021-09-08"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"     * Executes the command and return the reply.","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"     * @param taskList The task list that may be modified or referenced by the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"     * @param storage  The storage that may be modified of referenced by the command.","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"eltonyeh"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"eltonyeh"},"content":"        Task task \u003d taskList.getTask(this.taskNum);","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"eltonyeh"},"content":"        if (this.newDescription !\u003d null) {","lastModifiedDate":"2021-09-08"},{"lineNumber":86,"author":{"gitId":"eltonyeh"},"content":"            task.setDescription(this.newDescription);","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"eltonyeh"},"content":"        if (this.newTime !\u003d null) {","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"eltonyeh"},"content":"            task.setDate(this.newTime);","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"eltonyeh"},"content":"        storage.refreshTask(taskList);","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"eltonyeh"},"content":"        return Ui.updateTaskMessage(taskNum, task);","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"eltonyeh":96}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":" * An exception class that represents any Duke-related issues.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     * Constructors a {@code DukeException}.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"     * @param message The error message.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":15}},{"path":"src/main/java/duke/exception/IndexMismatchException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":" * A specific {@code DukeException} that will be thrown when an input item is not a positive integer.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"public class IndexMismatchException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     * Constructs an {@code IndexMismatchException}.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    public IndexMismatchException() {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"        super(\"OOPS!!! The item should be an positive integer.\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":13}},{"path":"src/main/java/duke/exception/IndexOutOfBoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":" * A specific {@code DukeException} that will be thrown when an input item is out of bound.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"public class IndexOutOfBoundException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     * Constructs an {@code IndexOutOfBoundException}.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    public IndexOutOfBoundException() {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"        super(\"OOPS!!! The item index you filled in is out of bound!\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":13}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.exception;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":" * A specific {@code DukeException} that will be thrown when an input command is invalid.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     * Constructs an {@code InvalidCommandException}.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"        super(\"OOPS!!! I don\u0027t understand that!\");","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":13}},{"path":"src/main/java/duke/javafx/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.javafx;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.util.Collections;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":" * containing text from the speaker.","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    private Label dialog;","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"        dialog.setText(text);","lastModifiedDate":"2021-09-01"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2021-09-01"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"    private void flip() {","lastModifiedDate":"2021-09-01"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2021-09-01"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2021-09-01"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2021-09-01"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2021-09-01"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2021-09-01"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"        db.flip();","lastModifiedDate":"2021-09-01"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"        return db;","lastModifiedDate":"2021-09-01"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"eltonyeh":61}},{"path":"src/main/java/duke/javafx/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.javafx;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"public class Main extends Application {","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2021-09-04"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke();","lastModifiedDate":"2021-09-07"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"            stage.show();","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"eltonyeh":29}},{"path":"src/main/java/duke/javafx/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.javafx;","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import duke.Duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import duke.Ui;","lastModifiedDate":"2021-09-04"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-07"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2021-09-01"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"    private final Image userImage \u003d new Image(","lastModifiedDate":"2021-09-01"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaUser.png\"))","lastModifiedDate":"2021-09-01"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    );","lastModifiedDate":"2021-09-01"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"    private final Image dukeImage \u003d new Image(","lastModifiedDate":"2021-09-01"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"))","lastModifiedDate":"2021-09-01"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"    );","lastModifiedDate":"2021-09-01"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2021-09-01"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2021-09-01"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"    private TextField userInput;","lastModifiedDate":"2021-09-01"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    private Button sendButton;","lastModifiedDate":"2021-09-01"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"    private Duke duke;","lastModifiedDate":"2021-09-01"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-04"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"     * Initialize the main window.","lastModifiedDate":"2021-09-04"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-04"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"    public void initialize() {","lastModifiedDate":"2021-09-01"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2021-09-01"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"        String greet \u003d Ui.greet();","lastModifiedDate":"2021-09-04"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-04"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"                DialogBox.getDukeDialog(greet, dukeImage)","lastModifiedDate":"2021-09-04"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"        );","lastModifiedDate":"2021-09-04"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-07"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"     * Creates a dialog box with the exception message.","lastModifiedDate":"2021-09-07"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-07"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"    public void showException(Exception e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2021-09-07"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"                DialogBox.getDukeDialog(e.getMessage(), dukeImage)","lastModifiedDate":"2021-09-07"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"        );","lastModifiedDate":"2021-09-07"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"    public void setDuke() {","lastModifiedDate":"2021-09-07"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-09-07"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"            duke \u003d new Duke();","lastModifiedDate":"2021-09-07"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-07"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"            showException(e);","lastModifiedDate":"2021-09-07"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-01"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2021-09-01"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2021-09-01"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-01"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"    @FXML","lastModifiedDate":"2021-09-01"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2021-09-01"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2021-09-01"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2021-09-01"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2021-09-01"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2021-09-01"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2021-09-01"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"        );","lastModifiedDate":"2021-09-01"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"        userInput.clear();","lastModifiedDate":"2021-09-01"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-01"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"eltonyeh":80}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     * The due date of the deadline.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    protected LocalDate timeDue;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Deadline} object by the description and the due date. Throw a {@code DukeException} if the","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"     * description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     * @param timeDue     The due date of the deadline.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    public Deadline(String description, LocalDate timeDue) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"        this.timeDue \u003d timeDue;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Deadline} object by the description, the due date and specifying if it is done. Throws a","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     * {@code DukeException} if the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * @param isDone      Whether the task is done.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     * @param timeDue     The due date of the deadline.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    public Deadline(String description, boolean isDone, LocalDate timeDue) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        this.timeDue \u003d timeDue;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"    public void setDate(LocalDate localDate) {","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"        this.timeDue \u003d localDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"     * Returns the due time of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"     * @return The due time of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    public String taskToLine() {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        return \"D\" + super.taskToLine() + \" | \" + this.timeDue;","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"     * Transforms the task to a single line that can be stored in a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"     * @return A single line that can be stored in a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"        return this.timeDue;","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"        String description \u003d super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"        return \"[D]\" + description + \" (by: \"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"                + this.timeDue.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":73}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     * The time of the event.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    protected LocalDate timeStart;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Event} object by the description and the due date. Throw a {@code DukeException} if the","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"     * description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     * @param timeStart   The time of the event.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    public Event(String description, LocalDate timeStart) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"        this.timeStart \u003d timeStart;","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Event} object by the description, the due date and specifying if it is done. Throws a {@code","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     * DukeException} if the description is empty.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * @param isDone      Whether the task is done.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     * @param timeStart   The time of the event.","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    public Event(String description, boolean isDone, LocalDate timeStart) {","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        this.timeStart \u003d timeStart;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"    public void setDate(LocalDate localDate) {","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"        this.timeStart \u003d localDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"     * Transforms the task to a single line that can be stored in a txt file.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"     * @return A single line that can be stored in a txt file.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    public String taskToLine() {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        return \"E\" + super.taskToLine() + \" | \" + this.timeStart;","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"     * Return the time of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"     * @return The time of the event.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"        return this.timeStart;","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"        String description \u003d super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"        return \"[E]\" + description + \" (at: \"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"                + this.timeStart.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":73}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":" * A class that represents tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"public class Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"     * The description of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     * Whether the task is done.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Task} object by the description. Throw a {@code DukeException} if the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    public Task(String description) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"Your description cannot be empty!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code Task} object by the description and specifying if it is done. Throws a {@code DukeException}","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"     * if the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"     * @param isDone      Whether the task is done.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"    public Task(String description, boolean isDone) throws DukeException {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"            throw new DukeException(\"Your description cannot be empty!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"     * Transforms the task to a single line that can be stored in a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"     * @return A single line that can be stored in a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"eltonyeh"},"content":"    public String taskToLine() {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"eltonyeh"},"content":"        String isDone \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"eltonyeh"},"content":"        return String.format(\" | %s | %s\", isDone, this.description);","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"eltonyeh"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"eltonyeh"},"content":"        return this.isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"eltonyeh"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"eltonyeh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"eltonyeh"},"content":"     * Returns the starting or due time of the task, if possible. If there is no time related to the task, return {@code","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"eltonyeh"},"content":"     * null}. In this case, it will always return {@code null}.","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"eltonyeh"},"content":"     * @return null","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"eltonyeh"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"eltonyeh"},"content":"        return null;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"eltonyeh"},"content":"     * Set the date of the task, if possible.","lastModifiedDate":"2021-09-08"},{"lineNumber":80,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":81,"author":{"gitId":"eltonyeh"},"content":"    public void setDate(LocalDate localDate) {","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"eltonyeh"},"content":"        return;","lastModifiedDate":"2021-09-08"},{"lineNumber":83,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":84,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":85,"author":{"gitId":"eltonyeh"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"eltonyeh"},"content":"        return this.description;","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"eltonyeh"},"content":"     * Set the description of the task.","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"eltonyeh"},"content":"     * @param description The new description.","lastModifiedDate":"2021-09-08"},{"lineNumber":93,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-09-08"},{"lineNumber":94,"author":{"gitId":"eltonyeh"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"eltonyeh"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":99,"author":{"gitId":"eltonyeh"},"content":"     * Returns {@code \"[X]\"} is the task is done and {@code \"[ ]\"} otherwise.","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"eltonyeh"},"content":"     * @return An icon indicating whether the task is done.","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"eltonyeh"},"content":"    public String markDoneIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":104,"author":{"gitId":"eltonyeh"},"content":"        return this.isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2021-08-19"},{"lineNumber":105,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":106,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":107,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"eltonyeh"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":110,"author":{"gitId":"eltonyeh"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":113,"author":{"gitId":"eltonyeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":114,"author":{"gitId":"eltonyeh"},"content":"        return this.markDoneIcon() + \" \" + this.description;","lastModifiedDate":"2021-08-19"},{"lineNumber":115,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":116,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"eltonyeh"},"content":"     * The three type of tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"eltonyeh"},"content":"    public enum TaskType {","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"eltonyeh"},"content":"        TODO, DEADLINE, EVENT","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":123}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code ToDo} object by the description. Throw a {@code DukeException} if the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"     * Constructs a {@code ToDo} object by the description and specifying if it is done. Throw a {@code DukeException}","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"     * if the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"     * @param description The description you want to store.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"     * @param isDone      Whether the task is done.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"     * @throws DukeException If the description is empty.","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"     * Transforms the task to a single line that can be stored in a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"     * @return A single line that can be stored in a txt file.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"    public String taskToLine() {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"        return \"T\" + super.taskToLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"        String description \u003d super.toString();","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"        return \"[T]\" + description;","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"eltonyeh":48}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"800.0\"","lastModifiedDate":"2021-09-04"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"        \u003cfont\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"            \u003cFont name\u003d\"Courier New\" size\u003d\"12\"/\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"        \u003c/font\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"    \u003c/Label\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"eltonyeh":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2021-09-01"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"            prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2021-09-04"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"            fx:controller\u003d\"duke.javafx.MainWindow\"\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"724.0\"","lastModifiedDate":"2021-09-04"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"               AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"724.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2021-09-04"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"800.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"788.0\"/\u003e","lastModifiedDate":"2021-09-04"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2021-09-01"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2021-09-01"}],"authorContributionMap":{"eltonyeh":18}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"public class ParserTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"    public void dummyTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":12}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    public static final LocalDate LOCALDATE \u003d LocalDate.parse(\"2021-01-01\");","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    public static final String LOCAL_DATE_STRING \u003d LOCALDATE.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    public void constructorWithEmptyDescriptionTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"            new Deadline(\"\", null);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"            new Deadline(\"\", true, null);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    public void getDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(LOCALDATE, new Deadline(\"project\", LOCALDATE).getDate());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(LOCALDATE,","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"                new Deadline(\"project\", true, LOCALDATE).getDate());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"    public void taskToLineTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"D | 0 | project | \" + LOCALDATE,","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"                new Deadline(\"project\", LOCALDATE).taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"D | 1 | project | \" + LOCALDATE,","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"                new Deadline(\"project\", true, LOCALDATE).taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[D][ ] project (by: \" + LOCAL_DATE_STRING + \")\",","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"                new Deadline(\"project\", LOCALDATE).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[D][X] project (by: \" + LOCAL_DATE_STRING + \")\",","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"                new Deadline(\"project\", true, LOCALDATE).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":54}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-01"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-09-01"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"public class EventTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"    public static final LocalDate LOCALDATE \u003d LocalDate.parse(\"2021-01-01\");","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"    public static final String LOCAL_DATE_STRING \u003d LOCALDATE.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"    public void constructorWithEmptyDescriptionTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"            new Event(\"\", null);","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"            new Event(\"\", true, null);","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    public void getDate() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(LOCALDATE, new Event(\"project\", LOCALDATE).getDate());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(LOCALDATE,","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"                new Event(\"project\", true, LOCALDATE).getDate());","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"    public void taskToLineTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"E | 0 | project | \" + LOCALDATE,","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"                new Event(\"project\", LOCALDATE).taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"E | 1 | project | \" + LOCALDATE,","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"eltonyeh"},"content":"                new Event(\"project\", true, LOCALDATE).taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"eltonyeh"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[E][ ] project (at: \" + LOCAL_DATE_STRING + \")\",","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"eltonyeh"},"content":"                new Event(\"project\", LOCALDATE).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[E][X] project (at: \" + LOCAL_DATE_STRING + \")\",","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"eltonyeh"},"content":"                new Event(\"project\", true, LOCALDATE).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":54}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"public class TaskTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    public void constructorWithEmptyDescriptionTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"            new Task(\"\");","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"            new Task(\"\", true);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    public void taskToLineTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\" | 0 | project\", new Task(\"project\").taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\" | 1 | project\", new Task(\"project\", true).taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    public void markDoneIconTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[ ]\", new Task(\"project\").markDoneIcon());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[X]\", new Task(\"project\", true).markDoneIcon());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"eltonyeh"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[ ] project\", new Task(\"project\").toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[X] project\", new Task(\"project\", true).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":43}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eltonyeh"},"content":"package duke.task;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"eltonyeh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"eltonyeh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-01"},{"lineNumber":7,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-09-01"},{"lineNumber":8,"author":{"gitId":"eltonyeh"},"content":"public class ToDoTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"eltonyeh"},"content":"    public void constructorWithEmptyDescriptionTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"eltonyeh"},"content":"            new ToDo(\"\");","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"eltonyeh"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"eltonyeh"},"content":"            new ToDo(\"\", true);","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"eltonyeh"},"content":"            fail();","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"eltonyeh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"eltonyeh"},"content":"            assertEquals(\"Your description cannot be empty!\", e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"eltonyeh"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"eltonyeh"},"content":"    public void taskToLineTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"T | 0 | project\", new ToDo(\"project\").taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"T | 1 | project\", new ToDo(\"project\", true).taskToLine());","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"eltonyeh"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"eltonyeh"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"eltonyeh"},"content":"    public void toStringTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[T][ ] project\", new ToDo(\"project\").toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"eltonyeh"},"content":"        assertEquals(\"[T][X] project\", new ToDo(\"project\", true).toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"eltonyeh"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"eltonyeh"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"eltonyeh":37}}]

[{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":" * Determines the action of a Duke object. A Command object is initialized with the same file path","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":" * as a Duke object, and it reads the file in the file path if it exists and creates the file if it does not exists","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":" * at initialization.","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"public class Command {","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"    Ui ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"    Parser parser;","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"    Storage storage;","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"    TaskList taskList;","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"    boolean canUseFilePath;","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"    Command(String filePath) {","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"        boolean hasCreatedFile \u003d this.storage.hasCreatedFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"        this.canUseFilePath \u003d true;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"        if (!hasCreatedFile) {","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"            //file is read or an error has occurred when creating the file","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"            try {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"                ArrayList\u003cTask\u003e tasks \u003d this.storage.readFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"                this.taskList \u003d new TaskList(tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"                this.canUseFilePath \u003d false;","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"                this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"                System.out.println(e);","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"                System.out.println(\"A new todo list is created for you.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"                this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"     * Prints the welcome message from Duke and starts taking commands from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"    public void startDuke() {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"        if (!this.canUseFilePath) {","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"            System.out.println(\"File path is corrupted :( Cannot start Duke.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"            return;","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"        this.ui.printStartMessage(this.taskList.getTaskList());","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"        boolean hasNextCommand \u003d true;","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"        while (hasNextCommand) {","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"            String command \u003d scanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"            String action \u003d this.parser.parseCommand(command);","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"            hasNextCommand \u003d runNextCommand(action, command);","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"     * Runs the type of command given in the parameters and returns whether Duke","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"     * should be stop or not.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"     * @param typeOfCommand String that determines the actions of Duke.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"     * @param description   The original command given by the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"     * @return True if Duke should continue to take in commands from the user and false if Duke should stop.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"    public boolean runNextCommand(String typeOfCommand, String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chingh20"},"content":"            if (typeOfCommand.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chingh20"},"content":"                this.ui.endMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chingh20"},"content":"                this.storage.writeToFile(this.taskList.getTaskList());","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chingh20"},"content":"                return false;","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"chingh20"},"content":"            } else if (typeOfCommand.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"chingh20"},"content":"                this.ui.iterateTaskList(this.taskList.getTaskList());","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"chingh20"},"content":"            } else if (typeOfCommand.equals(\"done\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"chingh20"},"content":"                int task \u003d this.parser.parseDoneCommand(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"chingh20"},"content":"                this.taskList.markAsDone(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"chingh20"},"content":"            } else if (typeOfCommand.equals(\"delete\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"chingh20"},"content":"                int task \u003d this.parser.parseDeleteCommand(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"chingh20"},"content":"                this.taskList.deleteTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chingh20"},"content":"            } else if (typeOfCommand.equals(\"addTask\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":88,"author":{"gitId":"chingh20"},"content":"                Task task \u003d this.parser.parseAddTask(description);","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chingh20"},"content":"                this.taskList.addTask(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"chingh20"},"content":"            } else if (typeOfCommand.equals(\"empty\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"chingh20"},"content":"                System.out.println(\"Please enter a new task or action.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"chingh20"},"content":"            } else if (typeOfCommand.equals(\"find\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"chingh20"},"content":"                String str \u003d this.parser.parseFindCommand(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"chingh20"},"content":"                ArrayList\u003cTask\u003e matchingTasks \u003d this.taskList.findTask(str);","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"chingh20"},"content":"                this.ui.iterateMatchingTaskList(matchingTasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"chingh20"},"content":"            } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":100,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"Sorry I don\u0027t understand this command :(\");","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":102,"author":{"gitId":"chingh20"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-08-25"},{"lineNumber":103,"author":{"gitId":"chingh20"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-08-25"},{"lineNumber":104,"author":{"gitId":"chingh20"},"content":"            System.out.println();","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"chingh20"},"content":"            return true;","lastModifiedDate":"2021-08-25"},{"lineNumber":106,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":107,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"chingh20"},"content":"     * Sets taskList of the Command object to be empty. Use only for","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"chingh20"},"content":"     * testing purposes.","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"chingh20"},"content":"    public void setTaskListEmpty() {","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"chingh20"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chingh20":116}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"    protected String deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    protected LocalDate deadlineTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"    Deadline(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"        this.deadline \u003d \"\";","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"        this.deadlineTime \u003d null;","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"    Deadline(String description, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"        this.deadline \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"    Deadline(String description, boolean isDone, String deadline) {","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"    Deadline(String description, String deadline) {","lastModifiedDate":"2021-08-19"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"        this.deadlineTime \u003d setDeadlineTime(deadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"     * Returns the deadline of the Deadline object.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"     * @return The deadline of the Deadline object. If the original deadline","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"     * is given in a YYYY-MM-DD format, the deadline will be returned in a MMM d yyyy format.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"    public String getDeadline() {","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"        if (deadlineTime \u003d\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"            return this.deadline;","lastModifiedDate":"2021-08-19"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"            return this.deadlineTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"    private LocalDate setDeadlineTime(String deadline) {","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"            LocalDate date \u003d LocalDate.parse(deadline);","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"            return date;","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"            return null;","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"     * Returns the Deadline in a string format suitable for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"     * @return String of the Deadline object in the correct format for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"    public String saveTaskToFile() {","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"        return this.getTypeOfTask() + \"||\" + this.getStatusIcon() + \"||\"","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"                + this.getDescription() + \"||\" + this.getDeadline();","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"chingh20"},"content":"     * Returns the type of task. Always return \"D\" which stands of the \"D\" in DeadLine.","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"chingh20"},"content":"     * @return \"D\".","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":77,"author":{"gitId":"chingh20"},"content":"    public String getTypeOfTask() {","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"chingh20"},"content":"        return \"D\";","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":80,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"chingh20"},"content":"     * Returns the Deadline object in a string format.","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"chingh20"},"content":"     * @return String in the format of \"[D][marked as done?]_deadlineDescription_(by:_deadline).\"","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":87,"author":{"gitId":"chingh20"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":88,"author":{"gitId":"chingh20"},"content":"        return String.format(\"[%s][%s] %s (by: %s)\", this.getTypeOfTask(),","lastModifiedDate":"2021-08-26"},{"lineNumber":89,"author":{"gitId":"chingh20"},"content":"                this.getStatusIcon(), this.getDescription(), this.getDeadline());","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":91,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"chingh20":91}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":" * Represents a robot object that can take in commands from the user and construct a todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":" * A file path is provided to a Duke object for the todo list to be saved locally on the user\u0027s","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":" * computer.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"    private Command command;","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    Duke(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"        this.command \u003d new Command(filePath);","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"     * Initializes a Duke object and creates a file, \"file.txt,\" that records the todo list of","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"     * the user when the program ends. The Duke object contains a Command object that takes commands from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"     * @param args Not used in this program.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"        Duke duke \u003d new Duke(\"file.text\");","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"        duke.command.startDuke();","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"chingh20":26}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":" * Represents an error that only occurs for a Duke object.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"        super(message);","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"chingh20":12}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":" * Represents a task that is going to happen at a scheduled time.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"    protected String time;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    protected LocalDate eventTime;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"    Event(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"        this.time \u003d \"\";","lastModifiedDate":"2021-08-19"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"        this.eventTime \u003d null;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"    Event(String description, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"        this.time \u003d \"\";","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"        this.eventTime \u003d null;","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"    Event(String description, String time) {","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-19"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"        this.eventTime \u003d setEventTime(time);","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"    Event(String description, boolean isDone, String time) {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"        this.eventTime \u003d setEventTime(time);","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"     * Returns the scheduled time of the Event object.","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"     * @return The scheduled time of the event. If the original scheduled time","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"     * is given in a YYYY-MM-DD format, the scheduled time will be returned in a MMM d yyyy format.","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"    public String getTime() {","lastModifiedDate":"2021-08-19"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"        if (this.eventTime \u003d\u003d null) {","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"            return this.time;","lastModifiedDate":"2021-08-19"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"            return this.eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"    private LocalDate setEventTime(String time) {","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"            LocalDate date \u003d LocalDate.parse(time);","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"            return date;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"            return null;","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"     * Returns the Event object in a string format suitable for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"     * @return String of the Event object in the correct format for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"    public String saveTaskToFile() {","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"        return this.getTypeOfTask() + \"||\" + this.getStatusIcon() + \"||\" + this.getDescription() + \"||\" + this.getTime();","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"chingh20"},"content":"     * Returns the type of task. Always return \"E\" which stands of the \"E\" in Event.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"chingh20"},"content":"     * @return \"E\".","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":79,"author":{"gitId":"chingh20"},"content":"    public String getTypeOfTask() {","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"chingh20"},"content":"        return \"E\";","lastModifiedDate":"2021-08-19"},{"lineNumber":81,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":82,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":83,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"chingh20"},"content":"     * Returns the Event object in a string format.","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":86,"author":{"gitId":"chingh20"},"content":"     * @return String in the format of \"[E][marked as done?]_eventDescription_(at:_scheduledTime).\"","lastModifiedDate":"2021-08-26"},{"lineNumber":87,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":89,"author":{"gitId":"chingh20"},"content":"    public String toString() {","lastModifiedDate":"2021-08-19"},{"lineNumber":90,"author":{"gitId":"chingh20"},"content":"        return String.format(\"[%s][%s] %s (at: %s)\", this.getTypeOfTask(),","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"chingh20"},"content":"                this.getStatusIcon(), this.getDescription(), this.getTime());","lastModifiedDate":"2021-08-19"},{"lineNumber":92,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":93,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"chingh20":93}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":" * Parses different strings and acts as a helper for other classes.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"     * Returns the type of command given a command from a user.","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"     * @param str The original command from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"     * @return Type of command.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"    public String parseCommand(String str) {","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"        if (str.equals(\"bye\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"            return \"bye\";","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"        } else if (str.equals(\"list\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"            return \"list\";","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"        } else if (str.startsWith(\"done\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"            return \"done\";","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"        } else if (str.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"            return \"delete\";","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"        } else if (str.startsWith(\"todo\") || str.startsWith(\"event\") || str.startsWith(\"deadline\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"            return \"addTask\";","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"        } else if (str.startsWith(\"find\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"            return \"find\";","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"        } else if (str.equals(\"\\n\")){","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"            return \"empty\";","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"            return \"errorInput\";","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"     * Returns the correct Task object given a command to add a task from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"     * @param str A command to add a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"     * @return A Task object that should be added to the user\u0027s TaskList.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException If the format of the add task command is incorrect.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"    public Task parseAddTask(String str) throws DukeException{","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"        if (str.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"            //checks if str follows the todo format: todo_description","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"            if ((str.charAt(4) !\u003d \u0027 \u0027) || str.length() \u003c 6) {","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"The description of todo cannot be empty\");","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"            return new ToDo(str.substring(5));","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"        } else if (str.startsWith(\"event\")) {","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"            //checks if str follows the event format: event_description_/at_time","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"            if (str.charAt(5) !\u003d \u0027 \u0027 || str.length() \u003c 12) {","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"Wrong input for adding an event-task.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"            int index \u003d str.indexOf(\"/at \");","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"            if (index \u003d\u003d -1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"You must specify the time for an event-task.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"            String description \u003d str.substring(6, index - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"            String time \u003d str.substring(index + 4);","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"            return new Event(description, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"            //checks if str follows the deadline format: deadline_description_/by_time","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"            if (str.charAt(8) !\u003d \u0027 \u0027 || str.length() \u003c 15) {","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"Wrong input for adding a deadline-task.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"            int index \u003d str.indexOf(\"/by \");","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"            if (index \u003d\u003d -1) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"You must specify the deadline.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"            String description \u003d str.substring(9, index - 1);","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"            String time \u003d str.substring(index + 4);","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"chingh20"},"content":"            return new Deadline(description, time);","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"chingh20"},"content":"     * Returns the task number of the task that should be marked as done given a command","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"chingh20"},"content":"     * to mark a task as done from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"chingh20"},"content":"     * @param str A command to mark a task as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":80,"author":{"gitId":"chingh20"},"content":"     * @return The task number of the task that should be marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":81,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException If the format of the mark task as done command is incorrect.","lastModifiedDate":"2021-08-26"},{"lineNumber":82,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"chingh20"},"content":"    public int parseDoneCommand(String str) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":84,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":85,"author":{"gitId":"chingh20"},"content":"            int index \u003d str.indexOf(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":86,"author":{"gitId":"chingh20"},"content":"            if (index \u003d\u003d -1 || str.length() \u003c 6) {","lastModifiedDate":"2021-08-25"},{"lineNumber":87,"author":{"gitId":"chingh20"},"content":"                //check if str follows the mark as done command format: done_taskNumber","lastModifiedDate":"2021-08-26"},{"lineNumber":88,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"Wrong input for marking task as done.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":89,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"chingh20"},"content":"            int taskNumber \u003d Integer.parseInt(str.substring(index + 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":91,"author":{"gitId":"chingh20"},"content":"            return taskNumber;","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"chingh20"},"content":"        } catch  (NumberFormatException ex) {","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"chingh20"},"content":"           throw new DukeException(\"Task must be an integer!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"chingh20"},"content":"     * Returns the task number of the task that should be deleted given a command","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"chingh20"},"content":"     * to delete a task from the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"chingh20"},"content":"     * @param str A command to delete a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"chingh20"},"content":"     * @return The task number of the task that should be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException If the format of the delete command is incorrect.","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"chingh20"},"content":"    public int parseDeleteCommand(String str) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"chingh20"},"content":"            int index \u003d str.indexOf(\" \");","lastModifiedDate":"2021-08-25"},{"lineNumber":108,"author":{"gitId":"chingh20"},"content":"            if (index \u003d\u003d -1 || str.length() \u003c 8) {","lastModifiedDate":"2021-08-25"},{"lineNumber":109,"author":{"gitId":"chingh20"},"content":"                //check if str follows the delete command format: delete_taskNumber","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(\"Wrong input for deleting task.\");","lastModifiedDate":"2021-08-25"},{"lineNumber":111,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":112,"author":{"gitId":"chingh20"},"content":"            int taskNumber \u003d Integer.parseInt(str.substring(index + 1));","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"chingh20"},"content":"            return taskNumber;","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"chingh20"},"content":"        } catch  (NumberFormatException ex) {","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"chingh20"},"content":"            throw new DukeException(\"Task must be an integer!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":118,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":119,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"chingh20"},"content":"     * Returns String use as the keyword for finding matching tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"chingh20"},"content":"     * @param str A command to find matching tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"chingh20"},"content":"     * @return The string that is to be used as the keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException If the format of the find command is incorrect.","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"chingh20"},"content":"    public String parseFindCommand(String str) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"chingh20"},"content":"        if (str.length() \u003c 6 || str.indexOf(\" \") \u003d\u003d -1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"chingh20"},"content":"            //check if str follows the find command format: find_keyword","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"chingh20"},"content":"            throw new DukeException(\"Wrong input for finding task.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"chingh20"},"content":"            return str.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"chingh20":135}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import java.io.File;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":" * Acts as a storing and reading helper that helps Duke save the user\u0027s todo list and  reads the user\u0027s","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":" * todo list on his or her device.","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"public class Storage {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"    private String filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"    Storage(String filePath) {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"     * Creates a new file at the location given by the Storage object\u0027s file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"     * @return True if a file is created successfully.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"     * False if the file already exists or an error occurred.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"    public boolean hasCreatedFile() {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"                System.out.println(\"File created.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"                return true;","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"            } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"                return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"            return false;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"     * Reads the file given by the Storage object\u0027s file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"     * @return An ArrayList of Task objects read from the file given by the Storage object\u0027s file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"     * @throws FileNotFoundException If the file cannot be found.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException         If Duke cannot understand the content in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"    public ArrayList\u003cTask\u003e readFile() throws FileNotFoundException, DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"        Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2021-08-24"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"            String line \u003d fileScanner.nextLine();","lastModifiedDate":"2021-08-24"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"            parseLineInFile(line, tasks);","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"        return tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"    private void parseLineInFile(String string, ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"        //format of string should be typeOfTask||status||description||time","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"        if (string.length() \u003c 7) {","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"            throw new DukeException(\"Cannot read file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"        char type \u003d string.charAt(0);","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"        char status \u003d string.charAt(3);","lastModifiedDate":"2021-08-24"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"        boolean isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"        if (status \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"            isDone \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"        } else if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":71,"author":{"gitId":"chingh20"},"content":"            isDone \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":72,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":73,"author":{"gitId":"chingh20"},"content":"            throw new DukeException(\"Cannot read file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":74,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"chingh20"},"content":"        String description \u003d string.substring(6);","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"chingh20"},"content":"        if (type \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":77,"author":{"gitId":"chingh20"},"content":"            tasks.add(new ToDo(description, isDone));","lastModifiedDate":"2021-08-24"},{"lineNumber":78,"author":{"gitId":"chingh20"},"content":"        } else if (type \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":79,"author":{"gitId":"chingh20"},"content":"            int index \u003d description.indexOf(\"||\");","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"chingh20"},"content":"            String time \u003d description.substring(index + 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"chingh20"},"content":"            tasks.add(new Event(description.substring(0, index), isDone, time));","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"chingh20"},"content":"        } else if (type \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"chingh20"},"content":"            int index \u003d description.indexOf(\"||\");","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"chingh20"},"content":"            String time \u003d description.substring(index + 2);","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"chingh20"},"content":"            tasks.add(new Deadline(description.substring(0, index), isDone, time));","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"chingh20"},"content":"            throw new DukeException(\"Cannot read file.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"chingh20"},"content":"     * Writes the given ArrayList of Task objects (the user\u0027s todo list) to the file","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"chingh20"},"content":"     * given by the Storage object\u0027s file path.","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"chingh20"},"content":"     * @param tasks The user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"chingh20"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"chingh20"},"content":"        try {","lastModifiedDate":"2021-08-24"},{"lineNumber":99,"author":{"gitId":"chingh20"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.filePath);","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"chingh20"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-24"},{"lineNumber":101,"author":{"gitId":"chingh20"},"content":"                Task task \u003d tasks.get(i);","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"chingh20"},"content":"                String line \u003d task.saveTaskToFile() + \"\\n\";","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"chingh20"},"content":"                if (i \u003d\u003d tasks.size() - 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":104,"author":{"gitId":"chingh20"},"content":"                    line \u003d task.saveTaskToFile();","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"chingh20"},"content":"                }","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"chingh20"},"content":"                fileWriter.write(line);","lastModifiedDate":"2021-08-24"},{"lineNumber":107,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"chingh20"},"content":"            fileWriter.close();","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"chingh20"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-24"},{"lineNumber":110,"author":{"gitId":"chingh20"},"content":"            System.out.println(\"Cannot update todo list to the file.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":112,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":113,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"chingh20":113}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":" * Represents a task.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"    protected String description;","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"    public Task (String description, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"     * Returns the completing status of the Task object.","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"     * @return \"X\" if the task is completed. \" \" if the task is incomplete.","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-19"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"     * Returns what type of task the Task object is. Should be overrided in the child class of this class.","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"     * @return The type of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"    public abstract String getTypeOfTask();","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"     * Marks the Task object as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-19"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-19"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"I have marked \\\"\" + this.description + \"\\\" as done!\");","lastModifiedDate":"2021-08-19"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"        System.out.println(this.toString());","lastModifiedDate":"2021-08-19"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"     * Gets the description of the Task object.","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"     * @return The description of the Task object.","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-19"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"        return this.description;","lastModifiedDate":"2021-08-19"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"     * Returns the Task object in a string format suitable for storing in file. Should be overrided in child class.","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"     * @return String of the Task object in the correct format for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"    public abstract String saveTaskToFile();","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"chingh20":62}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":" * Represents a user\u0027s todo List.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"public class TaskList {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"    private int numOfTask;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    TaskList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"        this.numOfTask \u003d 0;","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"    TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"        this.numOfTask \u003d taskList.size();","lastModifiedDate":"2021-08-24"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"     * Returns the user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"     * @return The user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"        return this.taskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"     * Marks the task corresponding to the given task number as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"     * @param taskNumber The task number of the task that should be marked as done.","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"     *                   The first task in the user\u0027s todo list have the task number of 1,","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"     *                   the second task in the user\u0027s todo list have the task number of 2,","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"     *                   etc.","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException If no task in the user\u0027s todo list corresponds to the given task number.","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"    public void markAsDone(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"        int index \u003d taskNumber - 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"        checkCanDeleteOrMarkAsDone(taskNumber, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"        this.taskList.get(index).markAsDone();","lastModifiedDate":"2021-08-24"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"        System.out.println();","lastModifiedDate":"2021-08-24"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"     * Adds the given task to the end of the user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"     * @param task The task to be added to the user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"        this.taskList.add(task);","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"Got it! I have added this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"        System.out.println(this.taskList.get(this.numOfTask));","lastModifiedDate":"2021-08-24"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"        this.numOfTask \u003d this.numOfTask + 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"        if (this.numOfTask \u003e 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"            System.out.printf(\"Now you have %s tasks in your list.\\n\", this.numOfTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"            System.out.printf(\"Now you have 1 task in your list.\\n\");","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"        System.out.println();","lastModifiedDate":"2021-08-24"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"     * Deletes the task corresponding to the given task number.","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"     * @param taskNumber The task number of the task that should be deleted.","lastModifiedDate":"2021-08-26"},{"lineNumber":71,"author":{"gitId":"chingh20"},"content":"     *                   The first task in the user\u0027s todo list have the task number of 1,","lastModifiedDate":"2021-08-26"},{"lineNumber":72,"author":{"gitId":"chingh20"},"content":"     *                   the second task in the user\u0027s todo list have the task number of 2,","lastModifiedDate":"2021-08-26"},{"lineNumber":73,"author":{"gitId":"chingh20"},"content":"     *                   etc.","lastModifiedDate":"2021-08-26"},{"lineNumber":74,"author":{"gitId":"chingh20"},"content":"     * @throws DukeException If no task in the user\u0027s todo list corresponds to the given task number.","lastModifiedDate":"2021-08-26"},{"lineNumber":75,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"chingh20"},"content":"    public void deleteTask(int taskNumber) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":77,"author":{"gitId":"chingh20"},"content":"        int index \u003d taskNumber - 1;","lastModifiedDate":"2021-08-26"},{"lineNumber":78,"author":{"gitId":"chingh20"},"content":"        checkCanDeleteOrMarkAsDone(taskNumber, index);","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"chingh20"},"content":"        System.out.println(this.taskList.get(index));","lastModifiedDate":"2021-08-24"},{"lineNumber":81,"author":{"gitId":"chingh20"},"content":"        this.taskList.remove(index);","lastModifiedDate":"2021-08-24"},{"lineNumber":82,"author":{"gitId":"chingh20"},"content":"        this.numOfTask \u003d this.numOfTask - 1;","lastModifiedDate":"2021-08-24"},{"lineNumber":83,"author":{"gitId":"chingh20"},"content":"        if (this.numOfTask \u003e 1) {","lastModifiedDate":"2021-08-24"},{"lineNumber":84,"author":{"gitId":"chingh20"},"content":"            System.out.printf(\"You have %s tasks left on your list.\\n\", this.numOfTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":85,"author":{"gitId":"chingh20"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":86,"author":{"gitId":"chingh20"},"content":"            System.out.printf(\"You have %s task left on your list.\\n\", this.numOfTask);","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":88,"author":{"gitId":"chingh20"},"content":"        System.out.println();","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"chingh20"},"content":"    private void checkCanDeleteOrMarkAsDone(int taskNumber, int index) throws DukeException {","lastModifiedDate":"2021-08-26"},{"lineNumber":92,"author":{"gitId":"chingh20"},"content":"        if (index \u003e this.numOfTask - 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":93,"author":{"gitId":"chingh20"},"content":"            if (this.numOfTask \u003e 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":94,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(String.format(\"Cannot find task %s.\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":95,"author":{"gitId":"chingh20"},"content":"                        \"There are only %s tasks in your list.\", taskNumber, this.numOfTask));","lastModifiedDate":"2021-08-26"},{"lineNumber":96,"author":{"gitId":"chingh20"},"content":"            } else if (this.numOfTask \u003d\u003d 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":97,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(String.format(\"Cannot find task %s.\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":98,"author":{"gitId":"chingh20"},"content":"                        \"There is only %s task in your list.\", taskNumber, this.numOfTask));","lastModifiedDate":"2021-08-26"},{"lineNumber":99,"author":{"gitId":"chingh20"},"content":"            } else {","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"chingh20"},"content":"                throw new DukeException(String.format(\"Cannot find task %s.\" +","lastModifiedDate":"2021-08-26"},{"lineNumber":101,"author":{"gitId":"chingh20"},"content":"                        \"There is no task in your list.\", taskNumber));","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":103,"author":{"gitId":"chingh20"},"content":"        } else if (index \u003c 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":104,"author":{"gitId":"chingh20"},"content":"            throw new DukeException(String.format(\"There is no task %s.\", taskNumber));","lastModifiedDate":"2021-08-26"},{"lineNumber":105,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":107,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":109,"author":{"gitId":"chingh20"},"content":"     * Returns an ArrayList of Task objects matching the given search keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":110,"author":{"gitId":"chingh20"},"content":"     * @param str Keyword used for searching.","lastModifiedDate":"2021-08-26"},{"lineNumber":111,"author":{"gitId":"chingh20"},"content":"     * @return ArrayList of Task objects matching the keyword.","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"chingh20"},"content":"    public ArrayList\u003cTask\u003e findTask(String str) {","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"chingh20"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":115,"author":{"gitId":"chingh20"},"content":"        for (Task t: this.taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"chingh20"},"content":"            if (t.getDescription().contains(str)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":117,"author":{"gitId":"chingh20"},"content":"                matchingTasks.add(t);","lastModifiedDate":"2021-08-26"},{"lineNumber":118,"author":{"gitId":"chingh20"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":119,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":120,"author":{"gitId":"chingh20"},"content":"        return matchingTasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":121,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":122,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":123,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"chingh20":123}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":" * Represents a task with only a description and no stated deadline or scheduled time.","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"    ToDo(String description) {","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"        super(description);","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"    ToDo(String description, boolean isDone) {","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"     * Returns the type of task. Always return \"T\" which stands of the \"T\" in ToDo.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"     * @return \"T\".","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-19"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"    public String getTypeOfTask() {","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"        return \"T\";","lastModifiedDate":"2021-08-19"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-19"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"     * Returns the ToDo object in a string format suitable for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"     * @return String of the ToDo object in the correct format for storing in file.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"    public String saveTaskToFile() {","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"        return this.getTypeOfTask() + \"||\" + this.getStatusIcon() + \"||\" + this.getDescription();","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"     * Returns the ToDo object in a string format.","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"     * @return String in the format of \"[T][marked as done?]_description.\"","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"    @Override","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"        return String.format(\"[%s][%s] %s\", this.getTypeOfTask(),this.getStatusIcon(), this.getDescription());","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"chingh20":44}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":" * Represents the user interface and helps prints long messages for the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"public class Ui {","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"     * Prints the welcoming message for the user and the current tasks in the user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"     * @param taskList The user\u0027s current todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"    public void printStartMessage(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"Hello I am Duke.\\nWhat can I do for you?\");","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"        System.out.println();","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"        if (taskList.size() \u003e 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"            System.out.println(\"Current number of tasks: \" + taskList.size());","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"            iterateTaskList(taskList);","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"            System.out.println();","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"     * Prints the current tasks in the user\u0027s todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"     * @param taskList The user\u0027s current todo list.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"    public void iterateTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"            System.out.println(\"List is empty!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"            System.out.println();","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"            return;","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"            Task temp \u003d taskList.get(i);","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"            System.out.printf(\"%s. %s\\n\", i + 1, temp);","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"        System.out.println();","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"     * Prints the goodbye message for the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"chingh20"},"content":"    public void endMessage() {","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"Bye! See you next time!\");","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"chingh20"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"chingh20"},"content":"     * Prints the result of finding matching tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"chingh20"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"chingh20"},"content":"     * @param taskList The result of finding matching tasks.","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"chingh20"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":56,"author":{"gitId":"chingh20"},"content":"    public void iterateMatchingTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"chingh20"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"chingh20"},"content":"            System.out.println(\"No matching task!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":59,"author":{"gitId":"chingh20"},"content":"            System.out.println();","lastModifiedDate":"2021-08-26"},{"lineNumber":60,"author":{"gitId":"chingh20"},"content":"            return;","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":62,"author":{"gitId":"chingh20"},"content":"        System.out.println(\"Here are the tasks that matches your search:\");","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"chingh20"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"chingh20"},"content":"            Task temp \u003d taskList.get(i);","lastModifiedDate":"2021-08-26"},{"lineNumber":65,"author":{"gitId":"chingh20"},"content":"            System.out.printf(\"%s. %s\\n\", i + 1, temp);","lastModifiedDate":"2021-08-26"},{"lineNumber":66,"author":{"gitId":"chingh20"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":67,"author":{"gitId":"chingh20"},"content":"        System.out.println();","lastModifiedDate":"2021-08-26"},{"lineNumber":68,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":69,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":70,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"chingh20":70}},{"path":"src/test/java/duke/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":" * Tests the methods in Command class.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"public class CommandTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"    private Command command;","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"    CommandTest() {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"        this.command \u003d new Command(\"test.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"        this.command.setTaskListEmpty();","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"    public void runCommand(){","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"        CommandTest test \u003d new CommandTest();","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"        assertEquals(false, test.command.runNextCommand(\"bye\", \"\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"        assertEquals(true, test.command.runNextCommand(\"empty\", \"\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"chingh20":26}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":" * Tests the initialization of a simple Duke object.","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"public class DukeTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"    public void Duke(){","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"        Duke duke \u003d new Duke(\"test.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"        System.out.println(duke);","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"chingh20":18}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"package duke;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"import java.io.File;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":" * Tests the methods in Storage class.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"public class StorageTest {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"chingh20"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"chingh20"},"content":"    public void writeToFileAndTaskSaveToFile() throws FileNotFoundException {","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"chingh20"},"content":"        Storage storage \u003d new Storage(\"test.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"chingh20"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"chingh20"},"content":"        taskList.add(new ToDo(\"say hello\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"chingh20"},"content":"        taskList.add(new Event(\"dance performance\", true, \"at three\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"chingh20"},"content":"        taskList.add(new Deadline(\"cs2106 lab\", false, \"by next week\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"chingh20"},"content":"        storage.writeToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"chingh20"},"content":"        File file \u003d new File(\"test.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"chingh20"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"chingh20"},"content":"        String line \u003d scanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"chingh20"},"content":"        assertEquals(\"T|| ||say hello\",line);","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"chingh20"},"content":"        line \u003d scanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"chingh20"},"content":"        assertEquals(\"E||X||dance performance||at three\", line);","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"chingh20"},"content":"        line \u003d scanner.nextLine();","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"chingh20"},"content":"        assertEquals(\"D|| ||cs2106 lab||by next week\", line);","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"chingh20"},"content":"    @Test","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"chingh20"},"content":"    public void readAndWriteFile() throws DukeException, FileNotFoundException {","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"chingh20"},"content":"        Storage storage \u003d new Storage(\"test.txt\");","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"chingh20"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"chingh20"},"content":"        storage.writeToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":40,"author":{"gitId":"chingh20"},"content":"        assertEquals(0, storage.readFile().size());","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"chingh20"},"content":"        taskList.add(new ToDo(\"finish CS2101 Week 3\"));","lastModifiedDate":"2021-08-26"},{"lineNumber":42,"author":{"gitId":"chingh20"},"content":"        assertEquals(0, storage.readFile().size());","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"chingh20"},"content":"        storage.writeToFile(taskList);","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"chingh20"},"content":"        assertEquals(\"[T][ ] finish CS2101 Week 3\",storage.readFile().get(0).toString());","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"chingh20"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":46,"author":{"gitId":"chingh20"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"chingh20":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chingh20"},"content":"todo borrow book","lastModifiedDate":"2021-08-19"},{"lineNumber":2,"author":{"gitId":"chingh20"},"content":"event go to school /at 8am","lastModifiedDate":"2021-08-19"},{"lineNumber":3,"author":{"gitId":"chingh20"},"content":"deadline finish level-6 /by today 2359","lastModifiedDate":"2021-08-19"},{"lineNumber":4,"author":{"gitId":"chingh20"},"content":"todo go fishing","lastModifiedDate":"2021-08-19"},{"lineNumber":5,"author":{"gitId":"chingh20"},"content":"event go back home /at 7pm","lastModifiedDate":"2021-08-19"},{"lineNumber":6,"author":{"gitId":"chingh20"},"content":"deadline finish level-? /by today 2359","lastModifiedDate":"2021-08-19"},{"lineNumber":7,"author":{"gitId":"chingh20"},"content":"done 1","lastModifiedDate":"2021-08-19"},{"lineNumber":8,"author":{"gitId":"chingh20"},"content":"List","lastModifiedDate":"2021-08-19"},{"lineNumber":9,"author":{"gitId":"chingh20"},"content":"delete 2","lastModifiedDate":"2021-08-19"},{"lineNumber":10,"author":{"gitId":"chingh20"},"content":"delete 0","lastModifiedDate":"2021-08-19"},{"lineNumber":11,"author":{"gitId":"chingh20"},"content":"done 6","lastModifiedDate":"2021-08-19"},{"lineNumber":12,"author":{"gitId":"chingh20"},"content":"todo","lastModifiedDate":"2021-08-19"},{"lineNumber":13,"author":{"gitId":"chingh20"},"content":"event say hi","lastModifiedDate":"2021-08-19"},{"lineNumber":14,"author":{"gitId":"chingh20"},"content":"deadline watch lecture video","lastModifiedDate":"2021-08-19"},{"lineNumber":15,"author":{"gitId":"chingh20"},"content":"","lastModifiedDate":"2021-08-19"},{"lineNumber":16,"author":{"gitId":"chingh20"},"content":"bye","lastModifiedDate":"2021-08-19"}],"authorContributionMap":{"chingh20":16}}]

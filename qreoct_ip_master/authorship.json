[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"    mainClassName \u003d \"seedu.duke.App\"","lastModifiedDate":"2021-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"qreoct":1,"-":45}},{"path":"src/main/java/duke/App.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.AuguryException;","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" * The {@code App} class starts an instance of Augury.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"public class App {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"     * Initializes the {@code Augury} application.","lastModifiedDate":"2021-08-30"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-30"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"    public static void main(String[] args) throws AuguryException {","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"        Augury a \u003d new Augury(\"data/tasks.txt\");","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        a.init();","lastModifiedDate":"2021-08-22"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"        a.greet();","lastModifiedDate":"2021-08-22"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"        a.loop();","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":19}},{"path":"src/main/java/duke/Augury.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-30"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.*;","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"import duke.io.Parser;","lastModifiedDate":"2021-08-30"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"import duke.tasks.TaskFactory;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"import duke.ui.Ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"import duke.util.StringCleaner;","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":" * The {@code Augury} class contains the entry point of the entire Task Management app.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":" * Create an instance of {@code Augury}, initialize with {@code init()}, and start the program","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":" * with {@code loop()}.","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":" * \u003cp\u003e{@code Augury} takes in a {@code String path} as argument in its constructor.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":" * This file stores data created by the app. If no file exists at the specified path,","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":" * {@code Augury} will create a new file.\u003c/p\u003e","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":" *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":" * @author Jefferson (@qreoct)","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"public class Augury {","lastModifiedDate":"2021-08-16"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"    private final String VER     \u003d \"v0.9.1\"; // Level-9 Find, A-CodingStandard + A-JavaDocs","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"    private final String WELCOME \u003d","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"            \"\\t+-------------------------------+\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"            \"\\t| *                 *         * |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"            \"\\t|   (`\u003c       augury     *      |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"            \"\\t| __/_)_______________________  |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"            \"\\t|   ||                      *   |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"            \"\\t|   ||   a task manager         |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"            \"\\t|      *             *          |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"            \"\\t|             *         \"+VER+\"  |\\n\" +","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"            \"\\t+-------------------------------+\";","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"    private TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"    private Storage storage;","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"    private Ui ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"    private Parser parser;","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":45,"author":{"gitId":"qreoct"},"content":"     * Initialises a new {@code Augury} object which uses the","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"qreoct"},"content":"     * provided {@code String path} as location of the .txt save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"qreoct"},"content":"     * @param path A {@code String} containing the location of the .txt save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"qreoct"},"content":"    public Augury(String path) {","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"qreoct"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-08-24"},{"lineNumber":52,"author":{"gitId":"qreoct"},"content":"        this.storage \u003d new Storage(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"qreoct"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2021-08-24"},{"lineNumber":54,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":55,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":56,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"qreoct"},"content":"     * Initialises the private {@code TaskList} using the data from the","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"qreoct"},"content":"     * save file provided.","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"qreoct"},"content":"     * @throws FileIOException If file cannot be read or created","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"qreoct"},"content":"    public void init() throws AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"qreoct"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"qreoct"},"content":"            this.storage.initializeTaskList(this.taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"qreoct"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"qreoct"},"content":"            throw new FileIOException(e.getMessage());","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":70,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"qreoct"},"content":"     * Prints a welcome message to the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"qreoct"},"content":"    public void greet() {","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"qreoct"},"content":"        System.out.println(WELCOME);","lastModifiedDate":"2021-08-24"},{"lineNumber":75,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":76,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":77,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":78,"author":{"gitId":"qreoct"},"content":"     * Runs main loop of {@code Augury}. Parses and execute commands in a loop.","lastModifiedDate":"2021-08-26"},{"lineNumber":79,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":80,"author":{"gitId":"qreoct"},"content":"     * @throws InvalidActionException If action commands were malformed.","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"qreoct"},"content":"     * @throws InvalidTaskCreationException If invalid parameters were provided in task creation.","lastModifiedDate":"2021-08-25"},{"lineNumber":82,"author":{"gitId":"qreoct"},"content":"     * @throws UnknownCommandException If an unrecognized command was provided.","lastModifiedDate":"2021-08-25"},{"lineNumber":83,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":84,"author":{"gitId":"qreoct"},"content":"    public void loop() throws AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"qreoct"},"content":"        Scanner scan \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"qreoct"},"content":"        ui.speak(\"Hello! How may I help you?\");","lastModifiedDate":"2021-08-24"},{"lineNumber":87,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"qreoct"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2021-08-24"},{"lineNumber":89,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":90,"author":{"gitId":"qreoct"},"content":"        while (isRunning) {","lastModifiedDate":"2021-08-24"},{"lineNumber":91,"author":{"gitId":"qreoct"},"content":"            String input \u003d scan.nextLine().trim().toLowerCase();","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"qreoct"},"content":"            try {","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"qreoct"},"content":"                String command \u003d parser.parse(input);","lastModifiedDate":"2021-08-24"},{"lineNumber":94,"author":{"gitId":"qreoct"},"content":"                switch(command) {","lastModifiedDate":"2021-08-24"},{"lineNumber":95,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_QUIT\":","lastModifiedDate":"2021-08-24"},{"lineNumber":96,"author":{"gitId":"qreoct"},"content":"                    ui.speak(\"The readiness is all.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":97,"author":{"gitId":"qreoct"},"content":"                    isRunning \u003d false;","lastModifiedDate":"2021-08-24"},{"lineNumber":98,"author":{"gitId":"qreoct"},"content":"                    break;","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_LIST_TASKS\":","lastModifiedDate":"2021-08-24"},{"lineNumber":100,"author":{"gitId":"qreoct"},"content":"                    handleListTasks();","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"qreoct"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":102,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_MARK_TASK_STATUS\":","lastModifiedDate":"2021-08-24"},{"lineNumber":103,"author":{"gitId":"qreoct"},"content":"                    handleMarkAsDone(input);","lastModifiedDate":"2021-08-22"},{"lineNumber":104,"author":{"gitId":"qreoct"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":105,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_DELETE_TASK\":","lastModifiedDate":"2021-08-24"},{"lineNumber":106,"author":{"gitId":"qreoct"},"content":"                    handleDeleteTasks(input);","lastModifiedDate":"2021-08-22"},{"lineNumber":107,"author":{"gitId":"qreoct"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":108,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_MAKE_TASK\":","lastModifiedDate":"2021-08-24"},{"lineNumber":109,"author":{"gitId":"qreoct"},"content":"                    handleAddTask(input);","lastModifiedDate":"2021-08-22"},{"lineNumber":110,"author":{"gitId":"qreoct"},"content":"                    break;","lastModifiedDate":"2021-08-24"},{"lineNumber":111,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_FIND_TASKS\":","lastModifiedDate":"2021-08-26"},{"lineNumber":112,"author":{"gitId":"qreoct"},"content":"                    handleFindTasks(input);","lastModifiedDate":"2021-08-26"},{"lineNumber":113,"author":{"gitId":"qreoct"},"content":"                    break;","lastModifiedDate":"2021-08-26"},{"lineNumber":114,"author":{"gitId":"qreoct"},"content":"                case \"COMMAND_UNKNOWN\":","lastModifiedDate":"2021-08-24"},{"lineNumber":115,"author":{"gitId":"qreoct"},"content":"                    throw new UnknownCommandException(\"Unknown command.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":116,"author":{"gitId":"qreoct"},"content":"                default:","lastModifiedDate":"2021-08-24"},{"lineNumber":117,"author":{"gitId":"qreoct"},"content":"                    throw new AuguryException(\"Something went wrong.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":118,"author":{"gitId":"qreoct"},"content":"                }","lastModifiedDate":"2021-08-22"},{"lineNumber":119,"author":{"gitId":"qreoct"},"content":"            } catch (AuguryException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":120,"author":{"gitId":"qreoct"},"content":"                ui.speak(e.getMessage() + \"\\n\\t Please try again.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":121,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-22"},{"lineNumber":122,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":123,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":124,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":125,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":126,"author":{"gitId":"qreoct"},"content":"    private void handleAddTask(String arg) throws AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":127,"author":{"gitId":"qreoct"},"content":"        String type \u003d arg.split(\" \")[0];","lastModifiedDate":"2021-08-16"},{"lineNumber":128,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":129,"author":{"gitId":"qreoct"},"content":"        try {","lastModifiedDate":"2021-08-21"},{"lineNumber":130,"author":{"gitId":"qreoct"},"content":"            TaskFactory tf \u003d new TaskFactory();","lastModifiedDate":"2021-08-21"},{"lineNumber":131,"author":{"gitId":"qreoct"},"content":"            Task newTask \u003d tf.createTask(type, arg);","lastModifiedDate":"2021-08-21"},{"lineNumber":132,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":133,"author":{"gitId":"qreoct"},"content":"            if (newTask \u003d\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":134,"author":{"gitId":"qreoct"},"content":"                throw new UnknownCommandException(\"Invalid command entered when creating task.\");","lastModifiedDate":"2021-08-24"},{"lineNumber":135,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":136,"author":{"gitId":"qreoct"},"content":"            ui.speak(taskList.addTaskAndAnnounce(type, newTask));","lastModifiedDate":"2021-08-24"},{"lineNumber":137,"author":{"gitId":"qreoct"},"content":"            storage.saveTaskListToStorage(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":138,"author":{"gitId":"qreoct"},"content":"        } catch (AuguryException e) {","lastModifiedDate":"2021-08-21"},{"lineNumber":139,"author":{"gitId":"qreoct"},"content":"            throw new AuguryException(e.getMessage());","lastModifiedDate":"2021-08-21"},{"lineNumber":140,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":141,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":142,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":143,"author":{"gitId":"qreoct"},"content":"    private void handleListTasks() {","lastModifiedDate":"2021-08-22"},{"lineNumber":144,"author":{"gitId":"qreoct"},"content":"        ui.speak(taskList.toString());","lastModifiedDate":"2021-08-24"},{"lineNumber":145,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":146,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":147,"author":{"gitId":"qreoct"},"content":"    private void handleMarkAsDone(String args) throws AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":148,"author":{"gitId":"qreoct"},"content":"        // check if args exist","lastModifiedDate":"2021-08-16"},{"lineNumber":149,"author":{"gitId":"qreoct"},"content":"        if (args.length() \u003c\u003d 5) {","lastModifiedDate":"2021-08-16"},{"lineNumber":150,"author":{"gitId":"qreoct"},"content":"            throw new InvalidActionException(\"Please enter the task number which you want to mark as done.\");","lastModifiedDate":"2021-08-16"},{"lineNumber":151,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":152,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":153,"author":{"gitId":"qreoct"},"content":"        args \u003d args.substring(5);","lastModifiedDate":"2021-08-16"},{"lineNumber":154,"author":{"gitId":"qreoct"},"content":"        ArrayList\u003cInteger\u003e listOfTasks \u003d StringCleaner.toArrayListInteger(args);","lastModifiedDate":"2021-08-26"},{"lineNumber":155,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":156,"author":{"gitId":"qreoct"},"content":"        for (Integer i : listOfTasks) {","lastModifiedDate":"2021-08-17"},{"lineNumber":157,"author":{"gitId":"qreoct"},"content":"            if (i \u003e taskList.size()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":158,"author":{"gitId":"qreoct"},"content":"                throw new InvalidActionException(\"Task \" + i + \" does not exist, please try again\");","lastModifiedDate":"2021-08-17"},{"lineNumber":159,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":160,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":161,"author":{"gitId":"qreoct"},"content":"        ui.speak(taskList.markAsDoneAndAnnounce(listOfTasks));","lastModifiedDate":"2021-08-25"},{"lineNumber":162,"author":{"gitId":"qreoct"},"content":"        storage.saveTaskListToStorage(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":163,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":164,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":165,"author":{"gitId":"qreoct"},"content":"    private void handleDeleteTasks(String args) throws AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":166,"author":{"gitId":"qreoct"},"content":"        // check if args exist","lastModifiedDate":"2021-08-17"},{"lineNumber":167,"author":{"gitId":"qreoct"},"content":"        if (args.length() \u003c\u003d 7) {","lastModifiedDate":"2021-08-17"},{"lineNumber":168,"author":{"gitId":"qreoct"},"content":"            throw new InvalidActionException(\"Please enter the task number which you want to delete.\");","lastModifiedDate":"2021-08-17"},{"lineNumber":169,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":170,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":171,"author":{"gitId":"qreoct"},"content":"        args \u003d args.substring(7);","lastModifiedDate":"2021-08-17"},{"lineNumber":172,"author":{"gitId":"qreoct"},"content":"        ArrayList\u003cInteger\u003e listOfTasks \u003d StringCleaner.toArrayListInteger(args);","lastModifiedDate":"2021-08-26"},{"lineNumber":173,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":174,"author":{"gitId":"qreoct"},"content":"        for (Integer i : listOfTasks) {","lastModifiedDate":"2021-08-17"},{"lineNumber":175,"author":{"gitId":"qreoct"},"content":"            if (i \u003e taskList.size()) {","lastModifiedDate":"2021-08-17"},{"lineNumber":176,"author":{"gitId":"qreoct"},"content":"                throw new InvalidActionException(\"Task \" + i + \" does not exist, please try again.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":177,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":178,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":179,"author":{"gitId":"qreoct"},"content":"        ui.speak(taskList.deleteTasksAndAnnounce(listOfTasks));","lastModifiedDate":"2021-08-25"},{"lineNumber":180,"author":{"gitId":"qreoct"},"content":"        storage.saveTaskListToStorage(taskList);","lastModifiedDate":"2021-08-22"},{"lineNumber":181,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":182,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":183,"author":{"gitId":"qreoct"},"content":"    private void handleFindTasks(String args) throws AuguryException {","lastModifiedDate":"2021-08-26"},{"lineNumber":184,"author":{"gitId":"qreoct"},"content":"        if (args.length() \u003c\u003d 5) {","lastModifiedDate":"2021-08-26"},{"lineNumber":185,"author":{"gitId":"qreoct"},"content":"            throw new InvalidActionException(\"Please enter the search string which you want to find.\");","lastModifiedDate":"2021-08-26"},{"lineNumber":186,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":187,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":188,"author":{"gitId":"qreoct"},"content":"        args \u003d args.substring(5);","lastModifiedDate":"2021-08-26"},{"lineNumber":189,"author":{"gitId":"qreoct"},"content":"        ui.speak(taskList.findAndAnnounce(args));","lastModifiedDate":"2021-08-26"},{"lineNumber":190,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":191,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":192,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":192}},{"path":"src/main/java/duke/exceptions/AuguryException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * The {@code AuguryException} class represents {@code Exceptions} thrown by {@code Augury}.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"public class AuguryException extends Exception {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"    public AuguryException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":10}},{"path":"src/main/java/duke/exceptions/FileIOException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * {@code FileIOException} extends from {@code AuguryException}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" * Gets thrown when file reading/writing fails.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"public class FileIOException extends AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"    public FileIOException(String message) {","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"        super(message);","lastModifiedDate":"2021-08-22"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"qreoct":11}},{"path":"src/main/java/duke/exceptions/InvalidActionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * {@code InvalidActionException} extends from {@code AuguryException}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" * Gets thrown when invalid parameters are provided to commands.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"public class InvalidActionException extends AuguryException {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"    public InvalidActionException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":11}},{"path":"src/main/java/duke/exceptions/InvalidTaskCreationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * {@code InvalidTaskCreationException} extends from {@code AuguryException}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" * Gets thrown when invalid parameters are passed during {@code Task} creation.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"public class InvalidTaskCreationException extends AuguryException {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"    public InvalidTaskCreationException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":11}},{"path":"src/main/java/duke/exceptions/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.exceptions;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * {@code UnknownCommandException} extends from {@code AuguryException}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" * Gets thrown when an unrecognized command is sent to {@code Augury}.","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"public class UnknownCommandException extends AuguryException {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"    public UnknownCommandException(String message) {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"        super(message);","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":11}},{"path":"src/main/java/duke/io/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.io;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * The {@code Parser} class handles command parsing.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"public class Parser {","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_MAKE_TASK \u003d \"COMMAND_MAKE_TASK\";","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_LIST_TASKS \u003d \"COMMAND_LIST_TASKS\";","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_FIND_TASKS \u003d \"COMMAND_FIND_TASKS\";","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_QUIT \u003d \"COMMAND_QUIT\";","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_MARK_TASK_STATUS \u003d \"COMMAND_MARK_TASK_STATUS\";","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_DELETE_TASK \u003d \"COMMAND_DELETE_TASK\";","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"    private final String COMMAND_UNKNOWN \u003d \"COMMAND_UNKNOWN\";","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"    public Parser() { }","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"     * Converts the provided user {@code String input} and parses the desired command.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"     * @param input {@code String} of user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"     * @return {@code String} which corresponds to the command that the user entered.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"    public String parse(String input) {","lastModifiedDate":"2021-08-24"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"        if (input.equals(\"bye\") || input.equals(\"exit\") || input.equals(\"quit\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"            return COMMAND_QUIT;","lastModifiedDate":"2021-08-24"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"        } else if (input.equals(\"list\") || input.equals(\"ls\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"            return COMMAND_LIST_TASKS;","lastModifiedDate":"2021-08-24"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"        } else if (input.length() \u003e\u003d 4 \u0026\u0026 input.startsWith(\"done\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"            return COMMAND_MARK_TASK_STATUS;","lastModifiedDate":"2021-08-24"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"delete\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"            return COMMAND_DELETE_TASK;","lastModifiedDate":"2021-08-24"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"        } else if (input.startsWith(\"event\") || input.startsWith(\"deadline\") || input.startsWith(\"todo\")) {","lastModifiedDate":"2021-08-24"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"            return COMMAND_MAKE_TASK;","lastModifiedDate":"2021-08-24"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"            return COMMAND_FIND_TASKS;","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"        } else {","lastModifiedDate":"2021-08-24"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"            return COMMAND_UNKNOWN;","lastModifiedDate":"2021-08-24"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-24"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"qreoct":43}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.storage;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.io.File;","lastModifiedDate":"2021-08-22"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"import java.io.IOException;","lastModifiedDate":"2021-08-22"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-30"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-30"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.AuguryException;","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.FileIOException;","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"import duke.tasks.Task;","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"import duke.tasks.TaskFactory;","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":" * The {@code Storage} class handles reading and writing data from files.","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"public class Storage {","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"    private String path;","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"     * Initializes a {@code Storage} instance to have a {@code String path}.","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"     * @param path {@code String} representing path to work on.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"    public Storage(String path) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"        this.path \u003d path;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"     * Initializes a {@code TaskList t} using data from the save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"     * If save file does not exist, {@code Storage} will attempt to create the directory and file.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"     * @param t {@code TaskList} to write data to.","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"     * @throws IOException If file cannot be found or written to","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"    public void initializeTaskList(TaskList t) throws IOException, AuguryException {","lastModifiedDate":"2021-08-23"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"        String directory \u003d \"data\";","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"        File dir \u003d new File(directory);","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"            dir.mkdir();","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"qreoct"},"content":"        File f \u003d new File(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"qreoct"},"content":"        f.createNewFile();","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"qreoct"},"content":"        loadTaskListFromStorage(t);","lastModifiedDate":"2021-08-24"},{"lineNumber":48,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"qreoct"},"content":"     * Saves the given {@code TaskList t} into the save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"qreoct"},"content":"     * @param t {@code TaskList} to read data from.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"qreoct"},"content":"     * @throws FileIOException If file cannot be found or written to","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"qreoct"},"content":"    public void saveTaskListToStorage(TaskList t) throws AuguryException {","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"qreoct"},"content":"        try {","lastModifiedDate":"2021-08-22"},{"lineNumber":58,"author":{"gitId":"qreoct"},"content":"            File f \u003d new File(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":59,"author":{"gitId":"qreoct"},"content":"            String s \u003d convertTaskListToString(t);","lastModifiedDate":"2021-08-22"},{"lineNumber":60,"author":{"gitId":"qreoct"},"content":"            writeStringToStorage(s);","lastModifiedDate":"2021-08-22"},{"lineNumber":61,"author":{"gitId":"qreoct"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-08-22"},{"lineNumber":62,"author":{"gitId":"qreoct"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-08-22"},{"lineNumber":63,"author":{"gitId":"qreoct"},"content":"            throw new FileIOException(\"File error occured\");","lastModifiedDate":"2021-08-22"},{"lineNumber":64,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":65,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":66,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":67,"author":{"gitId":"qreoct"},"content":"    private String convertTaskListToString(TaskList xs) {","lastModifiedDate":"2021-08-22"},{"lineNumber":68,"author":{"gitId":"qreoct"},"content":"        ArrayList\u003cTask\u003e tasks \u003d xs.tasks();","lastModifiedDate":"2021-08-22"},{"lineNumber":69,"author":{"gitId":"qreoct"},"content":"        ArrayList\u003cString\u003e tasksString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-30"},{"lineNumber":70,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":71,"author":{"gitId":"qreoct"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":72,"author":{"gitId":"qreoct"},"content":"            tasksString.add(t.toString());","lastModifiedDate":"2021-08-30"},{"lineNumber":73,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":74,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":75,"author":{"gitId":"qreoct"},"content":"        String res \u003d String.join(\"\\n\", tasksString);","lastModifiedDate":"2021-08-30"},{"lineNumber":76,"author":{"gitId":"qreoct"},"content":"        return res.toString();","lastModifiedDate":"2021-08-22"},{"lineNumber":77,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":78,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":79,"author":{"gitId":"qreoct"},"content":"    private void loadTaskListFromStorage(TaskList t) throws IOException, AuguryException {","lastModifiedDate":"2021-08-24"},{"lineNumber":80,"author":{"gitId":"qreoct"},"content":"        // read tasks.txt","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"qreoct"},"content":"        Scanner s \u003d new Scanner(new File(path)); // create a Scanner using the File as the source","lastModifiedDate":"2021-08-22"},{"lineNumber":82,"author":{"gitId":"qreoct"},"content":"        ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":83,"author":{"gitId":"qreoct"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2021-08-22"},{"lineNumber":84,"author":{"gitId":"qreoct"},"content":"            tasks.add(s.nextLine());","lastModifiedDate":"2021-08-22"},{"lineNumber":85,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":86,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":87,"author":{"gitId":"qreoct"},"content":"        // create a task for each line","lastModifiedDate":"2021-08-22"},{"lineNumber":88,"author":{"gitId":"qreoct"},"content":"        TaskFactory tf \u003d new TaskFactory();","lastModifiedDate":"2021-08-22"},{"lineNumber":89,"author":{"gitId":"qreoct"},"content":"        for (String task : tasks) {","lastModifiedDate":"2021-08-22"},{"lineNumber":90,"author":{"gitId":"qreoct"},"content":"            Task newTask \u003d tf.createTask(task);","lastModifiedDate":"2021-08-22"},{"lineNumber":91,"author":{"gitId":"qreoct"},"content":"            t.addTask(newTask);","lastModifiedDate":"2021-08-22"},{"lineNumber":92,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":93,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":94,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":95,"author":{"gitId":"qreoct"},"content":"    private void writeStringToStorage(String s) throws IOException {","lastModifiedDate":"2021-08-22"},{"lineNumber":96,"author":{"gitId":"qreoct"},"content":"        FileWriter fw \u003d new FileWriter(path);","lastModifiedDate":"2021-08-22"},{"lineNumber":97,"author":{"gitId":"qreoct"},"content":"        fw.write(s);","lastModifiedDate":"2021-08-22"},{"lineNumber":98,"author":{"gitId":"qreoct"},"content":"        fw.close();","lastModifiedDate":"2021-08-22"},{"lineNumber":99,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":100,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":101,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-22"}],"authorContributionMap":{"qreoct":101}},{"path":"src/main/java/duke/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" * The {@code DeadlineTask} class extends from {@code Task} to contain an additional","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":" * {@code LocalDateTime time} field.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    protected LocalDateTime time;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"     * Initializes a {@code DeadlineTask} with {@code String description} and {@code LocalDateTime time}.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"     * @param description {@code String} Description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"     * @param time {@code LocalDateTime} Time that the task is due by.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    public DeadlineTask(String description, LocalDateTime time) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"     * Initializes a {@code DeadlineTask} with {@code String description}, {@code LocalDateTime time}","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"     * and {@code boolean isDone} status.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"     * @param description {@code String} Description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"     * @param time {@code LocalDateTime} Time that the task is due by.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"     * @param isDone {@code boolean} Done status of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"    public DeadlineTask(String description, LocalDateTime time, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"     * Prints {@code DeadlineTask} description with the prefix [D] and deadline time.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + time.format(Task.TIME_DISPLAY_FORMAT) + \")\";","lastModifiedDate":"2021-08-30"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":43}},{"path":"src/main/java/duke/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" * The {@code EventTask} class extends from {@code Task} to contain an additional","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":" * {@code LocalDateTime time} field.","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"public class EventTask extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    protected LocalDateTime time;","lastModifiedDate":"2021-08-23"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"     * Initializes an {@code EventTask} with {@code String description} and {@code LocalDateTime time}.","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"     * @param description {@code String} Description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"     * @param time {@code LocalDateTime} Time that the task takes place at.","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    public EventTask(String description, LocalDateTime time) {","lastModifiedDate":"2021-08-23"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"     * Initializes an {@code DeadlineTask} with {@code String description}, {@code LocalDateTime time}","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"     * and {@code boolean isDone} status.","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"     * @param description {@code String} Description of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"     * @param time {@code LocalDateTime} Time that the task takes place at.","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"     * @param isDone {@code boolean} Done status of task.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"    public EventTask(String description, LocalDateTime time, boolean isDone) {","lastModifiedDate":"2021-08-23"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"        this.time \u003d time;","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"     * Prints {@code EventTask} description with the prefix [E] and event time.","lastModifiedDate":"2021-08-26"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + time.format(TIME_DISPLAY_FORMAT) + \")\";","lastModifiedDate":"2021-08-23"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":43}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-30"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-30"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":" * The {@code Task} parent class contains abstractions for tasks.","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"public abstract class Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"    protected static final DateTimeFormatter TIME_DISPLAY_FORMAT \u003d DateTimeFormatter.ofPattern(\"d MMM y, E, kk:mm\");","lastModifiedDate":"2021-08-30"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    private static int numOfTasks \u003d 0;","lastModifiedDate":"2021-08-30"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"    protected String description;","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"    public enum TaskTypes {","lastModifiedDate":"2021-08-16"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        TODO, DEADLINE, EVENT","lastModifiedDate":"2021-08-16"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"     * Initializes an instance of {@code Task} with {@code String description}.","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"     * @param description {@code String} that contains description of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-16"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"     * Initializes an instance of {@code Task} with {@code String description}","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"     * and {@code boolean isDone} status.","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"     * @param description {@code String} that contains description of task.","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"     * @param isDone {@code boolean} that represents task completion status.","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-22"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"     * Marks the current {@code Task} to be done.","lastModifiedDate":"2021-08-26"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-16"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-08-16"},{"lineNumber":44,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":45,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":46,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":47,"author":{"gitId":"qreoct"},"content":"     * Returns description of {@code Task}.","lastModifiedDate":"2021-08-26"},{"lineNumber":48,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":49,"author":{"gitId":"qreoct"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-26"},{"lineNumber":50,"author":{"gitId":"qreoct"},"content":"        return this.description;","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":52,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":53,"author":{"gitId":"qreoct"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":54,"author":{"gitId":"qreoct"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":55,"author":{"gitId":"qreoct"},"content":"        String checkbox \u003d isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2021-08-16"},{"lineNumber":56,"author":{"gitId":"qreoct"},"content":"        return checkbox + \" \" + description;","lastModifiedDate":"2021-08-16"},{"lineNumber":57,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":58}},{"path":"src/main/java/duke/tasks/TaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-23"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.AuguryException;","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.InvalidTaskCreationException;","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"import duke.util.StringCleaner;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":" * The {@code TaskFactory} is a factory class responsible for creating {@code Task}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"public class TaskFactory {","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-23"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"    public TaskFactory() { }","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"     * Creates a single {@code Task} from the given {@code String newTaskDetails}.","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"     * This method signature is called when creating tasks from the save file.","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"     * @param newTaskDetails {@code String} containing details of the task.","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"     *                                     Example: {@code [E] event (at: 6 Sep 2021, Tue, 21:00)}","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"    public Task createTask(String newTaskDetails) {","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"        // this method is used when reading from duke.tasks.txt file","lastModifiedDate":"2021-08-24"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"        // the syntax is [E][X] description (at: time)","lastModifiedDate":"2021-08-22"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"        if (newTaskDetails.startsWith(\"[T\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"            boolean isDone \u003d newTaskDetails.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2021-08-22"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"            String description \u003d newTaskDetails.split(\"] \")[1].trim();","lastModifiedDate":"2021-08-22"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"            return new TodoTask(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"        } else if (newTaskDetails.startsWith(\"[E\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"            boolean isDone \u003d newTaskDetails.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2021-08-22"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"            String description \u003d newTaskDetails.split(\"] \")[1]","lastModifiedDate":"2021-08-22"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"                    .split(\" \\\\(\")[0]","lastModifiedDate":"2021-08-22"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"                    .trim();","lastModifiedDate":"2021-08-22"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"            String timeString \u003d newTaskDetails.split(\"\\\\(at: \")[1]","lastModifiedDate":"2021-08-23"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"                    .replaceAll(\".$\", \"\"); // get rid of last character \u0027)\u0027","lastModifiedDate":"2021-08-22"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"            LocalDateTime time \u003d LocalDateTime.parse(timeString, Task.TIME_DISPLAY_FORMAT);","lastModifiedDate":"2021-08-30"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"            return new EventTask(description, time, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"        } else if (newTaskDetails.startsWith(\"[D\")) {","lastModifiedDate":"2021-08-22"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"            boolean isDone \u003d newTaskDetails.substring(4).equals(\"X\");","lastModifiedDate":"2021-08-22"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"            String description \u003d newTaskDetails.split(\"] \")[1]","lastModifiedDate":"2021-08-22"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"                    .split(\" \\\\(\")[0]","lastModifiedDate":"2021-08-22"},{"lineNumber":44,"author":{"gitId":"qreoct"},"content":"                    .trim();","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"qreoct"},"content":"            String timeString \u003d newTaskDetails.split(\"\\\\(by: \")[1]","lastModifiedDate":"2021-08-23"},{"lineNumber":46,"author":{"gitId":"qreoct"},"content":"                    .replaceAll(\".$\", \"\"); // get rid of last character \u0027)\u0027","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"qreoct"},"content":"            LocalDateTime time \u003d LocalDateTime.parse(timeString, Task.TIME_DISPLAY_FORMAT);","lastModifiedDate":"2021-08-30"},{"lineNumber":48,"author":{"gitId":"qreoct"},"content":"            return new DeadlineTask(description, time, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":49,"author":{"gitId":"qreoct"},"content":"        } else {","lastModifiedDate":"2021-08-22"},{"lineNumber":50,"author":{"gitId":"qreoct"},"content":"            return null;","lastModifiedDate":"2021-08-22"},{"lineNumber":51,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-22"},{"lineNumber":52,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":53,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":54,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"qreoct"},"content":"     * Creates a single {@code Task} from the given {@code String newTaskType} and {@code String newTaskDetails}.","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"qreoct"},"content":"     * This method signature is called when creating tasks from user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"qreoct"},"content":"     * @param newTaskType {@code String}, one of: \u0027todo\u0027, \u0027event\u0027, \u0027deadline\u0027.","lastModifiedDate":"2021-08-25"},{"lineNumber":59,"author":{"gitId":"qreoct"},"content":"     * @param newTaskDetails {@code String} representing full user input.","lastModifiedDate":"2021-08-25"},{"lineNumber":60,"author":{"gitId":"qreoct"},"content":"     *                                     Example: {@code event shopping /at 2021-08-08 2300}","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"qreoct"},"content":"     * @throws InvalidTaskCreationException If user input has missing paramenters or malformed date.","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"qreoct"},"content":"    public Task createTask(String newTaskType, String newTaskDetails) throws AuguryException {","lastModifiedDate":"2021-08-21"},{"lineNumber":64,"author":{"gitId":"qreoct"},"content":"        if (newTaskType \u003d\u003d null) {","lastModifiedDate":"2021-08-21"},{"lineNumber":65,"author":{"gitId":"qreoct"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":66,"author":{"gitId":"qreoct"},"content":"        } else if (newTaskType.equalsIgnoreCase(Task.TaskTypes.TODO.toString())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":67,"author":{"gitId":"qreoct"},"content":"            checkDetailsNonEmpty(newTaskType, newTaskDetails);","lastModifiedDate":"2021-08-21"},{"lineNumber":68,"author":{"gitId":"qreoct"},"content":"            String description \u003d newTaskDetails.substring(5).trim();","lastModifiedDate":"2021-08-21"},{"lineNumber":69,"author":{"gitId":"qreoct"},"content":"            return new TodoTask(description);","lastModifiedDate":"2021-08-21"},{"lineNumber":70,"author":{"gitId":"qreoct"},"content":"        } else if (newTaskType.equalsIgnoreCase(Task.TaskTypes.EVENT.toString())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":71,"author":{"gitId":"qreoct"},"content":"            checkDetailsNonEmpty(newTaskType, newTaskDetails);","lastModifiedDate":"2021-08-21"},{"lineNumber":72,"author":{"gitId":"qreoct"},"content":"            checkTaskIncludesTime(newTaskType, newTaskDetails);","lastModifiedDate":"2021-08-21"},{"lineNumber":73,"author":{"gitId":"qreoct"},"content":"            String description \u003d newTaskDetails.substring(6).split(\"/at \")[0].trim();","lastModifiedDate":"2021-08-21"},{"lineNumber":74,"author":{"gitId":"qreoct"},"content":"            String timeString \u003d newTaskDetails.split(\"/at \")[1].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":75,"author":{"gitId":"qreoct"},"content":"            LocalDateTime time \u003d StringCleaner.toLocalDateTime(timeString);","lastModifiedDate":"2021-08-26"},{"lineNumber":76,"author":{"gitId":"qreoct"},"content":"            return new EventTask(description, time);","lastModifiedDate":"2021-08-21"},{"lineNumber":77,"author":{"gitId":"qreoct"},"content":"        } else if (newTaskType.equalsIgnoreCase(Task.TaskTypes.DEADLINE.toString())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":78,"author":{"gitId":"qreoct"},"content":"            checkDetailsNonEmpty(newTaskType, newTaskDetails);","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"qreoct"},"content":"            checkTaskIncludesTime(newTaskType, newTaskDetails);","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"qreoct"},"content":"            String description \u003d newTaskDetails.substring(9).split(\"/by \")[0].trim();","lastModifiedDate":"2021-08-21"},{"lineNumber":81,"author":{"gitId":"qreoct"},"content":"            String timeString \u003d newTaskDetails.split(\"/by \")[1].trim();","lastModifiedDate":"2021-08-23"},{"lineNumber":82,"author":{"gitId":"qreoct"},"content":"            LocalDateTime time \u003d StringCleaner.toLocalDateTime(timeString);","lastModifiedDate":"2021-08-26"},{"lineNumber":83,"author":{"gitId":"qreoct"},"content":"            return new DeadlineTask(description, time);","lastModifiedDate":"2021-08-21"},{"lineNumber":84,"author":{"gitId":"qreoct"},"content":"        } else {","lastModifiedDate":"2021-08-21"},{"lineNumber":85,"author":{"gitId":"qreoct"},"content":"            return null;","lastModifiedDate":"2021-08-21"},{"lineNumber":86,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":87,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":88,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":89,"author":{"gitId":"qreoct"},"content":"    private void checkDetailsNonEmpty(String newTaskType, String details) throws AuguryException {","lastModifiedDate":"2021-08-21"},{"lineNumber":90,"author":{"gitId":"qreoct"},"content":"        int commandLength \u003d newTaskType.length() + 1;","lastModifiedDate":"2021-08-21"},{"lineNumber":91,"author":{"gitId":"qreoct"},"content":"        if (details.length() \u003c\u003d commandLength","lastModifiedDate":"2021-08-30"},{"lineNumber":92,"author":{"gitId":"qreoct"},"content":"                || details.contains(\"/at\") \u0026\u0026 details.split(\"/at\")[0].length() \u003c\u003d commandLength","lastModifiedDate":"2021-08-30"},{"lineNumber":93,"author":{"gitId":"qreoct"},"content":"                || details.contains(\"/by\") \u0026\u0026 details.split(\"/by\")[0].length() \u003c\u003d commandLength) {","lastModifiedDate":"2021-08-30"},{"lineNumber":94,"author":{"gitId":"qreoct"},"content":"            throw new InvalidTaskCreationException(\"Description of \" + newTaskType + \" cannot be empty!\");","lastModifiedDate":"2021-08-21"},{"lineNumber":95,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":96,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":97,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":98,"author":{"gitId":"qreoct"},"content":"    private void checkTaskIncludesTime(String newTaskType, String details) throws AuguryException {","lastModifiedDate":"2021-08-21"},{"lineNumber":99,"author":{"gitId":"qreoct"},"content":"        if (newTaskType.equalsIgnoreCase(Task.TaskTypes.EVENT.toString())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":100,"author":{"gitId":"qreoct"},"content":"            if (details.split(\"/at \").length \u003c 2 || details.split(\"/at \")[1].length() \u003c\u003d 1) {","lastModifiedDate":"2021-08-21"},{"lineNumber":101,"author":{"gitId":"qreoct"},"content":"                throw new InvalidTaskCreationException(\"Event task must include time! (use /at YYYY-MM-DD HHMM)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":102,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":103,"author":{"gitId":"qreoct"},"content":"        } else if (newTaskType.equalsIgnoreCase(Task.TaskTypes.DEADLINE.toString())) {","lastModifiedDate":"2021-08-21"},{"lineNumber":104,"author":{"gitId":"qreoct"},"content":"            if (details.split(\"/by \").length \u003c 2 || details.split(\"/by \")[1].length() \u003c\u003d 1) {","lastModifiedDate":"2021-08-21"},{"lineNumber":105,"author":{"gitId":"qreoct"},"content":"                throw new InvalidTaskCreationException(\"Deadline task must include time! (use /by YYYY-MM-DD HHMM)\");","lastModifiedDate":"2021-08-26"},{"lineNumber":106,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-21"},{"lineNumber":107,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-21"},{"lineNumber":108,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":109,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"qreoct":109}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"import java.util.Collections;","lastModifiedDate":"2021-08-16"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2021-08-17"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import java.util.Set;","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":" * The {@code TaskList} contains and has methods for interacting with {@code Task}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"public class TaskList {","lastModifiedDate":"2021-08-16"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"     * Initializes an instance of {@code TaskList} with an {@code ArrayList} containing {@code Task}s.","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"    public TaskList() {","lastModifiedDate":"2021-08-22"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-22"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"     * Returns an {@code ArrayList} of {@code Task}s in this {@code TaskList},","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"     * @return {@code ArrayList} containing all tasks in this {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"    public ArrayList\u003cTask\u003e tasks() {","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"        return this.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"     * Returns the number of {@code Task}s in this {@code TaskList},","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"     * @return {@code int} - the number of tasks in this {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"    public int size() {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"        return tasks.size();","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":40,"author":{"gitId":"qreoct"},"content":"     * Adds a single {@code Task} to this {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":41,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"qreoct"},"content":"     * @param t {@code Task} to be added.","lastModifiedDate":"2021-08-25"},{"lineNumber":43,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":44,"author":{"gitId":"qreoct"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2021-08-22"},{"lineNumber":45,"author":{"gitId":"qreoct"},"content":"        tasks.add(t);","lastModifiedDate":"2021-08-22"},{"lineNumber":46,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":47,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":48,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"qreoct"},"content":"     * Adds a single {@code Task} to this {@code TaskList},","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"qreoct"},"content":"     * then forms a String with information about the {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":51,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"qreoct"},"content":"     * @param taskType {@code String}. One of: \u0027todo\u0027, \u0027event\u0027, \u0027deadline\u0027.","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"qreoct"},"content":"     * @param t {@code Task} to be added.","lastModifiedDate":"2021-08-25"},{"lineNumber":54,"author":{"gitId":"qreoct"},"content":"     * @return {@code String} containing information about the {@code TaskList} after the operation.","lastModifiedDate":"2021-08-25"},{"lineNumber":55,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"qreoct"},"content":"    public String addTaskAndAnnounce(String taskType, Task t) {","lastModifiedDate":"2021-08-22"},{"lineNumber":57,"author":{"gitId":"qreoct"},"content":"        String res \u003d \"\";","lastModifiedDate":"2021-08-16"},{"lineNumber":58,"author":{"gitId":"qreoct"},"content":"        tasks.add(t);","lastModifiedDate":"2021-08-16"},{"lineNumber":59,"author":{"gitId":"qreoct"},"content":"        res +\u003d \"I\u0027ve added your \" + taskType.toLowerCase() + \":\\n\\t\\t\" + t;","lastModifiedDate":"2021-08-21"},{"lineNumber":60,"author":{"gitId":"qreoct"},"content":"        res +\u003d \"\\n\\t \" + tasks.size() + \" tasks in total.\";","lastModifiedDate":"2021-08-16"},{"lineNumber":61,"author":{"gitId":"qreoct"},"content":"        return res;","lastModifiedDate":"2021-08-16"},{"lineNumber":62,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":63,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":64,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"qreoct"},"content":"     * Marks a given {@code listOfTasks} as done,","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"qreoct"},"content":"     * then forms a String with information about the {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"qreoct"},"content":"     * @param listOfTasks {@code ArrayList\u003cInteger\u003e} representing the index of {@code Task}s to be marked as done.","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"qreoct"},"content":"     * @return {@code String} containing information about the {@code TaskList} after the operation.","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"qreoct"},"content":"    public String markAsDoneAndAnnounce(ArrayList\u003cInteger\u003e listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"qreoct"},"content":"        StringBuilder res \u003d new StringBuilder(\"Nice! I\u0027ve marked these tasks as done: \\n\\t\\t\");","lastModifiedDate":"2021-08-16"},{"lineNumber":73,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":74,"author":{"gitId":"qreoct"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2021-08-17"},{"lineNumber":75,"author":{"gitId":"qreoct"},"content":"            // have to decrement by one since duke.tasks ArrayList is 0-indexed,","lastModifiedDate":"2021-08-24"},{"lineNumber":76,"author":{"gitId":"qreoct"},"content":"            // but the user-provided arguments uses a 1-indexed list","lastModifiedDate":"2021-08-16"},{"lineNumber":77,"author":{"gitId":"qreoct"},"content":"            int index \u003d listOfTasks.get(i) - 1;","lastModifiedDate":"2021-08-17"},{"lineNumber":78,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":79,"author":{"gitId":"qreoct"},"content":"            tasks.get(index).markAsDone();","lastModifiedDate":"2021-08-16"},{"lineNumber":80,"author":{"gitId":"qreoct"},"content":"            res.append(tasks.get(index));","lastModifiedDate":"2021-08-16"},{"lineNumber":81,"author":{"gitId":"qreoct"},"content":"            if (i !\u003d listOfTasks.size() - 1) {","lastModifiedDate":"2021-08-17"},{"lineNumber":82,"author":{"gitId":"qreoct"},"content":"                // do not append newline to the last item","lastModifiedDate":"2021-08-16"},{"lineNumber":83,"author":{"gitId":"qreoct"},"content":"                res.append(\"\\n\\t\\t\");","lastModifiedDate":"2021-08-16"},{"lineNumber":84,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":85,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":86,"author":{"gitId":"qreoct"},"content":"        return res.toString();","lastModifiedDate":"2021-08-17"},{"lineNumber":87,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":88,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":89,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":90,"author":{"gitId":"qreoct"},"content":"     * Deletes a given {@code listOfTasks},","lastModifiedDate":"2021-08-25"},{"lineNumber":91,"author":{"gitId":"qreoct"},"content":"     * then forms a String with information about the {@code TaskList}.","lastModifiedDate":"2021-08-25"},{"lineNumber":92,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":93,"author":{"gitId":"qreoct"},"content":"     * @param listOfTasks {@code ArrayList\u003cInteger\u003e} representing the index of {@code Task}s to be deleted.","lastModifiedDate":"2021-08-25"},{"lineNumber":94,"author":{"gitId":"qreoct"},"content":"     * @return {@code String} containing information about the {@code TaskList} after the operation.","lastModifiedDate":"2021-08-25"},{"lineNumber":95,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":96,"author":{"gitId":"qreoct"},"content":"    public String deleteTasksAndAnnounce(ArrayList\u003cInteger\u003e listOfTasks) {","lastModifiedDate":"2021-08-25"},{"lineNumber":97,"author":{"gitId":"qreoct"},"content":"        StringBuilder res \u003d new StringBuilder(\"I\u0027ve removed these tasks: \\n\\t\\t\");","lastModifiedDate":"2021-08-17"},{"lineNumber":98,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":99,"author":{"gitId":"qreoct"},"content":"        // reverse-sort the tasks and remove duplicates","lastModifiedDate":"2021-08-26"},{"lineNumber":100,"author":{"gitId":"qreoct"},"content":"        Set\u003cInteger\u003e s \u003d new LinkedHashSet\u003c\u003e(listOfTasks);","lastModifiedDate":"2021-08-17"},{"lineNumber":101,"author":{"gitId":"qreoct"},"content":"        listOfTasks.clear();","lastModifiedDate":"2021-08-17"},{"lineNumber":102,"author":{"gitId":"qreoct"},"content":"        listOfTasks.addAll(s);","lastModifiedDate":"2021-08-17"},{"lineNumber":103,"author":{"gitId":"qreoct"},"content":"        Collections.sort(listOfTasks);","lastModifiedDate":"2021-08-17"},{"lineNumber":104,"author":{"gitId":"qreoct"},"content":"        Collections.reverse(listOfTasks);","lastModifiedDate":"2021-08-17"},{"lineNumber":105,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":106,"author":{"gitId":"qreoct"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2021-08-17"},{"lineNumber":107,"author":{"gitId":"qreoct"},"content":"            // have to decrement by one since tasks ArrayList is 0-indexed,","lastModifiedDate":"2021-08-26"},{"lineNumber":108,"author":{"gitId":"qreoct"},"content":"            // but the user-provided arguments uses a 1-indexed list","lastModifiedDate":"2021-08-17"},{"lineNumber":109,"author":{"gitId":"qreoct"},"content":"            int index \u003d listOfTasks.get(i) - 1;","lastModifiedDate":"2021-08-17"},{"lineNumber":110,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":111,"author":{"gitId":"qreoct"},"content":"            res.append(tasks.get(index));","lastModifiedDate":"2021-08-17"},{"lineNumber":112,"author":{"gitId":"qreoct"},"content":"            tasks.remove(index);","lastModifiedDate":"2021-08-17"},{"lineNumber":113,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":114,"author":{"gitId":"qreoct"},"content":"            if (i !\u003d listOfTasks.size() - 1) {","lastModifiedDate":"2021-08-17"},{"lineNumber":115,"author":{"gitId":"qreoct"},"content":"                // do not append newline to the last item","lastModifiedDate":"2021-08-17"},{"lineNumber":116,"author":{"gitId":"qreoct"},"content":"                res.append(\"\\n\\t\\t\");","lastModifiedDate":"2021-08-17"},{"lineNumber":117,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":118,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-17"},{"lineNumber":119,"author":{"gitId":"qreoct"},"content":"        res.append(\"\\n\\t \").append(tasks.size()).append(\" tasks remain.\");","lastModifiedDate":"2021-08-17"},{"lineNumber":120,"author":{"gitId":"qreoct"},"content":"        return res.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":121,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":122,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":123,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":124,"author":{"gitId":"qreoct"},"content":"     * Returns a {@code String} containing the {@code Task}s that match the given","lastModifiedDate":"2021-08-26"},{"lineNumber":125,"author":{"gitId":"qreoct"},"content":"     * {@code String query}.","lastModifiedDate":"2021-08-26"},{"lineNumber":126,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-26"},{"lineNumber":127,"author":{"gitId":"qreoct"},"content":"     * @param query {@code String} search query of the user.","lastModifiedDate":"2021-08-26"},{"lineNumber":128,"author":{"gitId":"qreoct"},"content":"     * @returns {@code String} - Newlined list of {@code Task}s.","lastModifiedDate":"2021-08-26"},{"lineNumber":129,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":130,"author":{"gitId":"qreoct"},"content":"    public String findAndAnnounce(String query) {","lastModifiedDate":"2021-08-26"},{"lineNumber":131,"author":{"gitId":"qreoct"},"content":"        StringBuilder res \u003d new StringBuilder(\"Your search matched these tasks:\\n\\t \");","lastModifiedDate":"2021-08-26"},{"lineNumber":132,"author":{"gitId":"qreoct"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":133,"author":{"gitId":"qreoct"},"content":"            if (tasks.get(i).getDescription().contains(query)) {","lastModifiedDate":"2021-08-26"},{"lineNumber":134,"author":{"gitId":"qreoct"},"content":"                res.append(i + 1).append(\". \").append(tasks.get(i));","lastModifiedDate":"2021-08-26"},{"lineNumber":135,"author":{"gitId":"qreoct"},"content":"                if (i !\u003d tasks.size() - 1) {","lastModifiedDate":"2021-08-26"},{"lineNumber":136,"author":{"gitId":"qreoct"},"content":"                    // do not append a newline to the last item","lastModifiedDate":"2021-08-26"},{"lineNumber":137,"author":{"gitId":"qreoct"},"content":"                    res.append(\"\\n\\t \");","lastModifiedDate":"2021-08-26"},{"lineNumber":138,"author":{"gitId":"qreoct"},"content":"                }","lastModifiedDate":"2021-08-26"},{"lineNumber":139,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-26"},{"lineNumber":140,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":141,"author":{"gitId":"qreoct"},"content":"        return res.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":142,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":143,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":144,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":145,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":146,"author":{"gitId":"qreoct"},"content":"     * Returns an indented, newlined, 1-indexed {@code String} of the","lastModifiedDate":"2021-08-26"},{"lineNumber":147,"author":{"gitId":"qreoct"},"content":"     * {@code Task}s contained in this {@code TaskList}.","lastModifiedDate":"2021-08-26"},{"lineNumber":148,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":149,"author":{"gitId":"qreoct"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":150,"author":{"gitId":"qreoct"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":151,"author":{"gitId":"qreoct"},"content":"        StringBuilder res \u003d new StringBuilder(\"Here are your tasks:\\n\\t \");","lastModifiedDate":"2021-08-16"},{"lineNumber":152,"author":{"gitId":"qreoct"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-08-16"},{"lineNumber":153,"author":{"gitId":"qreoct"},"content":"            res.append(i + 1).append(\". \").append(tasks.get(i));","lastModifiedDate":"2021-08-16"},{"lineNumber":154,"author":{"gitId":"qreoct"},"content":"            if (i !\u003d tasks.size() - 1) {","lastModifiedDate":"2021-08-16"},{"lineNumber":155,"author":{"gitId":"qreoct"},"content":"                // do not append a newline to the last item","lastModifiedDate":"2021-08-16"},{"lineNumber":156,"author":{"gitId":"qreoct"},"content":"                res.append(\"\\n\\t \");","lastModifiedDate":"2021-08-16"},{"lineNumber":157,"author":{"gitId":"qreoct"},"content":"            }","lastModifiedDate":"2021-08-16"},{"lineNumber":158,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-16"},{"lineNumber":159,"author":{"gitId":"qreoct"},"content":"        return res.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":160,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":161,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":161}},{"path":"src/main/java/duke/tasks/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * The {@code TodoTask} class extends from {@code Task}.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"    public TodoTask(String description) {","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"        super(description);","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    public TodoTask(String description, boolean isDone) {","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"        super(description, isDone);","lastModifiedDate":"2021-08-22"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-22"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"     * Prints {@code TodoTask} description with the prefix [T].","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"    @Override","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    public String toString() {","lastModifiedDate":"2021-08-16"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-16"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-16"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":21}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.ui;","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":" * The {@code Ui} class handles interfacing with the user.","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"public class Ui {","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"    public Ui() {}","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"    /**","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"     * Prints a string in a specific response format.","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"     *","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"     * @param message {@code String} to be printed.","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"     */","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"    public void speak(String message) {","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        System.out.println(\"\\t_________________________________\");","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"        System.out.println(\"\\t \" + message);","lastModifiedDate":"2021-08-24"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"        System.out.println(\"\\t_________________________________\");","lastModifiedDate":"2021-08-24"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"qreoct":19}},{"path":"src/main/java/duke/util/StringCleaner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.util;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.AuguryException;","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.InvalidTaskCreationException;","lastModifiedDate":"2021-08-26"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-08-26"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"/**","lastModifiedDate":"2021-08-26"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":" * The {@code StringCleaner} class is a utility class that operates on {@code Strings}.","lastModifiedDate":"2021-08-26"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":" */","lastModifiedDate":"2021-08-26"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"public class StringCleaner {","lastModifiedDate":"2021-08-26"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"    public static ArrayList\u003cInteger\u003e toArrayListInteger(String commaSeparatedString) {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        String[] s_String \u003d commaSeparatedString.split(\",\");","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"        for (int i \u003d 0; i \u003c s_String.length; i++) {","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"            // trim whitespace on each item","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"            s_String[i] \u003d s_String[i].trim();","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"        // convert String[] to ArrayList\u003cInteger\u003e","lastModifiedDate":"2021-08-26"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"        ArrayList\u003cInteger\u003e s_Integer \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-08-26"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"        for (String ss : s_String) {","lastModifiedDate":"2021-08-26"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"            s_Integer.add(Integer.parseInt(ss));","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"        return s_Integer;","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"    public static LocalDateTime toLocalDateTime(String input) throws AuguryException {","lastModifiedDate":"2021-08-26"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"        try {","lastModifiedDate":"2021-08-26"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2021-08-26"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"            return LocalDateTime.parse(input, formatter);","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-08-26"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"            throw new InvalidTaskCreationException(\"Please use the YYYY-MM-DD HHMM format to specify time!\");","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"qreoct":36}},{"path":"src/test/java/duke/tasks/TaskFactoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import duke.exceptions.AuguryException;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"public class TaskFactoryTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"    public void createTaskFromFileTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"        TaskFactory tf \u003d new TaskFactory();","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        Task t \u003d tf.createTask(\"[T] wash dishes\");","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"        assertFalse(t instanceof EventTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"        assertTrue(t instanceof TodoTask);","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"    public void returnNullWithMalformattedEventTypeTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"        TaskFactory tf \u003d new TaskFactory();","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"        assertNull(tf.createTask(\"woowo\"));","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"    public void throwsErrorWithMalformattedTime() throws AuguryException {","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"        // gleaned from https://www.baeldung.com/junit-assert-exception","lastModifiedDate":"2021-08-25"},{"lineNumber":29,"author":{"gitId":"qreoct"},"content":"        TaskFactory tf \u003d new TaskFactory();","lastModifiedDate":"2021-08-25"},{"lineNumber":30,"author":{"gitId":"qreoct"},"content":"        Exception e \u003d assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2021-08-25"},{"lineNumber":31,"author":{"gitId":"qreoct"},"content":"            tf.createTask(\"[E] do this (at: jjjjj)\");","lastModifiedDate":"2021-08-25"},{"lineNumber":32,"author":{"gitId":"qreoct"},"content":"        });","lastModifiedDate":"2021-08-25"},{"lineNumber":33,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":34,"author":{"gitId":"qreoct"},"content":"        String expectedMessage \u003d \"Text \u0027jjjjj\u0027 could not be parsed at index 0\";","lastModifiedDate":"2021-08-25"},{"lineNumber":35,"author":{"gitId":"qreoct"},"content":"        String actualMessage \u003d e.getMessage();","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"qreoct"},"content":"        assertTrue(actualMessage.contains(expectedMessage));","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"qreoct":39}},{"path":"src/test/java/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"public class TaskTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"    public void markAsDoneTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"        Task t \u003d new TodoTask(\"wash dishes\");","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"        assertFalse(t.isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"        t.markAsDone();","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        assertTrue(t.isDone);","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"qreoct":17}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"package duke.ui;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-08-25"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-08-25"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-08-25"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"public class UiTest {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"    @Test","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"    public void uiSpeakTest() {","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"        // gleaned from https://stackoverflow.com/questions/32241057/how-to-test-a-print-method-in-java-using-junit","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2021-08-25"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2021-08-25"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"        ui.speak(\"ABC\");","lastModifiedDate":"2021-08-25"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"        String expectedOutput  \u003d \"\\t_________________________________\\r\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"                \"\\t ABC\\r\\n\" +","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"                \"\\t_________________________________\\r\\n\";","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"        // Do the actual assertion.","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"        assertEquals(expectedOutput, outContent.toString());","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"qreoct":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"todo item one","lastModifiedDate":"2021-08-16"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"event item two /at 2021-2-22 2100","lastModifiedDate":"2021-08-23"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"deadline item three /by 2021-4-19 0900","lastModifiedDate":"2021-08-23"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"todo","lastModifiedDate":"2021-08-16"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"done 500","lastModifiedDate":"2021-08-16"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"deadline ","lastModifiedDate":"2021-08-16"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"deadline x","lastModifiedDate":"2021-08-16"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"event item four","lastModifiedDate":"2021-08-16"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":"event /at xyz","lastModifiedDate":"2021-08-23"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"event item four /by tomorrow","lastModifiedDate":"2021-08-16"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"event item four /at tomorrow","lastModifiedDate":"2021-08-16"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"event item four /at 2021-05-22 2999","lastModifiedDate":"2021-08-23"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"event item four /at 2021-05-22 2359","lastModifiedDate":"2021-08-23"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"done 2,3","lastModifiedDate":"2021-08-16"},{"lineNumber":17,"author":{"gitId":"qreoct"},"content":"list","lastModifiedDate":"2021-08-16"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"todo 5","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"qreoct"},"content":"todo 6","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"qreoct"},"content":"todo 7","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"qreoct"},"content":"todo 8","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"qreoct"},"content":"delete 9","lastModifiedDate":"2021-08-17"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"delete 1,9,1","lastModifiedDate":"2021-08-17"},{"lineNumber":24,"author":{"gitId":"qreoct"},"content":"delete 5,2","lastModifiedDate":"2021-08-17"},{"lineNumber":25,"author":{"gitId":"qreoct"},"content":"find  ","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"qreoct"},"content":"find i","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"qreoct"},"content":"list","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"qreoct"},"content":"bye","lastModifiedDate":"2021-08-16"}],"authorContributionMap":{"qreoct":28}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"qreoct"},"content":"java -classpath ..\\bin duke.App \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"qreoct":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"qreoct"},"content":"java -classpath ../bin App \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"qreoct":1,"-":37}},{"path":"text-ui-test/testresult.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"qreoct"},"content":"@ECHO OFF","lastModifiedDate":"2021-08-24"},{"lineNumber":2,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":3,"author":{"gitId":"qreoct"},"content":"if exist EXPECTED_2.TXT del EXPECTED_2.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":4,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":5,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":6,"author":{"gitId":"qreoct"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2021-08-24"},{"lineNumber":7,"author":{"gitId":"qreoct"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2021-08-24"},{"lineNumber":8,"author":{"gitId":"qreoct"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2021-08-24"},{"lineNumber":9,"author":{"gitId":"qreoct"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2021-08-24"},{"lineNumber":10,"author":{"gitId":"qreoct"},"content":"    exit /b 1","lastModifiedDate":"2021-08-24"},{"lineNumber":11,"author":{"gitId":"qreoct"},"content":")","lastModifiedDate":"2021-08-24"},{"lineNumber":12,"author":{"gitId":"qreoct"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2021-08-24"},{"lineNumber":13,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":14,"author":{"gitId":"qreoct"},"content":"java -classpath ..\\bin duke.App \u003c input.txt \u003e EXPECTED_2.TXT","lastModifiedDate":"2021-08-24"},{"lineNumber":15,"author":{"gitId":"qreoct"},"content":"","lastModifiedDate":"2021-08-24"},{"lineNumber":16,"author":{"gitId":"qreoct"},"content":"FC EXPECTED.TXT EXPECTED_2.TXT","lastModifiedDate":"2021-08-24"}],"authorContributionMap":{"qreoct":16}}]
